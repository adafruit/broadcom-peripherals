/*
 * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     /home/runner/work/broadcom-peripherals/broadcom-peripherals/broadcom/gen//bcm2711_lpa.h
 * @brief    CMSIS HeaderFile
 * @version  A
 * @date     Thu Aug 24 22:15:10 2023
 * @note     Generated by SVDConv V3.3.44
 *           from File '/home/runner/work/broadcom-peripherals/broadcom-peripherals/svd/gen/bcm2711_lpa.svd',
 *           last modified on Thu Aug 24 22:15:10 2023
 */


/** @addtogroup BROADCOM
  * @{
  */


/** @addtogroup bcm2711_lpa
  * @{
  */


#ifndef BCM2711_LPA_H
#define BCM2711_LPA_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-A72 Specific Interrupt Numbers  ======================================= */
/* ========================================  bcm2711_lpa Specific Interrupt Numbers  ========================================= */
  SGI0_IRQn                 =   0,              /*!< 0  Software generated interrupt 0                                         */
  SGI1_IRQn                 =   1,              /*!< 1  Software generated interrupt 1                                         */
  SGI2_IRQn                 =   2,              /*!< 2  Software generated interrupt 2                                         */
  SGI3_IRQn                 =   3,              /*!< 3  Software generated interrupt 3                                         */
  SGI4_IRQn                 =   4,              /*!< 4  Software generated interrupt 4                                         */
  SGI5_IRQn                 =   5,              /*!< 5  Software generated interrupt 5                                         */
  SGI6_IRQn                 =   6,              /*!< 6  Software generated interrupt 6                                         */
  SGI7_IRQn                 =   7,              /*!< 7  Software generated interrupt 7                                         */
  SGI8_IRQn                 =   8,              /*!< 8  Software generated interrupt 8                                         */
  SGI9_IRQn                 =   9,              /*!< 9  Software generated interrupt 9                                         */
  SGI10_IRQn                =  10,              /*!< 10 Software generated interrupt 10                                        */
  SGI11_IRQn                =  11,              /*!< 11 Software generated interrupt 11                                        */
  SGI12_IRQn                =  12,              /*!< 12 Software generated interrupt 12                                        */
  SGI13_IRQn                =  13,              /*!< 13 Software generated interrupt 13                                        */
  SGI14_IRQn                =  14,              /*!< 14 Software generated interrupt 14                                        */
  SGI15_IRQn                =  15,              /*!< 15 Software generated interrupt 15                                        */
  EMMC_IRQn                 =  62,              /*!< 62 OR of EMMC and EMMC2                                                   */
  TIMER_0_IRQn              =  96,              /*!< 96 Timer 0 matched                                                        */
  TIMER_1_IRQn              =  97,              /*!< 97 Timer 1 matched                                                        */
  TIMER_2_IRQn              =  98,              /*!< 98 Timer 2 matched                                                        */
  TIMER_3_IRQn              =  99,              /*!< 99 Timer 3 matched                                                        */
  USB_IRQn                  = 105,              /*!< 105  USB interrupt                                                        */
  AUX_IRQn                  = 125,              /*!< 125  Interrupt from AUX                                                   */
  GPIO0_IRQn                = 145,              /*!< 145  Interrupt from bank 0                                                */
  GPIO1_IRQn                = 146,              /*!< 146  Interrupt from bank 1                                                */
  GPIO2_IRQn                = 147,              /*!< 147  Interrupt from bank 2                                                */
  GPIO_IRQn                 = 148,              /*!< 148  OR of all GPIO interrupts                                            */
  I2C_IRQn                  = 149,              /*!< 149  OR of all I2C interrupts                                             */
  SPI_IRQn                  = 150,              /*!< 150  OR of all SPI interrupts except 1 and 2                              */
  UART_IRQn                 = 153               /*!< 153  OR of all UART interrupts except 1                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-A72 Processor and Core Peripherals  =========================== */
#define __CA72_REV                 0x0000U      /*!< CA72 Core Revision                                                        */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_ca72.h"                          /*!< ARM Cortex-A72 processor and core peripherals                             */
#include "system_bcm2711_lpa.h"                 /*!< bcm2711_lpa System                                                        */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief GIC_DIST_GICD_IGROUPR [GICD_IGROUPR] (Interrupt Group Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_IGROUPR0;               /*!< (@ 0x00000000) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_IGROUPR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IGROUPR1;               /*!< (@ 0x00000004) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_IGROUPR1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IGROUPR2;               /*!< (@ 0x00000008) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_IGROUPR2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IGROUPR3;               /*!< (@ 0x0000000C) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_IGROUPR3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IGROUPR4;               /*!< (@ 0x00000010) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_IGROUPR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IGROUPR5;               /*!< (@ 0x00000014) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_IGROUPR5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IGROUPR6;               /*!< (@ 0x00000018) Interrupt Group                                            */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_IGROUPR6_b;
  } ;
} GIC_DIST_GICD_IGROUPR_Type;                   /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_ISENABLER [GICD_ISENABLER] (Interrupt Set-Enable Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ISENABLER0;             /*!< (@ 0x00000000) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ISENABLER0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISENABLER1;             /*!< (@ 0x00000004) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ISENABLER1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISENABLER2;             /*!< (@ 0x00000008) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ISENABLER2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISENABLER3;             /*!< (@ 0x0000000C) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ISENABLER3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISENABLER4;             /*!< (@ 0x00000010) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ISENABLER4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISENABLER5;             /*!< (@ 0x00000014) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ISENABLER5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISENABLER6;             /*!< (@ 0x00000018) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ISENABLER6_b;
  } ;
} GIC_DIST_GICD_ISENABLER_Type;                 /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_ICENABLER [GICD_ICENABLER] (Interrupt Clear-Enable Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ICENABLER0;             /*!< (@ 0x00000000) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ICENABLER0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICENABLER1;             /*!< (@ 0x00000004) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ICENABLER1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICENABLER2;             /*!< (@ 0x00000008) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ICENABLER2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICENABLER3;             /*!< (@ 0x0000000C) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ICENABLER3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICENABLER4;             /*!< (@ 0x00000010) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ICENABLER4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICENABLER5;             /*!< (@ 0x00000014) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ICENABLER5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICENABLER6;             /*!< (@ 0x00000018) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ICENABLER6_b;
  } ;
} GIC_DIST_GICD_ICENABLER_Type;                 /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_ISPENDR [GICD_ISPENDR] (Interrupt Set-Pending Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ISPENDR0;               /*!< (@ 0x00000000) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ISPENDR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISPENDR1;               /*!< (@ 0x00000004) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ISPENDR1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISPENDR2;               /*!< (@ 0x00000008) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ISPENDR2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISPENDR3;               /*!< (@ 0x0000000C) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ISPENDR3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISPENDR4;               /*!< (@ 0x00000010) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ISPENDR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISPENDR5;               /*!< (@ 0x00000014) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ISPENDR5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISPENDR6;               /*!< (@ 0x00000018) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ISPENDR6_b;
  } ;
} GIC_DIST_GICD_ISPENDR_Type;                   /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_ICPENDR [GICD_ICPENDR] (Interrupt Clear-Pending Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ICPENDR0;               /*!< (@ 0x00000000) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ICPENDR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICPENDR1;               /*!< (@ 0x00000004) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ICPENDR1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICPENDR2;               /*!< (@ 0x00000008) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ICPENDR2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICPENDR3;               /*!< (@ 0x0000000C) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ICPENDR3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICPENDR4;               /*!< (@ 0x00000010) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ICPENDR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICPENDR5;               /*!< (@ 0x00000014) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ICPENDR5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICPENDR6;               /*!< (@ 0x00000018) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ICPENDR6_b;
  } ;
} GIC_DIST_GICD_ICPENDR_Type;                   /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_ISACTIVER [GICD_ISACTIVER] (Interrupt Set-Active Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ISACTIVER0;             /*!< (@ 0x00000000) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ISACTIVER0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISACTIVER1;             /*!< (@ 0x00000004) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ISACTIVER1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISACTIVER2;             /*!< (@ 0x00000008) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ISACTIVER2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISACTIVER3;             /*!< (@ 0x0000000C) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ISACTIVER3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISACTIVER4;             /*!< (@ 0x00000010) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ISACTIVER4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISACTIVER5;             /*!< (@ 0x00000014) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ISACTIVER5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ISACTIVER6;             /*!< (@ 0x00000018) Interrupt Set-Active                                       */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ISACTIVER6_b;
  } ;
} GIC_DIST_GICD_ISACTIVER_Type;                 /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_ICACTIVER [GICD_ICACTIVER] (Interrupt Clear-Active Registers)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ICACTIVER0;             /*!< (@ 0x00000000) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ICACTIVER0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICACTIVER1;             /*!< (@ 0x00000004) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ICACTIVER1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICACTIVER2;             /*!< (@ 0x00000008) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t INT80      : 1;            /*!< [16..16] Interrupt 80                                                     */
      __IOM uint32_t INT81      : 1;            /*!< [17..17] Interrupt 81                                                     */
      __IOM uint32_t INT82      : 1;            /*!< [18..18] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 1;            /*!< [19..19] Interrupt 83                                                     */
      __IOM uint32_t INT84      : 1;            /*!< [20..20] Interrupt 84                                                     */
      __IOM uint32_t INT85      : 1;            /*!< [21..21] Interrupt 85                                                     */
      __IOM uint32_t INT86      : 1;            /*!< [22..22] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 1;            /*!< [23..23] Interrupt 87                                                     */
      __IOM uint32_t INT88      : 1;            /*!< [24..24] Interrupt 88                                                     */
      __IOM uint32_t INT89      : 1;            /*!< [25..25] Interrupt 89                                                     */
      __IOM uint32_t INT90      : 1;            /*!< [26..26] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 1;            /*!< [27..27] Interrupt 91                                                     */
      __IOM uint32_t INT92      : 1;            /*!< [28..28] Interrupt 92                                                     */
      __IOM uint32_t INT93      : 1;            /*!< [29..29] Interrupt 93                                                     */
      __IOM uint32_t INT94      : 1;            /*!< [30..30] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ICACTIVER2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICACTIVER3;             /*!< (@ 0x0000000C) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ICACTIVER3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICACTIVER4;             /*!< (@ 0x00000010) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ICACTIVER4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICACTIVER5;             /*!< (@ 0x00000014) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t INT160     : 1;            /*!< [0..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 1;            /*!< [1..1] Interrupt 161                                                      */
      __IOM uint32_t INT162     : 1;            /*!< [2..2] Interrupt 162                                                      */
      __IOM uint32_t INT163     : 1;            /*!< [3..3] Interrupt 163                                                      */
      __IOM uint32_t INT164     : 1;            /*!< [4..4] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 1;            /*!< [5..5] Interrupt 165                                                      */
      __IOM uint32_t INT166     : 1;            /*!< [6..6] Interrupt 166                                                      */
      __IOM uint32_t INT167     : 1;            /*!< [7..7] Interrupt 167                                                      */
      __IOM uint32_t INT168     : 1;            /*!< [8..8] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 1;            /*!< [9..9] Interrupt 169                                                      */
      __IOM uint32_t INT170     : 1;            /*!< [10..10] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 1;            /*!< [11..11] Interrupt 171                                                    */
      __IOM uint32_t INT172     : 1;            /*!< [12..12] Interrupt 172                                                    */
      __IOM uint32_t INT173     : 1;            /*!< [13..13] Interrupt 173                                                    */
      __IOM uint32_t INT174     : 1;            /*!< [14..14] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 1;            /*!< [15..15] Interrupt 175                                                    */
      __IOM uint32_t INT176     : 1;            /*!< [16..16] Interrupt 176                                                    */
      __IOM uint32_t INT177     : 1;            /*!< [17..17] Interrupt 177                                                    */
      __IOM uint32_t INT178     : 1;            /*!< [18..18] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 1;            /*!< [19..19] Interrupt 179                                                    */
      __IOM uint32_t INT180     : 1;            /*!< [20..20] Interrupt 180                                                    */
      __IOM uint32_t INT181     : 1;            /*!< [21..21] Interrupt 181                                                    */
      __IOM uint32_t INT182     : 1;            /*!< [22..22] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 1;            /*!< [23..23] Interrupt 183                                                    */
      __IOM uint32_t INT184     : 1;            /*!< [24..24] Interrupt 184                                                    */
      __IOM uint32_t INT185     : 1;            /*!< [25..25] Interrupt 185                                                    */
      __IOM uint32_t INT186     : 1;            /*!< [26..26] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 1;            /*!< [27..27] Interrupt 187                                                    */
      __IOM uint32_t INT188     : 1;            /*!< [28..28] Interrupt 188                                                    */
      __IOM uint32_t INT189     : 1;            /*!< [29..29] Interrupt 189                                                    */
      __IOM uint32_t INT190     : 1;            /*!< [30..30] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ICACTIVER5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICACTIVER6;             /*!< (@ 0x00000018) Interrupt Clear-Active                                     */
    
    struct {
      __IOM uint32_t INT192     : 1;            /*!< [0..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 1;            /*!< [1..1] Interrupt 193                                                      */
      __IOM uint32_t INT194     : 1;            /*!< [2..2] Interrupt 194                                                      */
      __IOM uint32_t INT195     : 1;            /*!< [3..3] Interrupt 195                                                      */
      __IOM uint32_t INT196     : 1;            /*!< [4..4] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 1;            /*!< [5..5] Interrupt 197                                                      */
      __IOM uint32_t INT198     : 1;            /*!< [6..6] Interrupt 198                                                      */
      __IOM uint32_t INT199     : 1;            /*!< [7..7] Interrupt 199                                                      */
      __IOM uint32_t INT200     : 1;            /*!< [8..8] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 1;            /*!< [9..9] Interrupt 201                                                      */
      __IOM uint32_t INT202     : 1;            /*!< [10..10] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 1;            /*!< [11..11] Interrupt 203                                                    */
      __IOM uint32_t INT204     : 1;            /*!< [12..12] Interrupt 204                                                    */
      __IOM uint32_t INT205     : 1;            /*!< [13..13] Interrupt 205                                                    */
      __IOM uint32_t INT206     : 1;            /*!< [14..14] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 1;            /*!< [15..15] Interrupt 207                                                    */
      __IOM uint32_t INT208     : 1;            /*!< [16..16] Interrupt 208                                                    */
      __IOM uint32_t INT209     : 1;            /*!< [17..17] Interrupt 209                                                    */
      __IOM uint32_t INT210     : 1;            /*!< [18..18] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 1;            /*!< [19..19] Interrupt 211                                                    */
      __IOM uint32_t INT212     : 1;            /*!< [20..20] Interrupt 212                                                    */
      __IOM uint32_t INT213     : 1;            /*!< [21..21] Interrupt 213                                                    */
      __IOM uint32_t INT214     : 1;            /*!< [22..22] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 1;            /*!< [23..23] Interrupt 215                                                    */
      __IOM uint32_t INT216     : 1;            /*!< [24..24] Interrupt 216                                                    */
      __IOM uint32_t INT217     : 1;            /*!< [25..25] Interrupt 217                                                    */
      __IOM uint32_t INT218     : 1;            /*!< [26..26] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 1;            /*!< [27..27] Interrupt 219                                                    */
      __IOM uint32_t INT220     : 1;            /*!< [28..28] Interrupt 220                                                    */
      __IOM uint32_t INT221     : 1;            /*!< [29..29] Interrupt 221                                                    */
      __IOM uint32_t INT222     : 1;            /*!< [30..30] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ICACTIVER6_b;
  } ;
} GIC_DIST_GICD_ICACTIVER_Type;                 /*!< Size = 28 (0x1c)                                                          */


/**
  * @brief GIC_DIST_GICD_IPRIORITYR [GICD_IPRIORITYR] (Interrupt Priority)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_IPRIORITYR0;            /*!< (@ 0x00000000) Interrupt Priority 0 - 3 (Lower is first)                  */
    
    struct {
      __IOM uint32_t INT0       : 8;            /*!< [7..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 8;            /*!< [15..8] Interrupt 1                                                       */
      __IOM uint32_t INT2       : 8;            /*!< [23..16] Interrupt 2                                                      */
      __IOM uint32_t INT3       : 8;            /*!< [31..24] Interrupt 3                                                      */
    } GICD_IPRIORITYR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR1;            /*!< (@ 0x00000004) Interrupt Priority 4 - 7 (Lower is first)                  */
    
    struct {
      __IOM uint32_t INT4       : 8;            /*!< [7..0] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 8;            /*!< [15..8] Interrupt 5                                                       */
      __IOM uint32_t INT6       : 8;            /*!< [23..16] Interrupt 6                                                      */
      __IOM uint32_t INT7       : 8;            /*!< [31..24] Interrupt 7                                                      */
    } GICD_IPRIORITYR1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR2;            /*!< (@ 0x00000008) Interrupt Priority 8 - 11 (Lower is first)                 */
    
    struct {
      __IOM uint32_t INT8       : 8;            /*!< [7..0] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 8;            /*!< [15..8] Interrupt 9                                                       */
      __IOM uint32_t INT10      : 8;            /*!< [23..16] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 8;            /*!< [31..24] Interrupt 11                                                     */
    } GICD_IPRIORITYR2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR3;            /*!< (@ 0x0000000C) Interrupt Priority 12 - 15 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT12      : 8;            /*!< [7..0] Interrupt 12                                                       */
      __IOM uint32_t INT13      : 8;            /*!< [15..8] Interrupt 13                                                      */
      __IOM uint32_t INT14      : 8;            /*!< [23..16] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 8;            /*!< [31..24] Interrupt 15                                                     */
    } GICD_IPRIORITYR3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR4;            /*!< (@ 0x00000010) Interrupt Priority 16 - 19 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT16      : 8;            /*!< [7..0] Interrupt 16                                                       */
      __IOM uint32_t INT17      : 8;            /*!< [15..8] Interrupt 17                                                      */
      __IOM uint32_t INT18      : 8;            /*!< [23..16] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 8;            /*!< [31..24] Interrupt 19                                                     */
    } GICD_IPRIORITYR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR5;            /*!< (@ 0x00000014) Interrupt Priority 20 - 23 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT20      : 8;            /*!< [7..0] Interrupt 20                                                       */
      __IOM uint32_t INT21      : 8;            /*!< [15..8] Interrupt 21                                                      */
      __IOM uint32_t INT22      : 8;            /*!< [23..16] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 8;            /*!< [31..24] Interrupt 23                                                     */
    } GICD_IPRIORITYR5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR6;            /*!< (@ 0x00000018) Interrupt Priority 24 - 27 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT24      : 8;            /*!< [7..0] Interrupt 24                                                       */
      __IOM uint32_t INT25      : 8;            /*!< [15..8] Interrupt 25                                                      */
      __IOM uint32_t INT26      : 8;            /*!< [23..16] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 8;            /*!< [31..24] Interrupt 27                                                     */
    } GICD_IPRIORITYR6_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR7;            /*!< (@ 0x0000001C) Interrupt Priority 28 - 31 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT28      : 8;            /*!< [7..0] Interrupt 28                                                       */
      __IOM uint32_t INT29      : 8;            /*!< [15..8] Interrupt 29                                                      */
      __IOM uint32_t INT30      : 8;            /*!< [23..16] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 8;            /*!< [31..24] Interrupt 31                                                     */
    } GICD_IPRIORITYR7_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR8;            /*!< (@ 0x00000020) Interrupt Priority 32 - 35 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT32      : 8;            /*!< [7..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 8;            /*!< [15..8] Interrupt 33                                                      */
      __IOM uint32_t INT34      : 8;            /*!< [23..16] Interrupt 34                                                     */
      __IOM uint32_t INT35      : 8;            /*!< [31..24] Interrupt 35                                                     */
    } GICD_IPRIORITYR8_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR9;            /*!< (@ 0x00000024) Interrupt Priority 36 - 39 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT36      : 8;            /*!< [7..0] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 8;            /*!< [15..8] Interrupt 37                                                      */
      __IOM uint32_t INT38      : 8;            /*!< [23..16] Interrupt 38                                                     */
      __IOM uint32_t INT39      : 8;            /*!< [31..24] Interrupt 39                                                     */
    } GICD_IPRIORITYR9_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR10;           /*!< (@ 0x00000028) Interrupt Priority 40 - 43 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT40      : 8;            /*!< [7..0] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 8;            /*!< [15..8] Interrupt 41                                                      */
      __IOM uint32_t INT42      : 8;            /*!< [23..16] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 8;            /*!< [31..24] Interrupt 43                                                     */
    } GICD_IPRIORITYR10_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR11;           /*!< (@ 0x0000002C) Interrupt Priority 44 - 47 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT44      : 8;            /*!< [7..0] Interrupt 44                                                       */
      __IOM uint32_t INT45      : 8;            /*!< [15..8] Interrupt 45                                                      */
      __IOM uint32_t INT46      : 8;            /*!< [23..16] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 8;            /*!< [31..24] Interrupt 47                                                     */
    } GICD_IPRIORITYR11_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR12;           /*!< (@ 0x00000030) Interrupt Priority 48 - 51 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT48      : 8;            /*!< [7..0] Interrupt 48                                                       */
      __IOM uint32_t INT49      : 8;            /*!< [15..8] Interrupt 49                                                      */
      __IOM uint32_t INT50      : 8;            /*!< [23..16] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 8;            /*!< [31..24] Interrupt 51                                                     */
    } GICD_IPRIORITYR12_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR13;           /*!< (@ 0x00000034) Interrupt Priority 52 - 55 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT52      : 8;            /*!< [7..0] Interrupt 52                                                       */
      __IOM uint32_t INT53      : 8;            /*!< [15..8] Interrupt 53                                                      */
      __IOM uint32_t INT54      : 8;            /*!< [23..16] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 8;            /*!< [31..24] Interrupt 55                                                     */
    } GICD_IPRIORITYR13_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR14;           /*!< (@ 0x00000038) Interrupt Priority 56 - 59 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT56      : 8;            /*!< [7..0] Interrupt 56                                                       */
      __IOM uint32_t INT57      : 8;            /*!< [15..8] Interrupt 57                                                      */
      __IOM uint32_t INT58      : 8;            /*!< [23..16] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 8;            /*!< [31..24] Interrupt 59                                                     */
    } GICD_IPRIORITYR14_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR15;           /*!< (@ 0x0000003C) Interrupt Priority 60 - 63 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT60      : 8;            /*!< [7..0] Interrupt 60                                                       */
      __IOM uint32_t INT61      : 8;            /*!< [15..8] Interrupt 61                                                      */
      __IOM uint32_t INT62      : 8;            /*!< [23..16] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 8;            /*!< [31..24] Interrupt 63                                                     */
    } GICD_IPRIORITYR15_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR16;           /*!< (@ 0x00000040) Interrupt Priority 64 - 67 (Lower is first)                */
    
    struct {
      __IOM uint32_t TIMER      : 8;            /*!< [7..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 8;            /*!< [15..8] Mailbox                                                           */
      __IOM uint32_t DOORBELL0  : 8;            /*!< [23..16] Doorbell 0                                                       */
      __IOM uint32_t DOORBELL1  : 8;            /*!< [31..24] Doorbell 1                                                       */
    } GICD_IPRIORITYR16_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR17;           /*!< (@ 0x00000044) Interrupt Priority 68 - 71 (Lower is first)                */
    
    struct {
      __IOM uint32_t VPU0_HALTED : 8;           /*!< [7..0] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 8;           /*!< [15..8] VPU1 halted                                                       */
      __IOM uint32_t ARM_ADDRESS_ERROR : 8;     /*!< [23..16] ARM address error                                                */
      __IOM uint32_t ARM_AXI_ERROR : 8;         /*!< [31..24] ARM AXI error                                                    */
    } GICD_IPRIORITYR17_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR18;           /*!< (@ 0x00000048) Interrupt Priority 72 - 75 (Lower is first)                */
    
    struct {
      __IOM uint32_t SWI0       : 8;            /*!< [7..0] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 8;            /*!< [15..8] Software interrupt 1                                              */
      __IOM uint32_t SWI2       : 8;            /*!< [23..16] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 8;            /*!< [31..24] Software interrupt 3                                             */
    } GICD_IPRIORITYR18_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR19;           /*!< (@ 0x0000004C) Interrupt Priority 76 - 79 (Lower is first)                */
    
    struct {
      __IOM uint32_t SWI4       : 8;            /*!< [7..0] Software interrupt 4                                               */
      __IOM uint32_t SWI5       : 8;            /*!< [15..8] Software interrupt 5                                              */
      __IOM uint32_t SWI6       : 8;            /*!< [23..16] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 8;            /*!< [31..24] Software interrupt 7                                             */
    } GICD_IPRIORITYR19_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR20;           /*!< (@ 0x00000050) Interrupt Priority 80 - 83 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT80      : 8;            /*!< [7..0] Interrupt 80                                                       */
      __IOM uint32_t INT81      : 8;            /*!< [15..8] Interrupt 81                                                      */
      __IOM uint32_t INT82      : 8;            /*!< [23..16] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 8;            /*!< [31..24] Interrupt 83                                                     */
    } GICD_IPRIORITYR20_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR21;           /*!< (@ 0x00000054) Interrupt Priority 84 - 87 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT84      : 8;            /*!< [7..0] Interrupt 84                                                       */
      __IOM uint32_t INT85      : 8;            /*!< [15..8] Interrupt 85                                                      */
      __IOM uint32_t INT86      : 8;            /*!< [23..16] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 8;            /*!< [31..24] Interrupt 87                                                     */
    } GICD_IPRIORITYR21_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR22;           /*!< (@ 0x00000058) Interrupt Priority 88 - 91 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT88      : 8;            /*!< [7..0] Interrupt 88                                                       */
      __IOM uint32_t INT89      : 8;            /*!< [15..8] Interrupt 89                                                      */
      __IOM uint32_t INT90      : 8;            /*!< [23..16] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 8;            /*!< [31..24] Interrupt 91                                                     */
    } GICD_IPRIORITYR22_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR23;           /*!< (@ 0x0000005C) Interrupt Priority 92 - 95 (Lower is first)                */
    
    struct {
      __IOM uint32_t INT92      : 8;            /*!< [7..0] Interrupt 92                                                       */
      __IOM uint32_t INT93      : 8;            /*!< [15..8] Interrupt 93                                                      */
      __IOM uint32_t INT94      : 8;            /*!< [23..16] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 8;            /*!< [31..24] Interrupt 95                                                     */
    } GICD_IPRIORITYR23_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR24;           /*!< (@ 0x00000060) Interrupt Priority 96 - 99 (Lower is first)                */
    
    struct {
      __IOM uint32_t TIMER_0    : 8;            /*!< [7..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 8;            /*!< [15..8] Timer 1                                                           */
      __IOM uint32_t TIMER_2    : 8;            /*!< [23..16] Timer 2                                                          */
      __IOM uint32_t TIMER_3    : 8;            /*!< [31..24] Timer 3                                                          */
    } GICD_IPRIORITYR24_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR25;           /*!< (@ 0x00000064) Interrupt Priority 100 - 103 (Lower is first)              */
    
    struct {
      __IOM uint32_t H264_0     : 8;            /*!< [7..0] H264 0                                                             */
      __IOM uint32_t H264_1     : 8;            /*!< [15..8] H264 1                                                            */
      __IOM uint32_t H264_2     : 8;            /*!< [23..16] H264 2                                                           */
      __IOM uint32_t JPEG       : 8;            /*!< [31..24] JPEG                                                             */
    } GICD_IPRIORITYR25_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR26;           /*!< (@ 0x00000068) Interrupt Priority 104 - 107 (Lower is first)              */
    
    struct {
      __IOM uint32_t ISP        : 8;            /*!< [7..0] ISP                                                                */
      __IOM uint32_t USB        : 8;            /*!< [15..8] USB                                                               */
      __IOM uint32_t V3D        : 8;            /*!< [23..16] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 8;            /*!< [31..24] Transposer                                                       */
    } GICD_IPRIORITYR26_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR27;           /*!< (@ 0x0000006C) Interrupt Priority 108 - 111 (Lower is first)              */
    
    struct {
      __IOM uint32_t MULTICORE_SYNC_0 : 8;      /*!< [7..0] Multicore Sync 0                                                   */
      __IOM uint32_t MULTICORE_SYNC_1 : 8;      /*!< [15..8] Multicore Sync 1                                                  */
      __IOM uint32_t MULTICORE_SYNC_2 : 8;      /*!< [23..16] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 8;      /*!< [31..24] Multicore Sync 3                                                 */
    } GICD_IPRIORITYR27_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR28;           /*!< (@ 0x00000070) Interrupt Priority 112 - 115 (Lower is first)              */
    
    struct {
      __IOM uint32_t DMA_0      : 8;            /*!< [7..0] DMA 0                                                              */
      __IOM uint32_t DMA_1      : 8;            /*!< [15..8] DMA 1                                                             */
      __IOM uint32_t DMA_2      : 8;            /*!< [23..16] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 8;            /*!< [31..24] DMA 3                                                            */
    } GICD_IPRIORITYR28_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR29;           /*!< (@ 0x00000074) Interrupt Priority 116 - 119 (Lower is first)              */
    
    struct {
      __IOM uint32_t DMA_4      : 8;            /*!< [7..0] DMA 4                                                              */
      __IOM uint32_t DMA_5      : 8;            /*!< [15..8] DMA 5                                                             */
      __IOM uint32_t DMA_6      : 8;            /*!< [23..16] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 8;            /*!< [31..24] OR of DMA 7 and 8                                                */
    } GICD_IPRIORITYR29_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR30;           /*!< (@ 0x00000078) Interrupt Priority 120 - 123 (Lower is first)              */
    
    struct {
      __IOM uint32_t DMA_9_10   : 8;            /*!< [7..0] OR of DMA 9 and 10                                                 */
      __IOM uint32_t DMA_11     : 8;            /*!< [15..8] DMA 11                                                            */
      __IOM uint32_t DMA_12     : 8;            /*!< [23..16] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 8;            /*!< [31..24] DMA 13                                                           */
    } GICD_IPRIORITYR30_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR31;           /*!< (@ 0x0000007C) Interrupt Priority 124 - 127 (Lower is first)              */
    
    struct {
      __IOM uint32_t DMA_14     : 8;            /*!< [7..0] DMA 14                                                             */
      __IOM uint32_t AUX        : 8;            /*!< [15..8] OR of UART1, SPI1 and SPI2                                        */
      __IOM uint32_t ARM        : 8;            /*!< [23..16] ARM                                                              */
      __IOM uint32_t DMA_15     : 8;            /*!< [31..24] DMA 15                                                           */
    } GICD_IPRIORITYR31_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR32;           /*!< (@ 0x00000080) Interrupt Priority 128 - 131 (Lower is first)              */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 8;            /*!< [7..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 8;            /*!< [15..8] HVS                                                               */
      __IOM uint32_t RPIVID     : 8;            /*!< [23..16] RPIVID                                                           */
      __IOM uint32_t SDC        : 8;            /*!< [31..24] SDC                                                              */
    } GICD_IPRIORITYR32_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR33;           /*!< (@ 0x00000084) Interrupt Priority 132 - 135 (Lower is first)              */
    
    struct {
      __IOM uint32_t DSI_0      : 8;            /*!< [7..0] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 8;         /*!< [15..8] Pixel Valve 2                                                     */
      __IOM uint32_t CAMERA_0   : 8;            /*!< [23..16] Camera 0                                                         */
      __IOM uint32_t CAMERA_1   : 8;            /*!< [31..24] Camera 1                                                         */
    } GICD_IPRIORITYR33_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR34;           /*!< (@ 0x00000088) Interrupt Priority 136 - 139 (Lower is first)              */
    
    struct {
      __IOM uint32_t HDMI_0     : 8;            /*!< [7..0] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 8;            /*!< [15..8] HDMI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_3 : 8;         /*!< [23..16] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 8;         /*!< [31..24] SPI/BSC Slave                                                    */
    } GICD_IPRIORITYR34_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR35;           /*!< (@ 0x0000008C) Interrupt Priority 140 - 143 (Lower is first)              */
    
    struct {
      __IOM uint32_t DSI_1      : 8;            /*!< [7..0] DSI 1                                                              */
      __IOM uint32_t PIXEL_VALVE_0 : 8;         /*!< [15..8] Pixel Valve 0                                                     */
      __IOM uint32_t PIXEL_VALVE_1_2 : 8;       /*!< [23..16] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 8;            /*!< [31..24] CPR                                                              */
    } GICD_IPRIORITYR35_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR36;           /*!< (@ 0x00000090) Interrupt Priority 144 - 147 (Lower is first)              */
    
    struct {
      __IOM uint32_t SMI        : 8;            /*!< [7..0] SMI                                                                */
      __IOM uint32_t GPIO_0     : 8;            /*!< [15..8] GPIO 0                                                            */
      __IOM uint32_t GPIO_1     : 8;            /*!< [23..16] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 8;            /*!< [31..24] GPIO 2                                                           */
    } GICD_IPRIORITYR36_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR37;           /*!< (@ 0x00000094) Interrupt Priority 148 - 151 (Lower is first)              */
    
    struct {
      __IOM uint32_t GPIO_3     : 8;            /*!< [7..0] GPIO 3                                                             */
      __IOM uint32_t I2C        : 8;            /*!< [15..8] OR of all I2C                                                     */
      __IOM uint32_t SPI        : 8;            /*!< [23..16] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 8;            /*!< [31..24] PCM/I2S                                                          */
    } GICD_IPRIORITYR37_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR38;           /*!< (@ 0x00000098) Interrupt Priority 152 - 155 (Lower is first)              */
    
    struct {
      __IOM uint32_t SDHOST     : 8;            /*!< [7..0] SDHOST                                                             */
      __IOM uint32_t UART       : 8;            /*!< [15..8] OR of all PL011 UARTs                                             */
      __IOM uint32_t ETH_PCIE   : 8;            /*!< [23..16] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 8;            /*!< [31..24] VEC                                                              */
    } GICD_IPRIORITYR38_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR39;           /*!< (@ 0x0000009C) Interrupt Priority 156 - 159 (Lower is first)              */
    
    struct {
      __IOM uint32_t CPG        : 8;            /*!< [7..0] CPG                                                                */
      __IOM uint32_t RNG        : 8;            /*!< [15..8] RNG                                                               */
      __IOM uint32_t EMMC       : 8;            /*!< [23..16] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 8;       /*!< [31..24] ETH_PCIe secure                                                  */
    } GICD_IPRIORITYR39_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR40;           /*!< (@ 0x000000A0) Interrupt Priority 160 - 163 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT160     : 8;            /*!< [7..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 8;            /*!< [15..8] Interrupt 161                                                     */
      __IOM uint32_t INT162     : 8;            /*!< [23..16] Interrupt 162                                                    */
      __IOM uint32_t INT163     : 8;            /*!< [31..24] Interrupt 163                                                    */
    } GICD_IPRIORITYR40_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR41;           /*!< (@ 0x000000A4) Interrupt Priority 164 - 167 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT164     : 8;            /*!< [7..0] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 8;            /*!< [15..8] Interrupt 165                                                     */
      __IOM uint32_t INT166     : 8;            /*!< [23..16] Interrupt 166                                                    */
      __IOM uint32_t INT167     : 8;            /*!< [31..24] Interrupt 167                                                    */
    } GICD_IPRIORITYR41_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR42;           /*!< (@ 0x000000A8) Interrupt Priority 168 - 171 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT168     : 8;            /*!< [7..0] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 8;            /*!< [15..8] Interrupt 169                                                     */
      __IOM uint32_t INT170     : 8;            /*!< [23..16] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 8;            /*!< [31..24] Interrupt 171                                                    */
    } GICD_IPRIORITYR42_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR43;           /*!< (@ 0x000000AC) Interrupt Priority 172 - 175 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT172     : 8;            /*!< [7..0] Interrupt 172                                                      */
      __IOM uint32_t INT173     : 8;            /*!< [15..8] Interrupt 173                                                     */
      __IOM uint32_t INT174     : 8;            /*!< [23..16] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 8;            /*!< [31..24] Interrupt 175                                                    */
    } GICD_IPRIORITYR43_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR44;           /*!< (@ 0x000000B0) Interrupt Priority 176 - 179 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT176     : 8;            /*!< [7..0] Interrupt 176                                                      */
      __IOM uint32_t INT177     : 8;            /*!< [15..8] Interrupt 177                                                     */
      __IOM uint32_t INT178     : 8;            /*!< [23..16] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 8;            /*!< [31..24] Interrupt 179                                                    */
    } GICD_IPRIORITYR44_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR45;           /*!< (@ 0x000000B4) Interrupt Priority 180 - 183 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT180     : 8;            /*!< [7..0] Interrupt 180                                                      */
      __IOM uint32_t INT181     : 8;            /*!< [15..8] Interrupt 181                                                     */
      __IOM uint32_t INT182     : 8;            /*!< [23..16] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 8;            /*!< [31..24] Interrupt 183                                                    */
    } GICD_IPRIORITYR45_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR46;           /*!< (@ 0x000000B8) Interrupt Priority 184 - 187 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT184     : 8;            /*!< [7..0] Interrupt 184                                                      */
      __IOM uint32_t INT185     : 8;            /*!< [15..8] Interrupt 185                                                     */
      __IOM uint32_t INT186     : 8;            /*!< [23..16] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 8;            /*!< [31..24] Interrupt 187                                                    */
    } GICD_IPRIORITYR46_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR47;           /*!< (@ 0x000000BC) Interrupt Priority 188 - 191 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT188     : 8;            /*!< [7..0] Interrupt 188                                                      */
      __IOM uint32_t INT189     : 8;            /*!< [15..8] Interrupt 189                                                     */
      __IOM uint32_t INT190     : 8;            /*!< [23..16] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 8;            /*!< [31..24] Interrupt 191                                                    */
    } GICD_IPRIORITYR47_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR48;           /*!< (@ 0x000000C0) Interrupt Priority 192 - 195 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT192     : 8;            /*!< [7..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 8;            /*!< [15..8] Interrupt 193                                                     */
      __IOM uint32_t INT194     : 8;            /*!< [23..16] Interrupt 194                                                    */
      __IOM uint32_t INT195     : 8;            /*!< [31..24] Interrupt 195                                                    */
    } GICD_IPRIORITYR48_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR49;           /*!< (@ 0x000000C4) Interrupt Priority 196 - 199 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT196     : 8;            /*!< [7..0] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 8;            /*!< [15..8] Interrupt 197                                                     */
      __IOM uint32_t INT198     : 8;            /*!< [23..16] Interrupt 198                                                    */
      __IOM uint32_t INT199     : 8;            /*!< [31..24] Interrupt 199                                                    */
    } GICD_IPRIORITYR49_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR50;           /*!< (@ 0x000000C8) Interrupt Priority 200 - 203 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT200     : 8;            /*!< [7..0] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 8;            /*!< [15..8] Interrupt 201                                                     */
      __IOM uint32_t INT202     : 8;            /*!< [23..16] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 8;            /*!< [31..24] Interrupt 203                                                    */
    } GICD_IPRIORITYR50_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR51;           /*!< (@ 0x000000CC) Interrupt Priority 204 - 207 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT204     : 8;            /*!< [7..0] Interrupt 204                                                      */
      __IOM uint32_t INT205     : 8;            /*!< [15..8] Interrupt 205                                                     */
      __IOM uint32_t INT206     : 8;            /*!< [23..16] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 8;            /*!< [31..24] Interrupt 207                                                    */
    } GICD_IPRIORITYR51_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR52;           /*!< (@ 0x000000D0) Interrupt Priority 208 - 211 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT208     : 8;            /*!< [7..0] Interrupt 208                                                      */
      __IOM uint32_t INT209     : 8;            /*!< [15..8] Interrupt 209                                                     */
      __IOM uint32_t INT210     : 8;            /*!< [23..16] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 8;            /*!< [31..24] Interrupt 211                                                    */
    } GICD_IPRIORITYR52_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR53;           /*!< (@ 0x000000D4) Interrupt Priority 212 - 215 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT212     : 8;            /*!< [7..0] Interrupt 212                                                      */
      __IOM uint32_t INT213     : 8;            /*!< [15..8] Interrupt 213                                                     */
      __IOM uint32_t INT214     : 8;            /*!< [23..16] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 8;            /*!< [31..24] Interrupt 215                                                    */
    } GICD_IPRIORITYR53_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR54;           /*!< (@ 0x000000D8) Interrupt Priority 216 - 219 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT216     : 8;            /*!< [7..0] Interrupt 216                                                      */
      __IOM uint32_t INT217     : 8;            /*!< [15..8] Interrupt 217                                                     */
      __IOM uint32_t INT218     : 8;            /*!< [23..16] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 8;            /*!< [31..24] Interrupt 219                                                    */
    } GICD_IPRIORITYR54_b;
  } ;
  
  union {
    __IOM uint32_t GICD_IPRIORITYR55;           /*!< (@ 0x000000DC) Interrupt Priority 220 - 223 (Lower is first)              */
    
    struct {
      __IOM uint32_t INT220     : 8;            /*!< [7..0] Interrupt 220                                                      */
      __IOM uint32_t INT221     : 8;            /*!< [15..8] Interrupt 221                                                     */
      __IOM uint32_t INT222     : 8;            /*!< [23..16] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 8;            /*!< [31..24] Interrupt 223                                                    */
    } GICD_IPRIORITYR55_b;
  } ;
} GIC_DIST_GICD_IPRIORITYR_Type;                /*!< Size = 224 (0xe0)                                                         */


/**
  * @brief GIC_DIST_GICD_ITARGETSR [GICD_ITARGETSR] (Interrupt Processor Targets)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ITARGETSR0;             /*!< (@ 0x00000000) Interrupt Processor Target 0 - 3                           */
    
    struct {
      __IOM uint32_t INT0       : 8;            /*!< [7..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 8;            /*!< [15..8] Interrupt 1                                                       */
      __IOM uint32_t INT2       : 8;            /*!< [23..16] Interrupt 2                                                      */
      __IOM uint32_t INT3       : 8;            /*!< [31..24] Interrupt 3                                                      */
    } GICD_ITARGETSR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR1;             /*!< (@ 0x00000004) Interrupt Processor Target 4 - 7                           */
    
    struct {
      __IOM uint32_t INT4       : 8;            /*!< [7..0] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 8;            /*!< [15..8] Interrupt 5                                                       */
      __IOM uint32_t INT6       : 8;            /*!< [23..16] Interrupt 6                                                      */
      __IOM uint32_t INT7       : 8;            /*!< [31..24] Interrupt 7                                                      */
    } GICD_ITARGETSR1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR2;             /*!< (@ 0x00000008) Interrupt Processor Target 8 - 11                          */
    
    struct {
      __IOM uint32_t INT8       : 8;            /*!< [7..0] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 8;            /*!< [15..8] Interrupt 9                                                       */
      __IOM uint32_t INT10      : 8;            /*!< [23..16] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 8;            /*!< [31..24] Interrupt 11                                                     */
    } GICD_ITARGETSR2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR3;             /*!< (@ 0x0000000C) Interrupt Processor Target 12 - 15                         */
    
    struct {
      __IOM uint32_t INT12      : 8;            /*!< [7..0] Interrupt 12                                                       */
      __IOM uint32_t INT13      : 8;            /*!< [15..8] Interrupt 13                                                      */
      __IOM uint32_t INT14      : 8;            /*!< [23..16] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 8;            /*!< [31..24] Interrupt 15                                                     */
    } GICD_ITARGETSR3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR4;             /*!< (@ 0x00000010) Interrupt Processor Target 16 - 19                         */
    
    struct {
      __IOM uint32_t INT16      : 8;            /*!< [7..0] Interrupt 16                                                       */
      __IOM uint32_t INT17      : 8;            /*!< [15..8] Interrupt 17                                                      */
      __IOM uint32_t INT18      : 8;            /*!< [23..16] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 8;            /*!< [31..24] Interrupt 19                                                     */
    } GICD_ITARGETSR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR5;             /*!< (@ 0x00000014) Interrupt Processor Target 20 - 23                         */
    
    struct {
      __IOM uint32_t INT20      : 8;            /*!< [7..0] Interrupt 20                                                       */
      __IOM uint32_t INT21      : 8;            /*!< [15..8] Interrupt 21                                                      */
      __IOM uint32_t INT22      : 8;            /*!< [23..16] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 8;            /*!< [31..24] Interrupt 23                                                     */
    } GICD_ITARGETSR5_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR6;             /*!< (@ 0x00000018) Interrupt Processor Target 24 - 27                         */
    
    struct {
      __IOM uint32_t INT24      : 8;            /*!< [7..0] Interrupt 24                                                       */
      __IOM uint32_t INT25      : 8;            /*!< [15..8] Interrupt 25                                                      */
      __IOM uint32_t INT26      : 8;            /*!< [23..16] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 8;            /*!< [31..24] Interrupt 27                                                     */
    } GICD_ITARGETSR6_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR7;             /*!< (@ 0x0000001C) Interrupt Processor Target 28 - 31                         */
    
    struct {
      __IOM uint32_t INT28      : 8;            /*!< [7..0] Interrupt 28                                                       */
      __IOM uint32_t INT29      : 8;            /*!< [15..8] Interrupt 29                                                      */
      __IOM uint32_t INT30      : 8;            /*!< [23..16] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 8;            /*!< [31..24] Interrupt 31                                                     */
    } GICD_ITARGETSR7_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR8;             /*!< (@ 0x00000020) Interrupt Processor Target 32 - 35                         */
    
    struct {
      __IOM uint32_t INT32      : 8;            /*!< [7..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 8;            /*!< [15..8] Interrupt 33                                                      */
      __IOM uint32_t INT34      : 8;            /*!< [23..16] Interrupt 34                                                     */
      __IOM uint32_t INT35      : 8;            /*!< [31..24] Interrupt 35                                                     */
    } GICD_ITARGETSR8_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR9;             /*!< (@ 0x00000024) Interrupt Processor Target 36 - 39                         */
    
    struct {
      __IOM uint32_t INT36      : 8;            /*!< [7..0] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 8;            /*!< [15..8] Interrupt 37                                                      */
      __IOM uint32_t INT38      : 8;            /*!< [23..16] Interrupt 38                                                     */
      __IOM uint32_t INT39      : 8;            /*!< [31..24] Interrupt 39                                                     */
    } GICD_ITARGETSR9_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR10;            /*!< (@ 0x00000028) Interrupt Processor Target 40 - 43                         */
    
    struct {
      __IOM uint32_t INT40      : 8;            /*!< [7..0] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 8;            /*!< [15..8] Interrupt 41                                                      */
      __IOM uint32_t INT42      : 8;            /*!< [23..16] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 8;            /*!< [31..24] Interrupt 43                                                     */
    } GICD_ITARGETSR10_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR11;            /*!< (@ 0x0000002C) Interrupt Processor Target 44 - 47                         */
    
    struct {
      __IOM uint32_t INT44      : 8;            /*!< [7..0] Interrupt 44                                                       */
      __IOM uint32_t INT45      : 8;            /*!< [15..8] Interrupt 45                                                      */
      __IOM uint32_t INT46      : 8;            /*!< [23..16] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 8;            /*!< [31..24] Interrupt 47                                                     */
    } GICD_ITARGETSR11_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR12;            /*!< (@ 0x00000030) Interrupt Processor Target 48 - 51                         */
    
    struct {
      __IOM uint32_t INT48      : 8;            /*!< [7..0] Interrupt 48                                                       */
      __IOM uint32_t INT49      : 8;            /*!< [15..8] Interrupt 49                                                      */
      __IOM uint32_t INT50      : 8;            /*!< [23..16] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 8;            /*!< [31..24] Interrupt 51                                                     */
    } GICD_ITARGETSR12_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR13;            /*!< (@ 0x00000034) Interrupt Processor Target 52 - 55                         */
    
    struct {
      __IOM uint32_t INT52      : 8;            /*!< [7..0] Interrupt 52                                                       */
      __IOM uint32_t INT53      : 8;            /*!< [15..8] Interrupt 53                                                      */
      __IOM uint32_t INT54      : 8;            /*!< [23..16] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 8;            /*!< [31..24] Interrupt 55                                                     */
    } GICD_ITARGETSR13_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR14;            /*!< (@ 0x00000038) Interrupt Processor Target 56 - 59                         */
    
    struct {
      __IOM uint32_t INT56      : 8;            /*!< [7..0] Interrupt 56                                                       */
      __IOM uint32_t INT57      : 8;            /*!< [15..8] Interrupt 57                                                      */
      __IOM uint32_t INT58      : 8;            /*!< [23..16] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 8;            /*!< [31..24] Interrupt 59                                                     */
    } GICD_ITARGETSR14_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR15;            /*!< (@ 0x0000003C) Interrupt Processor Target 60 - 63                         */
    
    struct {
      __IOM uint32_t INT60      : 8;            /*!< [7..0] Interrupt 60                                                       */
      __IOM uint32_t INT61      : 8;            /*!< [15..8] Interrupt 61                                                      */
      __IOM uint32_t INT62      : 8;            /*!< [23..16] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 8;            /*!< [31..24] Interrupt 63                                                     */
    } GICD_ITARGETSR15_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR16;            /*!< (@ 0x00000040) Interrupt Processor Target 64 - 67                         */
    
    struct {
      __IOM uint32_t TIMER      : 8;            /*!< [7..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 8;            /*!< [15..8] Mailbox                                                           */
      __IOM uint32_t DOORBELL0  : 8;            /*!< [23..16] Doorbell 0                                                       */
      __IOM uint32_t DOORBELL1  : 8;            /*!< [31..24] Doorbell 1                                                       */
    } GICD_ITARGETSR16_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR17;            /*!< (@ 0x00000044) Interrupt Processor Target 68 - 71                         */
    
    struct {
      __IOM uint32_t VPU0_HALTED : 8;           /*!< [7..0] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 8;           /*!< [15..8] VPU1 halted                                                       */
      __IOM uint32_t ARM_ADDRESS_ERROR : 8;     /*!< [23..16] ARM address error                                                */
      __IOM uint32_t ARM_AXI_ERROR : 8;         /*!< [31..24] ARM AXI error                                                    */
    } GICD_ITARGETSR17_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR18;            /*!< (@ 0x00000048) Interrupt Processor Target 72 - 75                         */
    
    struct {
      __IOM uint32_t SWI0       : 8;            /*!< [7..0] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 8;            /*!< [15..8] Software interrupt 1                                              */
      __IOM uint32_t SWI2       : 8;            /*!< [23..16] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 8;            /*!< [31..24] Software interrupt 3                                             */
    } GICD_ITARGETSR18_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR19;            /*!< (@ 0x0000004C) Interrupt Processor Target 76 - 79                         */
    
    struct {
      __IOM uint32_t SWI4       : 8;            /*!< [7..0] Software interrupt 4                                               */
      __IOM uint32_t SWI5       : 8;            /*!< [15..8] Software interrupt 5                                              */
      __IOM uint32_t SWI6       : 8;            /*!< [23..16] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 8;            /*!< [31..24] Software interrupt 7                                             */
    } GICD_ITARGETSR19_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR20;            /*!< (@ 0x00000050) Interrupt Processor Target 80 - 83                         */
    
    struct {
      __IOM uint32_t INT80      : 8;            /*!< [7..0] Interrupt 80                                                       */
      __IOM uint32_t INT81      : 8;            /*!< [15..8] Interrupt 81                                                      */
      __IOM uint32_t INT82      : 8;            /*!< [23..16] Interrupt 82                                                     */
      __IOM uint32_t INT83      : 8;            /*!< [31..24] Interrupt 83                                                     */
    } GICD_ITARGETSR20_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR21;            /*!< (@ 0x00000054) Interrupt Processor Target 84 - 87                         */
    
    struct {
      __IOM uint32_t INT84      : 8;            /*!< [7..0] Interrupt 84                                                       */
      __IOM uint32_t INT85      : 8;            /*!< [15..8] Interrupt 85                                                      */
      __IOM uint32_t INT86      : 8;            /*!< [23..16] Interrupt 86                                                     */
      __IOM uint32_t INT87      : 8;            /*!< [31..24] Interrupt 87                                                     */
    } GICD_ITARGETSR21_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR22;            /*!< (@ 0x00000058) Interrupt Processor Target 88 - 91                         */
    
    struct {
      __IOM uint32_t INT88      : 8;            /*!< [7..0] Interrupt 88                                                       */
      __IOM uint32_t INT89      : 8;            /*!< [15..8] Interrupt 89                                                      */
      __IOM uint32_t INT90      : 8;            /*!< [23..16] Interrupt 90                                                     */
      __IOM uint32_t INT91      : 8;            /*!< [31..24] Interrupt 91                                                     */
    } GICD_ITARGETSR22_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR23;            /*!< (@ 0x0000005C) Interrupt Processor Target 92 - 95                         */
    
    struct {
      __IOM uint32_t INT92      : 8;            /*!< [7..0] Interrupt 92                                                       */
      __IOM uint32_t INT93      : 8;            /*!< [15..8] Interrupt 93                                                      */
      __IOM uint32_t INT94      : 8;            /*!< [23..16] Interrupt 94                                                     */
      __IOM uint32_t INT95      : 8;            /*!< [31..24] Interrupt 95                                                     */
    } GICD_ITARGETSR23_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR24;            /*!< (@ 0x00000060) Interrupt Processor Target 96 - 99                         */
    
    struct {
      __IOM uint32_t TIMER_0    : 8;            /*!< [7..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 8;            /*!< [15..8] Timer 1                                                           */
      __IOM uint32_t TIMER_2    : 8;            /*!< [23..16] Timer 2                                                          */
      __IOM uint32_t TIMER_3    : 8;            /*!< [31..24] Timer 3                                                          */
    } GICD_ITARGETSR24_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR25;            /*!< (@ 0x00000064) Interrupt Processor Target 100 - 103                       */
    
    struct {
      __IOM uint32_t H264_0     : 8;            /*!< [7..0] H264 0                                                             */
      __IOM uint32_t H264_1     : 8;            /*!< [15..8] H264 1                                                            */
      __IOM uint32_t H264_2     : 8;            /*!< [23..16] H264 2                                                           */
      __IOM uint32_t JPEG       : 8;            /*!< [31..24] JPEG                                                             */
    } GICD_ITARGETSR25_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR26;            /*!< (@ 0x00000068) Interrupt Processor Target 104 - 107                       */
    
    struct {
      __IOM uint32_t ISP        : 8;            /*!< [7..0] ISP                                                                */
      __IOM uint32_t USB        : 8;            /*!< [15..8] USB                                                               */
      __IOM uint32_t V3D        : 8;            /*!< [23..16] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 8;            /*!< [31..24] Transposer                                                       */
    } GICD_ITARGETSR26_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR27;            /*!< (@ 0x0000006C) Interrupt Processor Target 108 - 111                       */
    
    struct {
      __IOM uint32_t MULTICORE_SYNC_0 : 8;      /*!< [7..0] Multicore Sync 0                                                   */
      __IOM uint32_t MULTICORE_SYNC_1 : 8;      /*!< [15..8] Multicore Sync 1                                                  */
      __IOM uint32_t MULTICORE_SYNC_2 : 8;      /*!< [23..16] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 8;      /*!< [31..24] Multicore Sync 3                                                 */
    } GICD_ITARGETSR27_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR28;            /*!< (@ 0x00000070) Interrupt Processor Target 112 - 115                       */
    
    struct {
      __IOM uint32_t DMA_0      : 8;            /*!< [7..0] DMA 0                                                              */
      __IOM uint32_t DMA_1      : 8;            /*!< [15..8] DMA 1                                                             */
      __IOM uint32_t DMA_2      : 8;            /*!< [23..16] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 8;            /*!< [31..24] DMA 3                                                            */
    } GICD_ITARGETSR28_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR29;            /*!< (@ 0x00000074) Interrupt Processor Target 116 - 119                       */
    
    struct {
      __IOM uint32_t DMA_4      : 8;            /*!< [7..0] DMA 4                                                              */
      __IOM uint32_t DMA_5      : 8;            /*!< [15..8] DMA 5                                                             */
      __IOM uint32_t DMA_6      : 8;            /*!< [23..16] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 8;            /*!< [31..24] OR of DMA 7 and 8                                                */
    } GICD_ITARGETSR29_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR30;            /*!< (@ 0x00000078) Interrupt Processor Target 120 - 123                       */
    
    struct {
      __IOM uint32_t DMA_9_10   : 8;            /*!< [7..0] OR of DMA 9 and 10                                                 */
      __IOM uint32_t DMA_11     : 8;            /*!< [15..8] DMA 11                                                            */
      __IOM uint32_t DMA_12     : 8;            /*!< [23..16] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 8;            /*!< [31..24] DMA 13                                                           */
    } GICD_ITARGETSR30_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR31;            /*!< (@ 0x0000007C) Interrupt Processor Target 124 - 127                       */
    
    struct {
      __IOM uint32_t DMA_14     : 8;            /*!< [7..0] DMA 14                                                             */
      __IOM uint32_t AUX        : 8;            /*!< [15..8] OR of UART1, SPI1 and SPI2                                        */
      __IOM uint32_t ARM        : 8;            /*!< [23..16] ARM                                                              */
      __IOM uint32_t DMA_15     : 8;            /*!< [31..24] DMA 15                                                           */
    } GICD_ITARGETSR31_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR32;            /*!< (@ 0x00000080) Interrupt Processor Target 128 - 131                       */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 8;            /*!< [7..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 8;            /*!< [15..8] HVS                                                               */
      __IOM uint32_t RPIVID     : 8;            /*!< [23..16] RPIVID                                                           */
      __IOM uint32_t SDC        : 8;            /*!< [31..24] SDC                                                              */
    } GICD_ITARGETSR32_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR33;            /*!< (@ 0x00000084) Interrupt Processor Target 132 - 135                       */
    
    struct {
      __IOM uint32_t DSI_0      : 8;            /*!< [7..0] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 8;         /*!< [15..8] Pixel Valve 2                                                     */
      __IOM uint32_t CAMERA_0   : 8;            /*!< [23..16] Camera 0                                                         */
      __IOM uint32_t CAMERA_1   : 8;            /*!< [31..24] Camera 1                                                         */
    } GICD_ITARGETSR33_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR34;            /*!< (@ 0x00000088) Interrupt Processor Target 136 - 139                       */
    
    struct {
      __IOM uint32_t HDMI_0     : 8;            /*!< [7..0] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 8;            /*!< [15..8] HDMI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_3 : 8;         /*!< [23..16] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 8;         /*!< [31..24] SPI/BSC Slave                                                    */
    } GICD_ITARGETSR34_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR35;            /*!< (@ 0x0000008C) Interrupt Processor Target 140 - 143                       */
    
    struct {
      __IOM uint32_t DSI_1      : 8;            /*!< [7..0] DSI 1                                                              */
      __IOM uint32_t PIXEL_VALVE_0 : 8;         /*!< [15..8] Pixel Valve 0                                                     */
      __IOM uint32_t PIXEL_VALVE_1_2 : 8;       /*!< [23..16] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 8;            /*!< [31..24] CPR                                                              */
    } GICD_ITARGETSR35_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR36;            /*!< (@ 0x00000090) Interrupt Processor Target 144 - 147                       */
    
    struct {
      __IOM uint32_t SMI        : 8;            /*!< [7..0] SMI                                                                */
      __IOM uint32_t GPIO_0     : 8;            /*!< [15..8] GPIO 0                                                            */
      __IOM uint32_t GPIO_1     : 8;            /*!< [23..16] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 8;            /*!< [31..24] GPIO 2                                                           */
    } GICD_ITARGETSR36_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR37;            /*!< (@ 0x00000094) Interrupt Processor Target 148 - 151                       */
    
    struct {
      __IOM uint32_t GPIO_3     : 8;            /*!< [7..0] GPIO 3                                                             */
      __IOM uint32_t I2C        : 8;            /*!< [15..8] OR of all I2C                                                     */
      __IOM uint32_t SPI        : 8;            /*!< [23..16] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 8;            /*!< [31..24] PCM/I2S                                                          */
    } GICD_ITARGETSR37_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR38;            /*!< (@ 0x00000098) Interrupt Processor Target 152 - 155                       */
    
    struct {
      __IOM uint32_t SDHOST     : 8;            /*!< [7..0] SDHOST                                                             */
      __IOM uint32_t UART       : 8;            /*!< [15..8] OR of all PL011 UARTs                                             */
      __IOM uint32_t ETH_PCIE   : 8;            /*!< [23..16] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 8;            /*!< [31..24] VEC                                                              */
    } GICD_ITARGETSR38_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR39;            /*!< (@ 0x0000009C) Interrupt Processor Target 156 - 159                       */
    
    struct {
      __IOM uint32_t CPG        : 8;            /*!< [7..0] CPG                                                                */
      __IOM uint32_t RNG        : 8;            /*!< [15..8] RNG                                                               */
      __IOM uint32_t EMMC       : 8;            /*!< [23..16] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 8;       /*!< [31..24] ETH_PCIe secure                                                  */
    } GICD_ITARGETSR39_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR40;            /*!< (@ 0x000000A0) Interrupt Processor Target 160 - 163                       */
    
    struct {
      __IOM uint32_t INT160     : 8;            /*!< [7..0] Interrupt 160                                                      */
      __IOM uint32_t INT161     : 8;            /*!< [15..8] Interrupt 161                                                     */
      __IOM uint32_t INT162     : 8;            /*!< [23..16] Interrupt 162                                                    */
      __IOM uint32_t INT163     : 8;            /*!< [31..24] Interrupt 163                                                    */
    } GICD_ITARGETSR40_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR41;            /*!< (@ 0x000000A4) Interrupt Processor Target 164 - 167                       */
    
    struct {
      __IOM uint32_t INT164     : 8;            /*!< [7..0] Interrupt 164                                                      */
      __IOM uint32_t INT165     : 8;            /*!< [15..8] Interrupt 165                                                     */
      __IOM uint32_t INT166     : 8;            /*!< [23..16] Interrupt 166                                                    */
      __IOM uint32_t INT167     : 8;            /*!< [31..24] Interrupt 167                                                    */
    } GICD_ITARGETSR41_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR42;            /*!< (@ 0x000000A8) Interrupt Processor Target 168 - 171                       */
    
    struct {
      __IOM uint32_t INT168     : 8;            /*!< [7..0] Interrupt 168                                                      */
      __IOM uint32_t INT169     : 8;            /*!< [15..8] Interrupt 169                                                     */
      __IOM uint32_t INT170     : 8;            /*!< [23..16] Interrupt 170                                                    */
      __IOM uint32_t INT171     : 8;            /*!< [31..24] Interrupt 171                                                    */
    } GICD_ITARGETSR42_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR43;            /*!< (@ 0x000000AC) Interrupt Processor Target 172 - 175                       */
    
    struct {
      __IOM uint32_t INT172     : 8;            /*!< [7..0] Interrupt 172                                                      */
      __IOM uint32_t INT173     : 8;            /*!< [15..8] Interrupt 173                                                     */
      __IOM uint32_t INT174     : 8;            /*!< [23..16] Interrupt 174                                                    */
      __IOM uint32_t INT175     : 8;            /*!< [31..24] Interrupt 175                                                    */
    } GICD_ITARGETSR43_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR44;            /*!< (@ 0x000000B0) Interrupt Processor Target 176 - 179                       */
    
    struct {
      __IOM uint32_t INT176     : 8;            /*!< [7..0] Interrupt 176                                                      */
      __IOM uint32_t INT177     : 8;            /*!< [15..8] Interrupt 177                                                     */
      __IOM uint32_t INT178     : 8;            /*!< [23..16] Interrupt 178                                                    */
      __IOM uint32_t INT179     : 8;            /*!< [31..24] Interrupt 179                                                    */
    } GICD_ITARGETSR44_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR45;            /*!< (@ 0x000000B4) Interrupt Processor Target 180 - 183                       */
    
    struct {
      __IOM uint32_t INT180     : 8;            /*!< [7..0] Interrupt 180                                                      */
      __IOM uint32_t INT181     : 8;            /*!< [15..8] Interrupt 181                                                     */
      __IOM uint32_t INT182     : 8;            /*!< [23..16] Interrupt 182                                                    */
      __IOM uint32_t INT183     : 8;            /*!< [31..24] Interrupt 183                                                    */
    } GICD_ITARGETSR45_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR46;            /*!< (@ 0x000000B8) Interrupt Processor Target 184 - 187                       */
    
    struct {
      __IOM uint32_t INT184     : 8;            /*!< [7..0] Interrupt 184                                                      */
      __IOM uint32_t INT185     : 8;            /*!< [15..8] Interrupt 185                                                     */
      __IOM uint32_t INT186     : 8;            /*!< [23..16] Interrupt 186                                                    */
      __IOM uint32_t INT187     : 8;            /*!< [31..24] Interrupt 187                                                    */
    } GICD_ITARGETSR46_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR47;            /*!< (@ 0x000000BC) Interrupt Processor Target 188 - 191                       */
    
    struct {
      __IOM uint32_t INT188     : 8;            /*!< [7..0] Interrupt 188                                                      */
      __IOM uint32_t INT189     : 8;            /*!< [15..8] Interrupt 189                                                     */
      __IOM uint32_t INT190     : 8;            /*!< [23..16] Interrupt 190                                                    */
      __IOM uint32_t INT191     : 8;            /*!< [31..24] Interrupt 191                                                    */
    } GICD_ITARGETSR47_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR48;            /*!< (@ 0x000000C0) Interrupt Processor Target 192 - 195                       */
    
    struct {
      __IOM uint32_t INT192     : 8;            /*!< [7..0] Interrupt 192                                                      */
      __IOM uint32_t INT193     : 8;            /*!< [15..8] Interrupt 193                                                     */
      __IOM uint32_t INT194     : 8;            /*!< [23..16] Interrupt 194                                                    */
      __IOM uint32_t INT195     : 8;            /*!< [31..24] Interrupt 195                                                    */
    } GICD_ITARGETSR48_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR49;            /*!< (@ 0x000000C4) Interrupt Processor Target 196 - 199                       */
    
    struct {
      __IOM uint32_t INT196     : 8;            /*!< [7..0] Interrupt 196                                                      */
      __IOM uint32_t INT197     : 8;            /*!< [15..8] Interrupt 197                                                     */
      __IOM uint32_t INT198     : 8;            /*!< [23..16] Interrupt 198                                                    */
      __IOM uint32_t INT199     : 8;            /*!< [31..24] Interrupt 199                                                    */
    } GICD_ITARGETSR49_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR50;            /*!< (@ 0x000000C8) Interrupt Processor Target 200 - 203                       */
    
    struct {
      __IOM uint32_t INT200     : 8;            /*!< [7..0] Interrupt 200                                                      */
      __IOM uint32_t INT201     : 8;            /*!< [15..8] Interrupt 201                                                     */
      __IOM uint32_t INT202     : 8;            /*!< [23..16] Interrupt 202                                                    */
      __IOM uint32_t INT203     : 8;            /*!< [31..24] Interrupt 203                                                    */
    } GICD_ITARGETSR50_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR51;            /*!< (@ 0x000000CC) Interrupt Processor Target 204 - 207                       */
    
    struct {
      __IOM uint32_t INT204     : 8;            /*!< [7..0] Interrupt 204                                                      */
      __IOM uint32_t INT205     : 8;            /*!< [15..8] Interrupt 205                                                     */
      __IOM uint32_t INT206     : 8;            /*!< [23..16] Interrupt 206                                                    */
      __IOM uint32_t INT207     : 8;            /*!< [31..24] Interrupt 207                                                    */
    } GICD_ITARGETSR51_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR52;            /*!< (@ 0x000000D0) Interrupt Processor Target 208 - 211                       */
    
    struct {
      __IOM uint32_t INT208     : 8;            /*!< [7..0] Interrupt 208                                                      */
      __IOM uint32_t INT209     : 8;            /*!< [15..8] Interrupt 209                                                     */
      __IOM uint32_t INT210     : 8;            /*!< [23..16] Interrupt 210                                                    */
      __IOM uint32_t INT211     : 8;            /*!< [31..24] Interrupt 211                                                    */
    } GICD_ITARGETSR52_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR53;            /*!< (@ 0x000000D4) Interrupt Processor Target 212 - 215                       */
    
    struct {
      __IOM uint32_t INT212     : 8;            /*!< [7..0] Interrupt 212                                                      */
      __IOM uint32_t INT213     : 8;            /*!< [15..8] Interrupt 213                                                     */
      __IOM uint32_t INT214     : 8;            /*!< [23..16] Interrupt 214                                                    */
      __IOM uint32_t INT215     : 8;            /*!< [31..24] Interrupt 215                                                    */
    } GICD_ITARGETSR53_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR54;            /*!< (@ 0x000000D8) Interrupt Processor Target 216 - 219                       */
    
    struct {
      __IOM uint32_t INT216     : 8;            /*!< [7..0] Interrupt 216                                                      */
      __IOM uint32_t INT217     : 8;            /*!< [15..8] Interrupt 217                                                     */
      __IOM uint32_t INT218     : 8;            /*!< [23..16] Interrupt 218                                                    */
      __IOM uint32_t INT219     : 8;            /*!< [31..24] Interrupt 219                                                    */
    } GICD_ITARGETSR54_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ITARGETSR55;            /*!< (@ 0x000000DC) Interrupt Processor Target 220 - 223                       */
    
    struct {
      __IOM uint32_t INT220     : 8;            /*!< [7..0] Interrupt 220                                                      */
      __IOM uint32_t INT221     : 8;            /*!< [15..8] Interrupt 221                                                     */
      __IOM uint32_t INT222     : 8;            /*!< [23..16] Interrupt 222                                                    */
      __IOM uint32_t INT223     : 8;            /*!< [31..24] Interrupt 223                                                    */
    } GICD_ITARGETSR55_b;
  } ;
} GIC_DIST_GICD_ITARGETSR_Type;                 /*!< Size = 224 (0xe0)                                                         */


/**
  * @brief GIC_DIST_GICD_ICFGR [GICD_ICFGR] (Interrupt Configuration)
  */
typedef struct {
  union {
    __IOM uint32_t GICD_ICFGR0;                 /*!< (@ 0x00000000) Interrupt Configuration 0 - 15                             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT0       : 1;            /*!< [1..1] Interrupt 0                                                        */
            uint32_t            : 1;
      __IOM uint32_t INT1       : 1;            /*!< [3..3] Interrupt 1                                                        */
            uint32_t            : 1;
      __IOM uint32_t INT2       : 1;            /*!< [5..5] Interrupt 2                                                        */
            uint32_t            : 1;
      __IOM uint32_t INT3       : 1;            /*!< [7..7] Interrupt 3                                                        */
            uint32_t            : 1;
      __IOM uint32_t INT4       : 1;            /*!< [9..9] Interrupt 4                                                        */
            uint32_t            : 1;
      __IOM uint32_t INT5       : 1;            /*!< [11..11] Interrupt 5                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT6       : 1;            /*!< [13..13] Interrupt 6                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT7       : 1;            /*!< [15..15] Interrupt 7                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT8       : 1;            /*!< [17..17] Interrupt 8                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT9       : 1;            /*!< [19..19] Interrupt 9                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT10      : 1;            /*!< [21..21] Interrupt 10                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT11      : 1;            /*!< [23..23] Interrupt 11                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT12      : 1;            /*!< [25..25] Interrupt 12                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT13      : 1;            /*!< [27..27] Interrupt 13                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT14      : 1;            /*!< [29..29] Interrupt 14                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT15      : 1;            /*!< [31..31] Interrupt 15                                                     */
    } GICD_ICFGR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR4;                 /*!< (@ 0x00000004) Interrupt Configuration 16 - 31                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT16      : 1;            /*!< [1..1] Interrupt 16                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT17      : 1;            /*!< [3..3] Interrupt 17                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT18      : 1;            /*!< [5..5] Interrupt 18                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT19      : 1;            /*!< [7..7] Interrupt 19                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT20      : 1;            /*!< [9..9] Interrupt 20                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT21      : 1;            /*!< [11..11] Interrupt 21                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT22      : 1;            /*!< [13..13] Interrupt 22                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT23      : 1;            /*!< [15..15] Interrupt 23                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT24      : 1;            /*!< [17..17] Interrupt 24                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT25      : 1;            /*!< [19..19] Interrupt 25                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT26      : 1;            /*!< [21..21] Interrupt 26                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT27      : 1;            /*!< [23..23] Interrupt 27                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT28      : 1;            /*!< [25..25] Interrupt 28                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT29      : 1;            /*!< [27..27] Interrupt 29                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT30      : 1;            /*!< [29..29] Interrupt 30                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } GICD_ICFGR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR8;                 /*!< (@ 0x00000008) Interrupt Configuration 32 - 47                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT32      : 1;            /*!< [1..1] Interrupt 32                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT33      : 1;            /*!< [3..3] Interrupt 33                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT34      : 1;            /*!< [5..5] Interrupt 34                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT35      : 1;            /*!< [7..7] Interrupt 35                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT36      : 1;            /*!< [9..9] Interrupt 36                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT37      : 1;            /*!< [11..11] Interrupt 37                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT38      : 1;            /*!< [13..13] Interrupt 38                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT39      : 1;            /*!< [15..15] Interrupt 39                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT40      : 1;            /*!< [17..17] Interrupt 40                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT41      : 1;            /*!< [19..19] Interrupt 41                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT42      : 1;            /*!< [21..21] Interrupt 42                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT43      : 1;            /*!< [23..23] Interrupt 43                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT44      : 1;            /*!< [25..25] Interrupt 44                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT45      : 1;            /*!< [27..27] Interrupt 45                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT46      : 1;            /*!< [29..29] Interrupt 46                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT47      : 1;            /*!< [31..31] Interrupt 47                                                     */
    } GICD_ICFGR8_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR12;                /*!< (@ 0x0000000C) Interrupt Configuration 48 - 63                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT48      : 1;            /*!< [1..1] Interrupt 48                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT49      : 1;            /*!< [3..3] Interrupt 49                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT50      : 1;            /*!< [5..5] Interrupt 50                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT51      : 1;            /*!< [7..7] Interrupt 51                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT52      : 1;            /*!< [9..9] Interrupt 52                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT53      : 1;            /*!< [11..11] Interrupt 53                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT54      : 1;            /*!< [13..13] Interrupt 54                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT55      : 1;            /*!< [15..15] Interrupt 55                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT56      : 1;            /*!< [17..17] Interrupt 56                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT57      : 1;            /*!< [19..19] Interrupt 57                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT58      : 1;            /*!< [21..21] Interrupt 58                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT59      : 1;            /*!< [23..23] Interrupt 59                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT60      : 1;            /*!< [25..25] Interrupt 60                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT61      : 1;            /*!< [27..27] Interrupt 61                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT62      : 1;            /*!< [29..29] Interrupt 62                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } GICD_ICFGR12_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR16;                /*!< (@ 0x00000010) Interrupt Configuration 64 - 79                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t TIMER      : 1;            /*!< [1..1] ARMC Timer                                                         */
            uint32_t            : 1;
      __IOM uint32_t MAILBOX    : 1;            /*!< [3..3] Mailbox                                                            */
            uint32_t            : 1;
      __IOM uint32_t DOORBELL0  : 1;            /*!< [5..5] Doorbell 0                                                         */
            uint32_t            : 1;
      __IOM uint32_t DOORBELL1  : 1;            /*!< [7..7] Doorbell 1                                                         */
            uint32_t            : 1;
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [9..9] VPU0 halted                                                        */
            uint32_t            : 1;
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [11..11] VPU1 halted                                                      */
            uint32_t            : 1;
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [13..13] ARM address error                                                */
            uint32_t            : 1;
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [15..15] ARM AXI error                                                    */
            uint32_t            : 1;
      __IOM uint32_t SWI0       : 1;            /*!< [17..17] Software interrupt 0                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI1       : 1;            /*!< [19..19] Software interrupt 1                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI2       : 1;            /*!< [21..21] Software interrupt 2                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI3       : 1;            /*!< [23..23] Software interrupt 3                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI4       : 1;            /*!< [25..25] Software interrupt 4                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI5       : 1;            /*!< [27..27] Software interrupt 5                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI6       : 1;            /*!< [29..29] Software interrupt 6                                             */
            uint32_t            : 1;
      __IOM uint32_t SWI7       : 1;            /*!< [31..31] Software interrupt 7                                             */
    } GICD_ICFGR16_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR20;                /*!< (@ 0x00000014) Interrupt Configuration 80 - 95                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT80      : 1;            /*!< [1..1] Interrupt 80                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT81      : 1;            /*!< [3..3] Interrupt 81                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT82      : 1;            /*!< [5..5] Interrupt 82                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT83      : 1;            /*!< [7..7] Interrupt 83                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT84      : 1;            /*!< [9..9] Interrupt 84                                                       */
            uint32_t            : 1;
      __IOM uint32_t INT85      : 1;            /*!< [11..11] Interrupt 85                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT86      : 1;            /*!< [13..13] Interrupt 86                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT87      : 1;            /*!< [15..15] Interrupt 87                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT88      : 1;            /*!< [17..17] Interrupt 88                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT89      : 1;            /*!< [19..19] Interrupt 89                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT90      : 1;            /*!< [21..21] Interrupt 90                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT91      : 1;            /*!< [23..23] Interrupt 91                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT92      : 1;            /*!< [25..25] Interrupt 92                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT93      : 1;            /*!< [27..27] Interrupt 93                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT94      : 1;            /*!< [29..29] Interrupt 94                                                     */
            uint32_t            : 1;
      __IOM uint32_t INT95      : 1;            /*!< [31..31] Interrupt 95                                                     */
    } GICD_ICFGR20_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR24;                /*!< (@ 0x00000018) Interrupt Configuration 96 - 111                           */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t TIMER_0    : 1;            /*!< [1..1] Timer 0                                                            */
            uint32_t            : 1;
      __IOM uint32_t TIMER_1    : 1;            /*!< [3..3] Timer 1                                                            */
            uint32_t            : 1;
      __IOM uint32_t TIMER_2    : 1;            /*!< [5..5] Timer 2                                                            */
            uint32_t            : 1;
      __IOM uint32_t TIMER_3    : 1;            /*!< [7..7] Timer 3                                                            */
            uint32_t            : 1;
      __IOM uint32_t H264_0     : 1;            /*!< [9..9] H264 0                                                             */
            uint32_t            : 1;
      __IOM uint32_t H264_1     : 1;            /*!< [11..11] H264 1                                                           */
            uint32_t            : 1;
      __IOM uint32_t H264_2     : 1;            /*!< [13..13] H264 2                                                           */
            uint32_t            : 1;
      __IOM uint32_t JPEG       : 1;            /*!< [15..15] JPEG                                                             */
            uint32_t            : 1;
      __IOM uint32_t ISP        : 1;            /*!< [17..17] ISP                                                              */
            uint32_t            : 1;
      __IOM uint32_t USB        : 1;            /*!< [19..19] USB                                                              */
            uint32_t            : 1;
      __IOM uint32_t V3D        : 1;            /*!< [21..21] V3D                                                              */
            uint32_t            : 1;
      __IOM uint32_t TRANSPOSER : 1;            /*!< [23..23] Transposer                                                       */
            uint32_t            : 1;
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [25..25] Multicore Sync 0                                                 */
            uint32_t            : 1;
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [27..27] Multicore Sync 1                                                 */
            uint32_t            : 1;
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [29..29] Multicore Sync 2                                                 */
            uint32_t            : 1;
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [31..31] Multicore Sync 3                                                 */
    } GICD_ICFGR24_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR28;                /*!< (@ 0x0000001C) Interrupt Configuration 112 - 127                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t DMA_0      : 1;            /*!< [1..1] DMA 0                                                              */
            uint32_t            : 1;
      __IOM uint32_t DMA_1      : 1;            /*!< [3..3] DMA 1                                                              */
            uint32_t            : 1;
      __IOM uint32_t DMA_2      : 1;            /*!< [5..5] DMA 2                                                              */
            uint32_t            : 1;
      __IOM uint32_t DMA_3      : 1;            /*!< [7..7] DMA 3                                                              */
            uint32_t            : 1;
      __IOM uint32_t DMA_4      : 1;            /*!< [9..9] DMA 4                                                              */
            uint32_t            : 1;
      __IOM uint32_t DMA_5      : 1;            /*!< [11..11] DMA 5                                                            */
            uint32_t            : 1;
      __IOM uint32_t DMA_6      : 1;            /*!< [13..13] DMA 6                                                            */
            uint32_t            : 1;
      __IOM uint32_t DMA_7_8    : 1;            /*!< [15..15] OR of DMA 7 and 8                                                */
            uint32_t            : 1;
      __IOM uint32_t DMA_9_10   : 1;            /*!< [17..17] OR of DMA 9 and 10                                               */
            uint32_t            : 1;
      __IOM uint32_t DMA_11     : 1;            /*!< [19..19] DMA 11                                                           */
            uint32_t            : 1;
      __IOM uint32_t DMA_12     : 1;            /*!< [21..21] DMA 12                                                           */
            uint32_t            : 1;
      __IOM uint32_t DMA_13     : 1;            /*!< [23..23] DMA 13                                                           */
            uint32_t            : 1;
      __IOM uint32_t DMA_14     : 1;            /*!< [25..25] DMA 14                                                           */
            uint32_t            : 1;
      __IOM uint32_t AUX        : 1;            /*!< [27..27] OR of UART1, SPI1 and SPI2                                       */
            uint32_t            : 1;
      __IOM uint32_t ARM        : 1;            /*!< [29..29] ARM                                                              */
            uint32_t            : 1;
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_ICFGR28_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR32;                /*!< (@ 0x00000020) Interrupt Configuration 128 - 143                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [1..1] HDMI CEC                                                           */
            uint32_t            : 1;
      __IOM uint32_t HVS        : 1;            /*!< [3..3] HVS                                                                */
            uint32_t            : 1;
      __IOM uint32_t RPIVID     : 1;            /*!< [5..5] RPIVID                                                             */
            uint32_t            : 1;
      __IOM uint32_t SDC        : 1;            /*!< [7..7] SDC                                                                */
            uint32_t            : 1;
      __IOM uint32_t DSI_0      : 1;            /*!< [9..9] DSI 0                                                              */
            uint32_t            : 1;
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [11..11] Pixel Valve 2                                                    */
            uint32_t            : 1;
      __IOM uint32_t CAMERA_0   : 1;            /*!< [13..13] Camera 0                                                         */
            uint32_t            : 1;
      __IOM uint32_t CAMERA_1   : 1;            /*!< [15..15] Camera 1                                                         */
            uint32_t            : 1;
      __IOM uint32_t HDMI_0     : 1;            /*!< [17..17] HDMI 0                                                           */
            uint32_t            : 1;
      __IOM uint32_t HDMI_1     : 1;            /*!< [19..19] HDMI 1                                                           */
            uint32_t            : 1;
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [21..21] Pixel Valve 3                                                    */
            uint32_t            : 1;
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [23..23] SPI/BSC Slave                                                    */
            uint32_t            : 1;
      __IOM uint32_t DSI_1      : 1;            /*!< [25..25] DSI 1                                                            */
            uint32_t            : 1;
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [27..27] Pixel Valve 0                                                    */
            uint32_t            : 1;
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [29..29] OR of Pixel Valve 1 and 2                                        */
            uint32_t            : 1;
      __IOM uint32_t CPR        : 1;            /*!< [31..31] CPR                                                              */
    } GICD_ICFGR32_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR36;                /*!< (@ 0x00000024) Interrupt Configuration 144 - 159                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t SMI        : 1;            /*!< [1..1] SMI                                                                */
            uint32_t            : 1;
      __IOM uint32_t GPIO_0     : 1;            /*!< [3..3] GPIO 0                                                             */
            uint32_t            : 1;
      __IOM uint32_t GPIO_1     : 1;            /*!< [5..5] GPIO 1                                                             */
            uint32_t            : 1;
      __IOM uint32_t GPIO_2     : 1;            /*!< [7..7] GPIO 2                                                             */
            uint32_t            : 1;
      __IOM uint32_t GPIO_3     : 1;            /*!< [9..9] GPIO 3                                                             */
            uint32_t            : 1;
      __IOM uint32_t I2C        : 1;            /*!< [11..11] OR of all I2C                                                    */
            uint32_t            : 1;
      __IOM uint32_t SPI        : 1;            /*!< [13..13] OR of all SPI                                                    */
            uint32_t            : 1;
      __IOM uint32_t PCM_I2S    : 1;            /*!< [15..15] PCM/I2S                                                          */
            uint32_t            : 1;
      __IOM uint32_t SDHOST     : 1;            /*!< [17..17] SDHOST                                                           */
            uint32_t            : 1;
      __IOM uint32_t UART       : 1;            /*!< [19..19] OR of all PL011 UARTs                                            */
            uint32_t            : 1;
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [21..21] OR of all ETH_PCIe L2                                            */
            uint32_t            : 1;
      __IOM uint32_t VEC        : 1;            /*!< [23..23] VEC                                                              */
            uint32_t            : 1;
      __IOM uint32_t CPG        : 1;            /*!< [25..25] CPG                                                              */
            uint32_t            : 1;
      __IOM uint32_t RNG        : 1;            /*!< [27..27] RNG                                                              */
            uint32_t            : 1;
      __IOM uint32_t EMMC       : 1;            /*!< [29..29] OR of EMMC and EMMC2                                             */
            uint32_t            : 1;
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_ICFGR36_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR40;                /*!< (@ 0x00000028) Interrupt Configuration 160 - 175                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT160     : 1;            /*!< [1..1] Interrupt 160                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT161     : 1;            /*!< [3..3] Interrupt 161                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT162     : 1;            /*!< [5..5] Interrupt 162                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT163     : 1;            /*!< [7..7] Interrupt 163                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT164     : 1;            /*!< [9..9] Interrupt 164                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT165     : 1;            /*!< [11..11] Interrupt 165                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT166     : 1;            /*!< [13..13] Interrupt 166                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT167     : 1;            /*!< [15..15] Interrupt 167                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT168     : 1;            /*!< [17..17] Interrupt 168                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT169     : 1;            /*!< [19..19] Interrupt 169                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT170     : 1;            /*!< [21..21] Interrupt 170                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT171     : 1;            /*!< [23..23] Interrupt 171                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT172     : 1;            /*!< [25..25] Interrupt 172                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT173     : 1;            /*!< [27..27] Interrupt 173                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT174     : 1;            /*!< [29..29] Interrupt 174                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT175     : 1;            /*!< [31..31] Interrupt 175                                                    */
    } GICD_ICFGR40_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR44;                /*!< (@ 0x0000002C) Interrupt Configuration 176 - 191                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT176     : 1;            /*!< [1..1] Interrupt 176                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT177     : 1;            /*!< [3..3] Interrupt 177                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT178     : 1;            /*!< [5..5] Interrupt 178                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT179     : 1;            /*!< [7..7] Interrupt 179                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT180     : 1;            /*!< [9..9] Interrupt 180                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT181     : 1;            /*!< [11..11] Interrupt 181                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT182     : 1;            /*!< [13..13] Interrupt 182                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT183     : 1;            /*!< [15..15] Interrupt 183                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT184     : 1;            /*!< [17..17] Interrupt 184                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT185     : 1;            /*!< [19..19] Interrupt 185                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT186     : 1;            /*!< [21..21] Interrupt 186                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT187     : 1;            /*!< [23..23] Interrupt 187                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT188     : 1;            /*!< [25..25] Interrupt 188                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT189     : 1;            /*!< [27..27] Interrupt 189                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT190     : 1;            /*!< [29..29] Interrupt 190                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT191     : 1;            /*!< [31..31] Interrupt 191                                                    */
    } GICD_ICFGR44_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR48;                /*!< (@ 0x00000030) Interrupt Configuration 192 - 207                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT192     : 1;            /*!< [1..1] Interrupt 192                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT193     : 1;            /*!< [3..3] Interrupt 193                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT194     : 1;            /*!< [5..5] Interrupt 194                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT195     : 1;            /*!< [7..7] Interrupt 195                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT196     : 1;            /*!< [9..9] Interrupt 196                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT197     : 1;            /*!< [11..11] Interrupt 197                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT198     : 1;            /*!< [13..13] Interrupt 198                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT199     : 1;            /*!< [15..15] Interrupt 199                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT200     : 1;            /*!< [17..17] Interrupt 200                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT201     : 1;            /*!< [19..19] Interrupt 201                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT202     : 1;            /*!< [21..21] Interrupt 202                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT203     : 1;            /*!< [23..23] Interrupt 203                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT204     : 1;            /*!< [25..25] Interrupt 204                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT205     : 1;            /*!< [27..27] Interrupt 205                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT206     : 1;            /*!< [29..29] Interrupt 206                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT207     : 1;            /*!< [31..31] Interrupt 207                                                    */
    } GICD_ICFGR48_b;
  } ;
  
  union {
    __IOM uint32_t GICD_ICFGR52;                /*!< (@ 0x00000034) Interrupt Configuration 208 - 223                          */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t INT208     : 1;            /*!< [1..1] Interrupt 208                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT209     : 1;            /*!< [3..3] Interrupt 209                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT210     : 1;            /*!< [5..5] Interrupt 210                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT211     : 1;            /*!< [7..7] Interrupt 211                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT212     : 1;            /*!< [9..9] Interrupt 212                                                      */
            uint32_t            : 1;
      __IOM uint32_t INT213     : 1;            /*!< [11..11] Interrupt 213                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT214     : 1;            /*!< [13..13] Interrupt 214                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT215     : 1;            /*!< [15..15] Interrupt 215                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT216     : 1;            /*!< [17..17] Interrupt 216                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT217     : 1;            /*!< [19..19] Interrupt 217                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT218     : 1;            /*!< [21..21] Interrupt 218                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT219     : 1;            /*!< [23..23] Interrupt 219                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT220     : 1;            /*!< [25..25] Interrupt 220                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT221     : 1;            /*!< [27..27] Interrupt 221                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT222     : 1;            /*!< [29..29] Interrupt 222                                                    */
            uint32_t            : 1;
      __IOM uint32_t INT223     : 1;            /*!< [31..31] Interrupt 223                                                    */
    } GICD_ICFGR52_b;
  } ;
} GIC_DIST_GICD_ICFGR_Type;                     /*!< Size = 56 (0x38)                                                          */


/**
  * @brief USB_OTG_HOST_HOST_CHANNEL [HOST_CHANNEL] (Host channel [0..11])
  */
typedef struct {
  union {
    __IOM uint32_t HCCHAR;                      /*!< (@ 0x00000000) Characteristics register                                   */
    
    struct {
      __IOM uint32_t MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32_t            : 1;
      __IOM uint32_t LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32_t EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32_t MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32_t DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32_t CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32_t CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } HCCHAR_b;
  } ;
  
  union {
    __IOM uint32_t HCSPLT;                      /*!< (@ 0x00000004) Split control register                                     */
    
    struct {
      __IOM uint32_t PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32_t HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32_t XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32_t COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32_t            : 14;
      __IOM uint32_t SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } HCSPLT_b;
  } ;
  
  union {
    __IOM uint32_t HCINT;                       /*!< (@ 0x00000008) Interrupt register                                         */
    
    struct {
      __IOM uint32_t XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32_t CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32_t AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32_t TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32_t BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32_t FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32_t DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32_t            : 21;
    } HCINT_b;
  } ;
  
  union {
    __IOM uint32_t HCINTMSK;                    /*!< (@ 0x0000000C) Interrupt mask                                             */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32_t CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32_t AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32_t STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32_t NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32_t ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32_t TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32_t BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32_t FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32_t DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32_t            : 21;
    } HCINTMSK_b;
  } ;
  
  union {
    __IOM uint32_t HCTSIZ;                      /*!< (@ 0x00000010) Transfer size                                              */
    
    struct {
      __IOM uint32_t XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32_t PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32_t            : 1;
    } HCTSIZ_b;
  } ;
  
  union {
    __IOM uint32_t HCDMA;                       /*!< (@ 0x00000014) DMA address                                                */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } HCDMA_b;
  } ;
  __IM  uint32_t  RESERVED[2];
} USB_OTG_HOST_HOST_CHANNEL_Type;               /*!< Size = 32 (0x20)                                                          */


/**
  * @brief USB_OTG_DEVICE_IN_ENDPOINT [IN_ENDPOINT] (IN Endpoint [0..11])
  */
typedef struct {
  union {
    __IOM uint32_t DIEPCTL0;                    /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IOM uint32_t MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32_t            : 4;
      __IOM uint32_t USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32_t EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32_t NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32_t EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32_t            : 1;
      __IOM uint32_t Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32_t SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32_t SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32_t EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32_t EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } DIEPCTL0_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIEPINT;                     /*!< (@ 0x00000008) Interrupt                                                  */
    
    struct {
      __IOM uint32_t XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32_t EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32_t            : 1;
      __IOM uint32_t TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32_t ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32_t            : 1;
      __IOM uint32_t INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32_t TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32_t BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32_t            : 1;
      __IOM uint32_t PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32_t BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32_t            : 18;
    } DIEPINT_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t DIEPTSIZ;                    /*!< (@ 0x00000010) Transfer size                                              */
    
    struct {
      __IOM uint32_t XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32_t            : 12;
      __IOM uint32_t PKTCNT     : 2;            /*!< [20..19] Packet count                                                     */
            uint32_t            : 11;
    } DIEPTSIZ_b;
  } ;
  
  union {
    __IOM uint32_t DIEPDMA;                     /*!< (@ 0x00000014) DMA address                                                */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } DIEPDMA_b;
  } ;
  
  union {
    __IM  uint32_t DTXFSTS;                     /*!< (@ 0x00000018) Transmit FIFO status                                       */
    
    struct {
      __IM  uint32_t INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32_t            : 16;
    } DTXFSTS_b;
  } ;
  __IM  uint32_t  RESERVED2;
} USB_OTG_DEVICE_IN_ENDPOINT_Type;              /*!< Size = 32 (0x20)                                                          */


/**
  * @brief USB_OTG_DEVICE_OUT_ENDPOINT [OUT_ENDPOINT] (OUT Endpoint [0..11])
  */
typedef struct {
  union {
    __IOM uint32_t DOEPCTL;                     /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IM  uint32_t MPSIZ      : 2;            /*!< [1..0] Maximum packet size                                                */
            uint32_t            : 13;
      __IM  uint32_t USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
            uint32_t            : 1;
      __IM  uint32_t NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IM  uint32_t EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32_t SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32_t Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
            uint32_t            : 2;
      __IM  uint32_t EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __OM  uint32_t EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } DOEPCTL_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DOEPINT;                     /*!< (@ 0x00000008) Interrupt                                                  */
    
    struct {
      __IOM uint32_t XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32_t EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32_t            : 1;
      __IOM uint32_t STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32_t OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32_t            : 1;
      __IOM uint32_t B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32_t            : 17;
    } DOEPINT_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t DOEPTSIZ;                    /*!< (@ 0x00000010) Transfer size                                              */
    
    struct {
      __IOM uint32_t XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32_t            : 12;
      __IOM uint32_t PKTCNT     : 1;            /*!< [19..19] Packet count                                                     */
            uint32_t            : 9;
      __IOM uint32_t STUPCNT    : 2;            /*!< [30..29] SETUP packet count                                               */
            uint32_t            : 1;
    } DOEPTSIZ_b;
  } ;
  
  union {
    __IOM uint32_t DOEPDMA;                     /*!< (@ 0x00000014) DMA address                                                */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } DOEPDMA_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
} USB_OTG_DEVICE_OUT_ENDPOINT_Type;             /*!< Size = 32 (0x20)                                                          */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         VCMAILBOX                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Mailboxes for talking to/from VideoCore (VCMAILBOX)
  */

typedef struct {                                /*!< (@ 0xFE00B880) VCMAILBOX Structure                                        */
  __IM  uint32_t  READ;                         /*!< (@ 0x00000000) Read messages from the VideoCore                           */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  PEEK0;                        /*!< (@ 0x00000010) PEEK0                                                      */
  __IOM uint32_t  SENDER0;                      /*!< (@ 0x00000014) SENDER0                                                    */
  
  union {
    __IOM uint32_t STATUS0;                     /*!< (@ 0x00000018) STATUS0                                                    */
    
    struct {
            uint32_t            : 30;
      __IM  uint32_t EMPTY      : 1;            /*!< [30..30] EMPTY                                                            */
      __IM  uint32_t FULL       : 1;            /*!< [31..31] FULL                                                             */
    } STATUS0_b;
  } ;
  
  union {
    __IOM uint32_t CONFIG0;                     /*!< (@ 0x0000001C) CONFIG0                                                    */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Enable the interrupt when data is available                        */
            uint32_t            : 31;
    } CONFIG0_b;
  } ;
  __OM  uint32_t  WRITE;                        /*!< (@ 0x00000020) Write messages to the VideoCore                            */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  PEEK1;                        /*!< (@ 0x00000030) PEEK1                                                      */
  __IOM uint32_t  SENDER1;                      /*!< (@ 0x00000034) SENDER1                                                    */
  __IOM uint32_t  STATUS1;                      /*!< (@ 0x00000038) STATUS1                                                    */
  __IOM uint32_t  CONFIG1;                      /*!< (@ 0x0000003C) CONFIG1                                                    */
} VCMAILBOX_Type;                               /*!< Size = 64 (0x40)                                                          */



/* =========================================================================================================================== */
/* ================                                          CM_PCM                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Clock Manager (CM_PCM)
  */

typedef struct {                                /*!< (@ 0xFE101098) CM_PCM Structure                                           */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Control / Status                                           */
    
    struct {
      __IOM uint32_t SRC        : 4;            /*!< [3..0] Clock source                                                       */
      __IOM uint32_t ENAB       : 1;            /*!< [4..4] Enable the clock generator. (Switch SRC first.)                    */
      __IOM uint32_t KILL       : 1;            /*!< [5..5] Stop and reset the generator                                       */
            uint32_t            : 1;
      __IM  uint32_t BUSY       : 1;            /*!< [7..7] Indicates the clock generator is running                           */
      __IOM uint32_t FLIP       : 1;            /*!< [8..8] Generate an edge on output. (For testing)                          */
      __IOM uint32_t MASH       : 2;            /*!< [10..9] MASH control, stage count                                         */
            uint32_t            : 13;
      __OM  uint32_t PASSWD     : 8;            /*!< [31..24] Password. Always 0x5a                                            */
    } CS_b;
  } ;
  
  union {
    __IOM uint32_t DIV;                         /*!< (@ 0x00000004) Clock divisor                                              */
    
    struct {
      __IOM uint32_t DIVF       : 12;           /*!< [11..0] Fractional part of divisor                                        */
      __IOM uint32_t DIVI       : 12;           /*!< [23..12] Integer part of divisor                                          */
      __OM  uint32_t PASSWD     : 8;            /*!< [31..24] Password. Always 0x5a                                            */
    } DIV_b;
  } ;
} CM_PCM_Type;                                  /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Pin level and mux control (GPIO)
  */

typedef struct {                                /*!< (@ 0xFE200000) GPIO Structure                                             */
  
  union {
    __IOM uint32_t GPFSEL0;                     /*!< (@ 0x00000000) GPIO Function Select 0                                     */
    
    struct {
      __IOM uint32_t FSEL0      : 3;            /*!< [2..0] Function Select 0                                                  */
      __IOM uint32_t FSEL1      : 3;            /*!< [5..3] Function Select 1                                                  */
      __IOM uint32_t FSEL2      : 3;            /*!< [8..6] Function Select 2                                                  */
      __IOM uint32_t FSEL3      : 3;            /*!< [11..9] Function Select 3                                                 */
      __IOM uint32_t FSEL4      : 3;            /*!< [14..12] Function Select 4                                                */
      __IOM uint32_t FSEL5      : 3;            /*!< [17..15] Function Select 5                                                */
      __IOM uint32_t FSEL6      : 3;            /*!< [20..18] Function Select 6                                                */
      __IOM uint32_t FSEL7      : 3;            /*!< [23..21] Function Select 7                                                */
      __IOM uint32_t FSEL8      : 3;            /*!< [26..24] Function Select 8                                                */
      __IOM uint32_t FSEL9      : 3;            /*!< [29..27] Function Select 9                                                */
            uint32_t            : 2;
    } GPFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL1;                     /*!< (@ 0x00000004) GPIO Function Select 1                                     */
    
    struct {
      __IOM uint32_t FSEL10     : 3;            /*!< [2..0] Function Select 10                                                 */
      __IOM uint32_t FSEL11     : 3;            /*!< [5..3] Function Select 11                                                 */
      __IOM uint32_t FSEL12     : 3;            /*!< [8..6] Function Select 12                                                 */
      __IOM uint32_t FSEL13     : 3;            /*!< [11..9] Function Select 13                                                */
      __IOM uint32_t FSEL14     : 3;            /*!< [14..12] Function Select 14                                               */
      __IOM uint32_t FSEL15     : 3;            /*!< [17..15] Function Select 15                                               */
      __IOM uint32_t FSEL16     : 3;            /*!< [20..18] Function Select 16                                               */
      __IOM uint32_t FSEL17     : 3;            /*!< [23..21] Function Select 17                                               */
      __IOM uint32_t FSEL18     : 3;            /*!< [26..24] Function Select 18                                               */
      __IOM uint32_t FSEL19     : 3;            /*!< [29..27] Function Select 19                                               */
            uint32_t            : 2;
    } GPFSEL1_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL2;                     /*!< (@ 0x00000008) GPIO Function Select 2                                     */
    
    struct {
      __IOM uint32_t FSEL20     : 3;            /*!< [2..0] Function Select 20                                                 */
      __IOM uint32_t FSEL21     : 3;            /*!< [5..3] Function Select 21                                                 */
      __IOM uint32_t FSEL22     : 3;            /*!< [8..6] Function Select 22                                                 */
      __IOM uint32_t FSEL23     : 3;            /*!< [11..9] Function Select 23                                                */
      __IOM uint32_t FSEL24     : 3;            /*!< [14..12] Function Select 24                                               */
      __IOM uint32_t FSEL25     : 3;            /*!< [17..15] Function Select 25                                               */
      __IOM uint32_t FSEL26     : 3;            /*!< [20..18] Function Select 26                                               */
      __IOM uint32_t FSEL27     : 3;            /*!< [23..21] Function Select 27                                               */
      __IOM uint32_t FSEL28     : 3;            /*!< [26..24] Function Select 28                                               */
      __IOM uint32_t FSEL29     : 3;            /*!< [29..27] Function Select 29                                               */
            uint32_t            : 2;
    } GPFSEL2_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL3;                     /*!< (@ 0x0000000C) GPIO Function Select 3                                     */
    
    struct {
      __IOM uint32_t FSEL30     : 3;            /*!< [2..0] Function Select 30                                                 */
      __IOM uint32_t FSEL31     : 3;            /*!< [5..3] Function Select 31                                                 */
      __IOM uint32_t FSEL32     : 3;            /*!< [8..6] Function Select 32                                                 */
      __IOM uint32_t FSEL33     : 3;            /*!< [11..9] Function Select 33                                                */
      __IOM uint32_t FSEL34     : 3;            /*!< [14..12] Function Select 34                                               */
      __IOM uint32_t FSEL35     : 3;            /*!< [17..15] Function Select 35                                               */
      __IOM uint32_t FSEL36     : 3;            /*!< [20..18] Function Select 36                                               */
      __IOM uint32_t FSEL37     : 3;            /*!< [23..21] Function Select 37                                               */
      __IOM uint32_t FSEL38     : 3;            /*!< [26..24] Function Select 38                                               */
      __IOM uint32_t FSEL39     : 3;            /*!< [29..27] Function Select 39                                               */
            uint32_t            : 2;
    } GPFSEL3_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL4;                     /*!< (@ 0x00000010) GPIO Function Select 4                                     */
    
    struct {
      __IOM uint32_t FSEL40     : 3;            /*!< [2..0] Function Select 40                                                 */
      __IOM uint32_t FSEL41     : 3;            /*!< [5..3] Function Select 41                                                 */
      __IOM uint32_t FSEL42     : 3;            /*!< [8..6] Function Select 42                                                 */
      __IOM uint32_t FSEL43     : 3;            /*!< [11..9] Function Select 43                                                */
      __IOM uint32_t FSEL44     : 3;            /*!< [14..12] Function Select 44                                               */
      __IOM uint32_t FSEL45     : 3;            /*!< [17..15] Function Select 45                                               */
      __IOM uint32_t FSEL46     : 3;            /*!< [20..18] Function Select 46                                               */
      __IOM uint32_t FSEL47     : 3;            /*!< [23..21] Function Select 47                                               */
      __IOM uint32_t FSEL48     : 3;            /*!< [26..24] Function Select 48                                               */
      __IOM uint32_t FSEL49     : 3;            /*!< [29..27] Function Select 49                                               */
            uint32_t            : 2;
    } GPFSEL4_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL5;                     /*!< (@ 0x00000014) GPIO Function Select 5                                     */
    
    struct {
      __IOM uint32_t FSEL50     : 3;            /*!< [2..0] Function Select 50                                                 */
      __IOM uint32_t FSEL51     : 3;            /*!< [5..3] Function Select 51                                                 */
      __IOM uint32_t FSEL52     : 3;            /*!< [8..6] Function Select 52                                                 */
      __IOM uint32_t FSEL53     : 3;            /*!< [11..9] Function Select 53                                                */
      __IOM uint32_t FSEL54     : 3;            /*!< [14..12] Function Select 54                                               */
      __IOM uint32_t FSEL55     : 3;            /*!< [17..15] Function Select 55                                               */
      __IOM uint32_t FSEL56     : 3;            /*!< [20..18] Function Select 56                                               */
      __IOM uint32_t FSEL57     : 3;            /*!< [23..21] Function Select 57                                               */
            uint32_t            : 8;
    } GPFSEL5_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __OM  uint32_t GPSET0;                      /*!< (@ 0x0000001C) GPIO Pin Output Set 0                                      */
    
    struct {
      __OM  uint32_t SET0       : 1;            /*!< [0..0] Set 0                                                              */
      __OM  uint32_t SET1       : 1;            /*!< [1..1] Set 1                                                              */
      __OM  uint32_t SET2       : 1;            /*!< [2..2] Set 2                                                              */
      __OM  uint32_t SET3       : 1;            /*!< [3..3] Set 3                                                              */
      __OM  uint32_t SET4       : 1;            /*!< [4..4] Set 4                                                              */
      __OM  uint32_t SET5       : 1;            /*!< [5..5] Set 5                                                              */
      __OM  uint32_t SET6       : 1;            /*!< [6..6] Set 6                                                              */
      __OM  uint32_t SET7       : 1;            /*!< [7..7] Set 7                                                              */
      __OM  uint32_t SET8       : 1;            /*!< [8..8] Set 8                                                              */
      __OM  uint32_t SET9       : 1;            /*!< [9..9] Set 9                                                              */
      __OM  uint32_t SET10      : 1;            /*!< [10..10] Set 10                                                           */
      __OM  uint32_t SET11      : 1;            /*!< [11..11] Set 11                                                           */
      __OM  uint32_t SET12      : 1;            /*!< [12..12] Set 12                                                           */
      __OM  uint32_t SET13      : 1;            /*!< [13..13] Set 13                                                           */
      __OM  uint32_t SET14      : 1;            /*!< [14..14] Set 14                                                           */
      __OM  uint32_t SET15      : 1;            /*!< [15..15] Set 15                                                           */
      __OM  uint32_t SET16      : 1;            /*!< [16..16] Set 16                                                           */
      __OM  uint32_t SET17      : 1;            /*!< [17..17] Set 17                                                           */
      __OM  uint32_t SET18      : 1;            /*!< [18..18] Set 18                                                           */
      __OM  uint32_t SET19      : 1;            /*!< [19..19] Set 19                                                           */
      __OM  uint32_t SET20      : 1;            /*!< [20..20] Set 20                                                           */
      __OM  uint32_t SET21      : 1;            /*!< [21..21] Set 21                                                           */
      __OM  uint32_t SET22      : 1;            /*!< [22..22] Set 22                                                           */
      __OM  uint32_t SET23      : 1;            /*!< [23..23] Set 23                                                           */
      __OM  uint32_t SET24      : 1;            /*!< [24..24] Set 24                                                           */
      __OM  uint32_t SET25      : 1;            /*!< [25..25] Set 25                                                           */
      __OM  uint32_t SET26      : 1;            /*!< [26..26] Set 26                                                           */
      __OM  uint32_t SET27      : 1;            /*!< [27..27] Set 27                                                           */
      __OM  uint32_t SET28      : 1;            /*!< [28..28] Set 28                                                           */
      __OM  uint32_t SET29      : 1;            /*!< [29..29] Set 29                                                           */
      __OM  uint32_t SET30      : 1;            /*!< [30..30] Set 30                                                           */
      __OM  uint32_t SET31      : 1;            /*!< [31..31] Set 31                                                           */
    } GPSET0_b;
  } ;
  
  union {
    __OM  uint32_t GPSET1;                      /*!< (@ 0x00000020) GPIO Pin Output Set 1                                      */
    
    struct {
      __OM  uint32_t SET32      : 1;            /*!< [0..0] Set 32                                                             */
      __OM  uint32_t SET33      : 1;            /*!< [1..1] Set 33                                                             */
      __OM  uint32_t SET34      : 1;            /*!< [2..2] Set 34                                                             */
      __OM  uint32_t SET35      : 1;            /*!< [3..3] Set 35                                                             */
      __OM  uint32_t SET36      : 1;            /*!< [4..4] Set 36                                                             */
      __OM  uint32_t SET37      : 1;            /*!< [5..5] Set 37                                                             */
      __OM  uint32_t SET38      : 1;            /*!< [6..6] Set 38                                                             */
      __OM  uint32_t SET39      : 1;            /*!< [7..7] Set 39                                                             */
      __OM  uint32_t SET40      : 1;            /*!< [8..8] Set 40                                                             */
      __OM  uint32_t SET41      : 1;            /*!< [9..9] Set 41                                                             */
      __OM  uint32_t SET42      : 1;            /*!< [10..10] Set 42                                                           */
      __OM  uint32_t SET43      : 1;            /*!< [11..11] Set 43                                                           */
      __OM  uint32_t SET44      : 1;            /*!< [12..12] Set 44                                                           */
      __OM  uint32_t SET45      : 1;            /*!< [13..13] Set 45                                                           */
      __OM  uint32_t SET46      : 1;            /*!< [14..14] Set 46                                                           */
      __OM  uint32_t SET47      : 1;            /*!< [15..15] Set 47                                                           */
      __OM  uint32_t SET48      : 1;            /*!< [16..16] Set 48                                                           */
      __OM  uint32_t SET49      : 1;            /*!< [17..17] Set 49                                                           */
      __OM  uint32_t SET50      : 1;            /*!< [18..18] Set 50                                                           */
      __OM  uint32_t SET51      : 1;            /*!< [19..19] Set 51                                                           */
      __OM  uint32_t SET52      : 1;            /*!< [20..20] Set 52                                                           */
      __OM  uint32_t SET53      : 1;            /*!< [21..21] Set 53                                                           */
      __OM  uint32_t SET54      : 1;            /*!< [22..22] Set 54                                                           */
      __OM  uint32_t SET55      : 1;            /*!< [23..23] Set 55                                                           */
      __OM  uint32_t SET56      : 1;            /*!< [24..24] Set 56                                                           */
      __OM  uint32_t SET57      : 1;            /*!< [25..25] Set 57                                                           */
            uint32_t            : 6;
    } GPSET1_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __OM  uint32_t GPCLR0;                      /*!< (@ 0x00000028) GPIO Pin Output Clear 0                                    */
    
    struct {
      __OM  uint32_t CLR0       : 1;            /*!< [0..0] Clear 0                                                            */
      __OM  uint32_t CLR1       : 1;            /*!< [1..1] Clear 1                                                            */
      __OM  uint32_t CLR2       : 1;            /*!< [2..2] Clear 2                                                            */
      __OM  uint32_t CLR3       : 1;            /*!< [3..3] Clear 3                                                            */
      __OM  uint32_t CLR4       : 1;            /*!< [4..4] Clear 4                                                            */
      __OM  uint32_t CLR5       : 1;            /*!< [5..5] Clear 5                                                            */
      __OM  uint32_t CLR6       : 1;            /*!< [6..6] Clear 6                                                            */
      __OM  uint32_t CLR7       : 1;            /*!< [7..7] Clear 7                                                            */
      __OM  uint32_t CLR8       : 1;            /*!< [8..8] Clear 8                                                            */
      __OM  uint32_t CLR9       : 1;            /*!< [9..9] Clear 9                                                            */
      __OM  uint32_t CLR10      : 1;            /*!< [10..10] Clear 10                                                         */
      __OM  uint32_t CLR11      : 1;            /*!< [11..11] Clear 11                                                         */
      __OM  uint32_t CLR12      : 1;            /*!< [12..12] Clear 12                                                         */
      __OM  uint32_t CLR13      : 1;            /*!< [13..13] Clear 13                                                         */
      __OM  uint32_t CLR14      : 1;            /*!< [14..14] Clear 14                                                         */
      __OM  uint32_t CLR15      : 1;            /*!< [15..15] Clear 15                                                         */
      __OM  uint32_t CLR16      : 1;            /*!< [16..16] Clear 16                                                         */
      __OM  uint32_t CLR17      : 1;            /*!< [17..17] Clear 17                                                         */
      __OM  uint32_t CLR18      : 1;            /*!< [18..18] Clear 18                                                         */
      __OM  uint32_t CLR19      : 1;            /*!< [19..19] Clear 19                                                         */
      __OM  uint32_t CLR20      : 1;            /*!< [20..20] Clear 20                                                         */
      __OM  uint32_t CLR21      : 1;            /*!< [21..21] Clear 21                                                         */
      __OM  uint32_t CLR22      : 1;            /*!< [22..22] Clear 22                                                         */
      __OM  uint32_t CLR23      : 1;            /*!< [23..23] Clear 23                                                         */
      __OM  uint32_t CLR24      : 1;            /*!< [24..24] Clear 24                                                         */
      __OM  uint32_t CLR25      : 1;            /*!< [25..25] Clear 25                                                         */
      __OM  uint32_t CLR26      : 1;            /*!< [26..26] Clear 26                                                         */
      __OM  uint32_t CLR27      : 1;            /*!< [27..27] Clear 27                                                         */
      __OM  uint32_t CLR28      : 1;            /*!< [28..28] Clear 28                                                         */
      __OM  uint32_t CLR29      : 1;            /*!< [29..29] Clear 29                                                         */
      __OM  uint32_t CLR30      : 1;            /*!< [30..30] Clear 30                                                         */
      __OM  uint32_t CLR31      : 1;            /*!< [31..31] Clear 31                                                         */
    } GPCLR0_b;
  } ;
  
  union {
    __OM  uint32_t GPCLR1;                      /*!< (@ 0x0000002C) GPIO Pin Output Clear 1                                    */
    
    struct {
      __OM  uint32_t CLR32      : 1;            /*!< [0..0] Clear 32                                                           */
      __OM  uint32_t CLR33      : 1;            /*!< [1..1] Clear 33                                                           */
      __OM  uint32_t CLR34      : 1;            /*!< [2..2] Clear 34                                                           */
      __OM  uint32_t CLR35      : 1;            /*!< [3..3] Clear 35                                                           */
      __OM  uint32_t CLR36      : 1;            /*!< [4..4] Clear 36                                                           */
      __OM  uint32_t CLR37      : 1;            /*!< [5..5] Clear 37                                                           */
      __OM  uint32_t CLR38      : 1;            /*!< [6..6] Clear 38                                                           */
      __OM  uint32_t CLR39      : 1;            /*!< [7..7] Clear 39                                                           */
      __OM  uint32_t CLR40      : 1;            /*!< [8..8] Clear 40                                                           */
      __OM  uint32_t CLR41      : 1;            /*!< [9..9] Clear 41                                                           */
      __OM  uint32_t CLR42      : 1;            /*!< [10..10] Clear 42                                                         */
      __OM  uint32_t CLR43      : 1;            /*!< [11..11] Clear 43                                                         */
      __OM  uint32_t CLR44      : 1;            /*!< [12..12] Clear 44                                                         */
      __OM  uint32_t CLR45      : 1;            /*!< [13..13] Clear 45                                                         */
      __OM  uint32_t CLR46      : 1;            /*!< [14..14] Clear 46                                                         */
      __OM  uint32_t CLR47      : 1;            /*!< [15..15] Clear 47                                                         */
      __OM  uint32_t CLR48      : 1;            /*!< [16..16] Clear 48                                                         */
      __OM  uint32_t CLR49      : 1;            /*!< [17..17] Clear 49                                                         */
      __OM  uint32_t CLR50      : 1;            /*!< [18..18] Clear 50                                                         */
      __OM  uint32_t CLR51      : 1;            /*!< [19..19] Clear 51                                                         */
      __OM  uint32_t CLR52      : 1;            /*!< [20..20] Clear 52                                                         */
      __OM  uint32_t CLR53      : 1;            /*!< [21..21] Clear 53                                                         */
      __OM  uint32_t CLR54      : 1;            /*!< [22..22] Clear 54                                                         */
      __OM  uint32_t CLR55      : 1;            /*!< [23..23] Clear 55                                                         */
      __OM  uint32_t CLR56      : 1;            /*!< [24..24] Clear 56                                                         */
      __OM  uint32_t CLR57      : 1;            /*!< [25..25] Clear 57                                                         */
            uint32_t            : 6;
    } GPCLR1_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IM  uint32_t GPLEV0;                      /*!< (@ 0x00000034) GPIO Pin Level 0                                           */
    
    struct {
      __IM  uint32_t LEV0       : 1;            /*!< [0..0] Level 0                                                            */
      __IM  uint32_t LEV1       : 1;            /*!< [1..1] Level 1                                                            */
      __IM  uint32_t LEV2       : 1;            /*!< [2..2] Level 2                                                            */
      __IM  uint32_t LEV3       : 1;            /*!< [3..3] Level 3                                                            */
      __IM  uint32_t LEV4       : 1;            /*!< [4..4] Level 4                                                            */
      __IM  uint32_t LEV5       : 1;            /*!< [5..5] Level 5                                                            */
      __IM  uint32_t LEV6       : 1;            /*!< [6..6] Level 6                                                            */
      __IM  uint32_t LEV7       : 1;            /*!< [7..7] Level 7                                                            */
      __IM  uint32_t LEV8       : 1;            /*!< [8..8] Level 8                                                            */
      __IM  uint32_t LEV9       : 1;            /*!< [9..9] Level 9                                                            */
      __IM  uint32_t LEV10      : 1;            /*!< [10..10] Level 10                                                         */
      __IM  uint32_t LEV11      : 1;            /*!< [11..11] Level 11                                                         */
      __IM  uint32_t LEV12      : 1;            /*!< [12..12] Level 12                                                         */
      __IM  uint32_t LEV13      : 1;            /*!< [13..13] Level 13                                                         */
      __IM  uint32_t LEV14      : 1;            /*!< [14..14] Level 14                                                         */
      __IM  uint32_t LEV15      : 1;            /*!< [15..15] Level 15                                                         */
      __IM  uint32_t LEV16      : 1;            /*!< [16..16] Level 16                                                         */
      __IM  uint32_t LEV17      : 1;            /*!< [17..17] Level 17                                                         */
      __IM  uint32_t LEV18      : 1;            /*!< [18..18] Level 18                                                         */
      __IM  uint32_t LEV19      : 1;            /*!< [19..19] Level 19                                                         */
      __IM  uint32_t LEV20      : 1;            /*!< [20..20] Level 20                                                         */
      __IM  uint32_t LEV21      : 1;            /*!< [21..21] Level 21                                                         */
      __IM  uint32_t LEV22      : 1;            /*!< [22..22] Level 22                                                         */
      __IM  uint32_t LEV23      : 1;            /*!< [23..23] Level 23                                                         */
      __IM  uint32_t LEV24      : 1;            /*!< [24..24] Level 24                                                         */
      __IM  uint32_t LEV25      : 1;            /*!< [25..25] Level 25                                                         */
      __IM  uint32_t LEV26      : 1;            /*!< [26..26] Level 26                                                         */
      __IM  uint32_t LEV27      : 1;            /*!< [27..27] Level 27                                                         */
      __IM  uint32_t LEV28      : 1;            /*!< [28..28] Level 28                                                         */
      __IM  uint32_t LEV29      : 1;            /*!< [29..29] Level 29                                                         */
      __IM  uint32_t LEV30      : 1;            /*!< [30..30] Level 30                                                         */
      __IM  uint32_t LEV31      : 1;            /*!< [31..31] Level 31                                                         */
    } GPLEV0_b;
  } ;
  
  union {
    __IM  uint32_t GPLEV1;                      /*!< (@ 0x00000038) GPIO Pin Level 1                                           */
    
    struct {
      __IM  uint32_t LEV32      : 1;            /*!< [0..0] Level 32                                                           */
      __IM  uint32_t LEV33      : 1;            /*!< [1..1] Level 33                                                           */
      __IM  uint32_t LEV34      : 1;            /*!< [2..2] Level 34                                                           */
      __IM  uint32_t LEV35      : 1;            /*!< [3..3] Level 35                                                           */
      __IM  uint32_t LEV36      : 1;            /*!< [4..4] Level 36                                                           */
      __IM  uint32_t LEV37      : 1;            /*!< [5..5] Level 37                                                           */
      __IM  uint32_t LEV38      : 1;            /*!< [6..6] Level 38                                                           */
      __IM  uint32_t LEV39      : 1;            /*!< [7..7] Level 39                                                           */
      __IM  uint32_t LEV40      : 1;            /*!< [8..8] Level 40                                                           */
      __IM  uint32_t LEV41      : 1;            /*!< [9..9] Level 41                                                           */
      __IM  uint32_t LEV42      : 1;            /*!< [10..10] Level 42                                                         */
      __IM  uint32_t LEV43      : 1;            /*!< [11..11] Level 43                                                         */
      __IM  uint32_t LEV44      : 1;            /*!< [12..12] Level 44                                                         */
      __IM  uint32_t LEV45      : 1;            /*!< [13..13] Level 45                                                         */
      __IM  uint32_t LEV46      : 1;            /*!< [14..14] Level 46                                                         */
      __IM  uint32_t LEV47      : 1;            /*!< [15..15] Level 47                                                         */
      __IM  uint32_t LEV48      : 1;            /*!< [16..16] Level 48                                                         */
      __IM  uint32_t LEV49      : 1;            /*!< [17..17] Level 49                                                         */
      __IM  uint32_t LEV50      : 1;            /*!< [18..18] Level 50                                                         */
      __IM  uint32_t LEV51      : 1;            /*!< [19..19] Level 51                                                         */
      __IM  uint32_t LEV52      : 1;            /*!< [20..20] Level 52                                                         */
      __IM  uint32_t LEV53      : 1;            /*!< [21..21] Level 53                                                         */
      __IM  uint32_t LEV54      : 1;            /*!< [22..22] Level 54                                                         */
      __IM  uint32_t LEV55      : 1;            /*!< [23..23] Level 55                                                         */
      __IM  uint32_t LEV56      : 1;            /*!< [24..24] Level 56                                                         */
      __IM  uint32_t LEV57      : 1;            /*!< [25..25] Level 57                                                         */
            uint32_t            : 6;
    } GPLEV1_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t GPEDS0;                      /*!< (@ 0x00000040) GPIO Pin Event Detect Status 0                             */
    
    struct {
      __IOM uint32_t EDS0       : 1;            /*!< [0..0] Event detected 0                                                   */
      __IOM uint32_t EDS1       : 1;            /*!< [1..1] Event detected 1                                                   */
      __IOM uint32_t EDS2       : 1;            /*!< [2..2] Event detected 2                                                   */
      __IOM uint32_t EDS3       : 1;            /*!< [3..3] Event detected 3                                                   */
      __IOM uint32_t EDS4       : 1;            /*!< [4..4] Event detected 4                                                   */
      __IOM uint32_t EDS5       : 1;            /*!< [5..5] Event detected 5                                                   */
      __IOM uint32_t EDS6       : 1;            /*!< [6..6] Event detected 6                                                   */
      __IOM uint32_t EDS7       : 1;            /*!< [7..7] Event detected 7                                                   */
      __IOM uint32_t EDS8       : 1;            /*!< [8..8] Event detected 8                                                   */
      __IOM uint32_t EDS9       : 1;            /*!< [9..9] Event detected 9                                                   */
      __IOM uint32_t EDS10      : 1;            /*!< [10..10] Event detected 10                                                */
      __IOM uint32_t EDS11      : 1;            /*!< [11..11] Event detected 11                                                */
      __IOM uint32_t EDS12      : 1;            /*!< [12..12] Event detected 12                                                */
      __IOM uint32_t EDS13      : 1;            /*!< [13..13] Event detected 13                                                */
      __IOM uint32_t EDS14      : 1;            /*!< [14..14] Event detected 14                                                */
      __IOM uint32_t EDS15      : 1;            /*!< [15..15] Event detected 15                                                */
      __IOM uint32_t EDS16      : 1;            /*!< [16..16] Event detected 16                                                */
      __IOM uint32_t EDS17      : 1;            /*!< [17..17] Event detected 17                                                */
      __IOM uint32_t EDS18      : 1;            /*!< [18..18] Event detected 18                                                */
      __IOM uint32_t EDS19      : 1;            /*!< [19..19] Event detected 19                                                */
      __IOM uint32_t EDS20      : 1;            /*!< [20..20] Event detected 20                                                */
      __IOM uint32_t EDS21      : 1;            /*!< [21..21] Event detected 21                                                */
      __IOM uint32_t EDS22      : 1;            /*!< [22..22] Event detected 22                                                */
      __IOM uint32_t EDS23      : 1;            /*!< [23..23] Event detected 23                                                */
      __IOM uint32_t EDS24      : 1;            /*!< [24..24] Event detected 24                                                */
      __IOM uint32_t EDS25      : 1;            /*!< [25..25] Event detected 25                                                */
      __IOM uint32_t EDS26      : 1;            /*!< [26..26] Event detected 26                                                */
      __IOM uint32_t EDS27      : 1;            /*!< [27..27] Event detected 27                                                */
      __IOM uint32_t EDS28      : 1;            /*!< [28..28] Event detected 28                                                */
      __IOM uint32_t EDS29      : 1;            /*!< [29..29] Event detected 29                                                */
      __IOM uint32_t EDS30      : 1;            /*!< [30..30] Event detected 30                                                */
      __IOM uint32_t EDS31      : 1;            /*!< [31..31] Event detected 31                                                */
    } GPEDS0_b;
  } ;
  
  union {
    __IOM uint32_t GPEDS1;                      /*!< (@ 0x00000044) GPIO Pin Event Detect Status 1                             */
    
    struct {
      __IOM uint32_t EDS32      : 1;            /*!< [0..0] Event detected 32                                                  */
      __IOM uint32_t EDS33      : 1;            /*!< [1..1] Event detected 33                                                  */
      __IOM uint32_t EDS34      : 1;            /*!< [2..2] Event detected 34                                                  */
      __IOM uint32_t EDS35      : 1;            /*!< [3..3] Event detected 35                                                  */
      __IOM uint32_t EDS36      : 1;            /*!< [4..4] Event detected 36                                                  */
      __IOM uint32_t EDS37      : 1;            /*!< [5..5] Event detected 37                                                  */
      __IOM uint32_t EDS38      : 1;            /*!< [6..6] Event detected 38                                                  */
      __IOM uint32_t EDS39      : 1;            /*!< [7..7] Event detected 39                                                  */
      __IOM uint32_t EDS40      : 1;            /*!< [8..8] Event detected 40                                                  */
      __IOM uint32_t EDS41      : 1;            /*!< [9..9] Event detected 41                                                  */
      __IOM uint32_t EDS42      : 1;            /*!< [10..10] Event detected 42                                                */
      __IOM uint32_t EDS43      : 1;            /*!< [11..11] Event detected 43                                                */
      __IOM uint32_t EDS44      : 1;            /*!< [12..12] Event detected 44                                                */
      __IOM uint32_t EDS45      : 1;            /*!< [13..13] Event detected 45                                                */
      __IOM uint32_t EDS46      : 1;            /*!< [14..14] Event detected 46                                                */
      __IOM uint32_t EDS47      : 1;            /*!< [15..15] Event detected 47                                                */
      __IOM uint32_t EDS48      : 1;            /*!< [16..16] Event detected 48                                                */
      __IOM uint32_t EDS49      : 1;            /*!< [17..17] Event detected 49                                                */
      __IOM uint32_t EDS50      : 1;            /*!< [18..18] Event detected 50                                                */
      __IOM uint32_t EDS51      : 1;            /*!< [19..19] Event detected 51                                                */
      __IOM uint32_t EDS52      : 1;            /*!< [20..20] Event detected 52                                                */
      __IOM uint32_t EDS53      : 1;            /*!< [21..21] Event detected 53                                                */
      __IOM uint32_t EDS54      : 1;            /*!< [22..22] Event detected 54                                                */
      __IOM uint32_t EDS55      : 1;            /*!< [23..23] Event detected 55                                                */
      __IOM uint32_t EDS56      : 1;            /*!< [24..24] Event detected 56                                                */
      __IOM uint32_t EDS57      : 1;            /*!< [25..25] Event detected 57                                                */
            uint32_t            : 6;
    } GPEDS1_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t GPREN0;                      /*!< (@ 0x0000004C) GPIO Pin Rising Edge Detect Enable 0                       */
    
    struct {
      __IOM uint32_t REN0       : 1;            /*!< [0..0] Rising edge enabled 0                                              */
      __IOM uint32_t REN1       : 1;            /*!< [1..1] Rising edge enabled 1                                              */
      __IOM uint32_t REN2       : 1;            /*!< [2..2] Rising edge enabled 2                                              */
      __IOM uint32_t REN3       : 1;            /*!< [3..3] Rising edge enabled 3                                              */
      __IOM uint32_t REN4       : 1;            /*!< [4..4] Rising edge enabled 4                                              */
      __IOM uint32_t REN5       : 1;            /*!< [5..5] Rising edge enabled 5                                              */
      __IOM uint32_t REN6       : 1;            /*!< [6..6] Rising edge enabled 6                                              */
      __IOM uint32_t REN7       : 1;            /*!< [7..7] Rising edge enabled 7                                              */
      __IOM uint32_t REN8       : 1;            /*!< [8..8] Rising edge enabled 8                                              */
      __IOM uint32_t REN9       : 1;            /*!< [9..9] Rising edge enabled 9                                              */
      __IOM uint32_t REN10      : 1;            /*!< [10..10] Rising edge enabled 10                                           */
      __IOM uint32_t REN11      : 1;            /*!< [11..11] Rising edge enabled 11                                           */
      __IOM uint32_t REN12      : 1;            /*!< [12..12] Rising edge enabled 12                                           */
      __IOM uint32_t REN13      : 1;            /*!< [13..13] Rising edge enabled 13                                           */
      __IOM uint32_t REN14      : 1;            /*!< [14..14] Rising edge enabled 14                                           */
      __IOM uint32_t REN15      : 1;            /*!< [15..15] Rising edge enabled 15                                           */
      __IOM uint32_t REN16      : 1;            /*!< [16..16] Rising edge enabled 16                                           */
      __IOM uint32_t REN17      : 1;            /*!< [17..17] Rising edge enabled 17                                           */
      __IOM uint32_t REN18      : 1;            /*!< [18..18] Rising edge enabled 18                                           */
      __IOM uint32_t REN19      : 1;            /*!< [19..19] Rising edge enabled 19                                           */
      __IOM uint32_t REN20      : 1;            /*!< [20..20] Rising edge enabled 20                                           */
      __IOM uint32_t REN21      : 1;            /*!< [21..21] Rising edge enabled 21                                           */
      __IOM uint32_t REN22      : 1;            /*!< [22..22] Rising edge enabled 22                                           */
      __IOM uint32_t REN23      : 1;            /*!< [23..23] Rising edge enabled 23                                           */
      __IOM uint32_t REN24      : 1;            /*!< [24..24] Rising edge enabled 24                                           */
      __IOM uint32_t REN25      : 1;            /*!< [25..25] Rising edge enabled 25                                           */
      __IOM uint32_t REN26      : 1;            /*!< [26..26] Rising edge enabled 26                                           */
      __IOM uint32_t REN27      : 1;            /*!< [27..27] Rising edge enabled 27                                           */
      __IOM uint32_t REN28      : 1;            /*!< [28..28] Rising edge enabled 28                                           */
      __IOM uint32_t REN29      : 1;            /*!< [29..29] Rising edge enabled 29                                           */
      __IOM uint32_t REN30      : 1;            /*!< [30..30] Rising edge enabled 30                                           */
      __IOM uint32_t REN31      : 1;            /*!< [31..31] Rising edge enabled 31                                           */
    } GPREN0_b;
  } ;
  
  union {
    __IOM uint32_t GPREN1;                      /*!< (@ 0x00000050) GPIO Pin Rising Edge Detect Enable 1                       */
    
    struct {
      __IOM uint32_t REN32      : 1;            /*!< [0..0] Rising edge enabled 32                                             */
      __IOM uint32_t REN33      : 1;            /*!< [1..1] Rising edge enabled 33                                             */
      __IOM uint32_t REN34      : 1;            /*!< [2..2] Rising edge enabled 34                                             */
      __IOM uint32_t REN35      : 1;            /*!< [3..3] Rising edge enabled 35                                             */
      __IOM uint32_t REN36      : 1;            /*!< [4..4] Rising edge enabled 36                                             */
      __IOM uint32_t REN37      : 1;            /*!< [5..5] Rising edge enabled 37                                             */
      __IOM uint32_t REN38      : 1;            /*!< [6..6] Rising edge enabled 38                                             */
      __IOM uint32_t REN39      : 1;            /*!< [7..7] Rising edge enabled 39                                             */
      __IOM uint32_t REN40      : 1;            /*!< [8..8] Rising edge enabled 40                                             */
      __IOM uint32_t REN41      : 1;            /*!< [9..9] Rising edge enabled 41                                             */
      __IOM uint32_t REN42      : 1;            /*!< [10..10] Rising edge enabled 42                                           */
      __IOM uint32_t REN43      : 1;            /*!< [11..11] Rising edge enabled 43                                           */
      __IOM uint32_t REN44      : 1;            /*!< [12..12] Rising edge enabled 44                                           */
      __IOM uint32_t REN45      : 1;            /*!< [13..13] Rising edge enabled 45                                           */
      __IOM uint32_t REN46      : 1;            /*!< [14..14] Rising edge enabled 46                                           */
      __IOM uint32_t REN47      : 1;            /*!< [15..15] Rising edge enabled 47                                           */
      __IOM uint32_t REN48      : 1;            /*!< [16..16] Rising edge enabled 48                                           */
      __IOM uint32_t REN49      : 1;            /*!< [17..17] Rising edge enabled 49                                           */
      __IOM uint32_t REN50      : 1;            /*!< [18..18] Rising edge enabled 50                                           */
      __IOM uint32_t REN51      : 1;            /*!< [19..19] Rising edge enabled 51                                           */
      __IOM uint32_t REN52      : 1;            /*!< [20..20] Rising edge enabled 52                                           */
      __IOM uint32_t REN53      : 1;            /*!< [21..21] Rising edge enabled 53                                           */
      __IOM uint32_t REN54      : 1;            /*!< [22..22] Rising edge enabled 54                                           */
      __IOM uint32_t REN55      : 1;            /*!< [23..23] Rising edge enabled 55                                           */
      __IOM uint32_t REN56      : 1;            /*!< [24..24] Rising edge enabled 56                                           */
      __IOM uint32_t REN57      : 1;            /*!< [25..25] Rising edge enabled 57                                           */
            uint32_t            : 6;
    } GPREN1_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t GPFEN0;                      /*!< (@ 0x00000058) GPIO Pin Falling Edge Detect Enable 0                      */
    
    struct {
      __IOM uint32_t FEN0       : 1;            /*!< [0..0] Falling edge enabled 0                                             */
      __IOM uint32_t FEN1       : 1;            /*!< [1..1] Falling edge enabled 1                                             */
      __IOM uint32_t FEN2       : 1;            /*!< [2..2] Falling edge enabled 2                                             */
      __IOM uint32_t FEN3       : 1;            /*!< [3..3] Falling edge enabled 3                                             */
      __IOM uint32_t FEN4       : 1;            /*!< [4..4] Falling edge enabled 4                                             */
      __IOM uint32_t FEN5       : 1;            /*!< [5..5] Falling edge enabled 5                                             */
      __IOM uint32_t FEN6       : 1;            /*!< [6..6] Falling edge enabled 6                                             */
      __IOM uint32_t FEN7       : 1;            /*!< [7..7] Falling edge enabled 7                                             */
      __IOM uint32_t FEN8       : 1;            /*!< [8..8] Falling edge enabled 8                                             */
      __IOM uint32_t FEN9       : 1;            /*!< [9..9] Falling edge enabled 9                                             */
      __IOM uint32_t FEN10      : 1;            /*!< [10..10] Falling edge enabled 10                                          */
      __IOM uint32_t FEN11      : 1;            /*!< [11..11] Falling edge enabled 11                                          */
      __IOM uint32_t FEN12      : 1;            /*!< [12..12] Falling edge enabled 12                                          */
      __IOM uint32_t FEN13      : 1;            /*!< [13..13] Falling edge enabled 13                                          */
      __IOM uint32_t FEN14      : 1;            /*!< [14..14] Falling edge enabled 14                                          */
      __IOM uint32_t FEN15      : 1;            /*!< [15..15] Falling edge enabled 15                                          */
      __IOM uint32_t FEN16      : 1;            /*!< [16..16] Falling edge enabled 16                                          */
      __IOM uint32_t FEN17      : 1;            /*!< [17..17] Falling edge enabled 17                                          */
      __IOM uint32_t FEN18      : 1;            /*!< [18..18] Falling edge enabled 18                                          */
      __IOM uint32_t FEN19      : 1;            /*!< [19..19] Falling edge enabled 19                                          */
      __IOM uint32_t FEN20      : 1;            /*!< [20..20] Falling edge enabled 20                                          */
      __IOM uint32_t FEN21      : 1;            /*!< [21..21] Falling edge enabled 21                                          */
      __IOM uint32_t FEN22      : 1;            /*!< [22..22] Falling edge enabled 22                                          */
      __IOM uint32_t FEN23      : 1;            /*!< [23..23] Falling edge enabled 23                                          */
      __IOM uint32_t FEN24      : 1;            /*!< [24..24] Falling edge enabled 24                                          */
      __IOM uint32_t FEN25      : 1;            /*!< [25..25] Falling edge enabled 25                                          */
      __IOM uint32_t FEN26      : 1;            /*!< [26..26] Falling edge enabled 26                                          */
      __IOM uint32_t FEN27      : 1;            /*!< [27..27] Falling edge enabled 27                                          */
      __IOM uint32_t FEN28      : 1;            /*!< [28..28] Falling edge enabled 28                                          */
      __IOM uint32_t FEN29      : 1;            /*!< [29..29] Falling edge enabled 29                                          */
      __IOM uint32_t FEN30      : 1;            /*!< [30..30] Falling edge enabled 30                                          */
      __IOM uint32_t FEN31      : 1;            /*!< [31..31] Falling edge enabled 31                                          */
    } GPFEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPFEN1;                      /*!< (@ 0x0000005C) GPIO Pin Falling Edge Detect Enable 1                      */
    
    struct {
      __IOM uint32_t FEN32      : 1;            /*!< [0..0] Falling edge enabled 32                                            */
      __IOM uint32_t FEN33      : 1;            /*!< [1..1] Falling edge enabled 33                                            */
      __IOM uint32_t FEN34      : 1;            /*!< [2..2] Falling edge enabled 34                                            */
      __IOM uint32_t FEN35      : 1;            /*!< [3..3] Falling edge enabled 35                                            */
      __IOM uint32_t FEN36      : 1;            /*!< [4..4] Falling edge enabled 36                                            */
      __IOM uint32_t FEN37      : 1;            /*!< [5..5] Falling edge enabled 37                                            */
      __IOM uint32_t FEN38      : 1;            /*!< [6..6] Falling edge enabled 38                                            */
      __IOM uint32_t FEN39      : 1;            /*!< [7..7] Falling edge enabled 39                                            */
      __IOM uint32_t FEN40      : 1;            /*!< [8..8] Falling edge enabled 40                                            */
      __IOM uint32_t FEN41      : 1;            /*!< [9..9] Falling edge enabled 41                                            */
      __IOM uint32_t FEN42      : 1;            /*!< [10..10] Falling edge enabled 42                                          */
      __IOM uint32_t FEN43      : 1;            /*!< [11..11] Falling edge enabled 43                                          */
      __IOM uint32_t FEN44      : 1;            /*!< [12..12] Falling edge enabled 44                                          */
      __IOM uint32_t FEN45      : 1;            /*!< [13..13] Falling edge enabled 45                                          */
      __IOM uint32_t FEN46      : 1;            /*!< [14..14] Falling edge enabled 46                                          */
      __IOM uint32_t FEN47      : 1;            /*!< [15..15] Falling edge enabled 47                                          */
      __IOM uint32_t FEN48      : 1;            /*!< [16..16] Falling edge enabled 48                                          */
      __IOM uint32_t FEN49      : 1;            /*!< [17..17] Falling edge enabled 49                                          */
      __IOM uint32_t FEN50      : 1;            /*!< [18..18] Falling edge enabled 50                                          */
      __IOM uint32_t FEN51      : 1;            /*!< [19..19] Falling edge enabled 51                                          */
      __IOM uint32_t FEN52      : 1;            /*!< [20..20] Falling edge enabled 52                                          */
      __IOM uint32_t FEN53      : 1;            /*!< [21..21] Falling edge enabled 53                                          */
      __IOM uint32_t FEN54      : 1;            /*!< [22..22] Falling edge enabled 54                                          */
      __IOM uint32_t FEN55      : 1;            /*!< [23..23] Falling edge enabled 55                                          */
      __IOM uint32_t FEN56      : 1;            /*!< [24..24] Falling edge enabled 56                                          */
      __IOM uint32_t FEN57      : 1;            /*!< [25..25] Falling edge enabled 57                                          */
            uint32_t            : 6;
    } GPFEN1_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t GPHEN0;                      /*!< (@ 0x00000064) GPIO Pin High Detect Enable 0                              */
    
    struct {
      __IOM uint32_t HEN0       : 1;            /*!< [0..0] High detect enabled 0                                              */
      __IOM uint32_t HEN1       : 1;            /*!< [1..1] High detect enabled 1                                              */
      __IOM uint32_t HEN2       : 1;            /*!< [2..2] High detect enabled 2                                              */
      __IOM uint32_t HEN3       : 1;            /*!< [3..3] High detect enabled 3                                              */
      __IOM uint32_t HEN4       : 1;            /*!< [4..4] High detect enabled 4                                              */
      __IOM uint32_t HEN5       : 1;            /*!< [5..5] High detect enabled 5                                              */
      __IOM uint32_t HEN6       : 1;            /*!< [6..6] High detect enabled 6                                              */
      __IOM uint32_t HEN7       : 1;            /*!< [7..7] High detect enabled 7                                              */
      __IOM uint32_t HEN8       : 1;            /*!< [8..8] High detect enabled 8                                              */
      __IOM uint32_t HEN9       : 1;            /*!< [9..9] High detect enabled 9                                              */
      __IOM uint32_t HEN10      : 1;            /*!< [10..10] High detect enabled 10                                           */
      __IOM uint32_t HEN11      : 1;            /*!< [11..11] High detect enabled 11                                           */
      __IOM uint32_t HEN12      : 1;            /*!< [12..12] High detect enabled 12                                           */
      __IOM uint32_t HEN13      : 1;            /*!< [13..13] High detect enabled 13                                           */
      __IOM uint32_t HEN14      : 1;            /*!< [14..14] High detect enabled 14                                           */
      __IOM uint32_t HEN15      : 1;            /*!< [15..15] High detect enabled 15                                           */
      __IOM uint32_t HEN16      : 1;            /*!< [16..16] High detect enabled 16                                           */
      __IOM uint32_t HEN17      : 1;            /*!< [17..17] High detect enabled 17                                           */
      __IOM uint32_t HEN18      : 1;            /*!< [18..18] High detect enabled 18                                           */
      __IOM uint32_t HEN19      : 1;            /*!< [19..19] High detect enabled 19                                           */
      __IOM uint32_t HEN20      : 1;            /*!< [20..20] High detect enabled 20                                           */
      __IOM uint32_t HEN21      : 1;            /*!< [21..21] High detect enabled 21                                           */
      __IOM uint32_t HEN22      : 1;            /*!< [22..22] High detect enabled 22                                           */
      __IOM uint32_t HEN23      : 1;            /*!< [23..23] High detect enabled 23                                           */
      __IOM uint32_t HEN24      : 1;            /*!< [24..24] High detect enabled 24                                           */
      __IOM uint32_t HEN25      : 1;            /*!< [25..25] High detect enabled 25                                           */
      __IOM uint32_t HEN26      : 1;            /*!< [26..26] High detect enabled 26                                           */
      __IOM uint32_t HEN27      : 1;            /*!< [27..27] High detect enabled 27                                           */
      __IOM uint32_t HEN28      : 1;            /*!< [28..28] High detect enabled 28                                           */
      __IOM uint32_t HEN29      : 1;            /*!< [29..29] High detect enabled 29                                           */
      __IOM uint32_t HEN30      : 1;            /*!< [30..30] High detect enabled 30                                           */
      __IOM uint32_t HEN31      : 1;            /*!< [31..31] High detect enabled 31                                           */
    } GPHEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPHEN1;                      /*!< (@ 0x00000068) GPIO Pin High Detect Enable 1                              */
    
    struct {
      __IOM uint32_t HEN32      : 1;            /*!< [0..0] High detect enabled 32                                             */
      __IOM uint32_t HEN33      : 1;            /*!< [1..1] High detect enabled 33                                             */
      __IOM uint32_t HEN34      : 1;            /*!< [2..2] High detect enabled 34                                             */
      __IOM uint32_t HEN35      : 1;            /*!< [3..3] High detect enabled 35                                             */
      __IOM uint32_t HEN36      : 1;            /*!< [4..4] High detect enabled 36                                             */
      __IOM uint32_t HEN37      : 1;            /*!< [5..5] High detect enabled 37                                             */
      __IOM uint32_t HEN38      : 1;            /*!< [6..6] High detect enabled 38                                             */
      __IOM uint32_t HEN39      : 1;            /*!< [7..7] High detect enabled 39                                             */
      __IOM uint32_t HEN40      : 1;            /*!< [8..8] High detect enabled 40                                             */
      __IOM uint32_t HEN41      : 1;            /*!< [9..9] High detect enabled 41                                             */
      __IOM uint32_t HEN42      : 1;            /*!< [10..10] High detect enabled 42                                           */
      __IOM uint32_t HEN43      : 1;            /*!< [11..11] High detect enabled 43                                           */
      __IOM uint32_t HEN44      : 1;            /*!< [12..12] High detect enabled 44                                           */
      __IOM uint32_t HEN45      : 1;            /*!< [13..13] High detect enabled 45                                           */
      __IOM uint32_t HEN46      : 1;            /*!< [14..14] High detect enabled 46                                           */
      __IOM uint32_t HEN47      : 1;            /*!< [15..15] High detect enabled 47                                           */
      __IOM uint32_t HEN48      : 1;            /*!< [16..16] High detect enabled 48                                           */
      __IOM uint32_t HEN49      : 1;            /*!< [17..17] High detect enabled 49                                           */
      __IOM uint32_t HEN50      : 1;            /*!< [18..18] High detect enabled 50                                           */
      __IOM uint32_t HEN51      : 1;            /*!< [19..19] High detect enabled 51                                           */
      __IOM uint32_t HEN52      : 1;            /*!< [20..20] High detect enabled 52                                           */
      __IOM uint32_t HEN53      : 1;            /*!< [21..21] High detect enabled 53                                           */
      __IOM uint32_t HEN54      : 1;            /*!< [22..22] High detect enabled 54                                           */
      __IOM uint32_t HEN55      : 1;            /*!< [23..23] High detect enabled 55                                           */
      __IOM uint32_t HEN56      : 1;            /*!< [24..24] High detect enabled 56                                           */
      __IOM uint32_t HEN57      : 1;            /*!< [25..25] High detect enabled 57                                           */
            uint32_t            : 6;
    } GPHEN1_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t GPLEN0;                      /*!< (@ 0x00000070) GPIO Pin Low Detect Enable 0                               */
    
    struct {
      __IOM uint32_t LEN0       : 1;            /*!< [0..0] Low detect enabled 0                                               */
      __IOM uint32_t LEN1       : 1;            /*!< [1..1] Low detect enabled 1                                               */
      __IOM uint32_t LEN2       : 1;            /*!< [2..2] Low detect enabled 2                                               */
      __IOM uint32_t LEN3       : 1;            /*!< [3..3] Low detect enabled 3                                               */
      __IOM uint32_t LEN4       : 1;            /*!< [4..4] Low detect enabled 4                                               */
      __IOM uint32_t LEN5       : 1;            /*!< [5..5] Low detect enabled 5                                               */
      __IOM uint32_t LEN6       : 1;            /*!< [6..6] Low detect enabled 6                                               */
      __IOM uint32_t LEN7       : 1;            /*!< [7..7] Low detect enabled 7                                               */
      __IOM uint32_t LEN8       : 1;            /*!< [8..8] Low detect enabled 8                                               */
      __IOM uint32_t LEN9       : 1;            /*!< [9..9] Low detect enabled 9                                               */
      __IOM uint32_t LEN10      : 1;            /*!< [10..10] Low detect enabled 10                                            */
      __IOM uint32_t LEN11      : 1;            /*!< [11..11] Low detect enabled 11                                            */
      __IOM uint32_t LEN12      : 1;            /*!< [12..12] Low detect enabled 12                                            */
      __IOM uint32_t LEN13      : 1;            /*!< [13..13] Low detect enabled 13                                            */
      __IOM uint32_t LEN14      : 1;            /*!< [14..14] Low detect enabled 14                                            */
      __IOM uint32_t LEN15      : 1;            /*!< [15..15] Low detect enabled 15                                            */
      __IOM uint32_t LEN16      : 1;            /*!< [16..16] Low detect enabled 16                                            */
      __IOM uint32_t LEN17      : 1;            /*!< [17..17] Low detect enabled 17                                            */
      __IOM uint32_t LEN18      : 1;            /*!< [18..18] Low detect enabled 18                                            */
      __IOM uint32_t LEN19      : 1;            /*!< [19..19] Low detect enabled 19                                            */
      __IOM uint32_t LEN20      : 1;            /*!< [20..20] Low detect enabled 20                                            */
      __IOM uint32_t LEN21      : 1;            /*!< [21..21] Low detect enabled 21                                            */
      __IOM uint32_t LEN22      : 1;            /*!< [22..22] Low detect enabled 22                                            */
      __IOM uint32_t LEN23      : 1;            /*!< [23..23] Low detect enabled 23                                            */
      __IOM uint32_t LEN24      : 1;            /*!< [24..24] Low detect enabled 24                                            */
      __IOM uint32_t LEN25      : 1;            /*!< [25..25] Low detect enabled 25                                            */
      __IOM uint32_t LEN26      : 1;            /*!< [26..26] Low detect enabled 26                                            */
      __IOM uint32_t LEN27      : 1;            /*!< [27..27] Low detect enabled 27                                            */
      __IOM uint32_t LEN28      : 1;            /*!< [28..28] Low detect enabled 28                                            */
      __IOM uint32_t LEN29      : 1;            /*!< [29..29] Low detect enabled 29                                            */
      __IOM uint32_t LEN30      : 1;            /*!< [30..30] Low detect enabled 30                                            */
      __IOM uint32_t LEN31      : 1;            /*!< [31..31] Low detect enabled 31                                            */
    } GPLEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPLEN1;                      /*!< (@ 0x00000074) GPIO Pin Low Detect Enable 1                               */
    
    struct {
      __IOM uint32_t LEN32      : 1;            /*!< [0..0] Low detect enabled 32                                              */
      __IOM uint32_t LEN33      : 1;            /*!< [1..1] Low detect enabled 33                                              */
      __IOM uint32_t LEN34      : 1;            /*!< [2..2] Low detect enabled 34                                              */
      __IOM uint32_t LEN35      : 1;            /*!< [3..3] Low detect enabled 35                                              */
      __IOM uint32_t LEN36      : 1;            /*!< [4..4] Low detect enabled 36                                              */
      __IOM uint32_t LEN37      : 1;            /*!< [5..5] Low detect enabled 37                                              */
      __IOM uint32_t LEN38      : 1;            /*!< [6..6] Low detect enabled 38                                              */
      __IOM uint32_t LEN39      : 1;            /*!< [7..7] Low detect enabled 39                                              */
      __IOM uint32_t LEN40      : 1;            /*!< [8..8] Low detect enabled 40                                              */
      __IOM uint32_t LEN41      : 1;            /*!< [9..9] Low detect enabled 41                                              */
      __IOM uint32_t LEN42      : 1;            /*!< [10..10] Low detect enabled 42                                            */
      __IOM uint32_t LEN43      : 1;            /*!< [11..11] Low detect enabled 43                                            */
      __IOM uint32_t LEN44      : 1;            /*!< [12..12] Low detect enabled 44                                            */
      __IOM uint32_t LEN45      : 1;            /*!< [13..13] Low detect enabled 45                                            */
      __IOM uint32_t LEN46      : 1;            /*!< [14..14] Low detect enabled 46                                            */
      __IOM uint32_t LEN47      : 1;            /*!< [15..15] Low detect enabled 47                                            */
      __IOM uint32_t LEN48      : 1;            /*!< [16..16] Low detect enabled 48                                            */
      __IOM uint32_t LEN49      : 1;            /*!< [17..17] Low detect enabled 49                                            */
      __IOM uint32_t LEN50      : 1;            /*!< [18..18] Low detect enabled 50                                            */
      __IOM uint32_t LEN51      : 1;            /*!< [19..19] Low detect enabled 51                                            */
      __IOM uint32_t LEN52      : 1;            /*!< [20..20] Low detect enabled 52                                            */
      __IOM uint32_t LEN53      : 1;            /*!< [21..21] Low detect enabled 53                                            */
      __IOM uint32_t LEN54      : 1;            /*!< [22..22] Low detect enabled 54                                            */
      __IOM uint32_t LEN55      : 1;            /*!< [23..23] Low detect enabled 55                                            */
      __IOM uint32_t LEN56      : 1;            /*!< [24..24] Low detect enabled 56                                            */
      __IOM uint32_t LEN57      : 1;            /*!< [25..25] Low detect enabled 57                                            */
            uint32_t            : 6;
    } GPLEN1_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t GPAREN0;                     /*!< (@ 0x0000007C) GPIO Pin Async. Rising Edge Detect 0                       */
    
    struct {
      __IOM uint32_t AREN0      : 1;            /*!< [0..0] Async rising enabled 0                                             */
      __IOM uint32_t AREN1      : 1;            /*!< [1..1] Async rising enabled 1                                             */
      __IOM uint32_t AREN2      : 1;            /*!< [2..2] Async rising enabled 2                                             */
      __IOM uint32_t AREN3      : 1;            /*!< [3..3] Async rising enabled 3                                             */
      __IOM uint32_t AREN4      : 1;            /*!< [4..4] Async rising enabled 4                                             */
      __IOM uint32_t AREN5      : 1;            /*!< [5..5] Async rising enabled 5                                             */
      __IOM uint32_t AREN6      : 1;            /*!< [6..6] Async rising enabled 6                                             */
      __IOM uint32_t AREN7      : 1;            /*!< [7..7] Async rising enabled 7                                             */
      __IOM uint32_t AREN8      : 1;            /*!< [8..8] Async rising enabled 8                                             */
      __IOM uint32_t AREN9      : 1;            /*!< [9..9] Async rising enabled 9                                             */
      __IOM uint32_t AREN10     : 1;            /*!< [10..10] Async rising enabled 10                                          */
      __IOM uint32_t AREN11     : 1;            /*!< [11..11] Async rising enabled 11                                          */
      __IOM uint32_t AREN12     : 1;            /*!< [12..12] Async rising enabled 12                                          */
      __IOM uint32_t AREN13     : 1;            /*!< [13..13] Async rising enabled 13                                          */
      __IOM uint32_t AREN14     : 1;            /*!< [14..14] Async rising enabled 14                                          */
      __IOM uint32_t AREN15     : 1;            /*!< [15..15] Async rising enabled 15                                          */
      __IOM uint32_t AREN16     : 1;            /*!< [16..16] Async rising enabled 16                                          */
      __IOM uint32_t AREN17     : 1;            /*!< [17..17] Async rising enabled 17                                          */
      __IOM uint32_t AREN18     : 1;            /*!< [18..18] Async rising enabled 18                                          */
      __IOM uint32_t AREN19     : 1;            /*!< [19..19] Async rising enabled 19                                          */
      __IOM uint32_t AREN20     : 1;            /*!< [20..20] Async rising enabled 20                                          */
      __IOM uint32_t AREN21     : 1;            /*!< [21..21] Async rising enabled 21                                          */
      __IOM uint32_t AREN22     : 1;            /*!< [22..22] Async rising enabled 22                                          */
      __IOM uint32_t AREN23     : 1;            /*!< [23..23] Async rising enabled 23                                          */
      __IOM uint32_t AREN24     : 1;            /*!< [24..24] Async rising enabled 24                                          */
      __IOM uint32_t AREN25     : 1;            /*!< [25..25] Async rising enabled 25                                          */
      __IOM uint32_t AREN26     : 1;            /*!< [26..26] Async rising enabled 26                                          */
      __IOM uint32_t AREN27     : 1;            /*!< [27..27] Async rising enabled 27                                          */
      __IOM uint32_t AREN28     : 1;            /*!< [28..28] Async rising enabled 28                                          */
      __IOM uint32_t AREN29     : 1;            /*!< [29..29] Async rising enabled 29                                          */
      __IOM uint32_t AREN30     : 1;            /*!< [30..30] Async rising enabled 30                                          */
      __IOM uint32_t AREN31     : 1;            /*!< [31..31] Async rising enabled 31                                          */
    } GPAREN0_b;
  } ;
  
  union {
    __IOM uint32_t GPAREN1;                     /*!< (@ 0x00000080) GPIO Pin Async. Rising Edge Detect 1                       */
    
    struct {
      __IOM uint32_t AREN32     : 1;            /*!< [0..0] Async rising enabled 32                                            */
      __IOM uint32_t AREN33     : 1;            /*!< [1..1] Async rising enabled 33                                            */
      __IOM uint32_t AREN34     : 1;            /*!< [2..2] Async rising enabled 34                                            */
      __IOM uint32_t AREN35     : 1;            /*!< [3..3] Async rising enabled 35                                            */
      __IOM uint32_t AREN36     : 1;            /*!< [4..4] Async rising enabled 36                                            */
      __IOM uint32_t AREN37     : 1;            /*!< [5..5] Async rising enabled 37                                            */
      __IOM uint32_t AREN38     : 1;            /*!< [6..6] Async rising enabled 38                                            */
      __IOM uint32_t AREN39     : 1;            /*!< [7..7] Async rising enabled 39                                            */
      __IOM uint32_t AREN40     : 1;            /*!< [8..8] Async rising enabled 40                                            */
      __IOM uint32_t AREN41     : 1;            /*!< [9..9] Async rising enabled 41                                            */
      __IOM uint32_t AREN42     : 1;            /*!< [10..10] Async rising enabled 42                                          */
      __IOM uint32_t AREN43     : 1;            /*!< [11..11] Async rising enabled 43                                          */
      __IOM uint32_t AREN44     : 1;            /*!< [12..12] Async rising enabled 44                                          */
      __IOM uint32_t AREN45     : 1;            /*!< [13..13] Async rising enabled 45                                          */
      __IOM uint32_t AREN46     : 1;            /*!< [14..14] Async rising enabled 46                                          */
      __IOM uint32_t AREN47     : 1;            /*!< [15..15] Async rising enabled 47                                          */
      __IOM uint32_t AREN48     : 1;            /*!< [16..16] Async rising enabled 48                                          */
      __IOM uint32_t AREN49     : 1;            /*!< [17..17] Async rising enabled 49                                          */
      __IOM uint32_t AREN50     : 1;            /*!< [18..18] Async rising enabled 50                                          */
      __IOM uint32_t AREN51     : 1;            /*!< [19..19] Async rising enabled 51                                          */
      __IOM uint32_t AREN52     : 1;            /*!< [20..20] Async rising enabled 52                                          */
      __IOM uint32_t AREN53     : 1;            /*!< [21..21] Async rising enabled 53                                          */
      __IOM uint32_t AREN54     : 1;            /*!< [22..22] Async rising enabled 54                                          */
      __IOM uint32_t AREN55     : 1;            /*!< [23..23] Async rising enabled 55                                          */
      __IOM uint32_t AREN56     : 1;            /*!< [24..24] Async rising enabled 56                                          */
      __IOM uint32_t AREN57     : 1;            /*!< [25..25] Async rising enabled 57                                          */
            uint32_t            : 6;
    } GPAREN1_b;
  } ;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t GPAFEN0;                     /*!< (@ 0x00000088) GPIO Pin Async. Falling Edge Detect 0                      */
    
    struct {
      __IOM uint32_t AFEN0      : 1;            /*!< [0..0] Async falling enabled 0                                            */
      __IOM uint32_t AFEN1      : 1;            /*!< [1..1] Async falling enabled 1                                            */
      __IOM uint32_t AFEN2      : 1;            /*!< [2..2] Async falling enabled 2                                            */
      __IOM uint32_t AFEN3      : 1;            /*!< [3..3] Async falling enabled 3                                            */
      __IOM uint32_t AFEN4      : 1;            /*!< [4..4] Async falling enabled 4                                            */
      __IOM uint32_t AFEN5      : 1;            /*!< [5..5] Async falling enabled 5                                            */
      __IOM uint32_t AFEN6      : 1;            /*!< [6..6] Async falling enabled 6                                            */
      __IOM uint32_t AFEN7      : 1;            /*!< [7..7] Async falling enabled 7                                            */
      __IOM uint32_t AFEN8      : 1;            /*!< [8..8] Async falling enabled 8                                            */
      __IOM uint32_t AFEN9      : 1;            /*!< [9..9] Async falling enabled 9                                            */
      __IOM uint32_t AFEN10     : 1;            /*!< [10..10] Async falling enabled 10                                         */
      __IOM uint32_t AFEN11     : 1;            /*!< [11..11] Async falling enabled 11                                         */
      __IOM uint32_t AFEN12     : 1;            /*!< [12..12] Async falling enabled 12                                         */
      __IOM uint32_t AFEN13     : 1;            /*!< [13..13] Async falling enabled 13                                         */
      __IOM uint32_t AFEN14     : 1;            /*!< [14..14] Async falling enabled 14                                         */
      __IOM uint32_t AFEN15     : 1;            /*!< [15..15] Async falling enabled 15                                         */
      __IOM uint32_t AFEN16     : 1;            /*!< [16..16] Async falling enabled 16                                         */
      __IOM uint32_t AFEN17     : 1;            /*!< [17..17] Async falling enabled 17                                         */
      __IOM uint32_t AFEN18     : 1;            /*!< [18..18] Async falling enabled 18                                         */
      __IOM uint32_t AFEN19     : 1;            /*!< [19..19] Async falling enabled 19                                         */
      __IOM uint32_t AFEN20     : 1;            /*!< [20..20] Async falling enabled 20                                         */
      __IOM uint32_t AFEN21     : 1;            /*!< [21..21] Async falling enabled 21                                         */
      __IOM uint32_t AFEN22     : 1;            /*!< [22..22] Async falling enabled 22                                         */
      __IOM uint32_t AFEN23     : 1;            /*!< [23..23] Async falling enabled 23                                         */
      __IOM uint32_t AFEN24     : 1;            /*!< [24..24] Async falling enabled 24                                         */
      __IOM uint32_t AFEN25     : 1;            /*!< [25..25] Async falling enabled 25                                         */
      __IOM uint32_t AFEN26     : 1;            /*!< [26..26] Async falling enabled 26                                         */
      __IOM uint32_t AFEN27     : 1;            /*!< [27..27] Async falling enabled 27                                         */
      __IOM uint32_t AFEN28     : 1;            /*!< [28..28] Async falling enabled 28                                         */
      __IOM uint32_t AFEN29     : 1;            /*!< [29..29] Async falling enabled 29                                         */
      __IOM uint32_t AFEN30     : 1;            /*!< [30..30] Async falling enabled 30                                         */
      __IOM uint32_t AFEN31     : 1;            /*!< [31..31] Async falling enabled 31                                         */
    } GPAFEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPAFEN1;                     /*!< (@ 0x0000008C) GPIO Pin Async. Falling Edge Detect 1                      */
    
    struct {
      __IOM uint32_t AFEN32     : 1;            /*!< [0..0] Async falling enabled 32                                           */
      __IOM uint32_t AFEN33     : 1;            /*!< [1..1] Async falling enabled 33                                           */
      __IOM uint32_t AFEN34     : 1;            /*!< [2..2] Async falling enabled 34                                           */
      __IOM uint32_t AFEN35     : 1;            /*!< [3..3] Async falling enabled 35                                           */
      __IOM uint32_t AFEN36     : 1;            /*!< [4..4] Async falling enabled 36                                           */
      __IOM uint32_t AFEN37     : 1;            /*!< [5..5] Async falling enabled 37                                           */
      __IOM uint32_t AFEN38     : 1;            /*!< [6..6] Async falling enabled 38                                           */
      __IOM uint32_t AFEN39     : 1;            /*!< [7..7] Async falling enabled 39                                           */
      __IOM uint32_t AFEN40     : 1;            /*!< [8..8] Async falling enabled 40                                           */
      __IOM uint32_t AFEN41     : 1;            /*!< [9..9] Async falling enabled 41                                           */
      __IOM uint32_t AFEN42     : 1;            /*!< [10..10] Async falling enabled 42                                         */
      __IOM uint32_t AFEN43     : 1;            /*!< [11..11] Async falling enabled 43                                         */
      __IOM uint32_t AFEN44     : 1;            /*!< [12..12] Async falling enabled 44                                         */
      __IOM uint32_t AFEN45     : 1;            /*!< [13..13] Async falling enabled 45                                         */
      __IOM uint32_t AFEN46     : 1;            /*!< [14..14] Async falling enabled 46                                         */
      __IOM uint32_t AFEN47     : 1;            /*!< [15..15] Async falling enabled 47                                         */
      __IOM uint32_t AFEN48     : 1;            /*!< [16..16] Async falling enabled 48                                         */
      __IOM uint32_t AFEN49     : 1;            /*!< [17..17] Async falling enabled 49                                         */
      __IOM uint32_t AFEN50     : 1;            /*!< [18..18] Async falling enabled 50                                         */
      __IOM uint32_t AFEN51     : 1;            /*!< [19..19] Async falling enabled 51                                         */
      __IOM uint32_t AFEN52     : 1;            /*!< [20..20] Async falling enabled 52                                         */
      __IOM uint32_t AFEN53     : 1;            /*!< [21..21] Async falling enabled 53                                         */
      __IOM uint32_t AFEN54     : 1;            /*!< [22..22] Async falling enabled 54                                         */
      __IOM uint32_t AFEN55     : 1;            /*!< [23..23] Async falling enabled 55                                         */
      __IOM uint32_t AFEN56     : 1;            /*!< [24..24] Async falling enabled 56                                         */
      __IOM uint32_t AFEN57     : 1;            /*!< [25..25] Async falling enabled 57                                         */
            uint32_t            : 6;
    } GPAFEN1_b;
  } ;
  __IM  uint32_t  RESERVED10[16];
  
  union {
    __IOM uint32_t EXTRA_MUX;                   /*!< (@ 0x000000D0) Undocumented multiplexing bits                             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t SDIO       : 1;            /*!< [1..1] Switch peripheral connection to undocumented SDIO pins
                                                     used on Pi 4                                                              */
            uint32_t            : 30;
    } EXTRA_MUX_b;
  } ;
  __IM  uint32_t  RESERVED11[4];
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG0;     /*!< (@ 0x000000E4) GPIO Pull-up / Pull-down Register 0                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL0 : 2;   /*!< [1..0] Resistor select for 0                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL1 : 2;   /*!< [3..2] Resistor select for 1                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL2 : 2;   /*!< [5..4] Resistor select for 2                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL3 : 2;   /*!< [7..6] Resistor select for 3                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL4 : 2;   /*!< [9..8] Resistor select for 4                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL5 : 2;   /*!< [11..10] Resistor select for 5                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL6 : 2;   /*!< [13..12] Resistor select for 6                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL7 : 2;   /*!< [15..14] Resistor select for 7                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL8 : 2;   /*!< [17..16] Resistor select for 8                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL9 : 2;   /*!< [19..18] Resistor select for 9                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL10 : 2;  /*!< [21..20] Resistor select for 10                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL11 : 2;  /*!< [23..22] Resistor select for 11                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL12 : 2;  /*!< [25..24] Resistor select for 12                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL13 : 2;  /*!< [27..26] Resistor select for 13                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL14 : 2;  /*!< [29..28] Resistor select for 14                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL15 : 2;  /*!< [31..30] Resistor select for 15                                           */
    } GPIO_PUP_PDN_CNTRL_REG0_b;
  } ;
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG1;     /*!< (@ 0x000000E8) GPIO Pull-up / Pull-down Register 1                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL16 : 2;  /*!< [1..0] Resistor select for 16                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL17 : 2;  /*!< [3..2] Resistor select for 17                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL18 : 2;  /*!< [5..4] Resistor select for 18                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL19 : 2;  /*!< [7..6] Resistor select for 19                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL20 : 2;  /*!< [9..8] Resistor select for 20                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL21 : 2;  /*!< [11..10] Resistor select for 21                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL22 : 2;  /*!< [13..12] Resistor select for 22                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL23 : 2;  /*!< [15..14] Resistor select for 23                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL24 : 2;  /*!< [17..16] Resistor select for 24                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL25 : 2;  /*!< [19..18] Resistor select for 25                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL26 : 2;  /*!< [21..20] Resistor select for 26                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL27 : 2;  /*!< [23..22] Resistor select for 27                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL28 : 2;  /*!< [25..24] Resistor select for 28                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL29 : 2;  /*!< [27..26] Resistor select for 29                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL30 : 2;  /*!< [29..28] Resistor select for 30                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL31 : 2;  /*!< [31..30] Resistor select for 31                                           */
    } GPIO_PUP_PDN_CNTRL_REG1_b;
  } ;
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG2;     /*!< (@ 0x000000EC) GPIO Pull-up / Pull-down Register 2                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL32 : 2;  /*!< [1..0] Resistor select for 32                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL33 : 2;  /*!< [3..2] Resistor select for 33                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL34 : 2;  /*!< [5..4] Resistor select for 34                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL35 : 2;  /*!< [7..6] Resistor select for 35                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL36 : 2;  /*!< [9..8] Resistor select for 36                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL37 : 2;  /*!< [11..10] Resistor select for 37                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL38 : 2;  /*!< [13..12] Resistor select for 38                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL39 : 2;  /*!< [15..14] Resistor select for 39                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL40 : 2;  /*!< [17..16] Resistor select for 40                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL41 : 2;  /*!< [19..18] Resistor select for 41                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL42 : 2;  /*!< [21..20] Resistor select for 42                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL43 : 2;  /*!< [23..22] Resistor select for 43                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL44 : 2;  /*!< [25..24] Resistor select for 44                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL45 : 2;  /*!< [27..26] Resistor select for 45                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL46 : 2;  /*!< [29..28] Resistor select for 46                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL47 : 2;  /*!< [31..30] Resistor select for 47                                           */
    } GPIO_PUP_PDN_CNTRL_REG2_b;
  } ;
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG3;     /*!< (@ 0x000000F0) GPIO Pull-up / Pull-down Register 3                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL48 : 2;  /*!< [1..0] Resistor select for 48                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL49 : 2;  /*!< [3..2] Resistor select for 49                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL50 : 2;  /*!< [5..4] Resistor select for 50                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL51 : 2;  /*!< [7..6] Resistor select for 51                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL52 : 2;  /*!< [9..8] Resistor select for 52                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL53 : 2;  /*!< [11..10] Resistor select for 53                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL54 : 2;  /*!< [13..12] Resistor select for 54                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL55 : 2;  /*!< [15..14] Resistor select for 55                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL56 : 2;  /*!< [17..16] Resistor select for 56                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL57 : 2;  /*!< [19..18] Resistor select for 57                                           */
            uint32_t            : 12;
    } GPIO_PUP_PDN_CNTRL_REG3_b;
  } ;
} GPIO_Type;                                    /*!< Size = 244 (0xf4)                                                         */



/* =========================================================================================================================== */
/* ================                                          SYSTMR                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom System Timer (SYSTMR)
  */

typedef struct {                                /*!< (@ 0xFE003000) SYSTMR Structure                                           */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Control / Status                                           */
    
    struct {
      __IOM uint32_t M0         : 1;            /*!< [0..0] System timer match 0                                               */
      __IOM uint32_t M1         : 1;            /*!< [1..1] System timer match 1                                               */
      __IOM uint32_t M2         : 1;            /*!< [2..2] System timer match 2                                               */
      __IOM uint32_t M3         : 1;            /*!< [3..3] System timer match 3                                               */
            uint32_t            : 28;
    } CS_b;
  } ;
  __IM  uint32_t  CLO;                          /*!< (@ 0x00000004) Lower 32 bits for the free running counter                 */
  __IM  uint32_t  CHI;                          /*!< (@ 0x00000008) Higher 32 bits for the free running counter                */
  __IOM uint32_t  C0;                           /*!< (@ 0x0000000C) Compare channel 0                                          */
  __IOM uint32_t  C1;                           /*!< (@ 0x00000010) Compare channel 1                                          */
  __IOM uint32_t  C2;                           /*!< (@ 0x00000014) Compare channel 2                                          */
  __IOM uint32_t  C3;                           /*!< (@ 0x00000018) Compare channel 3                                          */
} SYSTMR_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief ARM Prime Cell PL011 (UART0)
  */

typedef struct {                                /*!< (@ 0xFE201000) UART0 Structure                                            */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data Register                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] DATA                                                               */
      __IOM uint32_t FE         : 1;            /*!< [8..8] FE                                                                 */
      __IOM uint32_t PE         : 1;            /*!< [9..9] PE                                                                 */
      __IOM uint32_t BE         : 1;            /*!< [10..10] BE                                                               */
      __IOM uint32_t OE         : 1;            /*!< [11..11] OE                                                               */
            uint32_t            : 20;
    } DR_b;
  } ;
  
  union {
    union {
      __IM  uint32_t RSR;                       /*!< (@ 0x00000004) Receive Status Register                                    */
      
      struct {
        __IM  uint32_t FE       : 1;            /*!< [0..0] FE                                                                 */
        __IM  uint32_t PE       : 1;            /*!< [1..1] PE                                                                 */
        __IM  uint32_t BE       : 1;            /*!< [2..2] BE                                                                 */
        __IM  uint32_t OE       : 1;            /*!< [3..3] OE                                                                 */
              uint32_t          : 28;
      } RSR_b;
    } ;
    
    union {
      __OM  uint32_t ECR;                       /*!< (@ 0x00000004) Error Clear Register                                       */
      
      struct {
        __OM  uint32_t FE       : 1;            /*!< [0..0] FE                                                                 */
        __OM  uint32_t PE       : 1;            /*!< [1..1] PE                                                                 */
        __OM  uint32_t BE       : 1;            /*!< [2..2] BE                                                                 */
        __OM  uint32_t OE       : 1;            /*!< [3..3] OE                                                                 */
              uint32_t          : 28;
      } ECR_b;
    } ;
  };
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IOM uint32_t FR;                          /*!< (@ 0x00000018) Flag Register                                              */
    
    struct {
      __IOM uint32_t CTS        : 1;            /*!< [0..0] CTS                                                                */
      __IOM uint32_t DSR        : 1;            /*!< [1..1] DSR                                                                */
      __IOM uint32_t DCD        : 1;            /*!< [2..2] DCD                                                                */
      __IOM uint32_t BUSY       : 1;            /*!< [3..3] BUSY                                                               */
      __IOM uint32_t RXFE       : 1;            /*!< [4..4] RXFE                                                               */
      __IOM uint32_t TXFF       : 1;            /*!< [5..5] TXFF                                                               */
      __IOM uint32_t RXFF       : 1;            /*!< [6..6] RXFF                                                               */
      __IOM uint32_t TXFE       : 1;            /*!< [7..7] TXFE                                                               */
      __IOM uint32_t RI         : 1;            /*!< [8..8] RI                                                                 */
            uint32_t            : 23;
    } FR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IBRD;                        /*!< (@ 0x00000024) Integer Baud Rate Register                                 */
    
    struct {
      __IOM uint32_t BAUDDIVINT : 16;           /*!< [15..0] BAUDDIVINT                                                        */
            uint32_t            : 16;
    } IBRD_b;
  } ;
  
  union {
    __IOM uint32_t FBRD;                        /*!< (@ 0x00000028) Fractional Baud Rate Register                              */
    
    struct {
      __IOM uint32_t BAUDDIVFRAC : 6;           /*!< [5..0] BAUDDIVFRAC                                                        */
            uint32_t            : 26;
    } FBRD_b;
  } ;
  
  union {
    __IOM uint32_t LCR_H;                       /*!< (@ 0x0000002C) Line Control Register                                      */
    
    struct {
      __IOM uint32_t BRK        : 1;            /*!< [0..0] BRK                                                                */
      __IOM uint32_t PEN        : 1;            /*!< [1..1] PEN                                                                */
      __IOM uint32_t EPS        : 1;            /*!< [2..2] EPS                                                                */
      __IOM uint32_t STP2       : 1;            /*!< [3..3] STP2                                                               */
      __IOM uint32_t FEN        : 1;            /*!< [4..4] FEN                                                                */
      __IOM uint32_t WLEN       : 2;            /*!< [6..5] WLEN                                                               */
      __IOM uint32_t SPS        : 1;            /*!< [7..7] SPS                                                                */
            uint32_t            : 24;
    } LCR_H_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000030) Control Register                                           */
    
    struct {
      __IOM uint32_t UARTEN     : 1;            /*!< [0..0] UARTEN                                                             */
      __IOM uint32_t SIREN      : 1;            /*!< [1..1] SIREN                                                              */
      __IOM uint32_t SIRLP      : 1;            /*!< [2..2] SIRLP                                                              */
            uint32_t            : 5;
      __IOM uint32_t TXE        : 1;            /*!< [8..8] TXE                                                                */
      __IOM uint32_t RXE        : 1;            /*!< [9..9] RXE                                                                */
      __IOM uint32_t DTR        : 1;            /*!< [10..10] DTR                                                              */
      __IOM uint32_t RTS        : 1;            /*!< [11..11] RTS                                                              */
            uint32_t            : 2;
      __IOM uint32_t RTSEN      : 1;            /*!< [14..14] RTSEN                                                            */
      __IOM uint32_t CTSEN      : 1;            /*!< [15..15] CTSEN                                                            */
            uint32_t            : 16;
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IFLS;                        /*!< (@ 0x00000034) Interrupt FIFO Level Select Register                       */
    
    struct {
      __IOM uint32_t TXIFLSEL   : 3;            /*!< [2..0] TXIFLSEL                                                           */
      __IOM uint32_t RXIFLSEL   : 3;            /*!< [5..3] RXIFLSEL                                                           */
            uint32_t            : 26;
    } IFLS_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000038) Interrupt Mask set_Clear Register                          */
    
    struct {
      __IOM uint32_t RIMIM      : 1;            /*!< [0..0] RIMIM                                                              */
      __IOM uint32_t CTSMIM     : 1;            /*!< [1..1] CTSMIM                                                             */
      __IOM uint32_t DCDMIM     : 1;            /*!< [2..2] DCDMIM                                                             */
      __IOM uint32_t DSRMIM     : 1;            /*!< [3..3] DSRMIM                                                             */
      __IOM uint32_t RXIM       : 1;            /*!< [4..4] RXIM                                                               */
      __IOM uint32_t TXIM       : 1;            /*!< [5..5] TXIM                                                               */
      __IOM uint32_t RTIM       : 1;            /*!< [6..6] RTIM                                                               */
      __IOM uint32_t FEIM       : 1;            /*!< [7..7] FEIM                                                               */
      __IOM uint32_t PEIM       : 1;            /*!< [8..8] PEIM                                                               */
      __IOM uint32_t BEIM       : 1;            /*!< [9..9] BEIM                                                               */
      __IOM uint32_t OEIM       : 1;            /*!< [10..10] OEIM                                                             */
            uint32_t            : 21;
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x0000003C) Raw Interrupt Status Register                              */
    
    struct {
      __IM  uint32_t RIRMIS     : 1;            /*!< [0..0] RIRMIS                                                             */
      __IM  uint32_t CTSRMIS    : 1;            /*!< [1..1] CTSRMIS                                                            */
      __IM  uint32_t DCDRMIS    : 1;            /*!< [2..2] DCDRMIS                                                            */
      __IM  uint32_t DSRRMIS    : 1;            /*!< [3..3] DSRRMIS                                                            */
      __IM  uint32_t RXRIS      : 1;            /*!< [4..4] RXRIS                                                              */
      __IM  uint32_t TXRIS      : 1;            /*!< [5..5] TXRIS                                                              */
      __IM  uint32_t RTRIS      : 1;            /*!< [6..6] RTRIS                                                              */
      __IM  uint32_t FERIS      : 1;            /*!< [7..7] FERIS                                                              */
      __IM  uint32_t PERIS      : 1;            /*!< [8..8] PERIS                                                              */
      __IM  uint32_t BERIS      : 1;            /*!< [9..9] BERIS                                                              */
      __IM  uint32_t OERIS      : 1;            /*!< [10..10] OERIS                                                            */
            uint32_t            : 21;
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000040) Masked Interrupt Status Register                           */
    
    struct {
      __IM  uint32_t RIMMIS     : 1;            /*!< [0..0] RIMMIS                                                             */
      __IM  uint32_t CTSMMIS    : 1;            /*!< [1..1] CTSMMIS                                                            */
      __IM  uint32_t DCDMMIS    : 1;            /*!< [2..2] DCDMMIS                                                            */
      __IM  uint32_t DSRMMIS    : 1;            /*!< [3..3] DSRMMIS                                                            */
      __IM  uint32_t RXMIS      : 1;            /*!< [4..4] RXMIS                                                              */
      __IM  uint32_t TXMIS      : 1;            /*!< [5..5] TXMIS                                                              */
      __IM  uint32_t RTMIS      : 1;            /*!< [6..6] RTMIS                                                              */
      __IM  uint32_t FEMIS      : 1;            /*!< [7..7] FEMIS                                                              */
      __IM  uint32_t PEMIS      : 1;            /*!< [8..8] PEMIS                                                              */
      __IM  uint32_t BEMIS      : 1;            /*!< [9..9] BEMIS                                                              */
      __IM  uint32_t OEMIS      : 1;            /*!< [10..10] OEMIS                                                            */
            uint32_t            : 21;
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000044) Interrupt Clear Register                                   */
    
    struct {
      __OM  uint32_t RIMIC      : 1;            /*!< [0..0] RIMIC                                                              */
      __OM  uint32_t CTSMIC     : 1;            /*!< [1..1] CTSMIC                                                             */
      __OM  uint32_t DCDMIC     : 1;            /*!< [2..2] DCDMIC                                                             */
      __OM  uint32_t DSRMIC     : 1;            /*!< [3..3] DSRMIC                                                             */
      __OM  uint32_t RXIC       : 1;            /*!< [4..4] RXIC                                                               */
      __OM  uint32_t TXIC       : 1;            /*!< [5..5] TXIC                                                               */
      __OM  uint32_t RTIC       : 1;            /*!< [6..6] RTIC                                                               */
      __OM  uint32_t FEIC       : 1;            /*!< [7..7] FEIC                                                               */
      __OM  uint32_t PEIC       : 1;            /*!< [8..8] PEIC                                                               */
      __OM  uint32_t BEIC       : 1;            /*!< [9..9] BEIC                                                               */
      __OM  uint32_t OEIC       : 1;            /*!< [10..10] OEIC                                                             */
            uint32_t            : 21;
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000048) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] RXDMAE                                                             */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] TXDMAE                                                             */
      __IOM uint32_t DMAONERR   : 1;            /*!< [2..2] DMAONERR                                                           */
            uint32_t            : 29;
    } DMACR_b;
  } ;
} ARM_UART_PL011_Type;                          /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom SPI Controller (SPI0)
  */

typedef struct {                                /*!< (@ 0xFE204000) SPI0 Structure                                             */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Control and Status                                         */
    
    struct {
      __IOM uint32_t CS         : 2;            /*!< [1..0] Chip select                                                        */
      __IOM uint32_t CPHA       : 1;            /*!< [2..2] Clock phase                                                        */
      __IOM uint32_t CPOL       : 1;            /*!< [3..3] Clock polarity                                                     */
      __IOM uint32_t CLEAR      : 2;            /*!< [5..4] Clear the FIFO(s)                                                  */
      __IOM uint32_t CSPOL      : 1;            /*!< [6..6] Chip select polarity                                               */
      __IOM uint32_t TA         : 1;            /*!< [7..7] Transfer active                                                    */
      __IOM uint32_t DMAEN      : 1;            /*!< [8..8] Enable DMA                                                         */
      __IOM uint32_t INTD       : 1;            /*!< [9..9] Interrupt on done                                                  */
      __IOM uint32_t INTR       : 1;            /*!< [10..10] Interrupt on RX                                                  */
      __IOM uint32_t ADCS       : 1;            /*!< [11..11] Automatically deassert chip select                               */
      __IOM uint32_t REN        : 1;            /*!< [12..12] Read enable                                                      */
      __IOM uint32_t LEN        : 1;            /*!< [13..13] LoSSI enable                                                     */
      __IOM uint32_t LMONO      : 1;            /*!< [14..14] LMONO                                                            */
      __IOM uint32_t TE_EN      : 1;            /*!< [15..15] TE_EN                                                            */
      __IM  uint32_t DONE       : 1;            /*!< [16..16] Transfer is done                                                 */
      __IM  uint32_t RXD        : 1;            /*!< [17..17] RX FIFO contains data                                            */
      __IM  uint32_t TXD        : 1;            /*!< [18..18] TX FIFO can accept data                                          */
      __IM  uint32_t RXR        : 1;            /*!< [19..19] RX FIFO has data to be read                                      */
      __IM  uint32_t RXF        : 1;            /*!< [20..20] RX FIFO full                                                     */
      __IOM uint32_t CSPOL0     : 1;            /*!< [21..21] Chip select 0 polarity                                           */
      __IOM uint32_t CSPOL1     : 1;            /*!< [22..22] Chip select 1 polarity                                           */
      __IOM uint32_t CSPOL2     : 1;            /*!< [23..23] Chip select 2 polarity                                           */
      __IOM uint32_t DMA_LEN    : 1;            /*!< [24..24] Enable DMA in LoSSI mode                                         */
      __IOM uint32_t LEN_LONG   : 1;            /*!< [25..25] Enable long data word in LoSSI mode                              */
            uint32_t            : 6;
    } CS_b;
  } ;
  
  union {
    __IOM uint32_t FIFO;                        /*!< (@ 0x00000004) FIFO access                                                */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data                                                              */
    } FIFO_b;
  } ;
  
  union {
    __IOM uint32_t CLK;                         /*!< (@ 0x00000008) Clock divider                                              */
    
    struct {
      __IOM uint32_t CDIV       : 16;           /*!< [15..0] Clock divider                                                     */
            uint32_t            : 16;
    } CLK_b;
  } ;
  
  union {
    __IOM uint32_t DLEN;                        /*!< (@ 0x0000000C) Data length                                                */
    
    struct {
      __IOM uint32_t DLEN       : 16;           /*!< [15..0] Data length                                                       */
            uint32_t            : 16;
    } DLEN_b;
  } ;
  
  union {
    __IOM uint32_t LTOH;                        /*!< (@ 0x00000010) LoSSI output hold delay                                    */
    
    struct {
      __IOM uint32_t TOH        : 4;            /*!< [3..0] Output hold delay                                                  */
            uint32_t            : 28;
    } LTOH_b;
  } ;
  
  union {
    __IOM uint32_t DC;                          /*!< (@ 0x00000014) DC                                                         */
    
    struct {
      __IOM uint32_t TDREQ      : 8;            /*!< [7..0] DMA Write request threshold                                        */
      __IOM uint32_t TPANIC     : 8;            /*!< [15..8] DMA write panic threshold                                         */
      __IOM uint32_t RDREQ      : 8;            /*!< [23..16] DMA read request threshold                                       */
      __IOM uint32_t RPANIC     : 8;            /*!< [31..24] DMA read panic threshold                                         */
    } DC_b;
  } ;
} SPI0_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           PACTL                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Interrupt status of new peripherals (PACTL)
  */

typedef struct {                                /*!< (@ 0xFE204E00) PACTL Structure                                            */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Interrupt status                                           */
    
    struct {
      __IOM uint32_t SPI_0      : 1;            /*!< [0..0] SPI0 interrupt active                                              */
      __IOM uint32_t SPI_1      : 1;            /*!< [1..1] SPI1 interrupt active                                              */
      __IOM uint32_t SPI_2      : 1;            /*!< [2..2] SPI2 interrupt active                                              */
      __IOM uint32_t SPI_3      : 1;            /*!< [3..3] SPI3 interrupt active                                              */
      __IOM uint32_t SPI_4      : 1;            /*!< [4..4] SPI4 interrupt active                                              */
      __IOM uint32_t SPI_5      : 1;            /*!< [5..5] SPI5 interrupt active                                              */
      __IOM uint32_t SPI_6      : 1;            /*!< [6..6] SPI6 interrupt active                                              */
            uint32_t            : 1;
      __IOM uint32_t I2C_0      : 1;            /*!< [8..8] I2C0 interrupt active                                              */
      __IOM uint32_t I2C_1      : 1;            /*!< [9..9] I2C1 interrupt active                                              */
      __IOM uint32_t I2C_2      : 1;            /*!< [10..10] I2C2 interrupt active                                            */
      __IOM uint32_t I2C_3      : 1;            /*!< [11..11] I2C3 interrupt active                                            */
      __IOM uint32_t I2C_4      : 1;            /*!< [12..12] I2C4 interrupt active                                            */
      __IOM uint32_t I2C_5      : 1;            /*!< [13..13] I2C5 interrupt active                                            */
      __IOM uint32_t I2C_6      : 1;            /*!< [14..14] I2C6 interrupt active                                            */
      __IOM uint32_t I2C_7      : 1;            /*!< [15..15] I2C7 interrupt active                                            */
      __IOM uint32_t UART_5     : 1;            /*!< [16..16] UART5 interrupt active                                           */
      __IOM uint32_t UART_4     : 1;            /*!< [17..17] UART4 interrupt active                                           */
      __IOM uint32_t UART_3     : 1;            /*!< [18..18] UART3 interrupt active                                           */
      __IOM uint32_t UART_2     : 1;            /*!< [19..19] UART2 interrupt active                                           */
      __IOM uint32_t UART_0     : 1;            /*!< [20..20] UART0 interrupt active                                           */
            uint32_t            : 11;
    } CS_b;
  } ;
} PACTL_Type;                                   /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           BSC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Serial Controller (I2C compatible) (BSC0)
  */

typedef struct {                                /*!< (@ 0xFE205000) BSC0 Structure                                             */
  
  union {
    __IOM uint32_t C;                           /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IOM uint32_t READ       : 1;            /*!< [0..0] Transfer is read                                                   */
            uint32_t            : 3;
      __IOM uint32_t CLEAR      : 2;            /*!< [5..4] Clear the FIFO                                                     */
            uint32_t            : 1;
      __IOM uint32_t ST         : 1;            /*!< [7..7] Start transfer                                                     */
      __IOM uint32_t INTD       : 1;            /*!< [8..8] Interrupt on done                                                  */
      __IOM uint32_t INTT       : 1;            /*!< [9..9] Interrupt on TX                                                    */
      __IOM uint32_t INTR       : 1;            /*!< [10..10] Interrupt on RX                                                  */
            uint32_t            : 4;
      __IOM uint32_t I2CEN      : 1;            /*!< [15..15] I2C Enable                                                       */
            uint32_t            : 16;
    } C_b;
  } ;
  
  union {
    __IOM uint32_t S;                           /*!< (@ 0x00000004) Status                                                     */
    
    struct {
      __IM  uint32_t TA         : 1;            /*!< [0..0] Transfer active                                                    */
      __IOM uint32_t DONE       : 1;            /*!< [1..1] Transfer done                                                      */
      __IM  uint32_t TXW        : 1;            /*!< [2..2] FIFO needs to be written                                           */
      __IM  uint32_t RXR        : 1;            /*!< [3..3] FIFO needs to be read                                              */
      __IM  uint32_t TXD        : 1;            /*!< [4..4] FIFO has space for at least one byte                               */
      __IM  uint32_t RXD        : 1;            /*!< [5..5] FIFO contains at least one byte                                    */
      __IM  uint32_t TXE        : 1;            /*!< [6..6] FIFO is empty. Nothing to transmit                                 */
      __IM  uint32_t RXF        : 1;            /*!< [7..7] FIFO is full. Can't receive anything else                          */
      __IOM uint32_t ERR        : 1;            /*!< [8..8] Error: No ack                                                      */
      __IOM uint32_t CLKT       : 1;            /*!< [9..9] Clock stretch timeout                                              */
            uint32_t            : 22;
    } S_b;
  } ;
  
  union {
    __IOM uint32_t DLEN;                        /*!< (@ 0x00000008) Data length                                                */
    
    struct {
      __IOM uint32_t DLEN       : 16;           /*!< [15..0] Data length                                                       */
            uint32_t            : 16;
    } DLEN_b;
  } ;
  
  union {
    __IOM uint32_t A;                           /*!< (@ 0x0000000C) Slave address                                              */
    
    struct {
      __IOM uint32_t ADDR       : 7;            /*!< [6..0] Slave address                                                      */
            uint32_t            : 25;
    } A_b;
  } ;
  
  union {
    __IOM uint32_t FIFO;                        /*!< (@ 0x00000010) Data FIFO                                                  */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Access the FIFO                                                    */
            uint32_t            : 24;
    } FIFO_b;
  } ;
  
  union {
    __IOM uint32_t DIV;                         /*!< (@ 0x00000014) Clock divider                                              */
    
    struct {
      __IOM uint32_t CDIV       : 16;           /*!< [15..0] Divide the source clock                                           */
            uint32_t            : 16;
    } DIV_b;
  } ;
  
  union {
    __IOM uint32_t DEL;                         /*!< (@ 0x00000018) Data delay (Values must be under CDIV / 2)                 */
    
    struct {
      __IOM uint32_t REDL       : 16;           /*!< [15..0] Delay before reading after a rising edge                          */
      __IOM uint32_t FEDL       : 16;           /*!< [31..16] Delay before reading after a falling edge                        */
    } DEL_b;
  } ;
  
  union {
    __IOM uint32_t CLKT;                        /*!< (@ 0x0000001C) Clock stretch timeout (broken on 283x)                     */
    
    struct {
      __IOM uint32_t TOUT       : 16;           /*!< [15..0] Number of SCL clock cycles to wait                                */
            uint32_t            : 16;
    } CLKT_b;
  } ;
} BSC0_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom PWM (PWM0)
  */

typedef struct {                                /*!< (@ 0xFE20C000) PWM0 Structure                                             */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IOM uint32_t PWEN1      : 1;            /*!< [0..0] Enable channel 1                                                   */
      __IOM uint32_t MODE1      : 1;            /*!< [1..1] Channel 1 mode                                                     */
      __IOM uint32_t RPTL1      : 1;            /*!< [2..2] Repeat last value from FIFO for channel 1                          */
      __IOM uint32_t SBIT1      : 1;            /*!< [3..3] State when not transmitting on channel 1                           */
      __IOM uint32_t POLA1      : 1;            /*!< [4..4] Channel 1 polarity inverted                                        */
      __IOM uint32_t USEF1      : 1;            /*!< [5..5] Use FIFO for channel 1                                             */
      __IOM uint32_t CLRF1      : 1;            /*!< [6..6] Clear FIFO                                                         */
      __IOM uint32_t MSEN1      : 1;            /*!< [7..7] M/S mode for channel 1                                             */
      __IOM uint32_t PWEN2      : 1;            /*!< [8..8] Enable channel 2                                                   */
      __IOM uint32_t MODE2      : 1;            /*!< [9..9] Channel 2 mode                                                     */
      __IOM uint32_t RPTL2      : 1;            /*!< [10..10] Repeat last value from FIFO for channel 2                        */
      __IOM uint32_t SBIT2      : 1;            /*!< [11..11] State when not transmitting on channel 2                         */
      __IOM uint32_t POLA2      : 1;            /*!< [12..12] Channel 2 polarity inverted                                      */
      __IOM uint32_t USEF2      : 1;            /*!< [13..13] Use FIFO for channel 2                                           */
            uint32_t            : 1;
      __IOM uint32_t MSEN2      : 1;            /*!< [15..15] M/S mode for channel 2                                           */
            uint32_t            : 16;
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t STA;                         /*!< (@ 0x00000004) Status                                                     */
    
    struct {
      __IOM uint32_t FULL1      : 1;            /*!< [0..0] FIFO full                                                          */
      __IOM uint32_t EMPT1      : 1;            /*!< [1..1] FIFO empty                                                         */
      __IOM uint32_t WERR1      : 1;            /*!< [2..2] FIFO write error                                                   */
      __IOM uint32_t RERR1      : 1;            /*!< [3..3] FIFO read error                                                    */
      __IOM uint32_t GAPO1      : 1;            /*!< [4..4] Channel 1 gap occurred                                             */
      __IOM uint32_t GAPO2      : 1;            /*!< [5..5] Channel 2 gap occurred                                             */
      __IOM uint32_t GAPO3      : 1;            /*!< [6..6] Channel 3 gap occurred                                             */
      __IOM uint32_t GAPO4      : 1;            /*!< [7..7] Channel 4 gap occurred                                             */
      __IOM uint32_t BERR       : 1;            /*!< [8..8] Bus error                                                          */
      __IOM uint32_t STA1       : 1;            /*!< [9..9] Channel 1 state                                                    */
      __IOM uint32_t STA2       : 1;            /*!< [10..10] Channel 2 state                                                  */
      __IOM uint32_t STA3       : 1;            /*!< [11..11] Channel 3 state                                                  */
      __IOM uint32_t STA4       : 1;            /*!< [12..12] Channel 4 state                                                  */
            uint32_t            : 19;
    } STA_b;
  } ;
  
  union {
    __IOM uint32_t DMAC;                        /*!< (@ 0x00000008) DMA control                                                */
    
    struct {
      __IOM uint32_t DREQ       : 8;            /*!< [7..0] DMA threshold for DREQ signal                                      */
      __IOM uint32_t PANIC      : 8;            /*!< [15..8] DMA threshold for panic signal                                    */
            uint32_t            : 15;
      __IOM uint32_t ENAB       : 1;            /*!< [31..31] DMA enabled                                                      */
    } DMAC_b;
  } ;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  RNG1;                         /*!< (@ 0x00000010) Range for channel 1                                        */
  __IOM uint32_t  DAT1;                         /*!< (@ 0x00000014) Channel 1 data                                             */
  __OM  uint32_t  FIF1;                         /*!< (@ 0x00000018) FIFO input                                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  RNG2;                         /*!< (@ 0x00000020) Range for channel 2                                        */
  __IOM uint32_t  DAT2;                         /*!< (@ 0x00000024) Channel 2 data                                             */
} PWM0_Type;                                    /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                            AUX                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Three auxiliary peripherals (AUX)
  */

typedef struct {                                /*!< (@ 0xFE215000) AUX Structure                                              */
  
  union {
    __IOM uint32_t IRQ;                         /*!< (@ 0x00000000) Interrupt status                                           */
    
    struct {
      __IOM uint32_t UART_1     : 1;            /*!< [0..0] UART1 interrupt active                                             */
      __IOM uint32_t SPI_1      : 1;            /*!< [1..1] SPI1 interrupt active                                              */
      __IOM uint32_t SPI_2      : 1;            /*!< [2..2] SPI2 interrupt active                                              */
            uint32_t            : 29;
    } IRQ_b;
  } ;
  
  union {
    __IOM uint32_t ENABLES;                     /*!< (@ 0x00000004) Enable sub-peripherals                                     */
    
    struct {
      __IOM uint32_t UART_1     : 1;            /*!< [0..0] UART1 enabled                                                      */
      __IOM uint32_t SPI_1      : 1;            /*!< [1..1] SPI1 enabled                                                       */
      __IOM uint32_t SPI_2      : 1;            /*!< [2..2] SPI2 enabled                                                       */
            uint32_t            : 29;
    } ENABLES_b;
  } ;
} AUX_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Mini UART (UART1)
  */

typedef struct {                                /*!< (@ 0xFE215040) UART1 Structure                                            */
  
  union {
    union {
      __IOM uint32_t IO;                        /*!< (@ 0x00000000) I/O Data                                                   */
      
      struct {
        __IOM uint32_t DATA     : 8;            /*!< [7..0] FIFO access                                                        */
              uint32_t          : 24;
      } IO_b;
    } ;
    __IOM uint8_t BAUDL;                        /*!< (@ 0x00000000) Lower bits of baudrate when DLAB is set                    */
  };
  
  union {
    union {
      __IOM uint32_t IER;                       /*!< (@ 0x00000004) Interrupt Enable                                           */
      
      struct {
        __IOM uint32_t DATA_READY : 1;          /*!< [0..0] Receive FIFO has at least 1 byte                                   */
        __IOM uint32_t TX_READY : 1;            /*!< [1..1] Transmit FIFO is empty                                             */
              uint32_t          : 30;
      } IER_b;
    } ;
    __IOM uint8_t BAUDH;                        /*!< (@ 0x00000004) High bits of baudrate when DLAB is set                     */
  };
  
  union {
    __IOM uint32_t IIR;                         /*!< (@ 0x00000008) Interrupt Identify                                         */
    
    struct {
      __IOM uint32_t nPENDING   : 1;            /*!< [0..0] No pending interrupt                                               */
      __IOM uint32_t DATA_READY : 1;            /*!< [1..1] Receive FIFO has at least 1 byte                                   */
      __IOM uint32_t TX_READY   : 1;            /*!< [2..2] Transmit FIFO is empty                                             */
            uint32_t            : 29;
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) Line control                                               */
    
    struct {
      __IOM uint32_t DATA_SIZE  : 2;            /*!< [1..0] UART word size                                                     */
            uint32_t            : 4;
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Pull TX low continuously to send break                             */
      __IOM uint32_t DLAB       : 1;            /*!< [7..7] First two registers are baudrate                                   */
            uint32_t            : 24;
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t MCR;                         /*!< (@ 0x00000010) Modem Control                                              */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t RTS        : 1;            /*!< [1..1] RTS is low                                                         */
            uint32_t            : 30;
    } MCR_b;
  } ;
  
  union {
    __IOM uint32_t LSR;                         /*!< (@ 0x00000014) Line Status                                                */
    
    struct {
      __IOM uint32_t DATA_READY : 1;            /*!< [0..0] Receive FIFO has at least one byte                                 */
      __IOM uint32_t RX_OVERRUN : 1;            /*!< [1..1] Receive FIFO overrun                                               */
            uint32_t            : 3;
      __IOM uint32_t TX_EMPTY   : 1;            /*!< [5..5] Transmit FIFO has room for at least one byte                       */
      __IOM uint32_t TX_IDLE    : 1;            /*!< [6..6] Transmit FIFO empty and all bits shifted out                       */
            uint32_t            : 25;
    } LSR_b;
  } ;
  
  union {
    __IOM uint32_t MSR;                         /*!< (@ 0x00000018) Modem Status                                               */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t CTS        : 1;            /*!< [4..4] CTS is low                                                         */
            uint32_t            : 27;
    } MSR_b;
  } ;
  __IOM uint8_t   SCRATCH;                      /*!< (@ 0x0000001C) Scratch                                                    */
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint32_t CNTL;                        /*!< (@ 0x00000020) Control                                                    */
    
    struct {
      __IOM uint32_t RX_ENABLE  : 1;            /*!< [0..0] Enable receive                                                     */
      __IOM uint32_t TX_ENABLE  : 1;            /*!< [1..1] Enable transmit                                                    */
      __IOM uint32_t RTS_ENABLE : 1;            /*!< [2..2] Enable auto receive flow control with RTS                          */
      __IOM uint32_t CTS_ENABLE : 1;            /*!< [3..3] Enable auto transmit flow control with CTS                         */
      __IOM uint32_t RTS_FIFO_LEVEL : 2;        /*!< [5..4] FIFO level to de-assert RTS                                        */
      __IOM uint32_t RTS_ASSERT : 1;            /*!< [6..6] RTS assert level                                                   */
      __IOM uint32_t CTS_ASSERT : 1;            /*!< [7..7] CTS assert level                                                   */
            uint32_t            : 24;
    } CNTL_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000024) Status                                                     */
    
    struct {
      __IOM uint32_t DATA_READY : 1;            /*!< [0..0] Receive FIFO has at least one symbol                               */
      __IOM uint32_t TX_READY   : 1;            /*!< [1..1] Transmit FIFO has space for at least one symbol                    */
      __IOM uint32_t RX_IDLE    : 1;            /*!< [2..2] Receiver is idle                                                   */
      __IOM uint32_t TX_IDLE    : 1;            /*!< [3..3] Transmitter is idle                                                */
      __IOM uint32_t RX_OVERRUN : 1;            /*!< [4..4] Receive FIFO overrun                                               */
      __IOM uint32_t TX_FULL    : 1;            /*!< [5..5] Transmit FIFO is full                                              */
      __IOM uint32_t RTS_STATUS : 1;            /*!< [6..6] RTS state                                                          */
      __IOM uint32_t CTS_STATUS : 1;            /*!< [7..7] CTS state                                                          */
      __IOM uint32_t TX_EMPTY   : 1;            /*!< [8..8] Transmit FIFO is completely empty                                  */
      __IOM uint32_t TX_DONE    : 1;            /*!< [9..9] Transmit FIFO is empty and transmitter is idle                     */
            uint32_t            : 6;
      __IOM uint32_t RX_FIFO_LEVEL : 4;         /*!< [19..16] How many entries are filled in the RX FIFO                       */
            uint32_t            : 4;
      __IOM uint32_t TX_FIFO_LEVEL : 4;         /*!< [27..24] How many entries are filled in the TX FIFO                       */
            uint32_t            : 4;
    } STAT_b;
  } ;
  __IOM uint16_t  BAUD;                         /*!< (@ 0x00000028) Baudrate                                                   */
  __IM  uint16_t  RESERVED2;
} UART1_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Aux SPI (SPI1)
  */

typedef struct {                                /*!< (@ 0xFE215080) SPI1 Structure                                             */
  
  union {
    __IOM uint32_t CNTL0;                       /*!< (@ 0x00000000) Control 0                                                  */
    
    struct {
      __IOM uint32_t SHIFT_LENGTH : 6;          /*!< [5..0] Number of bits to shift                                            */
      __IOM uint32_t MSB_FIRST  : 1;            /*!< [6..6] Shift out the most significant bit (MSB) first                     */
      __IOM uint32_t INVERT_CLK : 1;            /*!< [7..7] Idle clock high                                                    */
      __IOM uint32_t OUT_RISING : 1;            /*!< [8..8] Data is clocked out on rising edge of CLK                          */
      __IOM uint32_t CLEAR_FIFOS : 1;           /*!< [9..9] Clear FIFOs                                                        */
      __IOM uint32_t IN_RISING  : 1;            /*!< [10..10] Data is clocked in on rising edge of CLK                         */
      __IOM uint32_t ENABLE     : 1;            /*!< [11..11] Enable the interface                                             */
      __IOM uint32_t DOUT_HOLD_TIME : 2;        /*!< [13..12] Controls extra DOUT hold time in system clock cycles             */
      __IOM uint32_t VARIABLE_WIDTH : 1;        /*!< [14..14] Take shift length and data from FIFO                             */
      __IOM uint32_t VARIABLE_CS : 1;           /*!< [15..15] Take CS pattern and data from TX FIFO (along with VARIABLE_WIDTH) */
      __IOM uint32_t POST_INPUT : 1;            /*!< [16..16] Post input mode                                                  */
      __IOM uint32_t CHIP_SELECTS : 3;          /*!< [19..17] The CS pattern when active                                       */
      __IOM uint32_t SPEED      : 12;           /*!< [31..20] SPI clock speed. clk = sys / 2 * (SPEED + 1)                     */
    } CNTL0_b;
  } ;
  
  union {
    __IOM uint32_t CNTL1;                       /*!< (@ 0x00000004) Control 1                                                  */
    
    struct {
      __IOM uint32_t KEEP_INPUT : 1;            /*!< [0..0] Don't clear the RX shift register before a new transaction         */
      __IOM uint32_t MSB_FIRST  : 1;            /*!< [1..1] Shift the most significant bit first (MSB)                         */
            uint32_t            : 4;
      __IOM uint32_t DONE_ENABLE : 1;           /*!< [6..6] Enable DONE interrupt                                              */
      __IOM uint32_t TXE_ENABLE : 1;            /*!< [7..7] Enable TX empty interrupt                                          */
      __IOM uint32_t CS_HIGH_TIME : 3;          /*!< [10..8] Additional SPI clock cycles where CS is high                      */
            uint32_t            : 21;
    } CNTL1_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000008) Status                                                     */
    
    struct {
      __IOM uint32_t BIT_COUNT  : 6;            /*!< [5..0] Number of bits left to be processed.                               */
      __IOM uint32_t BUSY       : 1;            /*!< [6..6] Indicates a transfer is ongoing                                    */
      __IOM uint32_t RX_EMPTY   : 1;            /*!< [7..7] RX FIFO is empty                                                   */
      __IOM uint32_t RX_FULL    : 1;            /*!< [8..8] RX FIFO is full                                                    */
      __IOM uint32_t TX_EMPTY   : 1;            /*!< [9..9] TX FIFO is empty                                                   */
      __IOM uint32_t TX_FULL    : 1;            /*!< [10..10] TX FIFO is full                                                  */
            uint32_t            : 5;
      __IOM uint32_t RX_LEVEL   : 4;            /*!< [19..16] Number of entries in RX FIFO                                     */
            uint32_t            : 4;
      __IOM uint32_t TX_LEVEL   : 4;            /*!< [27..24] Number of entries in TX FIFO                                     */
            uint32_t            : 4;
    } STAT_b;
  } ;
  
  union {
    __IM  uint32_t PEEK;                        /*!< (@ 0x0000000C) Read the RXFIFO without removing an entry                  */
    
    struct {
      __IM  uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } PEEK_b;
  } ;
  
  union {
    __IOM uint32_t IO0;                         /*!< (@ 0x00000010) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO0_b;
  } ;
  
  union {
    __IOM uint32_t IO1;                         /*!< (@ 0x00000014) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO1_b;
  } ;
  
  union {
    __IOM uint32_t IO2;                         /*!< (@ 0x00000018) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO2_b;
  } ;
  
  union {
    __IOM uint32_t IO3;                         /*!< (@ 0x0000001C) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO3_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD0;                     /*!< (@ 0x00000020) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD0_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD1;                     /*!< (@ 0x00000024) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD1_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD2;                     /*!< (@ 0x00000028) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD2_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD3;                     /*!< (@ 0x0000002C) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD3_b;
  } ;
} SPI1_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                            LIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Legacy Interrupt Controller (LIC)
  */

typedef struct {                                /*!< (@ 0xFF800000) LIC Structure                                              */
  __IM  uint32_t  RESERVED[128];
  
  union {
    __IM  uint32_t BASIC_PENDING;               /*!< (@ 0x00000200) Basic pending info                                         */
    
    struct {
      __IM  uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IM  uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IM  uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IM  uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IM  uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IM  uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IM  uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IM  uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IM  uint32_t PENDING_1  : 1;            /*!< [8..8] One or more bits are set in PENDING_1 (ignores 7, 9,
                                                     10, 18, 19)                                                               */
      __IM  uint32_t PENDING_2  : 1;            /*!< [9..9] One or more bits are set in PENDING_2 (ignores 53 - 57,
                                                     62)                                                                       */
      __IM  uint32_t INT7       : 1;            /*!< [10..10] Interrupt 7                                                      */
      __IM  uint32_t INT9       : 1;            /*!< [11..11] Interrupt 9                                                      */
      __IM  uint32_t INT10      : 1;            /*!< [12..12] Interrupt 10                                                     */
      __IM  uint32_t INT18      : 1;            /*!< [13..13] Interrupt 18                                                     */
      __IM  uint32_t INT19      : 1;            /*!< [14..14] Interrupt 19                                                     */
      __IM  uint32_t INT53      : 1;            /*!< [15..15] Interrupt 53                                                     */
      __IM  uint32_t INT54      : 1;            /*!< [16..16] Interrupt 54                                                     */
      __IM  uint32_t INT55      : 1;            /*!< [17..17] Interrupt 55                                                     */
      __IM  uint32_t INT56      : 1;            /*!< [18..18] Interrupt 56                                                     */
      __IM  uint32_t INT57      : 1;            /*!< [19..19] Interrupt 57                                                     */
      __IM  uint32_t INT62      : 1;            /*!< [20..20] Interrupt 62                                                     */
            uint32_t            : 11;
    } BASIC_PENDING_b;
  } ;
  
  union {
    __IM  uint32_t PENDING_1;                   /*!< (@ 0x00000204) Pending state for interrupts 1 - 31                        */
    
    struct {
      __IM  uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IM  uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IM  uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IM  uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IM  uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IM  uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IM  uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IM  uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IM  uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IM  uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IM  uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IM  uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IM  uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IM  uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IM  uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IM  uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IM  uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IM  uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IM  uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IM  uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IM  uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IM  uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IM  uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IM  uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IM  uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IM  uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IM  uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IM  uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IM  uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IM  uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IM  uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IM  uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } PENDING_1_b;
  } ;
  
  union {
    __IM  uint32_t PENDING_2;                   /*!< (@ 0x00000208) Pending state for interrupts 32 - 63                       */
    
    struct {
      __IM  uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IM  uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IM  uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IM  uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IM  uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IM  uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IM  uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IM  uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IM  uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IM  uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IM  uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IM  uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IM  uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IM  uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IM  uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IM  uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IM  uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IM  uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IM  uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IM  uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IM  uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IM  uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IM  uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IM  uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IM  uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IM  uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IM  uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IM  uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IM  uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IM  uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IM  uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IM  uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } PENDING_2_b;
  } ;
  
  union {
    __IOM uint32_t FIQ_CONTROL;                 /*!< (@ 0x0000020C) FIQ control                                                */
    
    struct {
      __IOM uint32_t SOURCE     : 7;            /*!< [6..0] FIQ Source                                                         */
      __IOM uint32_t ENABLE     : 1;            /*!< [7..7] FIQ Enable                                                         */
            uint32_t            : 24;
    } FIQ_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t ENABLE_1;                    /*!< (@ 0x00000210) Enable interrupts 1 - 31                                   */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } ENABLE_1_b;
  } ;
  
  union {
    __IOM uint32_t ENABLE_2;                    /*!< (@ 0x00000214) Enable interrupts 32 - 63                                  */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } ENABLE_2_b;
  } ;
  
  union {
    __IOM uint32_t ENABLE_BASIC;                /*!< (@ 0x00000218) Enable basic interrupts                                    */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
            uint32_t            : 24;
    } ENABLE_BASIC_b;
  } ;
  
  union {
    __IOM uint32_t DISABLE_1;                   /*!< (@ 0x0000021C) Disable interrupts 1 - 31                                  */
    
    struct {
      __IOM uint32_t INT0       : 1;            /*!< [0..0] Interrupt 0                                                        */
      __IOM uint32_t INT1       : 1;            /*!< [1..1] Interrupt 1                                                        */
      __IOM uint32_t INT2       : 1;            /*!< [2..2] Interrupt 2                                                        */
      __IOM uint32_t INT3       : 1;            /*!< [3..3] Interrupt 3                                                        */
      __IOM uint32_t INT4       : 1;            /*!< [4..4] Interrupt 4                                                        */
      __IOM uint32_t INT5       : 1;            /*!< [5..5] Interrupt 5                                                        */
      __IOM uint32_t INT6       : 1;            /*!< [6..6] Interrupt 6                                                        */
      __IOM uint32_t INT7       : 1;            /*!< [7..7] Interrupt 7                                                        */
      __IOM uint32_t INT8       : 1;            /*!< [8..8] Interrupt 8                                                        */
      __IOM uint32_t INT9       : 1;            /*!< [9..9] Interrupt 9                                                        */
      __IOM uint32_t INT10      : 1;            /*!< [10..10] Interrupt 10                                                     */
      __IOM uint32_t INT11      : 1;            /*!< [11..11] Interrupt 11                                                     */
      __IOM uint32_t INT12      : 1;            /*!< [12..12] Interrupt 12                                                     */
      __IOM uint32_t INT13      : 1;            /*!< [13..13] Interrupt 13                                                     */
      __IOM uint32_t INT14      : 1;            /*!< [14..14] Interrupt 14                                                     */
      __IOM uint32_t INT15      : 1;            /*!< [15..15] Interrupt 15                                                     */
      __IOM uint32_t INT16      : 1;            /*!< [16..16] Interrupt 16                                                     */
      __IOM uint32_t INT17      : 1;            /*!< [17..17] Interrupt 17                                                     */
      __IOM uint32_t INT18      : 1;            /*!< [18..18] Interrupt 18                                                     */
      __IOM uint32_t INT19      : 1;            /*!< [19..19] Interrupt 19                                                     */
      __IOM uint32_t INT20      : 1;            /*!< [20..20] Interrupt 20                                                     */
      __IOM uint32_t INT21      : 1;            /*!< [21..21] Interrupt 21                                                     */
      __IOM uint32_t INT22      : 1;            /*!< [22..22] Interrupt 22                                                     */
      __IOM uint32_t INT23      : 1;            /*!< [23..23] Interrupt 23                                                     */
      __IOM uint32_t INT24      : 1;            /*!< [24..24] Interrupt 24                                                     */
      __IOM uint32_t INT25      : 1;            /*!< [25..25] Interrupt 25                                                     */
      __IOM uint32_t INT26      : 1;            /*!< [26..26] Interrupt 26                                                     */
      __IOM uint32_t INT27      : 1;            /*!< [27..27] Interrupt 27                                                     */
      __IOM uint32_t INT28      : 1;            /*!< [28..28] Interrupt 28                                                     */
      __IOM uint32_t INT29      : 1;            /*!< [29..29] Interrupt 29                                                     */
      __IOM uint32_t INT30      : 1;            /*!< [30..30] Interrupt 30                                                     */
      __IOM uint32_t INT31      : 1;            /*!< [31..31] Interrupt 31                                                     */
    } DISABLE_1_b;
  } ;
  
  union {
    __IOM uint32_t DISABLE_2;                   /*!< (@ 0x00000220) Disable interrupts 32 - 63                                 */
    
    struct {
      __IOM uint32_t INT32      : 1;            /*!< [0..0] Interrupt 32                                                       */
      __IOM uint32_t INT33      : 1;            /*!< [1..1] Interrupt 33                                                       */
      __IOM uint32_t INT34      : 1;            /*!< [2..2] Interrupt 34                                                       */
      __IOM uint32_t INT35      : 1;            /*!< [3..3] Interrupt 35                                                       */
      __IOM uint32_t INT36      : 1;            /*!< [4..4] Interrupt 36                                                       */
      __IOM uint32_t INT37      : 1;            /*!< [5..5] Interrupt 37                                                       */
      __IOM uint32_t INT38      : 1;            /*!< [6..6] Interrupt 38                                                       */
      __IOM uint32_t INT39      : 1;            /*!< [7..7] Interrupt 39                                                       */
      __IOM uint32_t INT40      : 1;            /*!< [8..8] Interrupt 40                                                       */
      __IOM uint32_t INT41      : 1;            /*!< [9..9] Interrupt 41                                                       */
      __IOM uint32_t INT42      : 1;            /*!< [10..10] Interrupt 42                                                     */
      __IOM uint32_t INT43      : 1;            /*!< [11..11] Interrupt 43                                                     */
      __IOM uint32_t INT44      : 1;            /*!< [12..12] Interrupt 44                                                     */
      __IOM uint32_t INT45      : 1;            /*!< [13..13] Interrupt 45                                                     */
      __IOM uint32_t INT46      : 1;            /*!< [14..14] Interrupt 46                                                     */
      __IOM uint32_t INT47      : 1;            /*!< [15..15] Interrupt 47                                                     */
      __IOM uint32_t INT48      : 1;            /*!< [16..16] Interrupt 48                                                     */
      __IOM uint32_t INT49      : 1;            /*!< [17..17] Interrupt 49                                                     */
      __IOM uint32_t INT50      : 1;            /*!< [18..18] Interrupt 50                                                     */
      __IOM uint32_t INT51      : 1;            /*!< [19..19] Interrupt 51                                                     */
      __IOM uint32_t INT52      : 1;            /*!< [20..20] Interrupt 52                                                     */
      __IOM uint32_t INT53      : 1;            /*!< [21..21] Interrupt 53                                                     */
      __IOM uint32_t INT54      : 1;            /*!< [22..22] Interrupt 54                                                     */
      __IOM uint32_t INT55      : 1;            /*!< [23..23] Interrupt 55                                                     */
      __IOM uint32_t INT56      : 1;            /*!< [24..24] Interrupt 56                                                     */
      __IOM uint32_t INT57      : 1;            /*!< [25..25] Interrupt 57                                                     */
      __IOM uint32_t INT58      : 1;            /*!< [26..26] Interrupt 58                                                     */
      __IOM uint32_t INT59      : 1;            /*!< [27..27] Interrupt 59                                                     */
      __IOM uint32_t INT60      : 1;            /*!< [28..28] Interrupt 60                                                     */
      __IOM uint32_t INT61      : 1;            /*!< [29..29] Interrupt 61                                                     */
      __IOM uint32_t INT62      : 1;            /*!< [30..30] Interrupt 62                                                     */
      __IOM uint32_t INT63      : 1;            /*!< [31..31] Interrupt 63                                                     */
    } DISABLE_2_b;
  } ;
  
  union {
    __IOM uint32_t DISABLE_BASIC;               /*!< (@ 0x00000224) Disable basic interrupts                                   */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
            uint32_t            : 24;
    } DISABLE_BASIC_b;
  } ;
} BCM_LIC_Type;                                 /*!< Size = 552 (0x228)                                                        */



/* =========================================================================================================================== */
/* ================                                         GIC_DIST                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief ARM GIC-400 Generic Interrupt Controller Distributor (GIC_DIST)
  */

typedef struct {                                /*!< (@ 0xFF841000) GIC_DIST Structure                                         */
  
  union {
    __IOM uint32_t GICD_CTLR;                   /*!< (@ 0x00000000) Distributor Control Register                               */
    
    struct {
      __IOM uint32_t ENABLE_GROUP0 : 1;         /*!< [0..0] Enable group 0 interrupts                                          */
      __IOM uint32_t ENABLE_GROUP1 : 1;         /*!< [1..1] Enable group 1 interrupts                                          */
            uint32_t            : 30;
    } GICD_CTLR_b;
  } ;
  
  union {
    __IM  uint32_t GICD_TYPER;                  /*!< (@ 0x00000004) Interrupt Controller Type Register                         */
    
    struct {
      __IM  uint32_t IT_LINES_NUMBER : 5;       /*!< [4..0] Interrupt line number                                              */
      __IM  uint32_t CPU_NUMBER : 3;            /*!< [7..5] CPU number                                                         */
            uint32_t            : 2;
      __IM  uint32_t SECURITY_EXTENSION : 1;    /*!< [10..10] Security extension implemented                                   */
      __IM  uint32_t LSPI       : 4;            /*!< [14..11] Lockable SPI count                                               */
            uint32_t            : 17;
    } GICD_TYPER_b;
  } ;
  
  union {
    __IM  uint32_t GICD_IIDR;                   /*!< (@ 0x00000008) Distributor Implementer Identification Register            */
    
    struct {
      __IM  uint32_t IMPLEMENTER : 12;          /*!< [11..0] Implementer                                                       */
      __IM  uint32_t REVISION   : 4;            /*!< [15..12] Revision                                                         */
      __IM  uint32_t VARIANT    : 4;            /*!< [19..16] Variant                                                          */
            uint32_t            : 4;
      __IM  uint32_t PRODUCT_ID : 8;            /*!< [31..24] Product ID                                                       */
    } GICD_IIDR_b;
  } ;
  __IM  uint32_t  RESERVED[29];
  __IOM GIC_DIST_GICD_IGROUPR_Type GICD_IGROUPR;/*!< (@ 0x00000080) Interrupt Group Registers                                  */
  __IM  uint32_t  RESERVED1[25];
  __IOM GIC_DIST_GICD_ISENABLER_Type GICD_ISENABLER;/*!< (@ 0x00000100) Interrupt Set-Enable Registers                         */
  __IM  uint32_t  RESERVED2[25];
  __IOM GIC_DIST_GICD_ICENABLER_Type GICD_ICENABLER;/*!< (@ 0x00000180) Interrupt Clear-Enable Registers                       */
  __IM  uint32_t  RESERVED3[25];
  __IOM GIC_DIST_GICD_ISPENDR_Type GICD_ISPENDR;/*!< (@ 0x00000200) Interrupt Set-Pending Registers                            */
  __IM  uint32_t  RESERVED4[25];
  __IOM GIC_DIST_GICD_ICPENDR_Type GICD_ICPENDR;/*!< (@ 0x00000280) Interrupt Clear-Pending Registers                          */
  __IM  uint32_t  RESERVED5[25];
  __IOM GIC_DIST_GICD_ISACTIVER_Type GICD_ISACTIVER;/*!< (@ 0x00000300) Interrupt Set-Active Registers                         */
  __IM  uint32_t  RESERVED6[25];
  __IOM GIC_DIST_GICD_ICACTIVER_Type GICD_ICACTIVER;/*!< (@ 0x00000380) Interrupt Clear-Active Registers                       */
  __IM  uint32_t  RESERVED7[25];
  __IOM GIC_DIST_GICD_IPRIORITYR_Type GICD_IPRIORITYR;/*!< (@ 0x00000400) Interrupt Priority                                   */
  __IM  uint32_t  RESERVED8[200];
  __IOM GIC_DIST_GICD_ITARGETSR_Type GICD_ITARGETSR;/*!< (@ 0x00000800) Interrupt Processor Targets                            */
  __IM  uint32_t  RESERVED9[200];
  __IOM GIC_DIST_GICD_ICFGR_Type GICD_ICFGR;    /*!< (@ 0x00000C00) Interrupt Configuration                                    */
  __IM  uint32_t  RESERVED10[50];
  
  union {
    __IOM uint32_t GICD_PPISR;                  /*!< (@ 0x00000D00) Private Peripheral Interrupt Status Register               */
    
    struct {
            uint32_t            : 9;
      __IOM uint32_t ID25       : 1;            /*!< [9..9] Virtual maintenance interrupt                                      */
      __IOM uint32_t ID26       : 1;            /*!< [10..10] Hypervisor timer event                                           */
      __IOM uint32_t ID27       : 1;            /*!< [11..11] Virtual timer event                                              */
      __IOM uint32_t ID28       : 1;            /*!< [12..12] nLEGACYFIQ signal                                                */
      __IOM uint32_t ID29       : 1;            /*!< [13..13] Secure physical timer event                                      */
      __IOM uint32_t ID30       : 1;            /*!< [14..14] Non-secure physical timer event                                  */
      __IOM uint32_t ID31       : 1;            /*!< [15..15] nLEGACYIRQ signal                                                */
            uint32_t            : 16;
    } GICD_PPISR_b;
  } ;
  
  union {
    __IOM uint32_t GICD_SPISR0;                 /*!< (@ 0x00000D04) Shared Peripheral Interrupt Status Registers               */
    
    struct {
      __IOM uint32_t SPI32      : 1;            /*!< [0..0] Shared interrupt 32                                                */
      __IOM uint32_t SPI33      : 1;            /*!< [1..1] Shared interrupt 33                                                */
      __IOM uint32_t SPI34      : 1;            /*!< [2..2] Shared interrupt 34                                                */
      __IOM uint32_t SPI35      : 1;            /*!< [3..3] Shared interrupt 35                                                */
      __IOM uint32_t SPI36      : 1;            /*!< [4..4] Shared interrupt 36                                                */
      __IOM uint32_t SPI37      : 1;            /*!< [5..5] Shared interrupt 37                                                */
      __IOM uint32_t SPI38      : 1;            /*!< [6..6] Shared interrupt 38                                                */
      __IOM uint32_t SPI39      : 1;            /*!< [7..7] Shared interrupt 39                                                */
      __IOM uint32_t SPI40      : 1;            /*!< [8..8] Shared interrupt 40                                                */
      __IOM uint32_t SPI41      : 1;            /*!< [9..9] Shared interrupt 41                                                */
      __IOM uint32_t SPI42      : 1;            /*!< [10..10] Shared interrupt 42                                              */
      __IOM uint32_t SPI43      : 1;            /*!< [11..11] Shared interrupt 43                                              */
      __IOM uint32_t SPI44      : 1;            /*!< [12..12] Shared interrupt 44                                              */
      __IOM uint32_t SPI45      : 1;            /*!< [13..13] Shared interrupt 45                                              */
      __IOM uint32_t SPI46      : 1;            /*!< [14..14] Shared interrupt 46                                              */
      __IOM uint32_t SPI47      : 1;            /*!< [15..15] Shared interrupt 47                                              */
      __IOM uint32_t SPI48      : 1;            /*!< [16..16] Shared interrupt 48                                              */
      __IOM uint32_t SPI49      : 1;            /*!< [17..17] Shared interrupt 49                                              */
      __IOM uint32_t SPI50      : 1;            /*!< [18..18] Shared interrupt 50                                              */
      __IOM uint32_t SPI51      : 1;            /*!< [19..19] Shared interrupt 51                                              */
      __IOM uint32_t SPI52      : 1;            /*!< [20..20] Shared interrupt 52                                              */
      __IOM uint32_t SPI53      : 1;            /*!< [21..21] Shared interrupt 53                                              */
      __IOM uint32_t SPI54      : 1;            /*!< [22..22] Shared interrupt 54                                              */
      __IOM uint32_t SPI55      : 1;            /*!< [23..23] Shared interrupt 55                                              */
      __IOM uint32_t SPI56      : 1;            /*!< [24..24] Shared interrupt 56                                              */
      __IOM uint32_t SPI57      : 1;            /*!< [25..25] Shared interrupt 57                                              */
      __IOM uint32_t SPI58      : 1;            /*!< [26..26] Shared interrupt 58                                              */
      __IOM uint32_t SPI59      : 1;            /*!< [27..27] Shared interrupt 59                                              */
      __IOM uint32_t SPI60      : 1;            /*!< [28..28] Shared interrupt 60                                              */
      __IOM uint32_t SPI61      : 1;            /*!< [29..29] Shared interrupt 61                                              */
      __IOM uint32_t SPI62      : 1;            /*!< [30..30] Shared interrupt 62                                              */
      __IOM uint32_t SPI63      : 1;            /*!< [31..31] Shared interrupt 63                                              */
    } GICD_SPISR0_b;
  } ;
  
  union {
    __IOM uint32_t GICD_SPISR1;                 /*!< (@ 0x00000D08) Shared Peripheral Interrupt Status Registers               */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IOM uint32_t SWI0       : 1;            /*!< [8..8] Software interrupt 0                                               */
      __IOM uint32_t SWI1       : 1;            /*!< [9..9] Software interrupt 1                                               */
      __IOM uint32_t SWI2       : 1;            /*!< [10..10] Software interrupt 2                                             */
      __IOM uint32_t SWI3       : 1;            /*!< [11..11] Software interrupt 3                                             */
      __IOM uint32_t SWI4       : 1;            /*!< [12..12] Software interrupt 4                                             */
      __IOM uint32_t SWI5       : 1;            /*!< [13..13] Software interrupt 5                                             */
      __IOM uint32_t SWI6       : 1;            /*!< [14..14] Software interrupt 6                                             */
      __IOM uint32_t SWI7       : 1;            /*!< [15..15] Software interrupt 7                                             */
      __IOM uint32_t SPI80      : 1;            /*!< [16..16] Shared interrupt 80                                              */
      __IOM uint32_t SPI81      : 1;            /*!< [17..17] Shared interrupt 81                                              */
      __IOM uint32_t SPI82      : 1;            /*!< [18..18] Shared interrupt 82                                              */
      __IOM uint32_t SPI83      : 1;            /*!< [19..19] Shared interrupt 83                                              */
      __IOM uint32_t SPI84      : 1;            /*!< [20..20] Shared interrupt 84                                              */
      __IOM uint32_t SPI85      : 1;            /*!< [21..21] Shared interrupt 85                                              */
      __IOM uint32_t SPI86      : 1;            /*!< [22..22] Shared interrupt 86                                              */
      __IOM uint32_t SPI87      : 1;            /*!< [23..23] Shared interrupt 87                                              */
      __IOM uint32_t SPI88      : 1;            /*!< [24..24] Shared interrupt 88                                              */
      __IOM uint32_t SPI89      : 1;            /*!< [25..25] Shared interrupt 89                                              */
      __IOM uint32_t SPI90      : 1;            /*!< [26..26] Shared interrupt 90                                              */
      __IOM uint32_t SPI91      : 1;            /*!< [27..27] Shared interrupt 91                                              */
      __IOM uint32_t SPI92      : 1;            /*!< [28..28] Shared interrupt 92                                              */
      __IOM uint32_t SPI93      : 1;            /*!< [29..29] Shared interrupt 93                                              */
      __IOM uint32_t SPI94      : 1;            /*!< [30..30] Shared interrupt 94                                              */
      __IOM uint32_t SPI95      : 1;            /*!< [31..31] Shared interrupt 95                                              */
    } GICD_SPISR1_b;
  } ;
  
  union {
    __IOM uint32_t GICD_SPISR2;                 /*!< (@ 0x00000D0C) Shared Peripheral Interrupt Status Registers               */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } GICD_SPISR2_b;
  } ;
  
  union {
    __IOM uint32_t GICD_SPISR3;                 /*!< (@ 0x00000D10) Shared Peripheral Interrupt Status Registers               */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } GICD_SPISR3_b;
  } ;
  
  union {
    __IOM uint32_t GICD_SPISR4;                 /*!< (@ 0x00000D14) Shared Peripheral Interrupt Status Registers               */
    
    struct {
      __IOM uint32_t SPI160     : 1;            /*!< [0..0] Shared interrupt 160                                               */
      __IOM uint32_t SPI161     : 1;            /*!< [1..1] Shared interrupt 161                                               */
      __IOM uint32_t SPI162     : 1;            /*!< [2..2] Shared interrupt 162                                               */
      __IOM uint32_t SPI163     : 1;            /*!< [3..3] Shared interrupt 163                                               */
      __IOM uint32_t SPI164     : 1;            /*!< [4..4] Shared interrupt 164                                               */
      __IOM uint32_t SPI165     : 1;            /*!< [5..5] Shared interrupt 165                                               */
      __IOM uint32_t SPI166     : 1;            /*!< [6..6] Shared interrupt 166                                               */
      __IOM uint32_t SPI167     : 1;            /*!< [7..7] Shared interrupt 167                                               */
      __IOM uint32_t SPI168     : 1;            /*!< [8..8] Shared interrupt 168                                               */
      __IOM uint32_t SPI169     : 1;            /*!< [9..9] Shared interrupt 169                                               */
      __IOM uint32_t SPI170     : 1;            /*!< [10..10] Shared interrupt 170                                             */
      __IOM uint32_t SPI171     : 1;            /*!< [11..11] Shared interrupt 171                                             */
      __IOM uint32_t SPI172     : 1;            /*!< [12..12] Shared interrupt 172                                             */
      __IOM uint32_t SPI173     : 1;            /*!< [13..13] Shared interrupt 173                                             */
      __IOM uint32_t SPI174     : 1;            /*!< [14..14] Shared interrupt 174                                             */
      __IOM uint32_t SPI175     : 1;            /*!< [15..15] Shared interrupt 175                                             */
      __IOM uint32_t SPI176     : 1;            /*!< [16..16] Shared interrupt 176                                             */
      __IOM uint32_t SPI177     : 1;            /*!< [17..17] Shared interrupt 177                                             */
      __IOM uint32_t SPI178     : 1;            /*!< [18..18] Shared interrupt 178                                             */
      __IOM uint32_t SPI179     : 1;            /*!< [19..19] Shared interrupt 179                                             */
      __IOM uint32_t SPI180     : 1;            /*!< [20..20] Shared interrupt 180                                             */
      __IOM uint32_t SPI181     : 1;            /*!< [21..21] Shared interrupt 181                                             */
      __IOM uint32_t SPI182     : 1;            /*!< [22..22] Shared interrupt 182                                             */
      __IOM uint32_t SPI183     : 1;            /*!< [23..23] Shared interrupt 183                                             */
      __IOM uint32_t SPI184     : 1;            /*!< [24..24] Shared interrupt 184                                             */
      __IOM uint32_t SPI185     : 1;            /*!< [25..25] Shared interrupt 185                                             */
      __IOM uint32_t SPI186     : 1;            /*!< [26..26] Shared interrupt 186                                             */
      __IOM uint32_t SPI187     : 1;            /*!< [27..27] Shared interrupt 187                                             */
      __IOM uint32_t SPI188     : 1;            /*!< [28..28] Shared interrupt 188                                             */
      __IOM uint32_t SPI189     : 1;            /*!< [29..29] Shared interrupt 189                                             */
      __IOM uint32_t SPI190     : 1;            /*!< [30..30] Shared interrupt 190                                             */
      __IOM uint32_t SPI191     : 1;            /*!< [31..31] Shared interrupt 191                                             */
    } GICD_SPISR4_b;
  } ;
  
  union {
    __IOM uint32_t GICD_SPISR5;                 /*!< (@ 0x00000D18) Shared Peripheral Interrupt Status Registers               */
    
    struct {
      __IOM uint32_t SPI192     : 1;            /*!< [0..0] Shared interrupt 192                                               */
      __IOM uint32_t SPI193     : 1;            /*!< [1..1] Shared interrupt 193                                               */
      __IOM uint32_t SPI194     : 1;            /*!< [2..2] Shared interrupt 194                                               */
      __IOM uint32_t SPI195     : 1;            /*!< [3..3] Shared interrupt 195                                               */
      __IOM uint32_t SPI196     : 1;            /*!< [4..4] Shared interrupt 196                                               */
      __IOM uint32_t SPI197     : 1;            /*!< [5..5] Shared interrupt 197                                               */
      __IOM uint32_t SPI198     : 1;            /*!< [6..6] Shared interrupt 198                                               */
      __IOM uint32_t SPI199     : 1;            /*!< [7..7] Shared interrupt 199                                               */
      __IOM uint32_t SPI200     : 1;            /*!< [8..8] Shared interrupt 200                                               */
      __IOM uint32_t SPI201     : 1;            /*!< [9..9] Shared interrupt 201                                               */
      __IOM uint32_t SPI202     : 1;            /*!< [10..10] Shared interrupt 202                                             */
      __IOM uint32_t SPI203     : 1;            /*!< [11..11] Shared interrupt 203                                             */
      __IOM uint32_t SPI204     : 1;            /*!< [12..12] Shared interrupt 204                                             */
      __IOM uint32_t SPI205     : 1;            /*!< [13..13] Shared interrupt 205                                             */
      __IOM uint32_t SPI206     : 1;            /*!< [14..14] Shared interrupt 206                                             */
      __IOM uint32_t SPI207     : 1;            /*!< [15..15] Shared interrupt 207                                             */
      __IOM uint32_t SPI208     : 1;            /*!< [16..16] Shared interrupt 208                                             */
      __IOM uint32_t SPI209     : 1;            /*!< [17..17] Shared interrupt 209                                             */
      __IOM uint32_t SPI210     : 1;            /*!< [18..18] Shared interrupt 210                                             */
      __IOM uint32_t SPI211     : 1;            /*!< [19..19] Shared interrupt 211                                             */
      __IOM uint32_t SPI212     : 1;            /*!< [20..20] Shared interrupt 212                                             */
      __IOM uint32_t SPI213     : 1;            /*!< [21..21] Shared interrupt 213                                             */
      __IOM uint32_t SPI214     : 1;            /*!< [22..22] Shared interrupt 214                                             */
      __IOM uint32_t SPI215     : 1;            /*!< [23..23] Shared interrupt 215                                             */
      __IOM uint32_t SPI216     : 1;            /*!< [24..24] Shared interrupt 216                                             */
      __IOM uint32_t SPI217     : 1;            /*!< [25..25] Shared interrupt 217                                             */
      __IOM uint32_t SPI218     : 1;            /*!< [26..26] Shared interrupt 218                                             */
      __IOM uint32_t SPI219     : 1;            /*!< [27..27] Shared interrupt 219                                             */
      __IOM uint32_t SPI220     : 1;            /*!< [28..28] Shared interrupt 220                                             */
      __IOM uint32_t SPI221     : 1;            /*!< [29..29] Shared interrupt 221                                             */
      __IOM uint32_t SPI222     : 1;            /*!< [30..30] Shared interrupt 222                                             */
      __IOM uint32_t SPI223     : 1;            /*!< [31..31] Shared interrupt 223                                             */
    } GICD_SPISR5_b;
  } ;
  __IM  uint32_t  RESERVED11[121];
  __OM  uint32_t  GICD_SGIR;                    /*!< (@ 0x00000F00) Software Generated Interrupt Register                      */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  GICD_CPENDSGIRn;              /*!< (@ 0x00000F10) SGI Clear-Pending Registers                                */
  __IM  uint32_t  RESERVED13[3];
  __IOM uint32_t  GICD_SPENDSGIRn;              /*!< (@ 0x00000F20) SGI Set-Pending Registers                                  */
  __IM  uint32_t  RESERVED14[43];
  
  union {
    __IM  uint32_t GICD_PIDR4;                  /*!< (@ 0x00000FD0) Peripheral ID 4                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR4 : 32;           /*!< [31..0] Peripheral ID 4                                                   */
    } GICD_PIDR4_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR5;                  /*!< (@ 0x00000FD4) Peripheral ID 5                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR5 : 32;           /*!< [31..0] Peripheral ID 5                                                   */
    } GICD_PIDR5_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR6;                  /*!< (@ 0x00000FD8) Peripheral ID 6                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR6 : 32;           /*!< [31..0] Peripheral ID 6                                                   */
    } GICD_PIDR6_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR7;                  /*!< (@ 0x00000FDC) Peripheral ID 7                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR7 : 32;           /*!< [31..0] Peripheral ID 7                                                   */
    } GICD_PIDR7_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR0;                  /*!< (@ 0x00000FE0) Peripheral ID 0                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR0 : 32;           /*!< [31..0] Peripheral ID 0                                                   */
    } GICD_PIDR0_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR1;                  /*!< (@ 0x00000FE4) Peripheral ID 1                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR1 : 32;           /*!< [31..0] Peripheral ID 1                                                   */
    } GICD_PIDR1_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR2;                  /*!< (@ 0x00000FE8) Peripheral ID 2                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR2 : 32;           /*!< [31..0] Peripheral ID 2                                                   */
    } GICD_PIDR2_b;
  } ;
  
  union {
    __IM  uint32_t GICD_PIDR3;                  /*!< (@ 0x00000FEC) Peripheral ID 3                                            */
    
    struct {
      __IM  uint32_t GICD_PIDR3 : 32;           /*!< [31..0] Peripheral ID 3                                                   */
    } GICD_PIDR3_b;
  } ;
  
  union {
    __IM  uint32_t GICD_CIDR0;                  /*!< (@ 0x00000FF0) Component ID 0                                             */
    
    struct {
      __IM  uint32_t GICD_CIDR0 : 32;           /*!< [31..0] Component ID 0                                                    */
    } GICD_CIDR0_b;
  } ;
  
  union {
    __IM  uint32_t GICD_CIDR1;                  /*!< (@ 0x00000FF4) Component ID 1                                             */
    
    struct {
      __IM  uint32_t GICD_CIDR1 : 32;           /*!< [31..0] Component ID 1                                                    */
    } GICD_CIDR1_b;
  } ;
  
  union {
    __IM  uint32_t GICD_CIDR2;                  /*!< (@ 0x00000FF8) Component ID 2                                             */
    
    struct {
      __IM  uint32_t GICD_CIDR2 : 32;           /*!< [31..0] Component ID 2                                                    */
    } GICD_CIDR2_b;
  } ;
  
  union {
    __IM  uint32_t GICD_CIDR3;                  /*!< (@ 0x00000FFC) Component ID 3                                             */
    
    struct {
      __IM  uint32_t GICD_CIDR3 : 32;           /*!< [31..0] Component ID 3                                                    */
    } GICD_CIDR3_b;
  } ;
} ARM_GIC400_Distributor_Type;                  /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          GIC_CPU                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief ARM GIC-400 Generic Interrupt Controller CPU Interface (GIC_CPU)
  */

typedef struct {                                /*!< (@ 0xFF842000) GIC_CPU Structure                                          */
  
  union {
    __IOM uint32_t GICC_CTLR;                   /*!< (@ 0x00000000) CPU Interface Control                                      */
    
    struct {
      __IOM uint32_t ENABLE_GROUP_0 : 1;        /*!< [0..0] Enable signaling of group 0                                        */
      __IOM uint32_t ENABLE_GROUP_1 : 1;        /*!< [1..1] Enable signaling of group 1                                        */
      __IOM uint32_t ACKCTL     : 1;            /*!< [2..2] Whether a read of IAR acknowledges the interrupt                   */
      __IOM uint32_t FIQEN      : 1;            /*!< [3..3] Group 0 triggers FIQ                                               */
      __IOM uint32_t CBPR       : 1;            /*!< [4..4] Common control of interrupts through GICC_BPR                      */
      __IOM uint32_t FIQBYPDISGRP0 : 1;         /*!< [5..5] Bypass FIQ is not signaled to processor                            */
      __IOM uint32_t IRQBYPDISGRP0 : 1;         /*!< [6..6] Bypass IRQ is not signaled to processor                            */
      __IOM uint32_t FIQBYPDISGRP1 : 1;         /*!< [7..7] Alias of group 1 FIQ bypass disable                                */
      __IOM uint32_t IRQBYPDISGRP1 : 1;         /*!< [8..8] Alias of group 1 IRQ bypass disable                                */
      __IOM uint32_t EOIMODES   : 1;            /*!< [9..9] Secure EOIR does priority drop. DIR does deactivate.               */
      __IOM uint32_t EOIMODENS  : 1;            /*!< [10..10] Non-Secure EOIR does priority drop. DIR does deactivate.         */
            uint32_t            : 21;
    } GICC_CTLR_b;
  } ;
  
  union {
    __IOM uint32_t GICC_PMR;                    /*!< (@ 0x00000004) Interrupt Priority Mask                                    */
    
    struct {
      __IOM uint32_t PRIORITY   : 8;            /*!< [7..0] Interrupts with a higher number are not signaled                   */
            uint32_t            : 24;
    } GICC_PMR_b;
  } ;
  
  union {
    __IOM uint32_t GICC_BPR;                    /*!< (@ 0x00000008) Binary Point                                               */
    
    struct {
      __IOM uint32_t BINARY_POINT : 3;          /*!< [2..0] Split point between group priority and subpriority                 */
            uint32_t            : 29;
    } GICC_BPR_b;
  } ;
  
  union {
    __IM  uint32_t GICC_IAR;                    /*!< (@ 0x0000000C) Interrupt Acknowledge                                      */
    
    struct {
      __IM  uint32_t INTERRUPT_ID : 10;         /*!< [9..0] Interrupt ID                                                       */
      __IM  uint32_t CPUID      : 3;            /*!< [12..10] CPUID that requested a software interrupt, 0 otherwise           */
            uint32_t            : 19;
    } GICC_IAR_b;
  } ;
  
  union {
    __OM  uint32_t GICC_EOIR;                   /*!< (@ 0x00000010) End of Interrupt                                           */
    
    struct {
      __OM  uint32_t INTERRUPT_ID : 10;         /*!< [9..0] Interrupt ID                                                       */
      __OM  uint32_t CPUID      : 3;            /*!< [12..10] CPUID that requested a software interrupt, 0 otherwise           */
            uint32_t            : 19;
    } GICC_EOIR_b;
  } ;
  
  union {
    __IM  uint32_t GICC_RPR;                    /*!< (@ 0x00000014) Running Priority                                           */
    
    struct {
      __IM  uint32_t PRIORITY   : 8;            /*!< [7..0] Current running priority                                           */
            uint32_t            : 24;
    } GICC_RPR_b;
  } ;
  
  union {
    __IOM uint32_t GICC_HPPIR;                  /*!< (@ 0x00000018) Highest Priority Pending Interrupt                         */
    
    struct {
      __IOM uint32_t INTERRUPT_ID : 10;         /*!< [9..0] Pending Interrupt ID                                               */
      __IOM uint32_t CPUID      : 3;            /*!< [12..10] CPUID that requested a software interrupt, 0 otherwise           */
            uint32_t            : 19;
    } GICC_HPPIR_b;
  } ;
  
  union {
    __IOM uint32_t GICC_ABPR;                   /*!< (@ 0x0000001C) Aliased Binary Point                                       */
    
    struct {
      __IOM uint32_t BINARY_POINT : 3;          /*!< [2..0] Split point between group priority and subpriority                 */
            uint32_t            : 29;
    } GICC_ABPR_b;
  } ;
  
  union {
    __IM  uint32_t GICC_AIAR;                   /*!< (@ 0x00000020) Aliased Interrupt Acknowledge                              */
    
    struct {
      __IM  uint32_t INTERRUPT_ID : 10;         /*!< [9..0] Interrupt ID                                                       */
      __IM  uint32_t CPUID      : 3;            /*!< [12..10] CPUID that requested a software interrupt, 0 otherwise           */
            uint32_t            : 19;
    } GICC_AIAR_b;
  } ;
  
  union {
    __OM  uint32_t GICC_AEOIR;                  /*!< (@ 0x00000024) Aliased End of Interrupt                                   */
    
    struct {
      __OM  uint32_t INTERRUPT_ID : 10;         /*!< [9..0] Interrupt ID                                                       */
      __OM  uint32_t CPUID      : 3;            /*!< [12..10] CPUID that requested a software interrupt, 0 otherwise           */
            uint32_t            : 19;
    } GICC_AEOIR_b;
  } ;
  
  union {
    __IM  uint32_t GICC_AHPPIR;                 /*!< (@ 0x00000028) Aliased Highest Priority Pending Interrupt                 */
    
    struct {
      __IM  uint32_t INTERRUPT_ID : 10;         /*!< [9..0] Pending Interrupt ID                                               */
      __IM  uint32_t CPUID      : 3;            /*!< [12..10] CPUID that requested a software interrupt, 0 otherwise           */
            uint32_t            : 19;
    } GICC_AHPPIR_b;
  } ;
  __IM  uint32_t  RESERVED[41];
  __IOM uint32_t  GICC_APR0;                    /*!< (@ 0x000000D0) Active Priority                                            */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  GICC_NSAPR0;                  /*!< (@ 0x000000E0) Non-Secure Active Priority                                 */
  __IM  uint32_t  RESERVED2[6];
  
  union {
    __IOM uint32_t GICC_IIDR;                   /*!< (@ 0x000000FC) CPU Interface Identification Register                      */
    
    struct {
      __IOM uint32_t ID         : 32;           /*!< [31..0] ID                                                                */
    } GICC_IIDR_b;
  } ;
  __IM  uint32_t  RESERVED3[960];
  __OM  uint32_t  GICC_DIR;                     /*!< (@ 0x00001000) Deactivate Interrupt                                       */
} ARM_GIC400_CPU_Type;                          /*!< Size = 4100 (0x1004)                                                      */



/* =========================================================================================================================== */
/* ================                                      USB_OTG_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (USB_OTG_GLOBAL)
  */

typedef struct {                                /*!< (@ 0xFE980000) USB_OTG_GLOBAL Structure                                   */
  
  union {
    __IOM uint32_t GOTGCTL;                     /*!< (@ 0x00000000) OTG_HS control and status register                         */
    
    struct {
      __IM  uint32_t SRQSCS     : 1;            /*!< [0..0] Session request success                                            */
      __IOM uint32_t SRQ        : 1;            /*!< [1..1] Session request                                                    */
            uint32_t            : 6;
      __IM  uint32_t HNGSCS     : 1;            /*!< [8..8] Host negotiation success                                           */
      __IOM uint32_t HNPRQ      : 1;            /*!< [9..9] HNP request                                                        */
      __IOM uint32_t HSHNPEN    : 1;            /*!< [10..10] Host set HNP enable                                              */
      __IOM uint32_t DHNPEN     : 1;            /*!< [11..11] Device HNP enabled                                               */
            uint32_t            : 4;
      __IM  uint32_t CIDSTS     : 1;            /*!< [16..16] Connector ID status                                              */
      __IM  uint32_t DBCT       : 1;            /*!< [17..17] Long/short debounce time                                         */
      __IM  uint32_t ASVLD      : 1;            /*!< [18..18] A-session valid                                                  */
      __IM  uint32_t BSVLD      : 1;            /*!< [19..19] B-session valid                                                  */
            uint32_t            : 12;
    } GOTGCTL_b;
  } ;
  
  union {
    __IOM uint32_t GOTGINT;                     /*!< (@ 0x00000004) OTG_HS interrupt register                                  */
    
    struct {
            uint32_t            : 2;
      __IOM uint32_t SEDET      : 1;            /*!< [2..2] Session end detected                                               */
            uint32_t            : 5;
      __IOM uint32_t SRSSCHG    : 1;            /*!< [8..8] Session request success status change                              */
      __IOM uint32_t HNSSCHG    : 1;            /*!< [9..9] Host negotiation success status change                             */
            uint32_t            : 7;
      __IOM uint32_t HNGDET     : 1;            /*!< [17..17] Host negotiation detected                                        */
      __IOM uint32_t ADTOCHG    : 1;            /*!< [18..18] A-device timeout change                                          */
      __IOM uint32_t DBCDNE     : 1;            /*!< [19..19] Debounce done                                                    */
            uint32_t            : 12;
    } GOTGINT_b;
  } ;
  
  union {
    __IOM uint32_t GAHBCFG;                     /*!< (@ 0x00000008) OTG_HS AHB configuration register                          */
    
    struct {
      __IOM uint32_t GINT       : 1;            /*!< [0..0] Global interrupt mask                                              */
      __IOM uint32_t AXI_BURST  : 2;            /*!< [2..1] Maximum AXI burst length                                           */
            uint32_t            : 1;
      __IOM uint32_t AXI_WAIT   : 1;            /*!< [4..4] Wait for all AXI writes before signaling DMA                       */
      __IOM uint32_t DMAEN      : 1;            /*!< [5..5] DMA enable                                                         */
            uint32_t            : 1;
      __IOM uint32_t TXFELVL    : 1;            /*!< [7..7] TxFIFO empty level                                                 */
      __IOM uint32_t PTXFELVL   : 1;            /*!< [8..8] Periodic TxFIFO empty level                                        */
            uint32_t            : 23;
    } GAHBCFG_b;
  } ;
  
  union {
    __IOM uint32_t GUSBCFG;                     /*!< (@ 0x0000000C) OTG_HS USB configuration register                          */
    
    struct {
      __IOM uint32_t TOCAL      : 3;            /*!< [2..0] FS timeout calibration                                             */
      __IOM uint32_t PHYIF      : 1;            /*!< [3..3] PHY Interface width                                                */
      __IOM uint32_t PHYTYPE    : 1;            /*!< [4..4] PHY Type                                                           */
      __IOM uint32_t FSIF       : 1;            /*!< [5..5] Full speed interface                                               */
      __IOM uint32_t PHYSEL     : 1;            /*!< [6..6] Transceiver select                                                 */
      __IOM uint32_t DDRSEL     : 1;            /*!< [7..7] ULPI data rate                                                     */
      __IOM uint32_t SRPCAP     : 1;            /*!< [8..8] SRP-capable                                                        */
      __IOM uint32_t HNPCAP     : 1;            /*!< [9..9] HNP-capable                                                        */
      __IOM uint32_t TRDT       : 4;            /*!< [13..10] USB turnaround time                                              */
            uint32_t            : 1;
      __IOM uint32_t PHYLPCS    : 1;            /*!< [15..15] PHY Low-power clock select                                       */
            uint32_t            : 1;
      __IOM uint32_t ULPIFSLS   : 1;            /*!< [17..17] ULPI FS/LS select                                                */
      __IOM uint32_t ULPIAR     : 1;            /*!< [18..18] ULPI Auto-resume                                                 */
      __IOM uint32_t ULPICSM    : 1;            /*!< [19..19] ULPI Clock SuspendM                                              */
      __IOM uint32_t ULPIEVBUSD : 1;            /*!< [20..20] ULPI External VBUS Drive                                         */
      __IOM uint32_t ULPIEVBUSI : 1;            /*!< [21..21] ULPI external VBUS indicator                                     */
      __IOM uint32_t TSDPS      : 1;            /*!< [22..22] TermSel DLine pulsing selection                                  */
      __IOM uint32_t PCCI       : 1;            /*!< [23..23] Indicator complement                                             */
      __IOM uint32_t PTCI       : 1;            /*!< [24..24] Indicator pass through                                           */
      __IOM uint32_t ULPIIPD    : 1;            /*!< [25..25] ULPI interface protect disable                                   */
            uint32_t            : 3;
      __IOM uint32_t FHMOD      : 1;            /*!< [29..29] Forced host mode                                                 */
      __IOM uint32_t FDMOD      : 1;            /*!< [30..30] Forced peripheral mode                                           */
      __IOM uint32_t CTXPKT     : 1;            /*!< [31..31] Corrupt Tx packet                                                */
    } GUSBCFG_b;
  } ;
  
  union {
    __IOM uint32_t GRSTCTL;                     /*!< (@ 0x00000010) OTG_HS reset register                                      */
    
    struct {
      __IOM uint32_t CSRST      : 1;            /*!< [0..0] Core soft reset                                                    */
      __IOM uint32_t HSRST      : 1;            /*!< [1..1] HCLK soft reset                                                    */
      __IOM uint32_t FCRST      : 1;            /*!< [2..2] Host frame counter reset                                           */
            uint32_t            : 1;
      __IOM uint32_t RXFFLSH    : 1;            /*!< [4..4] RxFIFO flush                                                       */
      __IOM uint32_t TXFFLSH    : 1;            /*!< [5..5] TxFIFO flush                                                       */
      __IOM uint32_t TXFNUM     : 5;            /*!< [10..6] TxFIFO number                                                     */
            uint32_t            : 19;
      __IM  uint32_t DMAREQ     : 1;            /*!< [30..30] DMA request signal                                               */
      __IM  uint32_t AHBIDL     : 1;            /*!< [31..31] AHB master idle                                                  */
    } GRSTCTL_b;
  } ;
  
  union {
    __IOM uint32_t GINTSTS;                     /*!< (@ 0x00000014) OTG_HS core interrupt register                             */
    
    struct {
      __IM  uint32_t CMOD       : 1;            /*!< [0..0] Current mode of operation                                          */
      __IOM uint32_t MMIS       : 1;            /*!< [1..1] Mode mismatch interrupt                                            */
      __IM  uint32_t OTGINT     : 1;            /*!< [2..2] OTG interrupt                                                      */
      __IOM uint32_t SOF        : 1;            /*!< [3..3] Start of frame                                                     */
      __IM  uint32_t RXFLVL     : 1;            /*!< [4..4] RxFIFO nonempty                                                    */
      __IM  uint32_t NPTXFE     : 1;            /*!< [5..5] Nonperiodic TxFIFO empty                                           */
      __IM  uint32_t GINAKEFF   : 1;            /*!< [6..6] Global IN nonperiodic NAK effective                                */
      __IM  uint32_t BOUTNAKEFF : 1;            /*!< [7..7] Global OUT NAK effective                                           */
            uint32_t            : 2;
      __IOM uint32_t ESUSP      : 1;            /*!< [10..10] Early suspend                                                    */
      __IOM uint32_t USBSUSP    : 1;            /*!< [11..11] USB suspend                                                      */
      __IOM uint32_t USBRST     : 1;            /*!< [12..12] USB reset                                                        */
      __IOM uint32_t ENUMDNE    : 1;            /*!< [13..13] Enumeration done                                                 */
      __IOM uint32_t ISOODRP    : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt                         */
      __IOM uint32_t EOPF       : 1;            /*!< [15..15] End of periodic frame interrupt                                  */
            uint32_t            : 2;
      __IM  uint32_t IEPINT     : 1;            /*!< [18..18] IN endpoint interrupt                                            */
      __IM  uint32_t OEPINT     : 1;            /*!< [19..19] OUT endpoint interrupt                                           */
      __IOM uint32_t IISOIXFR   : 1;            /*!< [20..20] Incomplete isochronous IN transfer                               */
      __IOM uint32_t PXFR_INCOMPISOOUT : 1;     /*!< [21..21] Incomplete periodic transfer                                     */
      __IOM uint32_t DATAFSUSP  : 1;            /*!< [22..22] Data fetch suspended                                             */
            uint32_t            : 1;
      __IM  uint32_t HPRTINT    : 1;            /*!< [24..24] Host port interrupt                                              */
      __IM  uint32_t HCINT      : 1;            /*!< [25..25] Host channels interrupt                                          */
      __IM  uint32_t PTXFE      : 1;            /*!< [26..26] Periodic TxFIFO empty                                            */
            uint32_t            : 1;
      __IOM uint32_t CIDSCHG    : 1;            /*!< [28..28] Connector ID status change                                       */
      __IOM uint32_t DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt                                    */
      __IOM uint32_t SRQINT     : 1;            /*!< [30..30] Session request/new session detected interrupt                   */
      __IOM uint32_t WKUINT     : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt                          */
    } GINTSTS_b;
  } ;
  
  union {
    __IOM uint32_t GINTMSK;                     /*!< (@ 0x00000018) OTG_HS interrupt mask register                             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t MMISM      : 1;            /*!< [1..1] Mode mismatch interrupt mask                                       */
      __IOM uint32_t OTGINT     : 1;            /*!< [2..2] OTG interrupt mask                                                 */
      __IOM uint32_t SOFM       : 1;            /*!< [3..3] Start of frame mask                                                */
      __IOM uint32_t RXFLVLM    : 1;            /*!< [4..4] Receive FIFO nonempty mask                                         */
      __IOM uint32_t NPTXFEM    : 1;            /*!< [5..5] Nonperiodic TxFIFO empty mask                                      */
      __IOM uint32_t GINAKEFFM  : 1;            /*!< [6..6] Global nonperiodic IN NAK effective mask                           */
      __IOM uint32_t GONAKEFFM  : 1;            /*!< [7..7] Global OUT NAK effective mask                                      */
            uint32_t            : 2;
      __IOM uint32_t ESUSPM     : 1;            /*!< [10..10] Early suspend mask                                               */
      __IOM uint32_t USBSUSPM   : 1;            /*!< [11..11] USB suspend mask                                                 */
      __IOM uint32_t USBRST     : 1;            /*!< [12..12] USB reset mask                                                   */
      __IOM uint32_t ENUMDNEM   : 1;            /*!< [13..13] Enumeration done mask                                            */
      __IOM uint32_t ISOODRPM   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt mask                    */
      __IOM uint32_t EOPFM      : 1;            /*!< [15..15] End of periodic frame interrupt mask                             */
            uint32_t            : 1;
      __IOM uint32_t EPMISM     : 1;            /*!< [17..17] Endpoint mismatch interrupt mask                                 */
      __IOM uint32_t IEPINT     : 1;            /*!< [18..18] IN endpoints interrupt mask                                      */
      __IOM uint32_t OEPINT     : 1;            /*!< [19..19] OUT endpoints interrupt mask                                     */
      __IOM uint32_t IISOIXFRM  : 1;            /*!< [20..20] Incomplete isochronous IN transfer mask                          */
      __IOM uint32_t PXFRM_IISOOXFRM : 1;       /*!< [21..21] Incomplete periodic transfer mask                                */
      __IOM uint32_t FSUSPM     : 1;            /*!< [22..22] Data fetch suspended mask                                        */
            uint32_t            : 1;
      __IM  uint32_t PRTIM      : 1;            /*!< [24..24] Host port interrupt mask                                         */
      __IOM uint32_t HCIM       : 1;            /*!< [25..25] Host channels interrupt mask                                     */
      __IOM uint32_t PTXFEM     : 1;            /*!< [26..26] Periodic TxFIFO empty mask                                       */
            uint32_t            : 1;
      __IOM uint32_t CIDSCHGM   : 1;            /*!< [28..28] Connector ID status change mask                                  */
      __IOM uint32_t DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt mask                               */
      __IOM uint32_t SRQIM      : 1;            /*!< [30..30] Session request/new session detected interrupt mask              */
      __IOM uint32_t WUIM       : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt mask                     */
    } GINTMSK_b;
  } ;
  
  union {
    union {
      __IM  uint32_t GRXSTSR_Host;              /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (host
                                                                         mode)                                                 */
      
      struct {
        __IM  uint32_t CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32_t          : 11;
      } GRXSTSR_Host_b;
    } ;
    
    union {
      __IM  uint32_t GRXSTSR_Peripheral;        /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (peripheral
                                                                         mode mode)                                            */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32_t FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32_t          : 7;
      } GRXSTSR_Peripheral_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t GRXSTSP_Host;              /*!< (@ 0x00000020) OTG_HS status read and pop register (host mode)            */
      
      struct {
        __IM  uint32_t CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32_t          : 11;
      } GRXSTSP_Host_b;
    } ;
    
    union {
      __IM  uint32_t GRXSTSP_Peripheral;        /*!< (@ 0x00000020) OTG_HS status read and pop register (peripheral
                                                                         mode)                                                 */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32_t FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32_t          : 7;
      } GRXSTSP_Peripheral_b;
    } ;
  };
  
  union {
    __IOM uint32_t GRXFSIZ;                     /*!< (@ 0x00000024) OTG_HS Receive FIFO size register                          */
    
    struct {
      __IOM uint32_t RXFD       : 16;           /*!< [15..0] RxFIFO depth                                                      */
            uint32_t            : 16;
    } GRXFSIZ_b;
  } ;
  
  union {
    union {
      __IOM uint32_t GNPTXFSIZ_Host;            /*!< (@ 0x00000028) OTG_HS nonperiodic transmit FIFO size register
                                                                         (host mode)                                           */
      
      struct {
        __IOM uint32_t NPTXFSA  : 16;           /*!< [15..0] Nonperiodic transmit RAM start address                            */
        __IOM uint32_t NPTXFD   : 16;           /*!< [31..16] Nonperiodic TxFIFO depth                                         */
      } GNPTXFSIZ_Host_b;
    } ;
    
    union {
      __IOM uint32_t TX0FSIZ_Peripheral;        /*!< (@ 0x00000028) Endpoint 0 transmit FIFO size (peripheral mode)            */
      
      struct {
        __IOM uint32_t TX0FSA   : 16;           /*!< [15..0] Endpoint 0 transmit RAM start address                             */
        __IOM uint32_t TX0FD    : 16;           /*!< [31..16] Endpoint 0 TxFIFO depth                                          */
      } TX0FSIZ_Peripheral_b;
    } ;
  };
  
  union {
    __IM  uint32_t GNPTXSTS;                    /*!< (@ 0x0000002C) OTG_HS nonperiodic transmit FIFO/queue status
                                                                         register                                              */
    
    struct {
      __IM  uint32_t NPTXFSAV   : 16;           /*!< [15..0] Nonperiodic TxFIFO space available                                */
      __IM  uint32_t NPTQXSAV   : 8;            /*!< [23..16] Nonperiodic transmit request queue space available               */
      __IM  uint32_t NPTXQTOP   : 7;            /*!< [30..24] Top of the nonperiodic transmit request queue                    */
            uint32_t            : 1;
    } GNPTXSTS_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t GCCFG;                       /*!< (@ 0x00000038) OTG_HS general core configuration register                 */
    
    struct {
            uint32_t            : 16;
      __IOM uint32_t PWRDWN     : 1;            /*!< [16..16] Power down                                                       */
      __IOM uint32_t I2CPADEN   : 1;            /*!< [17..17] Enable I2C bus connection for the external I2C PHY
                                                     interface                                                                 */
      __IOM uint32_t VBUSASEN   : 1;            /*!< [18..18] Enable the VBUS sensing device                                   */
      __IOM uint32_t VBUSBSEN   : 1;            /*!< [19..19] Enable the VBUS sensing device                                   */
      __IOM uint32_t SOFOUTEN   : 1;            /*!< [20..20] SOF output enable                                                */
      __IOM uint32_t NOVBUSSENS : 1;            /*!< [21..21] VBUS sensing disable option                                      */
            uint32_t            : 10;
    } GCCFG_b;
  } ;
  
  union {
    __IOM uint32_t CID;                         /*!< (@ 0x0000003C) OTG_HS core ID register                                    */
    
    struct {
      __IOM uint32_t PRODUCT_ID : 32;           /*!< [31..0] Product ID field                                                  */
    } CID_b;
  } ;
  __IM  uint32_t  VID;                          /*!< (@ 0x00000040) OTG_HS vendor ID register                                  */
  
  union {
    __IM  uint32_t HW_DIRECTION;                /*!< (@ 0x00000044) Direction                                                  */
    
    struct {
      __IM  uint32_t DIRECTION0 : 2;            /*!< [1..0] Direction 0                                                        */
      __IM  uint32_t DIRECTION1 : 2;            /*!< [3..2] Direction 1                                                        */
      __IM  uint32_t DIRECTION2 : 2;            /*!< [5..4] Direction 2                                                        */
      __IM  uint32_t DIRECTION3 : 2;            /*!< [7..6] Direction 3                                                        */
      __IM  uint32_t DIRECTION4 : 2;            /*!< [9..8] Direction 4                                                        */
      __IM  uint32_t DIRECTION5 : 2;            /*!< [11..10] Direction 5                                                      */
      __IM  uint32_t DIRECTION6 : 2;            /*!< [13..12] Direction 6                                                      */
      __IM  uint32_t DIRECTION7 : 2;            /*!< [15..14] Direction 7                                                      */
      __IM  uint32_t DIRECTION8 : 2;            /*!< [17..16] Direction 8                                                      */
      __IM  uint32_t DIRECTION9 : 2;            /*!< [19..18] Direction 9                                                      */
      __IM  uint32_t DIRECTION10 : 2;           /*!< [21..20] Direction 10                                                     */
      __IM  uint32_t DIRECTION11 : 2;           /*!< [23..22] Direction 11                                                     */
      __IM  uint32_t DIRECTION12 : 2;           /*!< [25..24] Direction 12                                                     */
      __IM  uint32_t DIRECTION13 : 2;           /*!< [27..26] Direction 13                                                     */
      __IM  uint32_t DIRECTION14 : 2;           /*!< [29..28] Direction 14                                                     */
      __IM  uint32_t DIRECTION15 : 2;           /*!< [31..30] Direction 15                                                     */
    } HW_DIRECTION_b;
  } ;
  
  union {
    __IM  uint32_t HW_CONFIG0;                  /*!< (@ 0x00000048) Hardware Config 0                                          */
    
    struct {
      __IM  uint32_t OPERATING_MODE : 3;        /*!< [2..0] Operating Mode                                                     */
      __IM  uint32_t ARCHITECTURE : 2;          /*!< [4..3] Architecture                                                       */
      __IM  uint32_t POINT_TO_POINT : 1;        /*!< [5..5] Point to Point                                                     */
      __IM  uint32_t HIGH_SPEED_PHY : 2;        /*!< [7..6] High Speed Physical                                                */
      __IM  uint32_t FULL_SPEED_PHY : 2;        /*!< [9..8] Full Speed Physical                                                */
      __IM  uint32_t DEVICE_END_POINT_COUNT : 4;/*!< [13..10] Device end point count                                           */
      __IM  uint32_t HOST_CHANNEL_COUNT : 4;    /*!< [17..14] Host channel count                                               */
      __IM  uint32_t SUPPORTS_PERIODIC_ENDPOINTS : 1;/*!< [18..18] Supports periodic endpoints                                 */
      __IM  uint32_t DYNAMIC_FIFO : 1;          /*!< [19..19] Dynamic FIFO                                                     */
      __IM  uint32_t MULTI_PROC_INT : 1;        /*!< [20..20] Multi proc int                                                   */
            uint32_t            : 1;
      __IM  uint32_t NON_PERIODIC_QUEUE_DEPTH : 2;/*!< [23..22] Non periodic queue depth                                       */
      __IM  uint32_t HOST_PERIODIC_QUEUE_DEPTH : 2;/*!< [25..24] Host periodic queue depth                                     */
      __IM  uint32_t DEVICE_TOKEN_QUEUE_DEPTH : 5;/*!< [30..26] Device token queue depth                                       */
      __IM  uint32_t ENABLE_IC_USB : 1;         /*!< [31..31] Enable IC USB                                                    */
    } HW_CONFIG0_b;
  } ;
  __IM  uint32_t  RESERVED1[45];
  
  union {
    __IOM uint32_t HPTXFSIZ;                    /*!< (@ 0x00000100) OTG_HS Host periodic transmit FIFO size register           */
    
    struct {
      __IOM uint32_t PTXSA      : 16;           /*!< [15..0] Host periodic TxFIFO start address                                */
      __IOM uint32_t PTXFD      : 16;           /*!< [31..16] Host periodic TxFIFO depth                                       */
    } HPTXFSIZ_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF1;                    /*!< (@ 0x00000104) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF1_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF2;                    /*!< (@ 0x00000108) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF2_b;
  } ;
  __IM  uint32_t  RESERVED2[4];
  
  union {
    __IOM uint32_t DIEPTXF3;                    /*!< (@ 0x0000011C) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF3_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF4;                    /*!< (@ 0x00000120) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF4_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF5;                    /*!< (@ 0x00000124) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF5_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF6;                    /*!< (@ 0x00000128) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF6_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF7;                    /*!< (@ 0x0000012C) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF7_b;
  } ;
} USB_OTG_GLOBAL_Type;                          /*!< Size = 304 (0x130)                                                        */



/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (USB_OTG_HOST)
  */

typedef struct {                                /*!< (@ 0xFE980400) USB_OTG_HOST Structure                                     */
  
  union {
    __IOM uint32_t HCFG;                        /*!< (@ 0x00000000) OTG_HS host configuration register                         */
    
    struct {
      __IOM uint32_t FSLSPCS    : 2;            /*!< [1..0] FS/LS PHY clock select                                             */
      __IM  uint32_t FSLSS      : 1;            /*!< [2..2] FS- and LS-only support                                            */
            uint32_t            : 29;
    } HCFG_b;
  } ;
  
  union {
    __IOM uint32_t HFIR;                        /*!< (@ 0x00000004) OTG_HS Host frame interval register                        */
    
    struct {
      __IOM uint32_t FRIVL      : 16;           /*!< [15..0] Frame interval                                                    */
            uint32_t            : 16;
    } HFIR_b;
  } ;
  
  union {
    __IM  uint32_t HFNUM;                       /*!< (@ 0x00000008) OTG_HS host frame number/frame time remaining
                                                                         register                                              */
    
    struct {
      __IM  uint32_t FRNUM      : 16;           /*!< [15..0] Frame number                                                      */
      __IM  uint32_t FTREM      : 16;           /*!< [31..16] Frame time remaining                                             */
    } HFNUM_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t HPTXSTS;                     /*!< (@ 0x00000010) Host periodic transmit FIFO/queue status register          */
    
    struct {
      __IOM uint32_t PTXFSAVL   : 16;           /*!< [15..0] Periodic transmit data FIFO space available                       */
      __IM  uint32_t PTXQSAV    : 8;            /*!< [23..16] Periodic transmit request queue space available                  */
      __IM  uint32_t PTXQTOP    : 8;            /*!< [31..24] Top of the periodic transmit request queue                       */
    } HPTXSTS_b;
  } ;
  
  union {
    __IM  uint32_t HAINT;                       /*!< (@ 0x00000014) OTG_HS Host all channels interrupt register                */
    
    struct {
      __IM  uint32_t HAINT      : 16;           /*!< [15..0] Channel interrupts                                                */
            uint32_t            : 16;
    } HAINT_b;
  } ;
  
  union {
    __IOM uint32_t HAINTMSK;                    /*!< (@ 0x00000018) OTG_HS host all channels interrupt mask register           */
    
    struct {
      __IOM uint32_t HAINTM     : 16;           /*!< [15..0] Channel interrupt mask                                            */
            uint32_t            : 16;
    } HAINTMSK_b;
  } ;
  __IM  uint32_t  RESERVED1[9];
  
  union {
    __IOM uint32_t HPRT;                        /*!< (@ 0x00000040) OTG_HS host port control and status register               */
    
    struct {
      __IM  uint32_t PCSTS      : 1;            /*!< [0..0] Port connect status                                                */
      __IOM uint32_t PCDET      : 1;            /*!< [1..1] Port connect detected                                              */
      __IOM uint32_t PENA       : 1;            /*!< [2..2] Port enable                                                        */
      __IOM uint32_t PENCHNG    : 1;            /*!< [3..3] Port enable/disable change                                         */
      __IM  uint32_t POCA       : 1;            /*!< [4..4] Port overcurrent active                                            */
      __IOM uint32_t POCCHNG    : 1;            /*!< [5..5] Port overcurrent change                                            */
      __IOM uint32_t PRES       : 1;            /*!< [6..6] Port resume                                                        */
      __IOM uint32_t PSUSP      : 1;            /*!< [7..7] Port suspend                                                       */
      __IOM uint32_t PRST       : 1;            /*!< [8..8] Port reset                                                         */
            uint32_t            : 1;
      __IM  uint32_t PLSTS      : 2;            /*!< [11..10] Port line status                                                 */
      __IOM uint32_t PPWR       : 1;            /*!< [12..12] Port power                                                       */
      __IOM uint32_t PTCTL      : 4;            /*!< [16..13] Port test control                                                */
      __IM  uint32_t PSPD       : 2;            /*!< [18..17] Port speed                                                       */
            uint32_t            : 13;
    } HPRT_b;
  } ;
  __IM  uint32_t  RESERVED2[47];
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL0;/*!< (@ 0x00000100) Host channel 0                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL1;/*!< (@ 0x00000120) Host channel 1                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL2;/*!< (@ 0x00000140) Host channel 2                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL3;/*!< (@ 0x00000160) Host channel 3                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL4;/*!< (@ 0x00000180) Host channel 4                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL5;/*!< (@ 0x000001A0) Host channel 5                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL6;/*!< (@ 0x000001C0) Host channel 6                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL7;/*!< (@ 0x000001E0) Host channel 7                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL8;/*!< (@ 0x00000200) Host channel 8                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL9;/*!< (@ 0x00000220) Host channel 9                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL10;/*!< (@ 0x00000240) Host channel 10                                      */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL11;/*!< (@ 0x00000260) Host channel 11                                      */
} USB_OTG_HOST_Type;                            /*!< Size = 640 (0x280)                                                        */



/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (USB_OTG_DEVICE)
  */

typedef struct {                                /*!< (@ 0xFE980800) USB_OTG_DEVICE Structure                                   */
  
  union {
    __IOM uint32_t DCFG;                        /*!< (@ 0x00000000) OTG_HS device configuration register                       */
    
    struct {
      __IOM uint32_t DSPD       : 2;            /*!< [1..0] Device speed                                                       */
      __IOM uint32_t NZLSOHSK   : 1;            /*!< [2..2] Nonzero-length status OUT handshake                                */
            uint32_t            : 1;
      __IOM uint32_t DAD        : 7;            /*!< [10..4] Device address                                                    */
      __IOM uint32_t PFIVL      : 2;            /*!< [12..11] Periodic (micro)frame interval                                   */
            uint32_t            : 11;
      __IOM uint32_t PERSCHIVL  : 2;            /*!< [25..24] Periodic scheduling interval                                     */
            uint32_t            : 6;
    } DCFG_b;
  } ;
  
  union {
    __IOM uint32_t DCTL;                        /*!< (@ 0x00000004) OTG_HS device control register                             */
    
    struct {
      __IOM uint32_t RWUSIG     : 1;            /*!< [0..0] Remote wakeup signaling                                            */
      __IOM uint32_t SDIS       : 1;            /*!< [1..1] Soft disconnect                                                    */
      __IM  uint32_t GINSTS     : 1;            /*!< [2..2] Global IN NAK status                                               */
      __IM  uint32_t GONSTS     : 1;            /*!< [3..3] Global OUT NAK status                                              */
      __IOM uint32_t TCTL       : 3;            /*!< [6..4] Test control                                                       */
      __OM  uint32_t SGINAK     : 1;            /*!< [7..7] Set global IN NAK                                                  */
      __OM  uint32_t CGINAK     : 1;            /*!< [8..8] Clear global IN NAK                                                */
      __OM  uint32_t SGONAK     : 1;            /*!< [9..9] Set global OUT NAK                                                 */
      __OM  uint32_t CGONAK     : 1;            /*!< [10..10] Clear global OUT NAK                                             */
      __IOM uint32_t POPRGDNE   : 1;            /*!< [11..11] Power-on programming done                                        */
            uint32_t            : 20;
    } DCTL_b;
  } ;
  
  union {
    __IM  uint32_t DSTS;                        /*!< (@ 0x00000008) OTG_HS device status register                              */
    
    struct {
      __IM  uint32_t SUSPSTS    : 1;            /*!< [0..0] Suspend status                                                     */
      __IM  uint32_t ENUMSPD    : 2;            /*!< [2..1] Enumerated speed                                                   */
      __IM  uint32_t EERR       : 1;            /*!< [3..3] Erratic error                                                      */
            uint32_t            : 4;
      __IM  uint32_t FNSOF      : 14;           /*!< [21..8] Frame number of the received SOF                                  */
            uint32_t            : 10;
    } DSTS_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIEPMSK;                     /*!< (@ 0x00000010) OTG_HS device IN endpoint common interrupt mask
                                                                         register                                              */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t TOM        : 1;            /*!< [3..3] Timeout condition mask (nonisochronous endpoints)                  */
      __IOM uint32_t ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32_t INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32_t INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32_t            : 1;
      __IOM uint32_t TXFURM     : 1;            /*!< [8..8] FIFO underrun mask                                                 */
      __IOM uint32_t BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 22;
    } DIEPMSK_b;
  } ;
  
  union {
    __IOM uint32_t DOEPMSK;                     /*!< (@ 0x00000014) OTG_HS device OUT endpoint common interrupt mask
                                                                         register                                              */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t STUPM      : 1;            /*!< [3..3] SETUP phase done mask                                              */
      __IOM uint32_t OTEPDM     : 1;            /*!< [4..4] OUT token received when endpoint disabled mask                     */
            uint32_t            : 1;
      __IOM uint32_t B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received mask                           */
            uint32_t            : 1;
      __IOM uint32_t OPEM       : 1;            /*!< [8..8] OUT packet error mask                                              */
      __IOM uint32_t BOIM       : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 22;
    } DOEPMSK_b;
  } ;
  
  union {
    __IM  uint32_t DAINT;                       /*!< (@ 0x00000018) OTG_HS device all endpoints interrupt register             */
    
    struct {
      __IM  uint32_t IEPINT     : 16;           /*!< [15..0] IN endpoint interrupt bits                                        */
      __IM  uint32_t OEPINT     : 16;           /*!< [31..16] OUT endpoint interrupt bits                                      */
    } DAINT_b;
  } ;
  
  union {
    __IOM uint32_t DAINTMSK;                    /*!< (@ 0x0000001C) OTG_HS all endpoints interrupt mask register               */
    
    struct {
      __IOM uint32_t IEPM       : 16;           /*!< [15..0] IN EP interrupt mask bits                                         */
      __IOM uint32_t OEPM       : 16;           /*!< [31..16] OUT EP interrupt mask bits                                       */
    } DAINTMSK_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t DVBUSDIS;                    /*!< (@ 0x00000028) OTG_HS device VBUS discharge time register                 */
    
    struct {
      __IOM uint32_t VBUSDT     : 16;           /*!< [15..0] Device VBUS discharge time                                        */
            uint32_t            : 16;
    } DVBUSDIS_b;
  } ;
  
  union {
    __IOM uint32_t DVBUSPULSE;                  /*!< (@ 0x0000002C) OTG_HS device VBUS pulsing time register                   */
    
    struct {
      __IOM uint32_t DVBUSP     : 12;           /*!< [11..0] Device VBUS pulsing time                                          */
            uint32_t            : 20;
    } DVBUSPULSE_b;
  } ;
  
  union {
    __IOM uint32_t DTHRCTL;                     /*!< (@ 0x00000030) OTG_HS Device threshold control register                   */
    
    struct {
      __IOM uint32_t NONISOTHREN : 1;           /*!< [0..0] Nonisochronous IN endpoints threshold enable                       */
      __IOM uint32_t ISOTHREN   : 1;            /*!< [1..1] ISO IN endpoint threshold enable                                   */
      __IOM uint32_t TXTHRLEN   : 9;            /*!< [10..2] Transmit threshold length                                         */
            uint32_t            : 5;
      __IOM uint32_t RXTHREN    : 1;            /*!< [16..16] Receive threshold enable                                         */
      __IOM uint32_t RXTHRLEN   : 9;            /*!< [25..17] Receive threshold length                                         */
            uint32_t            : 1;
      __IOM uint32_t ARPEN      : 1;            /*!< [27..27] Arbiter parking enable                                           */
            uint32_t            : 4;
    } DTHRCTL_b;
  } ;
  
  union {
    __IOM uint32_t DIEPEMPMSK;                  /*!< (@ 0x00000034) OTG_HS device IN endpoint FIFO empty interrupt
                                                                         mask register                                         */
    
    struct {
      __IOM uint32_t INEPTXFEM  : 16;           /*!< [15..0] IN EP Tx FIFO empty interrupt mask bits                           */
            uint32_t            : 16;
    } DIEPEMPMSK_b;
  } ;
  
  union {
    __IOM uint32_t DEACHINT;                    /*!< (@ 0x00000038) OTG_HS device each endpoint interrupt register             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t IEP1INT    : 1;            /*!< [1..1] IN endpoint 1interrupt bit                                         */
            uint32_t            : 15;
      __IOM uint32_t OEP1INT    : 1;            /*!< [17..17] OUT endpoint 1 interrupt bit                                     */
            uint32_t            : 14;
    } DEACHINT_b;
  } ;
  
  union {
    __IOM uint32_t DEACHINTMSK;                 /*!< (@ 0x0000003C) OTG_HS device each endpoint interrupt register
                                                                         mask                                                  */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t IEP1INTM   : 1;            /*!< [1..1] IN Endpoint 1 interrupt mask bit                                   */
            uint32_t            : 15;
      __IOM uint32_t OEP1INTM   : 1;            /*!< [17..17] OUT Endpoint 1 interrupt mask bit                                */
            uint32_t            : 14;
    } DEACHINTMSK_b;
  } ;
  
  union {
    __IOM uint32_t DIEPEACHMSK1;                /*!< (@ 0x00000040) OTG_HS device each in endpoint-1 interrupt register        */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t TOM        : 1;            /*!< [3..3] Timeout condition mask (nonisochronous endpoints)                  */
      __IOM uint32_t ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32_t INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32_t INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32_t            : 1;
      __IOM uint32_t TXFURM     : 1;            /*!< [8..8] FIFO underrun mask                                                 */
      __IOM uint32_t BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 3;
      __IOM uint32_t NAKM       : 1;            /*!< [13..13] NAK interrupt mask                                               */
            uint32_t            : 18;
    } DIEPEACHMSK1_b;
  } ;
  __IM  uint32_t  RESERVED2[15];
  
  union {
    __IOM uint32_t DOEPEACHMSK1;                /*!< (@ 0x00000080) OTG_HS device each OUT endpoint-1 interrupt register       */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t TOM        : 1;            /*!< [3..3] Timeout condition mask                                             */
      __IOM uint32_t ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32_t INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32_t INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32_t            : 1;
      __IOM uint32_t TXFURM     : 1;            /*!< [8..8] OUT packet error mask                                              */
      __IOM uint32_t BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 2;
      __IOM uint32_t BERRM      : 1;            /*!< [12..12] Bubble error interrupt mask                                      */
      __IOM uint32_t NAKM       : 1;            /*!< [13..13] NAK interrupt mask                                               */
      __IOM uint32_t NYETM      : 1;            /*!< [14..14] NYET interrupt mask                                              */
            uint32_t            : 17;
    } DOEPEACHMSK1_b;
  } ;
  __IM  uint32_t  RESERVED3[31];
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT0;/*!< (@ 0x00000100) IN Endpoint 0                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT1;/*!< (@ 0x00000120) IN Endpoint 1                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT2;/*!< (@ 0x00000140) IN Endpoint 2                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT3;/*!< (@ 0x00000160) IN Endpoint 3                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT4;/*!< (@ 0x00000180) IN Endpoint 4                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT5;/*!< (@ 0x000001A0) IN Endpoint 5                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT6;/*!< (@ 0x000001C0) IN Endpoint 6                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT7;/*!< (@ 0x000001E0) IN Endpoint 7                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT8;/*!< (@ 0x00000200) IN Endpoint 8                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT9;/*!< (@ 0x00000220) IN Endpoint 9                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT10;/*!< (@ 0x00000240) IN Endpoint 10                                       */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT11;/*!< (@ 0x00000260) IN Endpoint 11                                       */
  __IM  uint32_t  RESERVED4[32];
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT0;/*!< (@ 0x00000300) OUT Endpoint 0                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT1;/*!< (@ 0x00000320) OUT Endpoint 1                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT2;/*!< (@ 0x00000340) OUT Endpoint 2                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT3;/*!< (@ 0x00000360) OUT Endpoint 3                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT4;/*!< (@ 0x00000380) OUT Endpoint 4                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT5;/*!< (@ 0x000003A0) OUT Endpoint 5                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT6;/*!< (@ 0x000003C0) OUT Endpoint 6                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT7;/*!< (@ 0x000003E0) OUT Endpoint 7                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT8;/*!< (@ 0x00000400) OUT Endpoint 8                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT9;/*!< (@ 0x00000420) OUT Endpoint 9                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT10;/*!< (@ 0x00000440) OUT Endpoint 10                                    */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT11;/*!< (@ 0x00000460) OUT Endpoint 11                                    */
} USB_OTG_DEVICE_Type;                          /*!< Size = 1152 (0x480)                                                       */



/* =========================================================================================================================== */
/* ================                                      USB_OTG_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed power control (USB_OTG_PWRCLK)
  */

typedef struct {                                /*!< (@ 0xFE980E00) USB_OTG_PWRCLK Structure                                   */
  
  union {
    __IOM uint32_t PCGCCTL;                     /*!< (@ 0x00000000) power and clock gating control                             */
    
    struct {
      __IOM uint32_t STPPCLK    : 1;            /*!< [0..0] Stop PHY clock                                                     */
      __IOM uint32_t GATEHCLK   : 1;            /*!< [1..1] Gate HCLK                                                          */
      __IOM uint32_t PWRCLMP    : 1;            /*!< [2..2] Power clamp                                                        */
      __IOM uint32_t RSTPDWNMODULE : 1;         /*!< [3..3] Power down modules                                                 */
      __IOM uint32_t PHYSUSP    : 1;            /*!< [4..4] PHY Suspended                                                      */
      __IOM uint32_t ENABLE_L1GATING : 1;       /*!< [5..5] Enable sleep clock gating                                          */
      __IOM uint32_t PHYSLEEP   : 1;            /*!< [6..6] PHY is in sleep mode                                               */
      __IOM uint32_t DEEPSLEEP  : 1;            /*!< [7..7] PHY is in deep sleep                                               */
      __IOM uint32_t RESETAFTERSUSP : 1;        /*!< [8..8] Reset after suspend                                                */
      __IOM uint32_t RESTOREMODE : 1;           /*!< [9..9] Restore mode                                                       */
      __IOM uint32_t ENEXTNDEDHIBER : 1;        /*!< [10..10] Enable extended hibernation                                      */
      __IOM uint32_t EXTNDEDHIBERNATIONCLAMP : 1;/*!< [11..11] Extended hibernation clamp                                      */
      __IOM uint32_t EXTNDEDHIBERNATIONSWITCH : 1;/*!< [12..12] Extended hibernation switch                                    */
      __IOM uint32_t ESSREGRESTORED : 1;        /*!< [13..13] Essential register values restored                               */
      __IOM uint32_t RESTORE_VALUE : 18;        /*!< [31..14] Restore value                                                    */
    } PCGCCTL_b;
  } ;
} USB_OTG_PWRCLK_Type;                          /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           EMMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Arasan SD3.0 Host AHB eMMC 4.4 (EMMC)
  */

typedef struct {                                /*!< (@ 0xFE300000) EMMC Structure                                             */
  __IOM uint32_t  ARG2;                         /*!< (@ 0x00000000) Argument for ACMD23 command                                */
  
  union {
    __IOM uint32_t BLKSIZECNT;                  /*!< (@ 0x00000004) Numer and size in bytes for data block to be
                                                                         transferred                                           */
    
    struct {
      __IOM uint32_t BLKSIZE    : 10;           /*!< [9..0] Block size in bytes                                                */
            uint32_t            : 6;
      __IOM uint32_t BLKCNT     : 16;           /*!< [31..16] Number of blocks to be transferred                               */
    } BLKSIZECNT_b;
  } ;
  __IOM uint32_t  ARG1;                         /*!< (@ 0x00000008) Argument for everything but ACMD23                         */
  
  union {
    __IOM uint32_t CMDTM;                       /*!< (@ 0x0000000C) Issue commands to the card                                 */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t TM_BLKCNT_EN : 1;          /*!< [1..1] Enable block counter                                               */
      __IOM uint32_t TM_AUTO_CMD_EN : 2;        /*!< [3..2] Command after completion                                           */
      __IOM uint32_t TM_DAT_DIR : 1;            /*!< [4..4] Direction of data transfer                                         */
      __IOM uint32_t TM_MULTI_BLOCK : 1;        /*!< [5..5] Type of data transfer                                              */
            uint32_t            : 10;
      __IOM uint32_t CMD_RSPNS_TYPE : 2;        /*!< [17..16] Type of expected response                                        */
            uint32_t            : 1;
      __IOM uint32_t CMD_CRCCHK_EN : 1;         /*!< [19..19] Check the responses CRC                                          */
      __IOM uint32_t CMD_IXCHK_EN : 1;          /*!< [20..20] Check that the response has the same command index               */
      __IOM uint32_t CMD_ISDATA : 1;            /*!< [21..21] Command involves data                                            */
      __IOM uint32_t CMD_TYPE   : 2;            /*!< [23..22] Type of command to be issued                                     */
      __IOM uint32_t CMD_INDEX  : 6;            /*!< [29..24] Command index to be issued                                       */
            uint32_t            : 2;
    } CMDTM_b;
  } ;
  __IOM uint32_t  RESP0;                        /*!< (@ 0x00000010) Status bits of the response                                */
  __IOM uint32_t  RESP1;                        /*!< (@ 0x00000014) Bits 63:32 of CMD2 and CMD10 responses                     */
  __IOM uint32_t  RESP2;                        /*!< (@ 0x00000018) Bits 95:64 of CMD2 and CMD10 responses                     */
  __IOM uint32_t  RESP3;                        /*!< (@ 0x0000001C) Bits 127:96 of CMD2 and CMD10 responses                    */
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000020) Data to/from the card                                      */
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000024) Status info for debugging                                  */
    
    struct {
      __IOM uint32_t CMD_INHIBIT : 1;           /*!< [0..0] Command line still in use                                          */
      __IOM uint32_t DAT_INHIBIT : 1;           /*!< [1..1] Data lines still in use                                            */
      __IOM uint32_t DAT_ACTIVE : 1;            /*!< [2..2] At least one data line is active                                   */
            uint32_t            : 5;
      __IOM uint32_t WRITE_TRANSFER : 1;        /*!< [8..8] Write transfer is active                                           */
      __IOM uint32_t READ_TRANSFER : 1;         /*!< [9..9] Read transfer is active                                            */
      __IOM uint32_t BUFFER_WRITE_ENABLE : 1;   /*!< [10..10] The buffer has space for new data                                */
      __IOM uint32_t BUFFER_READ_ENABLE : 1;    /*!< [11..11] New data is available to read                                    */
            uint32_t            : 8;
      __IOM uint32_t DAT_LEVEL0 : 4;            /*!< [23..20] Value of DAT[3:0]                                                */
      __IOM uint32_t CMD_LEVEL  : 1;            /*!< [24..24] Value of CMD                                                     */
      __IOM uint32_t DAT_LEVEL1 : 4;            /*!< [28..25] Value of DAT[7:4]                                                */
            uint32_t            : 3;
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t CONTROL0;                    /*!< (@ 0x00000028) Control                                                    */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t HCTL_DWIDTH : 1;           /*!< [1..1] Use 4 data lines                                                   */
      __IOM uint32_t HCTL_HS_EN : 1;            /*!< [2..2] Enable high speed mode                                             */
            uint32_t            : 2;
      __IOM uint32_t HCTL_8BIT  : 1;            /*!< [5..5] Use 8 data lines                                                   */
            uint32_t            : 10;
      __IOM uint32_t GAP_STOP   : 1;            /*!< [16..16] Stop the current transaction at the next block gap               */
      __IOM uint32_t GAP_RESTART : 1;           /*!< [17..17] Restart a transaction stopped by GAP_STOP                        */
      __IOM uint32_t READWAIT_EN : 1;           /*!< [18..18] Use DAT2 read/wait protocol                                      */
      __IOM uint32_t GAP_IEN    : 1;            /*!< [19..19] Enable interrupt on block gap                                    */
      __IOM uint32_t SPI_MODE   : 1;            /*!< [20..20] Enable SPI mode                                                  */
      __IOM uint32_t BOOT_EN    : 1;            /*!< [21..21] Boot mode enabled                                                */
      __IOM uint32_t ALT_BOOT_EN : 1;           /*!< [22..22] Enable alternate boot mode                                       */
            uint32_t            : 9;
    } CONTROL0_b;
  } ;
  
  union {
    __IOM uint32_t CONTROL1;                    /*!< (@ 0x0000002C) Configure                                                  */
    
    struct {
      __IOM uint32_t CLK_INTLEN : 1;            /*!< [0..0] Enable internal clock                                              */
      __IM  uint32_t CLK_STABLE : 1;            /*!< [1..1] SD Clock stable                                                    */
      __IOM uint32_t CLK_EN     : 1;            /*!< [2..2] SD Clock enable                                                    */
            uint32_t            : 2;
      __IOM uint32_t CLK_GENSEL : 1;            /*!< [5..5] Mode of clock generation                                           */
      __IOM uint32_t CLK_FREQ_MS2 : 2;          /*!< [7..6] Clock base divider MSBs                                            */
      __IOM uint32_t CLK_FREQ8  : 8;            /*!< [15..8] Clock base divider LSB                                            */
      __IOM uint32_t DATA_TOUNIT : 4;           /*!< [19..16] Data timeout exponent (TMCLK * 2 ** (x + 13)) 1111
                                                     disabled                                                                  */
            uint32_t            : 4;
      __IOM uint32_t SRST_HC    : 1;            /*!< [24..24] Reset the complete host circuit                                  */
      __IOM uint32_t SRST_CMD   : 1;            /*!< [25..25] Reset the command handling circuit                               */
      __IOM uint32_t SRST_DATA  : 1;            /*!< [26..26] Reset the data handling circuit                                  */
            uint32_t            : 5;
    } CONTROL1_b;
  } ;
  
  union {
    __IOM uint32_t INTERRUPT;                   /*!< (@ 0x00000030) Interrupt flags                                            */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
      __IM  uint32_t ERR        : 1;            /*!< [15..15] An error has occured                                             */
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } INTERRUPT_b;
  } ;
  
  union {
    __IOM uint32_t IRPT_MASK;                   /*!< (@ 0x00000034) Mask interrupts that change in INTERRUPT                   */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
            uint32_t            : 1;
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } IRPT_MASK_b;
  } ;
  
  union {
    __IOM uint32_t IRPT_EN;                     /*!< (@ 0x00000038) Enable interrupt to core                                   */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
            uint32_t            : 1;
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } IRPT_EN_b;
  } ;
  
  union {
    __IOM uint32_t CONTROL2;                    /*!< (@ 0x0000003C) Control 2                                                  */
    
    struct {
      __IM  uint32_t ACNOX_ERR  : 1;            /*!< [0..0] Auto command not executed due to an error                          */
      __IM  uint32_t ACTO_ERR   : 1;            /*!< [1..1] Auto command timeout                                               */
      __IM  uint32_t ACCRC_ERR  : 1;            /*!< [2..2] Command CRC error during auto command                              */
      __IM  uint32_t ACEND_ERR  : 1;            /*!< [3..3] End bit is not 1 during auto command                               */
      __IM  uint32_t ACBAD_ERR  : 1;            /*!< [4..4] Command index error during auto command                            */
            uint32_t            : 2;
      __IM  uint32_t NOTC12_ERR : 1;            /*!< [7..7] Error during auto CMD12                                            */
            uint32_t            : 8;
      __IOM uint32_t UHSMODE    : 3;            /*!< [18..16] Select the speed of the SD card                                  */
            uint32_t            : 3;
      __IOM uint32_t TUNEON     : 1;            /*!< [22..22] SD Clock tune in progress                                        */
      __IOM uint32_t TUNED      : 1;            /*!< [23..23] Tuned clock is used for sampling data                            */
            uint32_t            : 8;
    } CONTROL2_b;
  } ;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IOM uint32_t FORCE_IRPT;                  /*!< (@ 0x00000050) Force an interrupt                                         */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
            uint32_t            : 1;
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } FORCE_IRPT_b;
  } ;
  __IM  uint32_t  RESERVED1[7];
  __IOM uint32_t  BOOT_TIMEOUT;                 /*!< (@ 0x00000070) Number of SD clock cycles to wait for boot                 */
  
  union {
    __IOM uint32_t DBG_SEL;                     /*!< (@ 0x00000074) What submodules are accessed by the debug bus              */
    
    struct {
      __IOM uint32_t SELECT     : 1;            /*!< [0..0] SELECT                                                             */
            uint32_t            : 31;
    } DBG_SEL_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  
  union {
    __IOM uint32_t EXRDFIFO_CFG;                /*!< (@ 0x00000080) Fine tune DMA request generation                           */
    
    struct {
      __IOM uint32_t RD_THRSH   : 3;            /*!< [2..0] Read threshold in 32 bit words                                     */
            uint32_t            : 29;
    } EXRDFIFO_CFG_b;
  } ;
  
  union {
    __IOM uint32_t EXRDFIFO_EN;                 /*!< (@ 0x00000084) Enable the extension data register                         */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] Enable the extension FIFO                                          */
            uint32_t            : 31;
    } EXRDFIFO_EN_b;
  } ;
  
  union {
    __IOM uint32_t TUNE_STEP;                   /*!< (@ 0x00000088) Sample clock delay step duration                           */
    
    struct {
      __IOM uint32_t DELAY      : 3;            /*!< [2..0] DELAY                                                              */
            uint32_t            : 29;
    } TUNE_STEP_b;
  } ;
  
  union {
    __IOM uint32_t TUNE_STEPS_STD;              /*!< (@ 0x0000008C) Sample clock delay step count for SDR                      */
    
    struct {
      __IOM uint32_t STEPS      : 6;            /*!< [5..0] STEPS                                                              */
            uint32_t            : 26;
    } TUNE_STEPS_STD_b;
  } ;
  
  union {
    __IOM uint32_t TUNE_STEPS_DDR;              /*!< (@ 0x00000090) Sample clock delay step count for DDR                      */
    
    struct {
      __IOM uint32_t STEPS      : 6;            /*!< [5..0] STEPS                                                              */
            uint32_t            : 26;
    } TUNE_STEPS_DDR_b;
  } ;
  __IM  uint32_t  RESERVED3[23];
  
  union {
    __IOM uint32_t SPI_INT_SPT;                 /*!< (@ 0x000000F0) Interrupts in SPI mode depend on CS                        */
    
    struct {
      __IOM uint32_t SELECT     : 8;            /*!< [7..0] SELECT                                                             */
            uint32_t            : 24;
    } SPI_INT_SPT_b;
  } ;
  __IM  uint32_t  RESERVED4[2];
  
  union {
    __IOM uint32_t SLOTISR_VER;                 /*!< (@ 0x000000FC) Version information and slot interrupt status              */
    
    struct {
      __IOM uint32_t SLOT_STATUS : 8;           /*!< [7..0] OR of interrupt and wakeup signals for each slot                   */
            uint32_t            : 8;
      __IOM uint32_t SDVERSION  : 8;            /*!< [23..16] Host controller specification version                            */
      __IOM uint32_t VENDOR     : 8;            /*!< [31..24] Vendor version number                                            */
    } SLOTISR_VER_b;
  } ;
} Arasan_EMMC_Distributor_Type;                 /*!< Size = 256 (0x100)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define VCMAILBOX_BASE              0xFE00B880UL
#define CM_PCM_BASE                 0xFE101098UL
#define CM_PWM_BASE                 0xFE1010A0UL
#define GPIO_BASE                   0xFE200000UL
#define SYSTMR_BASE                 0xFE003000UL
#define UART0_BASE                  0xFE201000UL
#define UART2_BASE                  0xFE201400UL
#define UART3_BASE                  0xFE201600UL
#define UART4_BASE                  0xFE201800UL
#define UART5_BASE                  0xFE201A00UL
#define SPI0_BASE                   0xFE204000UL
#define SPI3_BASE                   0xFE204600UL
#define SPI4_BASE                   0xFE204800UL
#define SPI5_BASE                   0xFE204A00UL
#define SPI6_BASE                   0xFE204C00UL
#define PACTL_BASE                  0xFE204E00UL
#define BSC0_BASE                   0xFE205000UL
#define BSC1_BASE                   0xFE804000UL
#define BSC3_BASE                   0xFE205600UL
#define BSC4_BASE                   0xFE205800UL
#define BSC5_BASE                   0xFE205A00UL
#define BSC6_BASE                   0xFE205C00UL
#define PWM0_BASE                   0xFE20C000UL
#define PWM1_BASE                   0xFE20C800UL
#define AUX_BASE                    0xFE215000UL
#define UART1_BASE                  0xFE215040UL
#define SPI1_BASE                   0xFE215080UL
#define SPI2_BASE                   0xFE2150C0UL
#define LIC_BASE                    0xFF800000UL
#define GIC_DIST_BASE               0xFF841000UL
#define GIC_CPU_BASE                0xFF842000UL
#define USB_OTG_GLOBAL_BASE         0xFE980000UL
#define USB_OTG_HOST_BASE           0xFE980400UL
#define USB_OTG_DEVICE_BASE         0xFE980800UL
#define USB_OTG_PWRCLK_BASE         0xFE980E00UL
#define EMMC_BASE                   0xFE300000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define VCMAILBOX                   ((VCMAILBOX_Type*)         VCMAILBOX_BASE)
#define CM_PCM                      ((CM_PCM_Type*)            CM_PCM_BASE)
#define CM_PWM                      ((CM_PCM_Type*)            CM_PWM_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define SYSTMR                      ((SYSTMR_Type*)            SYSTMR_BASE)
#define UART0                       ((ARM_UART_PL011_Type*)    UART0_BASE)
#define UART2                       ((ARM_UART_PL011_Type*)    UART2_BASE)
#define UART3                       ((ARM_UART_PL011_Type*)    UART3_BASE)
#define UART4                       ((ARM_UART_PL011_Type*)    UART4_BASE)
#define UART5                       ((ARM_UART_PL011_Type*)    UART5_BASE)
#define SPI0                        ((SPI0_Type*)              SPI0_BASE)
#define SPI3                        ((SPI0_Type*)              SPI3_BASE)
#define SPI4                        ((SPI0_Type*)              SPI4_BASE)
#define SPI5                        ((SPI0_Type*)              SPI5_BASE)
#define SPI6                        ((SPI0_Type*)              SPI6_BASE)
#define PACTL                       ((PACTL_Type*)             PACTL_BASE)
#define BSC0                        ((BSC0_Type*)              BSC0_BASE)
#define BSC1                        ((BSC0_Type*)              BSC1_BASE)
#define BSC3                        ((BSC0_Type*)              BSC3_BASE)
#define BSC4                        ((BSC0_Type*)              BSC4_BASE)
#define BSC5                        ((BSC0_Type*)              BSC5_BASE)
#define BSC6                        ((BSC0_Type*)              BSC6_BASE)
#define PWM0                        ((PWM0_Type*)              PWM0_BASE)
#define PWM1                        ((PWM0_Type*)              PWM1_BASE)
#define AUX                         ((AUX_Type*)               AUX_BASE)
#define UART1                       ((UART1_Type*)             UART1_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define LIC                         ((BCM_LIC_Type*)           LIC_BASE)
#define GIC_DIST                    ((ARM_GIC400_Distributor_Type*)  GIC_DIST_BASE)
#define GIC_CPU                     ((ARM_GIC400_CPU_Type*)    GIC_CPU_BASE)
#define USB_OTG_GLOBAL              ((USB_OTG_GLOBAL_Type*)    USB_OTG_GLOBAL_BASE)
#define USB_OTG_HOST                ((USB_OTG_HOST_Type*)      USB_OTG_HOST_BASE)
#define USB_OTG_DEVICE              ((USB_OTG_DEVICE_Type*)    USB_OTG_DEVICE_BASE)
#define USB_OTG_PWRCLK              ((USB_OTG_PWRCLK_Type*)    USB_OTG_PWRCLK_BASE)
#define EMMC                        ((Arasan_EMMC_Distributor_Type*)  EMMC_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                 Pos/Mask Cluster Section                                  ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       GICD_IGROUPR                                        ================ */
/* =========================================================================================================================== */

/* =====================================================  GICD_IGROUPR0  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_IGROUPR1  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_IGROUPR2  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_IGROUPR3  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_USB_Pos (9UL) /*!< USB (Bit 9)                                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)          */
/* =====================================================  GICD_IGROUPR4  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_UART_Pos (25UL) /*!< UART (Bit 25)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                                   */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* =====================================================  GICD_IGROUPR5  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)          */
/* =====================================================  GICD_IGROUPR6  ===================================================== */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_IGROUPR_GICD_IGROUPR6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                      GICD_ISENABLER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ISENABLER0  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ISENABLER1  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ISENABLER2  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ISENABLER3  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_USB_Pos (9UL) /*!< USB (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ISENABLER4  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_UART_Pos (25UL) /*!< UART (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* ====================================================  GICD_ISENABLER5  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ISENABLER6  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ISENABLER_GICD_ISENABLER6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                      GICD_ICENABLER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ICENABLER0  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ICENABLER1  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ICENABLER2  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ICENABLER3  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_USB_Pos (9UL) /*!< USB (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ICENABLER4  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_UART_Pos (25UL) /*!< UART (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* ====================================================  GICD_ICENABLER5  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ICENABLER6  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ICENABLER_GICD_ICENABLER6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                       GICD_ISPENDR                                        ================ */
/* =========================================================================================================================== */

/* =====================================================  GICD_ISPENDR0  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_ISPENDR1  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_ISPENDR2  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_ISPENDR3  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_USB_Pos (9UL) /*!< USB (Bit 9)                                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)          */
/* =====================================================  GICD_ISPENDR4  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_UART_Pos (25UL) /*!< UART (Bit 25)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                                   */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* =====================================================  GICD_ISPENDR5  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)          */
/* =====================================================  GICD_ISPENDR6  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_ISPENDR_GICD_ISPENDR6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                       GICD_ICPENDR                                        ================ */
/* =========================================================================================================================== */

/* =====================================================  GICD_ICPENDR0  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_ICPENDR1  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_ICPENDR2  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)            */
/* =====================================================  GICD_ICPENDR3  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_USB_Pos (9UL) /*!< USB (Bit 9)                                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)          */
/* =====================================================  GICD_ICPENDR4  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_UART_Pos (25UL) /*!< UART (Bit 25)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                                   */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* =====================================================  GICD_ICPENDR5  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)          */
/* =====================================================  GICD_ICPENDR6  ===================================================== */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                               */
#define ARM_GIC400_Distributor_GICD_ICPENDR_GICD_ICPENDR6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                      GICD_ISACTIVER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ISACTIVER0  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ISACTIVER1  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ISACTIVER2  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ISACTIVER3  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_USB_Pos (9UL) /*!< USB (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ISACTIVER4  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_UART_Pos (25UL) /*!< UART (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* ====================================================  GICD_ISACTIVER5  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ISACTIVER6  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ISACTIVER_GICD_ISACTIVER6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                      GICD_ICACTIVER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ICACTIVER0  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT0_Msk (0x1UL) /*!< INT0 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT1_Pos (1UL) /*!< INT1 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT1_Msk (0x2UL) /*!< INT1 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT2_Pos (2UL) /*!< INT2 (Bit 2)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT2_Msk (0x4UL) /*!< INT2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT3_Pos (3UL) /*!< INT3 (Bit 3)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT3_Msk (0x8UL) /*!< INT3 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT4_Pos (4UL) /*!< INT4 (Bit 4)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT4_Msk (0x10UL) /*!< INT4 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT5_Pos (5UL) /*!< INT5 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT5_Msk (0x20UL) /*!< INT5 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT6_Pos (6UL) /*!< INT6 (Bit 6)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT6_Msk (0x40UL) /*!< INT6 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT7_Pos (7UL) /*!< INT7 (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT7_Msk (0x80UL) /*!< INT7 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT8_Pos (8UL) /*!< INT8 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT8_Msk (0x100UL) /*!< INT8 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT9_Pos (9UL) /*!< INT9 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT9_Msk (0x200UL) /*!< INT9 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT10_Pos (10UL) /*!< INT10 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT10_Msk (0x400UL) /*!< INT10 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT11_Pos (11UL) /*!< INT11 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT11_Msk (0x800UL) /*!< INT11 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT12_Pos (12UL) /*!< INT12 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT12_Msk (0x1000UL) /*!< INT12 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT13_Pos (13UL) /*!< INT13 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT13_Msk (0x2000UL) /*!< INT13 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT14_Pos (14UL) /*!< INT14 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT14_Msk (0x4000UL) /*!< INT14 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT15_Pos (15UL) /*!< INT15 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT15_Msk (0x8000UL) /*!< INT15 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT16_Pos (16UL) /*!< INT16 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT16_Msk (0x10000UL) /*!< INT16 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT17_Pos (17UL) /*!< INT17 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT17_Msk (0x20000UL) /*!< INT17 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT18_Pos (18UL) /*!< INT18 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT18_Msk (0x40000UL) /*!< INT18 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT19_Pos (19UL) /*!< INT19 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT19_Msk (0x80000UL) /*!< INT19 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT20_Pos (20UL) /*!< INT20 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT20_Msk (0x100000UL) /*!< INT20 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT21_Pos (21UL) /*!< INT21 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT21_Msk (0x200000UL) /*!< INT21 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT22_Pos (22UL) /*!< INT22 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT22_Msk (0x400000UL) /*!< INT22 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT23_Pos (23UL) /*!< INT23 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT23_Msk (0x800000UL) /*!< INT23 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT24_Pos (24UL) /*!< INT24 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT24_Msk (0x1000000UL) /*!< INT24 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT25_Pos (25UL) /*!< INT25 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT25_Msk (0x2000000UL) /*!< INT25 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT26_Pos (26UL) /*!< INT26 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT26_Msk (0x4000000UL) /*!< INT26 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT27_Pos (27UL) /*!< INT27 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT27_Msk (0x8000000UL) /*!< INT27 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT28_Pos (28UL) /*!< INT28 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT28_Msk (0x10000000UL) /*!< INT28 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT29_Pos (29UL) /*!< INT29 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT29_Msk (0x20000000UL) /*!< INT29 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT30_Pos (30UL) /*!< INT30 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT30_Msk (0x40000000UL) /*!< INT30 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT31_Pos (31UL) /*!< INT31 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER0_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ICACTIVER1  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT32_Pos (0UL) /*!< INT32 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT32_Msk (0x1UL) /*!< INT32 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT33_Pos (1UL) /*!< INT33 (Bit 1)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT33_Msk (0x2UL) /*!< INT33 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT34_Pos (2UL) /*!< INT34 (Bit 2)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT34_Msk (0x4UL) /*!< INT34 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT35_Pos (3UL) /*!< INT35 (Bit 3)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT35_Msk (0x8UL) /*!< INT35 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT36_Pos (4UL) /*!< INT36 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT36_Msk (0x10UL) /*!< INT36 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT37_Pos (5UL) /*!< INT37 (Bit 5)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT37_Msk (0x20UL) /*!< INT37 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT38_Pos (6UL) /*!< INT38 (Bit 6)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT38_Msk (0x40UL) /*!< INT38 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT39_Pos (7UL) /*!< INT39 (Bit 7)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT39_Msk (0x80UL) /*!< INT39 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT40_Pos (8UL) /*!< INT40 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT40_Msk (0x100UL) /*!< INT40 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT41_Pos (9UL) /*!< INT41 (Bit 9)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT41_Msk (0x200UL) /*!< INT41 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT42_Pos (10UL) /*!< INT42 (Bit 10)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT42_Msk (0x400UL) /*!< INT42 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT43_Pos (11UL) /*!< INT43 (Bit 11)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT43_Msk (0x800UL) /*!< INT43 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT44_Pos (12UL) /*!< INT44 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT44_Msk (0x1000UL) /*!< INT44 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT45_Pos (13UL) /*!< INT45 (Bit 13)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT45_Msk (0x2000UL) /*!< INT45 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT46_Pos (14UL) /*!< INT46 (Bit 14)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT46_Msk (0x4000UL) /*!< INT46 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT47_Pos (15UL) /*!< INT47 (Bit 15)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT47_Msk (0x8000UL) /*!< INT47 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT48_Pos (16UL) /*!< INT48 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT48_Msk (0x10000UL) /*!< INT48 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT49_Pos (17UL) /*!< INT49 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT49_Msk (0x20000UL) /*!< INT49 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT50_Pos (18UL) /*!< INT50 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT50_Msk (0x40000UL) /*!< INT50 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT51_Pos (19UL) /*!< INT51 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT51_Msk (0x80000UL) /*!< INT51 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT52_Pos (20UL) /*!< INT52 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT52_Msk (0x100000UL) /*!< INT52 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT53_Pos (21UL) /*!< INT53 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT53_Msk (0x200000UL) /*!< INT53 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT54_Pos (22UL) /*!< INT54 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT54_Msk (0x400000UL) /*!< INT54 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT55_Pos (23UL) /*!< INT55 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT55_Msk (0x800000UL) /*!< INT55 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT56_Pos (24UL) /*!< INT56 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT56_Msk (0x1000000UL) /*!< INT56 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT57_Pos (25UL) /*!< INT57 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT57_Msk (0x2000000UL) /*!< INT57 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT58_Pos (26UL) /*!< INT58 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT58_Msk (0x4000000UL) /*!< INT58 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT59_Pos (27UL) /*!< INT59 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT59_Msk (0x8000000UL) /*!< INT59 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT60_Pos (28UL) /*!< INT60 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT60_Msk (0x10000000UL) /*!< INT60 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT61_Pos (29UL) /*!< INT61 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT61_Msk (0x20000000UL) /*!< INT61 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT62_Pos (30UL) /*!< INT62 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT62_Msk (0x40000000UL) /*!< INT62 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT63_Pos (31UL) /*!< INT63 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER1_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ICACTIVER2  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_TIMER_Msk (0x1UL) /*!< TIMER (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_MAILBOX_Pos (1UL) /*!< MAILBOX (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_MAILBOX_Msk (0x2UL) /*!< MAILBOX (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_DOORBELL0_Pos (2UL) /*!< DOORBELL0 (Bit 2)                       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_DOORBELL0_Msk (0x4UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_DOORBELL1_Pos (3UL) /*!< DOORBELL1 (Bit 3)                       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_DOORBELL1_Msk (0x8UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_VPU0_HALTED_Pos (4UL) /*!< VPU0_HALTED (Bit 4)                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_VPU1_HALTED_Pos (5UL) /*!< VPU1_HALTED (Bit 5)                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)  */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_ARM_AXI_ERROR_Pos (7UL) /*!< ARM_AXI_ERROR (Bit 7)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI0_Pos (8UL) /*!< SWI0 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI0_Msk (0x100UL) /*!< SWI0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI1_Pos (9UL) /*!< SWI1 (Bit 9)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI1_Msk (0x200UL) /*!< SWI1 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI2_Pos (10UL) /*!< SWI2 (Bit 10)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI2_Msk (0x400UL) /*!< SWI2 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI3_Pos (11UL) /*!< SWI3 (Bit 11)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI3_Msk (0x800UL) /*!< SWI3 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI4_Pos (12UL) /*!< SWI4 (Bit 12)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI4_Msk (0x1000UL) /*!< SWI4 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI5_Pos (13UL) /*!< SWI5 (Bit 13)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI5_Msk (0x2000UL) /*!< SWI5 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI6_Pos (14UL) /*!< SWI6 (Bit 14)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI6_Msk (0x4000UL) /*!< SWI6 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI7_Pos (15UL) /*!< SWI7 (Bit 15)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_SWI7_Msk (0x8000UL) /*!< SWI7 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT80_Pos (16UL) /*!< INT80 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT80_Msk (0x10000UL) /*!< INT80 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT81_Pos (17UL) /*!< INT81 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT81_Msk (0x20000UL) /*!< INT81 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT82_Pos (18UL) /*!< INT82 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT82_Msk (0x40000UL) /*!< INT82 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT83_Pos (19UL) /*!< INT83 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT83_Msk (0x80000UL) /*!< INT83 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT84_Pos (20UL) /*!< INT84 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT84_Msk (0x100000UL) /*!< INT84 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT85_Pos (21UL) /*!< INT85 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT85_Msk (0x200000UL) /*!< INT85 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT86_Pos (22UL) /*!< INT86 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT86_Msk (0x400000UL) /*!< INT86 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT87_Pos (23UL) /*!< INT87 (Bit 23)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT87_Msk (0x800000UL) /*!< INT87 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT88_Pos (24UL) /*!< INT88 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT88_Msk (0x1000000UL) /*!< INT88 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT89_Pos (25UL) /*!< INT89 (Bit 25)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT89_Msk (0x2000000UL) /*!< INT89 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT90_Pos (26UL) /*!< INT90 (Bit 26)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT90_Msk (0x4000000UL) /*!< INT90 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT91_Pos (27UL) /*!< INT91 (Bit 27)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT91_Msk (0x8000000UL) /*!< INT91 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT92_Pos (28UL) /*!< INT92 (Bit 28)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT92_Msk (0x10000000UL) /*!< INT92 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT93_Pos (29UL) /*!< INT93 (Bit 29)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT93_Msk (0x20000000UL) /*!< INT93 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT94_Pos (30UL) /*!< INT94 (Bit 30)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT94_Msk (0x40000000UL) /*!< INT94 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT95_Pos (31UL) /*!< INT95 (Bit 31)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER2_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)        */
/* ====================================================  GICD_ICACTIVER3  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_0_Msk (0x1UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_1_Pos (1UL) /*!< TIMER_1 (Bit 1)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_1_Msk (0x2UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_2_Pos (2UL) /*!< TIMER_2 (Bit 2)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_2_Msk (0x4UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_3_Pos (3UL) /*!< TIMER_3 (Bit 3)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TIMER_3_Msk (0x8UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_H264_0_Pos (4UL) /*!< H264_0 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_H264_0_Msk (0x10UL) /*!< H264_0 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_H264_1_Pos (5UL) /*!< H264_1 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_H264_1_Msk (0x20UL) /*!< H264_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_H264_2_Pos (6UL) /*!< H264_2 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_H264_2_Msk (0x40UL) /*!< H264_2 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_JPEG_Pos (7UL) /*!< JPEG (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_JPEG_Msk (0x80UL) /*!< JPEG (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_ISP_Pos (8UL) /*!< ISP (Bit 8)                                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_ISP_Msk (0x100UL) /*!< ISP (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_USB_Pos (9UL) /*!< USB (Bit 9)                                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_USB_Msk (0x200UL) /*!< USB (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_V3D_Pos (10UL) /*!< V3D (Bit 10)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_V3D_Msk (0x400UL) /*!< V3D (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TRANSPOSER_Pos (11UL) /*!< TRANSPOSER (Bit 11)                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_0_Pos (16UL) /*!< DMA_0 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_0_Msk (0x10000UL) /*!< DMA_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_1_Pos (17UL) /*!< DMA_1 (Bit 17)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_1_Msk (0x20000UL) /*!< DMA_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_2_Pos (18UL) /*!< DMA_2 (Bit 18)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_2_Msk (0x40000UL) /*!< DMA_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_3_Pos (19UL) /*!< DMA_3 (Bit 19)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_3_Msk (0x80000UL) /*!< DMA_3 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_4_Pos (20UL) /*!< DMA_4 (Bit 20)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_4_Msk (0x100000UL) /*!< DMA_4 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_5_Pos (21UL) /*!< DMA_5 (Bit 21)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_5_Msk (0x200000UL) /*!< DMA_5 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_6_Pos (22UL) /*!< DMA_6 (Bit 22)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_6_Msk (0x400000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_7_8_Pos (23UL) /*!< DMA_7_8 (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_9_10_Pos (24UL) /*!< DMA_9_10 (Bit 24)                       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_11_Pos (25UL) /*!< DMA_11 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_12_Pos (26UL) /*!< DMA_12 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_13_Pos (27UL) /*!< DMA_13 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_14_Pos (28UL) /*!< DMA_14 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_AUX_Pos (29UL) /*!< AUX (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_AUX_Msk (0x20000000UL) /*!< AUX (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_ARM_Pos (30UL) /*!< ARM (Bit 30)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_ARM_Msk (0x40000000UL) /*!< ARM (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER3_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ICACTIVER4  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HDMI_CEC_Msk (0x1UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HVS_Pos (1UL) /*!< HVS (Bit 1)                                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HVS_Msk (0x2UL) /*!< HVS (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_RPIVID_Pos (2UL) /*!< RPIVID (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_RPIVID_Msk (0x4UL) /*!< RPIVID (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SDC_Pos (3UL) /*!< SDC (Bit 3)                                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SDC_Msk (0x8UL) /*!< SDC (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_DSI_0_Pos (4UL) /*!< DSI_0 (Bit 4)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_DSI_0_Msk (0x10UL) /*!< DSI_0 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_2_Pos (5UL) /*!< PIXEL_VALVE_2 (Bit 5)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CAMERA_0_Pos (6UL) /*!< CAMERA_0 (Bit 6)                         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CAMERA_0_Msk (0x40UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CAMERA_1_Pos (7UL) /*!< CAMERA_1 (Bit 7)                         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CAMERA_1_Msk (0x80UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HDMI_0_Pos (8UL) /*!< HDMI_0 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HDMI_0_Msk (0x100UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HDMI_1_Pos (9UL) /*!< HDMI_1 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_HDMI_1_Msk (0x200UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_DSI_1_Pos (12UL) /*!< DSI_1 (Bit 12)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_DSI_1_Msk (0x1000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CPR_Pos (15UL) /*!< CPR (Bit 15)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CPR_Msk (0x8000UL) /*!< CPR (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SMI_Pos (16UL) /*!< SMI (Bit 16)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SMI_Msk (0x10000UL) /*!< SMI (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_0_Pos (17UL) /*!< GPIO_0 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_0_Msk (0x20000UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_1_Pos (18UL) /*!< GPIO_1 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_1_Msk (0x40000UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_2_Pos (19UL) /*!< GPIO_2 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_2_Msk (0x80000UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_3_Pos (20UL) /*!< GPIO_3 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_GPIO_3_Msk (0x100000UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_I2C_Pos (21UL) /*!< I2C (Bit 21)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_I2C_Msk (0x200000UL) /*!< I2C (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SPI_Pos (22UL) /*!< SPI (Bit 22)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SPI_Msk (0x400000UL) /*!< SPI (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PCM_I2S_Pos (23UL) /*!< PCM_I2S (Bit 23)                         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SDHOST_Pos (24UL) /*!< SDHOST (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_UART_Pos (25UL) /*!< UART (Bit 25)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_UART_Msk (0x2000000UL) /*!< UART (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_ETH_PCIE_Pos (26UL) /*!< ETH_PCIE (Bit 26)                       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_VEC_Pos (27UL) /*!< VEC (Bit 27)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_VEC_Msk (0x8000000UL) /*!< VEC (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CPG_Pos (28UL) /*!< CPG (Bit 28)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_CPG_Msk (0x10000000UL) /*!< CPG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_RNG_Pos (29UL) /*!< RNG (Bit 29)                                 */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_RNG_Msk (0x20000000UL) /*!< RNG (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_EMMC_Pos (30UL) /*!< EMMC (Bit 30)                               */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_EMMC_Msk (0x40000000UL) /*!< EMMC (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER4_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* ====================================================  GICD_ICACTIVER5  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT160_Pos (0UL) /*!< INT160 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT160_Msk (0x1UL) /*!< INT160 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT161_Pos (1UL) /*!< INT161 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT161_Msk (0x2UL) /*!< INT161 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT162_Pos (2UL) /*!< INT162 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT162_Msk (0x4UL) /*!< INT162 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT163_Pos (3UL) /*!< INT163 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT163_Msk (0x8UL) /*!< INT163 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT164_Pos (4UL) /*!< INT164 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT164_Msk (0x10UL) /*!< INT164 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT165_Pos (5UL) /*!< INT165 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT165_Msk (0x20UL) /*!< INT165 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT166_Pos (6UL) /*!< INT166 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT166_Msk (0x40UL) /*!< INT166 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT167_Pos (7UL) /*!< INT167 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT167_Msk (0x80UL) /*!< INT167 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT168_Pos (8UL) /*!< INT168 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT168_Msk (0x100UL) /*!< INT168 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT169_Pos (9UL) /*!< INT169 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT169_Msk (0x200UL) /*!< INT169 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT170_Pos (10UL) /*!< INT170 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT170_Msk (0x400UL) /*!< INT170 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT171_Pos (11UL) /*!< INT171 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT171_Msk (0x800UL) /*!< INT171 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT172_Pos (12UL) /*!< INT172 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT172_Msk (0x1000UL) /*!< INT172 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT173_Pos (13UL) /*!< INT173 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT173_Msk (0x2000UL) /*!< INT173 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT174_Pos (14UL) /*!< INT174 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT174_Msk (0x4000UL) /*!< INT174 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT175_Pos (15UL) /*!< INT175 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT175_Msk (0x8000UL) /*!< INT175 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT176_Pos (16UL) /*!< INT176 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT176_Msk (0x10000UL) /*!< INT176 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT177_Pos (17UL) /*!< INT177 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT177_Msk (0x20000UL) /*!< INT177 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT178_Pos (18UL) /*!< INT178 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT178_Msk (0x40000UL) /*!< INT178 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT179_Pos (19UL) /*!< INT179 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT179_Msk (0x80000UL) /*!< INT179 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT180_Pos (20UL) /*!< INT180 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT180_Msk (0x100000UL) /*!< INT180 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT181_Pos (21UL) /*!< INT181 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT181_Msk (0x200000UL) /*!< INT181 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT182_Pos (22UL) /*!< INT182 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT182_Msk (0x400000UL) /*!< INT182 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT183_Pos (23UL) /*!< INT183 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT183_Msk (0x800000UL) /*!< INT183 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT184_Pos (24UL) /*!< INT184 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT184_Msk (0x1000000UL) /*!< INT184 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT185_Pos (25UL) /*!< INT185 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT185_Msk (0x2000000UL) /*!< INT185 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT186_Pos (26UL) /*!< INT186 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT186_Msk (0x4000000UL) /*!< INT186 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT187_Pos (27UL) /*!< INT187 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT187_Msk (0x8000000UL) /*!< INT187 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT188_Pos (28UL) /*!< INT188 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT188_Msk (0x10000000UL) /*!< INT188 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT189_Pos (29UL) /*!< INT189 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT189_Msk (0x20000000UL) /*!< INT189 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT190_Pos (30UL) /*!< INT190 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT190_Msk (0x40000000UL) /*!< INT190 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT191_Pos (31UL) /*!< INT191 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER5_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)      */
/* ====================================================  GICD_ICACTIVER6  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT192_Pos (0UL) /*!< INT192 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT192_Msk (0x1UL) /*!< INT192 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT193_Pos (1UL) /*!< INT193 (Bit 1)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT193_Msk (0x2UL) /*!< INT193 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT194_Pos (2UL) /*!< INT194 (Bit 2)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT194_Msk (0x4UL) /*!< INT194 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT195_Pos (3UL) /*!< INT195 (Bit 3)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT195_Msk (0x8UL) /*!< INT195 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT196_Pos (4UL) /*!< INT196 (Bit 4)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT196_Msk (0x10UL) /*!< INT196 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT197_Pos (5UL) /*!< INT197 (Bit 5)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT197_Msk (0x20UL) /*!< INT197 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT198_Pos (6UL) /*!< INT198 (Bit 6)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT198_Msk (0x40UL) /*!< INT198 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT199_Pos (7UL) /*!< INT199 (Bit 7)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT199_Msk (0x80UL) /*!< INT199 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT200_Pos (8UL) /*!< INT200 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT200_Msk (0x100UL) /*!< INT200 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT201_Pos (9UL) /*!< INT201 (Bit 9)                             */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT201_Msk (0x200UL) /*!< INT201 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT202_Pos (10UL) /*!< INT202 (Bit 10)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT202_Msk (0x400UL) /*!< INT202 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT203_Pos (11UL) /*!< INT203 (Bit 11)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT203_Msk (0x800UL) /*!< INT203 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT204_Pos (12UL) /*!< INT204 (Bit 12)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT204_Msk (0x1000UL) /*!< INT204 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT205_Pos (13UL) /*!< INT205 (Bit 13)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT205_Msk (0x2000UL) /*!< INT205 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT206_Pos (14UL) /*!< INT206 (Bit 14)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT206_Msk (0x4000UL) /*!< INT206 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT207_Pos (15UL) /*!< INT207 (Bit 15)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT207_Msk (0x8000UL) /*!< INT207 (Bitfield-Mask: 0x01)          */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT208_Pos (16UL) /*!< INT208 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT208_Msk (0x10000UL) /*!< INT208 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT209_Pos (17UL) /*!< INT209 (Bit 17)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT209_Msk (0x20000UL) /*!< INT209 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT210_Pos (18UL) /*!< INT210 (Bit 18)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT210_Msk (0x40000UL) /*!< INT210 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT211_Pos (19UL) /*!< INT211 (Bit 19)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT211_Msk (0x80000UL) /*!< INT211 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT212_Pos (20UL) /*!< INT212 (Bit 20)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT212_Msk (0x100000UL) /*!< INT212 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT213_Pos (21UL) /*!< INT213 (Bit 21)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT213_Msk (0x200000UL) /*!< INT213 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT214_Pos (22UL) /*!< INT214 (Bit 22)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT214_Msk (0x400000UL) /*!< INT214 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT215_Pos (23UL) /*!< INT215 (Bit 23)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT215_Msk (0x800000UL) /*!< INT215 (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT216_Pos (24UL) /*!< INT216 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT216_Msk (0x1000000UL) /*!< INT216 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT217_Pos (25UL) /*!< INT217 (Bit 25)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT217_Msk (0x2000000UL) /*!< INT217 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT218_Pos (26UL) /*!< INT218 (Bit 26)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT218_Msk (0x4000000UL) /*!< INT218 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT219_Pos (27UL) /*!< INT219 (Bit 27)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT219_Msk (0x8000000UL) /*!< INT219 (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT220_Pos (28UL) /*!< INT220 (Bit 28)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT220_Msk (0x10000000UL) /*!< INT220 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT221_Pos (29UL) /*!< INT221 (Bit 29)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT221_Msk (0x20000000UL) /*!< INT221 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT222_Pos (30UL) /*!< INT222 (Bit 30)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT222_Msk (0x40000000UL) /*!< INT222 (Bitfield-Mask: 0x01)      */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT223_Pos (31UL) /*!< INT223 (Bit 31)                           */
#define ARM_GIC400_Distributor_GICD_ICACTIVER_GICD_ICACTIVER6_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                      GICD_IPRIORITYR                                      ================ */
/* =========================================================================================================================== */

/* ===================================================  GICD_IPRIORITYR0  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT0_Msk (0xffUL) /*!< INT0 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT1_Pos (8UL) /*!< INT1 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT1_Msk (0xff00UL) /*!< INT1 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT2_Pos (16UL) /*!< INT2 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT2_Msk (0xff0000UL) /*!< INT2 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT3_Pos (24UL) /*!< INT3 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR0_INT3_Msk (0xff000000UL) /*!< INT3 (Bitfield-Mask: 0xff)        */
/* ===================================================  GICD_IPRIORITYR1  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT4_Pos (0UL) /*!< INT4 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT4_Msk (0xffUL) /*!< INT4 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT5_Pos (8UL) /*!< INT5 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT5_Msk (0xff00UL) /*!< INT5 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT6_Pos (16UL) /*!< INT6 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT6_Msk (0xff0000UL) /*!< INT6 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT7_Pos (24UL) /*!< INT7 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR1_INT7_Msk (0xff000000UL) /*!< INT7 (Bitfield-Mask: 0xff)        */
/* ===================================================  GICD_IPRIORITYR2  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT8_Pos (0UL) /*!< INT8 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT8_Msk (0xffUL) /*!< INT8 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT9_Pos (8UL) /*!< INT9 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT9_Msk (0xff00UL) /*!< INT9 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT10_Pos (16UL) /*!< INT10 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT10_Msk (0xff0000UL) /*!< INT10 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT11_Pos (24UL) /*!< INT11 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR2_INT11_Msk (0xff000000UL) /*!< INT11 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR3  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT12_Pos (0UL) /*!< INT12 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT12_Msk (0xffUL) /*!< INT12 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT13_Pos (8UL) /*!< INT13 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT13_Msk (0xff00UL) /*!< INT13 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT14_Pos (16UL) /*!< INT14 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT14_Msk (0xff0000UL) /*!< INT14 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT15_Pos (24UL) /*!< INT15 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR3_INT15_Msk (0xff000000UL) /*!< INT15 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR4  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT16_Pos (0UL) /*!< INT16 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT16_Msk (0xffUL) /*!< INT16 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT17_Pos (8UL) /*!< INT17 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT17_Msk (0xff00UL) /*!< INT17 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT18_Pos (16UL) /*!< INT18 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT18_Msk (0xff0000UL) /*!< INT18 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT19_Pos (24UL) /*!< INT19 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR4_INT19_Msk (0xff000000UL) /*!< INT19 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR5  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT20_Pos (0UL) /*!< INT20 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT20_Msk (0xffUL) /*!< INT20 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT21_Pos (8UL) /*!< INT21 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT21_Msk (0xff00UL) /*!< INT21 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT22_Pos (16UL) /*!< INT22 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT22_Msk (0xff0000UL) /*!< INT22 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT23_Pos (24UL) /*!< INT23 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR5_INT23_Msk (0xff000000UL) /*!< INT23 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR6  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT24_Pos (0UL) /*!< INT24 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT24_Msk (0xffUL) /*!< INT24 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT25_Pos (8UL) /*!< INT25 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT25_Msk (0xff00UL) /*!< INT25 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT26_Pos (16UL) /*!< INT26 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT26_Msk (0xff0000UL) /*!< INT26 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT27_Pos (24UL) /*!< INT27 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR6_INT27_Msk (0xff000000UL) /*!< INT27 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR7  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT28_Pos (0UL) /*!< INT28 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT28_Msk (0xffUL) /*!< INT28 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT29_Pos (8UL) /*!< INT29 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT29_Msk (0xff00UL) /*!< INT29 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT30_Pos (16UL) /*!< INT30 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT30_Msk (0xff0000UL) /*!< INT30 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT31_Pos (24UL) /*!< INT31 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR7_INT31_Msk (0xff000000UL) /*!< INT31 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR8  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT32_Pos (0UL) /*!< INT32 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT32_Msk (0xffUL) /*!< INT32 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT33_Pos (8UL) /*!< INT33 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT33_Msk (0xff00UL) /*!< INT33 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT34_Pos (16UL) /*!< INT34 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT34_Msk (0xff0000UL) /*!< INT34 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT35_Pos (24UL) /*!< INT35 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR8_INT35_Msk (0xff000000UL) /*!< INT35 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR9  ==================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT36_Pos (0UL) /*!< INT36 (Bit 0)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT36_Msk (0xffUL) /*!< INT36 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT37_Pos (8UL) /*!< INT37 (Bit 8)                             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT37_Msk (0xff00UL) /*!< INT37 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT38_Pos (16UL) /*!< INT38 (Bit 16)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT38_Msk (0xff0000UL) /*!< INT38 (Bitfield-Mask: 0xff)        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT39_Pos (24UL) /*!< INT39 (Bit 24)                           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR9_INT39_Msk (0xff000000UL) /*!< INT39 (Bitfield-Mask: 0xff)      */
/* ===================================================  GICD_IPRIORITYR10  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT40_Pos (0UL) /*!< INT40 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT40_Msk (0xffUL) /*!< INT40 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT41_Pos (8UL) /*!< INT41 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT41_Msk (0xff00UL) /*!< INT41 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT42_Pos (16UL) /*!< INT42 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT42_Msk (0xff0000UL) /*!< INT42 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT43_Pos (24UL) /*!< INT43 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR10_INT43_Msk (0xff000000UL) /*!< INT43 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR11  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT44_Pos (0UL) /*!< INT44 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT44_Msk (0xffUL) /*!< INT44 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT45_Pos (8UL) /*!< INT45 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT45_Msk (0xff00UL) /*!< INT45 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT46_Pos (16UL) /*!< INT46 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT46_Msk (0xff0000UL) /*!< INT46 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT47_Pos (24UL) /*!< INT47 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR11_INT47_Msk (0xff000000UL) /*!< INT47 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR12  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT48_Pos (0UL) /*!< INT48 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT48_Msk (0xffUL) /*!< INT48 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT49_Pos (8UL) /*!< INT49 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT49_Msk (0xff00UL) /*!< INT49 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT50_Pos (16UL) /*!< INT50 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT50_Msk (0xff0000UL) /*!< INT50 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT51_Pos (24UL) /*!< INT51 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR12_INT51_Msk (0xff000000UL) /*!< INT51 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR13  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT52_Pos (0UL) /*!< INT52 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT52_Msk (0xffUL) /*!< INT52 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT53_Pos (8UL) /*!< INT53 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT53_Msk (0xff00UL) /*!< INT53 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT54_Pos (16UL) /*!< INT54 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT54_Msk (0xff0000UL) /*!< INT54 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT55_Pos (24UL) /*!< INT55 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR13_INT55_Msk (0xff000000UL) /*!< INT55 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR14  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT56_Pos (0UL) /*!< INT56 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT56_Msk (0xffUL) /*!< INT56 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT57_Pos (8UL) /*!< INT57 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT57_Msk (0xff00UL) /*!< INT57 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT58_Pos (16UL) /*!< INT58 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT58_Msk (0xff0000UL) /*!< INT58 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT59_Pos (24UL) /*!< INT59 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR14_INT59_Msk (0xff000000UL) /*!< INT59 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR15  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT60_Pos (0UL) /*!< INT60 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT60_Msk (0xffUL) /*!< INT60 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT61_Pos (8UL) /*!< INT61 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT61_Msk (0xff00UL) /*!< INT61 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT62_Pos (16UL) /*!< INT62 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT62_Msk (0xff0000UL) /*!< INT62 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT63_Pos (24UL) /*!< INT63 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR15_INT63_Msk (0xff000000UL) /*!< INT63 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR16  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_TIMER_Msk (0xffUL) /*!< TIMER (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_MAILBOX_Pos (8UL) /*!< MAILBOX (Bit 8)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_MAILBOX_Msk (0xff00UL) /*!< MAILBOX (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_DOORBELL0_Pos (16UL) /*!< DOORBELL0 (Bit 16)                  */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_DOORBELL0_Msk (0xff0000UL) /*!< DOORBELL0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_DOORBELL1_Pos (24UL) /*!< DOORBELL1 (Bit 24)                  */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR16_DOORBELL1_Msk (0xff000000UL) /*!< DOORBELL1 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR17  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_VPU0_HALTED_Pos (0UL) /*!< VPU0_HALTED (Bit 0)                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_VPU0_HALTED_Msk (0xffUL) /*!< VPU0_HALTED (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_VPU1_HALTED_Pos (8UL) /*!< VPU1_HALTED (Bit 8)                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_VPU1_HALTED_Msk (0xff00UL) /*!< VPU1_HALTED (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_ARM_ADDRESS_ERROR_Pos (16UL) /*!< ARM_ADDRESS_ERROR (Bit 16)  */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_ARM_ADDRESS_ERROR_Msk (0xff0000UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_ARM_AXI_ERROR_Pos (24UL) /*!< ARM_AXI_ERROR (Bit 24)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR17_ARM_AXI_ERROR_Msk (0xff000000UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR18  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI0_Pos (0UL) /*!< SWI0 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI0_Msk (0xffUL) /*!< SWI0 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI1_Pos (8UL) /*!< SWI1 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI1_Msk (0xff00UL) /*!< SWI1 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI2_Pos (16UL) /*!< SWI2 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI2_Msk (0xff0000UL) /*!< SWI2 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI3_Pos (24UL) /*!< SWI3 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR18_SWI3_Msk (0xff000000UL) /*!< SWI3 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_IPRIORITYR19  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI4_Pos (0UL) /*!< SWI4 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI4_Msk (0xffUL) /*!< SWI4 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI5_Pos (8UL) /*!< SWI5 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI5_Msk (0xff00UL) /*!< SWI5 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI6_Pos (16UL) /*!< SWI6 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI6_Msk (0xff0000UL) /*!< SWI6 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI7_Pos (24UL) /*!< SWI7 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR19_SWI7_Msk (0xff000000UL) /*!< SWI7 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_IPRIORITYR20  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT80_Pos (0UL) /*!< INT80 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT80_Msk (0xffUL) /*!< INT80 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT81_Pos (8UL) /*!< INT81 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT81_Msk (0xff00UL) /*!< INT81 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT82_Pos (16UL) /*!< INT82 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT82_Msk (0xff0000UL) /*!< INT82 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT83_Pos (24UL) /*!< INT83 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR20_INT83_Msk (0xff000000UL) /*!< INT83 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR21  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT84_Pos (0UL) /*!< INT84 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT84_Msk (0xffUL) /*!< INT84 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT85_Pos (8UL) /*!< INT85 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT85_Msk (0xff00UL) /*!< INT85 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT86_Pos (16UL) /*!< INT86 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT86_Msk (0xff0000UL) /*!< INT86 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT87_Pos (24UL) /*!< INT87 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR21_INT87_Msk (0xff000000UL) /*!< INT87 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR22  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT88_Pos (0UL) /*!< INT88 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT88_Msk (0xffUL) /*!< INT88 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT89_Pos (8UL) /*!< INT89 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT89_Msk (0xff00UL) /*!< INT89 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT90_Pos (16UL) /*!< INT90 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT90_Msk (0xff0000UL) /*!< INT90 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT91_Pos (24UL) /*!< INT91 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR22_INT91_Msk (0xff000000UL) /*!< INT91 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR23  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT92_Pos (0UL) /*!< INT92 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT92_Msk (0xffUL) /*!< INT92 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT93_Pos (8UL) /*!< INT93 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT93_Msk (0xff00UL) /*!< INT93 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT94_Pos (16UL) /*!< INT94 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT94_Msk (0xff0000UL) /*!< INT94 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT95_Pos (24UL) /*!< INT95 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR23_INT95_Msk (0xff000000UL) /*!< INT95 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR24  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_0_Msk (0xffUL) /*!< TIMER_0 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_1_Pos (8UL) /*!< TIMER_1 (Bit 8)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_1_Msk (0xff00UL) /*!< TIMER_1 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_2_Pos (16UL) /*!< TIMER_2 (Bit 16)                      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_2_Msk (0xff0000UL) /*!< TIMER_2 (Bitfield-Mask: 0xff)   */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_3_Pos (24UL) /*!< TIMER_3 (Bit 24)                      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR24_TIMER_3_Msk (0xff000000UL) /*!< TIMER_3 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR25  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_H264_0_Pos (0UL) /*!< H264_0 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_H264_0_Msk (0xffUL) /*!< H264_0 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_H264_1_Pos (8UL) /*!< H264_1 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_H264_1_Msk (0xff00UL) /*!< H264_1 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_H264_2_Pos (16UL) /*!< H264_2 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_H264_2_Msk (0xff0000UL) /*!< H264_2 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_JPEG_Pos (24UL) /*!< JPEG (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR25_JPEG_Msk (0xff000000UL) /*!< JPEG (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_IPRIORITYR26  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_ISP_Pos (0UL) /*!< ISP (Bit 0)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_ISP_Msk (0xffUL) /*!< ISP (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_USB_Pos (8UL) /*!< USB (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_USB_Msk (0xff00UL) /*!< USB (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_V3D_Pos (16UL) /*!< V3D (Bit 16)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_V3D_Msk (0xff0000UL) /*!< V3D (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_TRANSPOSER_Pos (24UL) /*!< TRANSPOSER (Bit 24)                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR26_TRANSPOSER_Msk (0xff000000UL) /*!< TRANSPOSER (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR27  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_0_Pos (0UL) /*!< MULTICORE_SYNC_0 (Bit 0)      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_0_Msk (0xffUL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_1_Pos (8UL) /*!< MULTICORE_SYNC_1 (Bit 8)      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_1_Msk (0xff00UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_2_Pos (16UL) /*!< MULTICORE_SYNC_2 (Bit 16)    */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_2_Msk (0xff0000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_3_Pos (24UL) /*!< MULTICORE_SYNC_3 (Bit 24)    */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR27_MULTICORE_SYNC_3_Msk (0xff000000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR28  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_0_Pos (0UL) /*!< DMA_0 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_0_Msk (0xffUL) /*!< DMA_0 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_1_Pos (8UL) /*!< DMA_1 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_1_Msk (0xff00UL) /*!< DMA_1 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_2_Pos (16UL) /*!< DMA_2 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_2_Msk (0xff0000UL) /*!< DMA_2 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_3_Pos (24UL) /*!< DMA_3 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR28_DMA_3_Msk (0xff000000UL) /*!< DMA_3 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_IPRIORITYR29  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_4_Pos (0UL) /*!< DMA_4 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_4_Msk (0xffUL) /*!< DMA_4 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_5_Pos (8UL) /*!< DMA_5 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_5_Msk (0xff00UL) /*!< DMA_5 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_6_Pos (16UL) /*!< DMA_6 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_6_Msk (0xff0000UL) /*!< DMA_6 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_7_8_Pos (24UL) /*!< DMA_7_8 (Bit 24)                      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR29_DMA_7_8_Msk (0xff000000UL) /*!< DMA_7_8 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR30  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_9_10_Pos (0UL) /*!< DMA_9_10 (Bit 0)                      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_9_10_Msk (0xffUL) /*!< DMA_9_10 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_11_Pos (8UL) /*!< DMA_11 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_11_Msk (0xff00UL) /*!< DMA_11 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_12_Pos (16UL) /*!< DMA_12 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_12_Msk (0xff0000UL) /*!< DMA_12 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_13_Pos (24UL) /*!< DMA_13 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR30_DMA_13_Msk (0xff000000UL) /*!< DMA_13 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR31  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_DMA_14_Pos (0UL) /*!< DMA_14 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_DMA_14_Msk (0xffUL) /*!< DMA_14 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_AUX_Pos (8UL) /*!< AUX (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_AUX_Msk (0xff00UL) /*!< AUX (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_ARM_Pos (16UL) /*!< ARM (Bit 16)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_ARM_Msk (0xff0000UL) /*!< ARM (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_DMA_15_Pos (24UL) /*!< DMA_15 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR31_DMA_15_Msk (0xff000000UL) /*!< DMA_15 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR32  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_HDMI_CEC_Msk (0xffUL) /*!< HDMI_CEC (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_HVS_Pos (8UL) /*!< HVS (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_HVS_Msk (0xff00UL) /*!< HVS (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_RPIVID_Pos (16UL) /*!< RPIVID (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_RPIVID_Msk (0xff0000UL) /*!< RPIVID (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_SDC_Pos (24UL) /*!< SDC (Bit 24)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR32_SDC_Msk (0xff000000UL) /*!< SDC (Bitfield-Mask: 0xff)         */
/* ===================================================  GICD_IPRIORITYR33  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_DSI_0_Pos (0UL) /*!< DSI_0 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_DSI_0_Msk (0xffUL) /*!< DSI_0 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_PIXEL_VALVE_2_Pos (8UL) /*!< PIXEL_VALVE_2 (Bit 8)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_PIXEL_VALVE_2_Msk (0xff00UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_CAMERA_0_Pos (16UL) /*!< CAMERA_0 (Bit 16)                    */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_CAMERA_0_Msk (0xff0000UL) /*!< CAMERA_0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_CAMERA_1_Pos (24UL) /*!< CAMERA_1 (Bit 24)                    */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR33_CAMERA_1_Msk (0xff000000UL) /*!< CAMERA_1 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR34  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_HDMI_0_Pos (0UL) /*!< HDMI_0 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_HDMI_0_Msk (0xffUL) /*!< HDMI_0 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_HDMI_1_Pos (8UL) /*!< HDMI_1 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_HDMI_1_Msk (0xff00UL) /*!< HDMI_1 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_PIXEL_VALVE_3_Pos (16UL) /*!< PIXEL_VALVE_3 (Bit 16)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_PIXEL_VALVE_3_Msk (0xff0000UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_SPI_BSC_SLAVE_Pos (24UL) /*!< SPI_BSC_SLAVE (Bit 24)          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR34_SPI_BSC_SLAVE_Msk (0xff000000UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR35  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_DSI_1_Pos (0UL) /*!< DSI_1 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_DSI_1_Msk (0xffUL) /*!< DSI_1 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_PIXEL_VALVE_0_Pos (8UL) /*!< PIXEL_VALVE_0 (Bit 8)            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_PIXEL_VALVE_0_Msk (0xff00UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_PIXEL_VALVE_1_2_Pos (16UL) /*!< PIXEL_VALVE_1_2 (Bit 16)      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_PIXEL_VALVE_1_2_Msk (0xff0000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_CPR_Pos (24UL) /*!< CPR (Bit 24)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR35_CPR_Msk (0xff000000UL) /*!< CPR (Bitfield-Mask: 0xff)         */
/* ===================================================  GICD_IPRIORITYR36  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_SMI_Pos (0UL) /*!< SMI (Bit 0)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_SMI_Msk (0xffUL) /*!< SMI (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_GPIO_0_Pos (8UL) /*!< GPIO_0 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_GPIO_0_Msk (0xff00UL) /*!< GPIO_0 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_GPIO_1_Pos (16UL) /*!< GPIO_1 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_GPIO_1_Msk (0xff0000UL) /*!< GPIO_1 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_GPIO_2_Pos (24UL) /*!< GPIO_2 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR36_GPIO_2_Msk (0xff000000UL) /*!< GPIO_2 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR37  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_GPIO_3_Pos (0UL) /*!< GPIO_3 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_GPIO_3_Msk (0xffUL) /*!< GPIO_3 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_I2C_Pos (8UL) /*!< I2C (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_I2C_Msk (0xff00UL) /*!< I2C (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_SPI_Pos (16UL) /*!< SPI (Bit 16)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_SPI_Msk (0xff0000UL) /*!< SPI (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_PCM_I2S_Pos (24UL) /*!< PCM_I2S (Bit 24)                      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR37_PCM_I2S_Msk (0xff000000UL) /*!< PCM_I2S (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR38  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_SDHOST_Pos (0UL) /*!< SDHOST (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_SDHOST_Msk (0xffUL) /*!< SDHOST (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_UART_Pos (8UL) /*!< UART (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_UART_Msk (0xff00UL) /*!< UART (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_ETH_PCIE_Pos (16UL) /*!< ETH_PCIE (Bit 16)                    */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_ETH_PCIE_Msk (0xff0000UL) /*!< ETH_PCIE (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_VEC_Pos (24UL) /*!< VEC (Bit 24)                              */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR38_VEC_Msk (0xff000000UL) /*!< VEC (Bitfield-Mask: 0xff)         */
/* ===================================================  GICD_IPRIORITYR39  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_CPG_Pos (0UL) /*!< CPG (Bit 0)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_CPG_Msk (0xffUL) /*!< CPG (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_RNG_Pos (8UL) /*!< RNG (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_RNG_Msk (0xff00UL) /*!< RNG (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_EMMC_Pos (16UL) /*!< EMMC (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_EMMC_Msk (0xff0000UL) /*!< EMMC (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_ETH_PCIE_SECURE_Pos (24UL) /*!< ETH_PCIE_SECURE (Bit 24)      */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR39_ETH_PCIE_SECURE_Msk (0xff000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_IPRIORITYR40  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT160_Pos (0UL) /*!< INT160 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT160_Msk (0xffUL) /*!< INT160 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT161_Pos (8UL) /*!< INT161 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT161_Msk (0xff00UL) /*!< INT161 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT162_Pos (16UL) /*!< INT162 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT162_Msk (0xff0000UL) /*!< INT162 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT163_Pos (24UL) /*!< INT163 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR40_INT163_Msk (0xff000000UL) /*!< INT163 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR41  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT164_Pos (0UL) /*!< INT164 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT164_Msk (0xffUL) /*!< INT164 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT165_Pos (8UL) /*!< INT165 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT165_Msk (0xff00UL) /*!< INT165 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT166_Pos (16UL) /*!< INT166 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT166_Msk (0xff0000UL) /*!< INT166 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT167_Pos (24UL) /*!< INT167 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR41_INT167_Msk (0xff000000UL) /*!< INT167 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR42  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT168_Pos (0UL) /*!< INT168 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT168_Msk (0xffUL) /*!< INT168 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT169_Pos (8UL) /*!< INT169 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT169_Msk (0xff00UL) /*!< INT169 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT170_Pos (16UL) /*!< INT170 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT170_Msk (0xff0000UL) /*!< INT170 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT171_Pos (24UL) /*!< INT171 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR42_INT171_Msk (0xff000000UL) /*!< INT171 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR43  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT172_Pos (0UL) /*!< INT172 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT172_Msk (0xffUL) /*!< INT172 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT173_Pos (8UL) /*!< INT173 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT173_Msk (0xff00UL) /*!< INT173 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT174_Pos (16UL) /*!< INT174 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT174_Msk (0xff0000UL) /*!< INT174 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT175_Pos (24UL) /*!< INT175 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR43_INT175_Msk (0xff000000UL) /*!< INT175 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR44  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT176_Pos (0UL) /*!< INT176 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT176_Msk (0xffUL) /*!< INT176 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT177_Pos (8UL) /*!< INT177 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT177_Msk (0xff00UL) /*!< INT177 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT178_Pos (16UL) /*!< INT178 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT178_Msk (0xff0000UL) /*!< INT178 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT179_Pos (24UL) /*!< INT179 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR44_INT179_Msk (0xff000000UL) /*!< INT179 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR45  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT180_Pos (0UL) /*!< INT180 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT180_Msk (0xffUL) /*!< INT180 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT181_Pos (8UL) /*!< INT181 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT181_Msk (0xff00UL) /*!< INT181 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT182_Pos (16UL) /*!< INT182 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT182_Msk (0xff0000UL) /*!< INT182 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT183_Pos (24UL) /*!< INT183 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR45_INT183_Msk (0xff000000UL) /*!< INT183 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR46  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT184_Pos (0UL) /*!< INT184 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT184_Msk (0xffUL) /*!< INT184 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT185_Pos (8UL) /*!< INT185 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT185_Msk (0xff00UL) /*!< INT185 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT186_Pos (16UL) /*!< INT186 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT186_Msk (0xff0000UL) /*!< INT186 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT187_Pos (24UL) /*!< INT187 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR46_INT187_Msk (0xff000000UL) /*!< INT187 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR47  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT188_Pos (0UL) /*!< INT188 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT188_Msk (0xffUL) /*!< INT188 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT189_Pos (8UL) /*!< INT189 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT189_Msk (0xff00UL) /*!< INT189 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT190_Pos (16UL) /*!< INT190 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT190_Msk (0xff0000UL) /*!< INT190 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT191_Pos (24UL) /*!< INT191 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR47_INT191_Msk (0xff000000UL) /*!< INT191 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR48  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT192_Pos (0UL) /*!< INT192 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT192_Msk (0xffUL) /*!< INT192 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT193_Pos (8UL) /*!< INT193 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT193_Msk (0xff00UL) /*!< INT193 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT194_Pos (16UL) /*!< INT194 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT194_Msk (0xff0000UL) /*!< INT194 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT195_Pos (24UL) /*!< INT195 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR48_INT195_Msk (0xff000000UL) /*!< INT195 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR49  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT196_Pos (0UL) /*!< INT196 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT196_Msk (0xffUL) /*!< INT196 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT197_Pos (8UL) /*!< INT197 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT197_Msk (0xff00UL) /*!< INT197 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT198_Pos (16UL) /*!< INT198 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT198_Msk (0xff0000UL) /*!< INT198 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT199_Pos (24UL) /*!< INT199 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR49_INT199_Msk (0xff000000UL) /*!< INT199 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR50  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT200_Pos (0UL) /*!< INT200 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT200_Msk (0xffUL) /*!< INT200 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT201_Pos (8UL) /*!< INT201 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT201_Msk (0xff00UL) /*!< INT201 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT202_Pos (16UL) /*!< INT202 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT202_Msk (0xff0000UL) /*!< INT202 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT203_Pos (24UL) /*!< INT203 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR50_INT203_Msk (0xff000000UL) /*!< INT203 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR51  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT204_Pos (0UL) /*!< INT204 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT204_Msk (0xffUL) /*!< INT204 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT205_Pos (8UL) /*!< INT205 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT205_Msk (0xff00UL) /*!< INT205 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT206_Pos (16UL) /*!< INT206 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT206_Msk (0xff0000UL) /*!< INT206 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT207_Pos (24UL) /*!< INT207 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR51_INT207_Msk (0xff000000UL) /*!< INT207 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR52  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT208_Pos (0UL) /*!< INT208 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT208_Msk (0xffUL) /*!< INT208 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT209_Pos (8UL) /*!< INT209 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT209_Msk (0xff00UL) /*!< INT209 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT210_Pos (16UL) /*!< INT210 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT210_Msk (0xff0000UL) /*!< INT210 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT211_Pos (24UL) /*!< INT211 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR52_INT211_Msk (0xff000000UL) /*!< INT211 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR53  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT212_Pos (0UL) /*!< INT212 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT212_Msk (0xffUL) /*!< INT212 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT213_Pos (8UL) /*!< INT213 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT213_Msk (0xff00UL) /*!< INT213 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT214_Pos (16UL) /*!< INT214 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT214_Msk (0xff0000UL) /*!< INT214 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT215_Pos (24UL) /*!< INT215 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR53_INT215_Msk (0xff000000UL) /*!< INT215 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR54  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT216_Pos (0UL) /*!< INT216 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT216_Msk (0xffUL) /*!< INT216 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT217_Pos (8UL) /*!< INT217 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT217_Msk (0xff00UL) /*!< INT217 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT218_Pos (16UL) /*!< INT218 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT218_Msk (0xff0000UL) /*!< INT218 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT219_Pos (24UL) /*!< INT219 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR54_INT219_Msk (0xff000000UL) /*!< INT219 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_IPRIORITYR55  =================================================== */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT220_Pos (0UL) /*!< INT220 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT220_Msk (0xffUL) /*!< INT220 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT221_Pos (8UL) /*!< INT221 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT221_Msk (0xff00UL) /*!< INT221 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT222_Pos (16UL) /*!< INT222 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT222_Msk (0xff0000UL) /*!< INT222 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT223_Pos (24UL) /*!< INT223 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_IPRIORITYR_GICD_IPRIORITYR55_INT223_Msk (0xff000000UL) /*!< INT223 (Bitfield-Mask: 0xff)   */


/* =========================================================================================================================== */
/* ================                                      GICD_ITARGETSR                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ITARGETSR0  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT0_Pos (0UL) /*!< INT0 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT0_Msk (0xffUL) /*!< INT0 (Bitfield-Mask: 0xff)                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT1_Pos (8UL) /*!< INT1 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT1_Msk (0xff00UL) /*!< INT1 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT2_Pos (16UL) /*!< INT2 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT2_Msk (0xff0000UL) /*!< INT2 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT3_Pos (24UL) /*!< INT3 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR0_INT3_Msk (0xff000000UL) /*!< INT3 (Bitfield-Mask: 0xff)          */
/* ====================================================  GICD_ITARGETSR1  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT4_Pos (0UL) /*!< INT4 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT4_Msk (0xffUL) /*!< INT4 (Bitfield-Mask: 0xff)                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT5_Pos (8UL) /*!< INT5 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT5_Msk (0xff00UL) /*!< INT5 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT6_Pos (16UL) /*!< INT6 (Bit 16)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT6_Msk (0xff0000UL) /*!< INT6 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT7_Pos (24UL) /*!< INT7 (Bit 24)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR1_INT7_Msk (0xff000000UL) /*!< INT7 (Bitfield-Mask: 0xff)          */
/* ====================================================  GICD_ITARGETSR2  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT8_Pos (0UL) /*!< INT8 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT8_Msk (0xffUL) /*!< INT8 (Bitfield-Mask: 0xff)                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT9_Pos (8UL) /*!< INT9 (Bit 8)                                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT9_Msk (0xff00UL) /*!< INT9 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT10_Pos (16UL) /*!< INT10 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT10_Msk (0xff0000UL) /*!< INT10 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT11_Pos (24UL) /*!< INT11 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR2_INT11_Msk (0xff000000UL) /*!< INT11 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR3  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT12_Pos (0UL) /*!< INT12 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT12_Msk (0xffUL) /*!< INT12 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT13_Pos (8UL) /*!< INT13 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT13_Msk (0xff00UL) /*!< INT13 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT14_Pos (16UL) /*!< INT14 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT14_Msk (0xff0000UL) /*!< INT14 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT15_Pos (24UL) /*!< INT15 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR3_INT15_Msk (0xff000000UL) /*!< INT15 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR4  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT16_Pos (0UL) /*!< INT16 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT16_Msk (0xffUL) /*!< INT16 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT17_Pos (8UL) /*!< INT17 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT17_Msk (0xff00UL) /*!< INT17 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT18_Pos (16UL) /*!< INT18 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT18_Msk (0xff0000UL) /*!< INT18 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT19_Pos (24UL) /*!< INT19 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR4_INT19_Msk (0xff000000UL) /*!< INT19 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR5  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT20_Pos (0UL) /*!< INT20 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT20_Msk (0xffUL) /*!< INT20 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT21_Pos (8UL) /*!< INT21 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT21_Msk (0xff00UL) /*!< INT21 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT22_Pos (16UL) /*!< INT22 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT22_Msk (0xff0000UL) /*!< INT22 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT23_Pos (24UL) /*!< INT23 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR5_INT23_Msk (0xff000000UL) /*!< INT23 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR6  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT24_Pos (0UL) /*!< INT24 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT24_Msk (0xffUL) /*!< INT24 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT25_Pos (8UL) /*!< INT25 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT25_Msk (0xff00UL) /*!< INT25 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT26_Pos (16UL) /*!< INT26 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT26_Msk (0xff0000UL) /*!< INT26 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT27_Pos (24UL) /*!< INT27 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR6_INT27_Msk (0xff000000UL) /*!< INT27 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR7  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT28_Pos (0UL) /*!< INT28 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT28_Msk (0xffUL) /*!< INT28 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT29_Pos (8UL) /*!< INT29 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT29_Msk (0xff00UL) /*!< INT29 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT30_Pos (16UL) /*!< INT30 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT30_Msk (0xff0000UL) /*!< INT30 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT31_Pos (24UL) /*!< INT31 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR7_INT31_Msk (0xff000000UL) /*!< INT31 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR8  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT32_Pos (0UL) /*!< INT32 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT32_Msk (0xffUL) /*!< INT32 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT33_Pos (8UL) /*!< INT33 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT33_Msk (0xff00UL) /*!< INT33 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT34_Pos (16UL) /*!< INT34 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT34_Msk (0xff0000UL) /*!< INT34 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT35_Pos (24UL) /*!< INT35 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR8_INT35_Msk (0xff000000UL) /*!< INT35 (Bitfield-Mask: 0xff)        */
/* ====================================================  GICD_ITARGETSR9  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT36_Pos (0UL) /*!< INT36 (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT36_Msk (0xffUL) /*!< INT36 (Bitfield-Mask: 0xff)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT37_Pos (8UL) /*!< INT37 (Bit 8)                               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT37_Msk (0xff00UL) /*!< INT37 (Bitfield-Mask: 0xff)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT38_Pos (16UL) /*!< INT38 (Bit 16)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT38_Msk (0xff0000UL) /*!< INT38 (Bitfield-Mask: 0xff)          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT39_Pos (24UL) /*!< INT39 (Bit 24)                             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR9_INT39_Msk (0xff000000UL) /*!< INT39 (Bitfield-Mask: 0xff)        */
/* ===================================================  GICD_ITARGETSR10  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT40_Pos (0UL) /*!< INT40 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT40_Msk (0xffUL) /*!< INT40 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT41_Pos (8UL) /*!< INT41 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT41_Msk (0xff00UL) /*!< INT41 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT42_Pos (16UL) /*!< INT42 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT42_Msk (0xff0000UL) /*!< INT42 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT43_Pos (24UL) /*!< INT43 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR10_INT43_Msk (0xff000000UL) /*!< INT43 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR11  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT44_Pos (0UL) /*!< INT44 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT44_Msk (0xffUL) /*!< INT44 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT45_Pos (8UL) /*!< INT45 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT45_Msk (0xff00UL) /*!< INT45 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT46_Pos (16UL) /*!< INT46 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT46_Msk (0xff0000UL) /*!< INT46 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT47_Pos (24UL) /*!< INT47 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR11_INT47_Msk (0xff000000UL) /*!< INT47 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR12  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT48_Pos (0UL) /*!< INT48 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT48_Msk (0xffUL) /*!< INT48 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT49_Pos (8UL) /*!< INT49 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT49_Msk (0xff00UL) /*!< INT49 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT50_Pos (16UL) /*!< INT50 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT50_Msk (0xff0000UL) /*!< INT50 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT51_Pos (24UL) /*!< INT51 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR12_INT51_Msk (0xff000000UL) /*!< INT51 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR13  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT52_Pos (0UL) /*!< INT52 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT52_Msk (0xffUL) /*!< INT52 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT53_Pos (8UL) /*!< INT53 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT53_Msk (0xff00UL) /*!< INT53 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT54_Pos (16UL) /*!< INT54 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT54_Msk (0xff0000UL) /*!< INT54 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT55_Pos (24UL) /*!< INT55 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR13_INT55_Msk (0xff000000UL) /*!< INT55 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR14  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT56_Pos (0UL) /*!< INT56 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT56_Msk (0xffUL) /*!< INT56 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT57_Pos (8UL) /*!< INT57 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT57_Msk (0xff00UL) /*!< INT57 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT58_Pos (16UL) /*!< INT58 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT58_Msk (0xff0000UL) /*!< INT58 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT59_Pos (24UL) /*!< INT59 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR14_INT59_Msk (0xff000000UL) /*!< INT59 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR15  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT60_Pos (0UL) /*!< INT60 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT60_Msk (0xffUL) /*!< INT60 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT61_Pos (8UL) /*!< INT61 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT61_Msk (0xff00UL) /*!< INT61 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT62_Pos (16UL) /*!< INT62 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT62_Msk (0xff0000UL) /*!< INT62 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT63_Pos (24UL) /*!< INT63 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR15_INT63_Msk (0xff000000UL) /*!< INT63 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR16  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_TIMER_Pos (0UL) /*!< TIMER (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_TIMER_Msk (0xffUL) /*!< TIMER (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_MAILBOX_Pos (8UL) /*!< MAILBOX (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_MAILBOX_Msk (0xff00UL) /*!< MAILBOX (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_DOORBELL0_Pos (16UL) /*!< DOORBELL0 (Bit 16)                    */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_DOORBELL0_Msk (0xff0000UL) /*!< DOORBELL0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_DOORBELL1_Pos (24UL) /*!< DOORBELL1 (Bit 24)                    */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR16_DOORBELL1_Msk (0xff000000UL) /*!< DOORBELL1 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR17  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_VPU0_HALTED_Pos (0UL) /*!< VPU0_HALTED (Bit 0)                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_VPU0_HALTED_Msk (0xffUL) /*!< VPU0_HALTED (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_VPU1_HALTED_Pos (8UL) /*!< VPU1_HALTED (Bit 8)                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_VPU1_HALTED_Msk (0xff00UL) /*!< VPU1_HALTED (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_ARM_ADDRESS_ERROR_Pos (16UL) /*!< ARM_ADDRESS_ERROR (Bit 16)    */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_ARM_ADDRESS_ERROR_Msk (0xff0000UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_ARM_AXI_ERROR_Pos (24UL) /*!< ARM_AXI_ERROR (Bit 24)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR17_ARM_AXI_ERROR_Msk (0xff000000UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR18  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI0_Pos (0UL) /*!< SWI0 (Bit 0)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI0_Msk (0xffUL) /*!< SWI0 (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI1_Pos (8UL) /*!< SWI1 (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI1_Msk (0xff00UL) /*!< SWI1 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI2_Pos (16UL) /*!< SWI2 (Bit 16)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI2_Msk (0xff0000UL) /*!< SWI2 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI3_Pos (24UL) /*!< SWI3 (Bit 24)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR18_SWI3_Msk (0xff000000UL) /*!< SWI3 (Bitfield-Mask: 0xff)         */
/* ===================================================  GICD_ITARGETSR19  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI4_Pos (0UL) /*!< SWI4 (Bit 0)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI4_Msk (0xffUL) /*!< SWI4 (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI5_Pos (8UL) /*!< SWI5 (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI5_Msk (0xff00UL) /*!< SWI5 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI6_Pos (16UL) /*!< SWI6 (Bit 16)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI6_Msk (0xff0000UL) /*!< SWI6 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI7_Pos (24UL) /*!< SWI7 (Bit 24)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR19_SWI7_Msk (0xff000000UL) /*!< SWI7 (Bitfield-Mask: 0xff)         */
/* ===================================================  GICD_ITARGETSR20  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT80_Pos (0UL) /*!< INT80 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT80_Msk (0xffUL) /*!< INT80 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT81_Pos (8UL) /*!< INT81 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT81_Msk (0xff00UL) /*!< INT81 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT82_Pos (16UL) /*!< INT82 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT82_Msk (0xff0000UL) /*!< INT82 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT83_Pos (24UL) /*!< INT83 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR20_INT83_Msk (0xff000000UL) /*!< INT83 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR21  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT84_Pos (0UL) /*!< INT84 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT84_Msk (0xffUL) /*!< INT84 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT85_Pos (8UL) /*!< INT85 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT85_Msk (0xff00UL) /*!< INT85 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT86_Pos (16UL) /*!< INT86 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT86_Msk (0xff0000UL) /*!< INT86 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT87_Pos (24UL) /*!< INT87 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR21_INT87_Msk (0xff000000UL) /*!< INT87 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR22  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT88_Pos (0UL) /*!< INT88 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT88_Msk (0xffUL) /*!< INT88 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT89_Pos (8UL) /*!< INT89 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT89_Msk (0xff00UL) /*!< INT89 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT90_Pos (16UL) /*!< INT90 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT90_Msk (0xff0000UL) /*!< INT90 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT91_Pos (24UL) /*!< INT91 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR22_INT91_Msk (0xff000000UL) /*!< INT91 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR23  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT92_Pos (0UL) /*!< INT92 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT92_Msk (0xffUL) /*!< INT92 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT93_Pos (8UL) /*!< INT93 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT93_Msk (0xff00UL) /*!< INT93 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT94_Pos (16UL) /*!< INT94 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT94_Msk (0xff0000UL) /*!< INT94 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT95_Pos (24UL) /*!< INT95 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR23_INT95_Msk (0xff000000UL) /*!< INT95 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR24  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_0_Pos (0UL) /*!< TIMER_0 (Bit 0)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_0_Msk (0xffUL) /*!< TIMER_0 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_1_Pos (8UL) /*!< TIMER_1 (Bit 8)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_1_Msk (0xff00UL) /*!< TIMER_1 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_2_Pos (16UL) /*!< TIMER_2 (Bit 16)                        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_2_Msk (0xff0000UL) /*!< TIMER_2 (Bitfield-Mask: 0xff)     */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_3_Pos (24UL) /*!< TIMER_3 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR24_TIMER_3_Msk (0xff000000UL) /*!< TIMER_3 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_ITARGETSR25  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_H264_0_Pos (0UL) /*!< H264_0 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_H264_0_Msk (0xffUL) /*!< H264_0 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_H264_1_Pos (8UL) /*!< H264_1 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_H264_1_Msk (0xff00UL) /*!< H264_1 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_H264_2_Pos (16UL) /*!< H264_2 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_H264_2_Msk (0xff0000UL) /*!< H264_2 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_JPEG_Pos (24UL) /*!< JPEG (Bit 24)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR25_JPEG_Msk (0xff000000UL) /*!< JPEG (Bitfield-Mask: 0xff)         */
/* ===================================================  GICD_ITARGETSR26  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_ISP_Pos (0UL) /*!< ISP (Bit 0)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_ISP_Msk (0xffUL) /*!< ISP (Bitfield-Mask: 0xff)                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_USB_Pos (8UL) /*!< USB (Bit 8)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_USB_Msk (0xff00UL) /*!< USB (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_V3D_Pos (16UL) /*!< V3D (Bit 16)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_V3D_Msk (0xff0000UL) /*!< V3D (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_TRANSPOSER_Pos (24UL) /*!< TRANSPOSER (Bit 24)                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR26_TRANSPOSER_Msk (0xff000000UL) /*!< TRANSPOSER (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR27  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_0_Pos (0UL) /*!< MULTICORE_SYNC_0 (Bit 0)        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_0_Msk (0xffUL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_1_Pos (8UL) /*!< MULTICORE_SYNC_1 (Bit 8)        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_1_Msk (0xff00UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_2_Pos (16UL) /*!< MULTICORE_SYNC_2 (Bit 16)      */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_2_Msk (0xff0000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_3_Pos (24UL) /*!< MULTICORE_SYNC_3 (Bit 24)      */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR27_MULTICORE_SYNC_3_Msk (0xff000000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR28  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_0_Pos (0UL) /*!< DMA_0 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_0_Msk (0xffUL) /*!< DMA_0 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_1_Pos (8UL) /*!< DMA_1 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_1_Msk (0xff00UL) /*!< DMA_1 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_2_Pos (16UL) /*!< DMA_2 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_2_Msk (0xff0000UL) /*!< DMA_2 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_3_Pos (24UL) /*!< DMA_3 (Bit 24)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR28_DMA_3_Msk (0xff000000UL) /*!< DMA_3 (Bitfield-Mask: 0xff)       */
/* ===================================================  GICD_ITARGETSR29  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_4_Pos (0UL) /*!< DMA_4 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_4_Msk (0xffUL) /*!< DMA_4 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_5_Pos (8UL) /*!< DMA_5 (Bit 8)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_5_Msk (0xff00UL) /*!< DMA_5 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_6_Pos (16UL) /*!< DMA_6 (Bit 16)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_6_Msk (0xff0000UL) /*!< DMA_6 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_7_8_Pos (24UL) /*!< DMA_7_8 (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR29_DMA_7_8_Msk (0xff000000UL) /*!< DMA_7_8 (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_ITARGETSR30  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_9_10_Pos (0UL) /*!< DMA_9_10 (Bit 0)                        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_9_10_Msk (0xffUL) /*!< DMA_9_10 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_11_Pos (8UL) /*!< DMA_11 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_11_Msk (0xff00UL) /*!< DMA_11 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_12_Pos (16UL) /*!< DMA_12 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_12_Msk (0xff0000UL) /*!< DMA_12 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_13_Pos (24UL) /*!< DMA_13 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR30_DMA_13_Msk (0xff000000UL) /*!< DMA_13 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR31  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_DMA_14_Pos (0UL) /*!< DMA_14 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_DMA_14_Msk (0xffUL) /*!< DMA_14 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_AUX_Pos (8UL) /*!< AUX (Bit 8)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_AUX_Msk (0xff00UL) /*!< AUX (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_ARM_Pos (16UL) /*!< ARM (Bit 16)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_ARM_Msk (0xff0000UL) /*!< ARM (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_DMA_15_Pos (24UL) /*!< DMA_15 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR31_DMA_15_Msk (0xff000000UL) /*!< DMA_15 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR32  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_HDMI_CEC_Pos (0UL) /*!< HDMI_CEC (Bit 0)                        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_HDMI_CEC_Msk (0xffUL) /*!< HDMI_CEC (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_HVS_Pos (8UL) /*!< HVS (Bit 8)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_HVS_Msk (0xff00UL) /*!< HVS (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_RPIVID_Pos (16UL) /*!< RPIVID (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_RPIVID_Msk (0xff0000UL) /*!< RPIVID (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_SDC_Pos (24UL) /*!< SDC (Bit 24)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR32_SDC_Msk (0xff000000UL) /*!< SDC (Bitfield-Mask: 0xff)           */
/* ===================================================  GICD_ITARGETSR33  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_DSI_0_Pos (0UL) /*!< DSI_0 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_DSI_0_Msk (0xffUL) /*!< DSI_0 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_PIXEL_VALVE_2_Pos (8UL) /*!< PIXEL_VALVE_2 (Bit 8)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_PIXEL_VALVE_2_Msk (0xff00UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_CAMERA_0_Pos (16UL) /*!< CAMERA_0 (Bit 16)                      */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_CAMERA_0_Msk (0xff0000UL) /*!< CAMERA_0 (Bitfield-Mask: 0xff)   */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_CAMERA_1_Pos (24UL) /*!< CAMERA_1 (Bit 24)                      */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR33_CAMERA_1_Msk (0xff000000UL) /*!< CAMERA_1 (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR34  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_HDMI_0_Pos (0UL) /*!< HDMI_0 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_HDMI_0_Msk (0xffUL) /*!< HDMI_0 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_HDMI_1_Pos (8UL) /*!< HDMI_1 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_HDMI_1_Msk (0xff00UL) /*!< HDMI_1 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_PIXEL_VALVE_3_Pos (16UL) /*!< PIXEL_VALVE_3 (Bit 16)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_PIXEL_VALVE_3_Msk (0xff0000UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_SPI_BSC_SLAVE_Pos (24UL) /*!< SPI_BSC_SLAVE (Bit 24)            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR34_SPI_BSC_SLAVE_Msk (0xff000000UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR35  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_DSI_1_Pos (0UL) /*!< DSI_1 (Bit 0)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_DSI_1_Msk (0xffUL) /*!< DSI_1 (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_PIXEL_VALVE_0_Pos (8UL) /*!< PIXEL_VALVE_0 (Bit 8)              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_PIXEL_VALVE_0_Msk (0xff00UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_PIXEL_VALVE_1_2_Pos (16UL) /*!< PIXEL_VALVE_1_2 (Bit 16)        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_PIXEL_VALVE_1_2_Msk (0xff0000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0xff) */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_CPR_Pos (24UL) /*!< CPR (Bit 24)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR35_CPR_Msk (0xff000000UL) /*!< CPR (Bitfield-Mask: 0xff)           */
/* ===================================================  GICD_ITARGETSR36  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_SMI_Pos (0UL) /*!< SMI (Bit 0)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_SMI_Msk (0xffUL) /*!< SMI (Bitfield-Mask: 0xff)                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_GPIO_0_Pos (8UL) /*!< GPIO_0 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_GPIO_0_Msk (0xff00UL) /*!< GPIO_0 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_GPIO_1_Pos (16UL) /*!< GPIO_1 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_GPIO_1_Msk (0xff0000UL) /*!< GPIO_1 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_GPIO_2_Pos (24UL) /*!< GPIO_2 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR36_GPIO_2_Msk (0xff000000UL) /*!< GPIO_2 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR37  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_GPIO_3_Pos (0UL) /*!< GPIO_3 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_GPIO_3_Msk (0xffUL) /*!< GPIO_3 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_I2C_Pos (8UL) /*!< I2C (Bit 8)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_I2C_Msk (0xff00UL) /*!< I2C (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_SPI_Pos (16UL) /*!< SPI (Bit 16)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_SPI_Msk (0xff0000UL) /*!< SPI (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_PCM_I2S_Pos (24UL) /*!< PCM_I2S (Bit 24)                        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR37_PCM_I2S_Msk (0xff000000UL) /*!< PCM_I2S (Bitfield-Mask: 0xff)   */
/* ===================================================  GICD_ITARGETSR38  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_SDHOST_Pos (0UL) /*!< SDHOST (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_SDHOST_Msk (0xffUL) /*!< SDHOST (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_UART_Pos (8UL) /*!< UART (Bit 8)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_UART_Msk (0xff00UL) /*!< UART (Bitfield-Mask: 0xff)             */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_ETH_PCIE_Pos (16UL) /*!< ETH_PCIE (Bit 16)                      */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_ETH_PCIE_Msk (0xff0000UL) /*!< ETH_PCIE (Bitfield-Mask: 0xff)   */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_VEC_Pos (24UL) /*!< VEC (Bit 24)                                */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR38_VEC_Msk (0xff000000UL) /*!< VEC (Bitfield-Mask: 0xff)           */
/* ===================================================  GICD_ITARGETSR39  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_CPG_Pos (0UL) /*!< CPG (Bit 0)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_CPG_Msk (0xffUL) /*!< CPG (Bitfield-Mask: 0xff)                 */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_RNG_Pos (8UL) /*!< RNG (Bit 8)                                  */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_RNG_Msk (0xff00UL) /*!< RNG (Bitfield-Mask: 0xff)               */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_EMMC_Pos (16UL) /*!< EMMC (Bit 16)                              */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_EMMC_Msk (0xff0000UL) /*!< EMMC (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_ETH_PCIE_SECURE_Pos (24UL) /*!< ETH_PCIE_SECURE (Bit 24)        */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR39_ETH_PCIE_SECURE_Msk (0xff000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0xff) */
/* ===================================================  GICD_ITARGETSR40  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT160_Pos (0UL) /*!< INT160 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT160_Msk (0xffUL) /*!< INT160 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT161_Pos (8UL) /*!< INT161 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT161_Msk (0xff00UL) /*!< INT161 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT162_Pos (16UL) /*!< INT162 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT162_Msk (0xff0000UL) /*!< INT162 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT163_Pos (24UL) /*!< INT163 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR40_INT163_Msk (0xff000000UL) /*!< INT163 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR41  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT164_Pos (0UL) /*!< INT164 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT164_Msk (0xffUL) /*!< INT164 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT165_Pos (8UL) /*!< INT165 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT165_Msk (0xff00UL) /*!< INT165 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT166_Pos (16UL) /*!< INT166 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT166_Msk (0xff0000UL) /*!< INT166 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT167_Pos (24UL) /*!< INT167 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR41_INT167_Msk (0xff000000UL) /*!< INT167 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR42  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT168_Pos (0UL) /*!< INT168 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT168_Msk (0xffUL) /*!< INT168 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT169_Pos (8UL) /*!< INT169 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT169_Msk (0xff00UL) /*!< INT169 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT170_Pos (16UL) /*!< INT170 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT170_Msk (0xff0000UL) /*!< INT170 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT171_Pos (24UL) /*!< INT171 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR42_INT171_Msk (0xff000000UL) /*!< INT171 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR43  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT172_Pos (0UL) /*!< INT172 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT172_Msk (0xffUL) /*!< INT172 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT173_Pos (8UL) /*!< INT173 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT173_Msk (0xff00UL) /*!< INT173 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT174_Pos (16UL) /*!< INT174 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT174_Msk (0xff0000UL) /*!< INT174 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT175_Pos (24UL) /*!< INT175 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR43_INT175_Msk (0xff000000UL) /*!< INT175 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR44  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT176_Pos (0UL) /*!< INT176 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT176_Msk (0xffUL) /*!< INT176 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT177_Pos (8UL) /*!< INT177 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT177_Msk (0xff00UL) /*!< INT177 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT178_Pos (16UL) /*!< INT178 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT178_Msk (0xff0000UL) /*!< INT178 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT179_Pos (24UL) /*!< INT179 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR44_INT179_Msk (0xff000000UL) /*!< INT179 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR45  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT180_Pos (0UL) /*!< INT180 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT180_Msk (0xffUL) /*!< INT180 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT181_Pos (8UL) /*!< INT181 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT181_Msk (0xff00UL) /*!< INT181 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT182_Pos (16UL) /*!< INT182 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT182_Msk (0xff0000UL) /*!< INT182 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT183_Pos (24UL) /*!< INT183 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR45_INT183_Msk (0xff000000UL) /*!< INT183 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR46  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT184_Pos (0UL) /*!< INT184 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT184_Msk (0xffUL) /*!< INT184 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT185_Pos (8UL) /*!< INT185 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT185_Msk (0xff00UL) /*!< INT185 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT186_Pos (16UL) /*!< INT186 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT186_Msk (0xff0000UL) /*!< INT186 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT187_Pos (24UL) /*!< INT187 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR46_INT187_Msk (0xff000000UL) /*!< INT187 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR47  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT188_Pos (0UL) /*!< INT188 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT188_Msk (0xffUL) /*!< INT188 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT189_Pos (8UL) /*!< INT189 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT189_Msk (0xff00UL) /*!< INT189 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT190_Pos (16UL) /*!< INT190 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT190_Msk (0xff0000UL) /*!< INT190 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT191_Pos (24UL) /*!< INT191 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR47_INT191_Msk (0xff000000UL) /*!< INT191 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR48  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT192_Pos (0UL) /*!< INT192 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT192_Msk (0xffUL) /*!< INT192 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT193_Pos (8UL) /*!< INT193 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT193_Msk (0xff00UL) /*!< INT193 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT194_Pos (16UL) /*!< INT194 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT194_Msk (0xff0000UL) /*!< INT194 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT195_Pos (24UL) /*!< INT195 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR48_INT195_Msk (0xff000000UL) /*!< INT195 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR49  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT196_Pos (0UL) /*!< INT196 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT196_Msk (0xffUL) /*!< INT196 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT197_Pos (8UL) /*!< INT197 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT197_Msk (0xff00UL) /*!< INT197 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT198_Pos (16UL) /*!< INT198 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT198_Msk (0xff0000UL) /*!< INT198 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT199_Pos (24UL) /*!< INT199 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR49_INT199_Msk (0xff000000UL) /*!< INT199 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR50  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT200_Pos (0UL) /*!< INT200 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT200_Msk (0xffUL) /*!< INT200 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT201_Pos (8UL) /*!< INT201 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT201_Msk (0xff00UL) /*!< INT201 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT202_Pos (16UL) /*!< INT202 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT202_Msk (0xff0000UL) /*!< INT202 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT203_Pos (24UL) /*!< INT203 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR50_INT203_Msk (0xff000000UL) /*!< INT203 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR51  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT204_Pos (0UL) /*!< INT204 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT204_Msk (0xffUL) /*!< INT204 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT205_Pos (8UL) /*!< INT205 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT205_Msk (0xff00UL) /*!< INT205 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT206_Pos (16UL) /*!< INT206 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT206_Msk (0xff0000UL) /*!< INT206 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT207_Pos (24UL) /*!< INT207 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR51_INT207_Msk (0xff000000UL) /*!< INT207 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR52  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT208_Pos (0UL) /*!< INT208 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT208_Msk (0xffUL) /*!< INT208 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT209_Pos (8UL) /*!< INT209 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT209_Msk (0xff00UL) /*!< INT209 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT210_Pos (16UL) /*!< INT210 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT210_Msk (0xff0000UL) /*!< INT210 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT211_Pos (24UL) /*!< INT211 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR52_INT211_Msk (0xff000000UL) /*!< INT211 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR53  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT212_Pos (0UL) /*!< INT212 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT212_Msk (0xffUL) /*!< INT212 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT213_Pos (8UL) /*!< INT213 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT213_Msk (0xff00UL) /*!< INT213 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT214_Pos (16UL) /*!< INT214 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT214_Msk (0xff0000UL) /*!< INT214 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT215_Pos (24UL) /*!< INT215 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR53_INT215_Msk (0xff000000UL) /*!< INT215 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR54  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT216_Pos (0UL) /*!< INT216 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT216_Msk (0xffUL) /*!< INT216 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT217_Pos (8UL) /*!< INT217 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT217_Msk (0xff00UL) /*!< INT217 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT218_Pos (16UL) /*!< INT218 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT218_Msk (0xff0000UL) /*!< INT218 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT219_Pos (24UL) /*!< INT219 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR54_INT219_Msk (0xff000000UL) /*!< INT219 (Bitfield-Mask: 0xff)     */
/* ===================================================  GICD_ITARGETSR55  ==================================================== */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT220_Pos (0UL) /*!< INT220 (Bit 0)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT220_Msk (0xffUL) /*!< INT220 (Bitfield-Mask: 0xff)           */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT221_Pos (8UL) /*!< INT221 (Bit 8)                            */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT221_Msk (0xff00UL) /*!< INT221 (Bitfield-Mask: 0xff)         */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT222_Pos (16UL) /*!< INT222 (Bit 16)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT222_Msk (0xff0000UL) /*!< INT222 (Bitfield-Mask: 0xff)       */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT223_Pos (24UL) /*!< INT223 (Bit 24)                          */
#define ARM_GIC400_Distributor_GICD_ITARGETSR_GICD_ITARGETSR55_INT223_Msk (0xff000000UL) /*!< INT223 (Bitfield-Mask: 0xff)     */


/* =========================================================================================================================== */
/* ================                                        GICD_ICFGR                                         ================ */
/* =========================================================================================================================== */

/* ======================================================  GICD_ICFGR0  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT0_Pos (1UL) /*!< INT0 (Bit 1)                                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT0_Msk (0x2UL) /*!< INT0 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT1_Pos (3UL) /*!< INT1 (Bit 3)                                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT1_Msk (0x8UL) /*!< INT1 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT2_Pos (5UL) /*!< INT2 (Bit 5)                                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT2_Msk (0x20UL) /*!< INT2 (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT3_Pos (7UL) /*!< INT3 (Bit 7)                                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT3_Msk (0x80UL) /*!< INT3 (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT4_Pos (9UL) /*!< INT4 (Bit 9)                                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT4_Msk (0x200UL) /*!< INT4 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT5_Pos (11UL) /*!< INT5 (Bit 11)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT5_Msk (0x800UL) /*!< INT5 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT6_Pos (13UL) /*!< INT6 (Bit 13)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT6_Msk (0x2000UL) /*!< INT6 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT7_Pos (15UL) /*!< INT7 (Bit 15)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT7_Msk (0x8000UL) /*!< INT7 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT8_Pos (17UL) /*!< INT8 (Bit 17)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT8_Msk (0x20000UL) /*!< INT8 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT9_Pos (19UL) /*!< INT9 (Bit 19)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT9_Msk (0x80000UL) /*!< INT9 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT10_Pos (21UL) /*!< INT10 (Bit 21)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT10_Msk (0x200000UL) /*!< INT10 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT11_Pos (23UL) /*!< INT11 (Bit 23)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT11_Msk (0x800000UL) /*!< INT11 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT12_Pos (25UL) /*!< INT12 (Bit 25)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT12_Msk (0x2000000UL) /*!< INT12 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT13_Pos (27UL) /*!< INT13 (Bit 27)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT13_Msk (0x8000000UL) /*!< INT13 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT14_Pos (29UL) /*!< INT14 (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT14_Msk (0x20000000UL) /*!< INT14 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT15_Pos (31UL) /*!< INT15 (Bit 31)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR0_INT15_Msk (0x80000000UL) /*!< INT15 (Bitfield-Mask: 0x01)                */
/* ======================================================  GICD_ICFGR4  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT16_Pos (1UL) /*!< INT16 (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT16_Msk (0x2UL) /*!< INT16 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT17_Pos (3UL) /*!< INT17 (Bit 3)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT17_Msk (0x8UL) /*!< INT17 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT18_Pos (5UL) /*!< INT18 (Bit 5)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT18_Msk (0x20UL) /*!< INT18 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT19_Pos (7UL) /*!< INT19 (Bit 7)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT19_Msk (0x80UL) /*!< INT19 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT20_Pos (9UL) /*!< INT20 (Bit 9)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT20_Msk (0x200UL) /*!< INT20 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT21_Pos (11UL) /*!< INT21 (Bit 11)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT21_Msk (0x800UL) /*!< INT21 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT22_Pos (13UL) /*!< INT22 (Bit 13)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT22_Msk (0x2000UL) /*!< INT22 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT23_Pos (15UL) /*!< INT23 (Bit 15)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT23_Msk (0x8000UL) /*!< INT23 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT24_Pos (17UL) /*!< INT24 (Bit 17)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT24_Msk (0x20000UL) /*!< INT24 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT25_Pos (19UL) /*!< INT25 (Bit 19)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT25_Msk (0x80000UL) /*!< INT25 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT26_Pos (21UL) /*!< INT26 (Bit 21)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT26_Msk (0x200000UL) /*!< INT26 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT27_Pos (23UL) /*!< INT27 (Bit 23)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT27_Msk (0x800000UL) /*!< INT27 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT28_Pos (25UL) /*!< INT28 (Bit 25)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT28_Msk (0x2000000UL) /*!< INT28 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT29_Pos (27UL) /*!< INT29 (Bit 27)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT29_Msk (0x8000000UL) /*!< INT29 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT30_Pos (29UL) /*!< INT30 (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT30_Msk (0x20000000UL) /*!< INT30 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT31_Pos (31UL) /*!< INT31 (Bit 31)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR4_INT31_Msk (0x80000000UL) /*!< INT31 (Bitfield-Mask: 0x01)                */
/* ======================================================  GICD_ICFGR8  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT32_Pos (1UL) /*!< INT32 (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT32_Msk (0x2UL) /*!< INT32 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT33_Pos (3UL) /*!< INT33 (Bit 3)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT33_Msk (0x8UL) /*!< INT33 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT34_Pos (5UL) /*!< INT34 (Bit 5)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT34_Msk (0x20UL) /*!< INT34 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT35_Pos (7UL) /*!< INT35 (Bit 7)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT35_Msk (0x80UL) /*!< INT35 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT36_Pos (9UL) /*!< INT36 (Bit 9)                                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT36_Msk (0x200UL) /*!< INT36 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT37_Pos (11UL) /*!< INT37 (Bit 11)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT37_Msk (0x800UL) /*!< INT37 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT38_Pos (13UL) /*!< INT38 (Bit 13)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT38_Msk (0x2000UL) /*!< INT38 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT39_Pos (15UL) /*!< INT39 (Bit 15)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT39_Msk (0x8000UL) /*!< INT39 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT40_Pos (17UL) /*!< INT40 (Bit 17)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT40_Msk (0x20000UL) /*!< INT40 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT41_Pos (19UL) /*!< INT41 (Bit 19)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT41_Msk (0x80000UL) /*!< INT41 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT42_Pos (21UL) /*!< INT42 (Bit 21)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT42_Msk (0x200000UL) /*!< INT42 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT43_Pos (23UL) /*!< INT43 (Bit 23)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT43_Msk (0x800000UL) /*!< INT43 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT44_Pos (25UL) /*!< INT44 (Bit 25)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT44_Msk (0x2000000UL) /*!< INT44 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT45_Pos (27UL) /*!< INT45 (Bit 27)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT45_Msk (0x8000000UL) /*!< INT45 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT46_Pos (29UL) /*!< INT46 (Bit 29)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT46_Msk (0x20000000UL) /*!< INT46 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT47_Pos (31UL) /*!< INT47 (Bit 31)                                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR8_INT47_Msk (0x80000000UL) /*!< INT47 (Bitfield-Mask: 0x01)                */
/* =====================================================  GICD_ICFGR12  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT48_Pos (1UL) /*!< INT48 (Bit 1)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT48_Msk (0x2UL) /*!< INT48 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT49_Pos (3UL) /*!< INT49 (Bit 3)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT49_Msk (0x8UL) /*!< INT49 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT50_Pos (5UL) /*!< INT50 (Bit 5)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT50_Msk (0x20UL) /*!< INT50 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT51_Pos (7UL) /*!< INT51 (Bit 7)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT51_Msk (0x80UL) /*!< INT51 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT52_Pos (9UL) /*!< INT52 (Bit 9)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT52_Msk (0x200UL) /*!< INT52 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT53_Pos (11UL) /*!< INT53 (Bit 11)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT53_Msk (0x800UL) /*!< INT53 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT54_Pos (13UL) /*!< INT54 (Bit 13)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT54_Msk (0x2000UL) /*!< INT54 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT55_Pos (15UL) /*!< INT55 (Bit 15)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT55_Msk (0x8000UL) /*!< INT55 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT56_Pos (17UL) /*!< INT56 (Bit 17)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT56_Msk (0x20000UL) /*!< INT56 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT57_Pos (19UL) /*!< INT57 (Bit 19)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT57_Msk (0x80000UL) /*!< INT57 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT58_Pos (21UL) /*!< INT58 (Bit 21)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT58_Msk (0x200000UL) /*!< INT58 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT59_Pos (23UL) /*!< INT59 (Bit 23)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT59_Msk (0x800000UL) /*!< INT59 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT60_Pos (25UL) /*!< INT60 (Bit 25)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT60_Msk (0x2000000UL) /*!< INT60 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT61_Pos (27UL) /*!< INT61 (Bit 27)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT61_Msk (0x8000000UL) /*!< INT61 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT62_Pos (29UL) /*!< INT62 (Bit 29)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT62_Msk (0x20000000UL) /*!< INT62 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT63_Pos (31UL) /*!< INT63 (Bit 31)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR12_INT63_Msk (0x80000000UL) /*!< INT63 (Bitfield-Mask: 0x01)               */
/* =====================================================  GICD_ICFGR16  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_TIMER_Pos (1UL) /*!< TIMER (Bit 1)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_TIMER_Msk (0x2UL) /*!< TIMER (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_MAILBOX_Pos (3UL) /*!< MAILBOX (Bit 3)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_MAILBOX_Msk (0x8UL) /*!< MAILBOX (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_DOORBELL0_Pos (5UL) /*!< DOORBELL0 (Bit 5)                              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_DOORBELL0_Msk (0x20UL) /*!< DOORBELL0 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_DOORBELL1_Pos (7UL) /*!< DOORBELL1 (Bit 7)                              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_DOORBELL1_Msk (0x80UL) /*!< DOORBELL1 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_VPU0_HALTED_Pos (9UL) /*!< VPU0_HALTED (Bit 9)                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_VPU0_HALTED_Msk (0x200UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_VPU1_HALTED_Pos (11UL) /*!< VPU1_HALTED (Bit 11)                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_VPU1_HALTED_Msk (0x800UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_ARM_ADDRESS_ERROR_Pos (13UL) /*!< ARM_ADDRESS_ERROR (Bit 13)            */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_ARM_ADDRESS_ERROR_Msk (0x2000UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_ARM_AXI_ERROR_Pos (15UL) /*!< ARM_AXI_ERROR (Bit 15)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_ARM_AXI_ERROR_Msk (0x8000UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI0_Pos (17UL) /*!< SWI0 (Bit 17)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI0_Msk (0x20000UL) /*!< SWI0 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI1_Pos (19UL) /*!< SWI1 (Bit 19)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI1_Msk (0x80000UL) /*!< SWI1 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI2_Pos (21UL) /*!< SWI2 (Bit 21)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI2_Msk (0x200000UL) /*!< SWI2 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI3_Pos (23UL) /*!< SWI3 (Bit 23)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI3_Msk (0x800000UL) /*!< SWI3 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI4_Pos (25UL) /*!< SWI4 (Bit 25)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI4_Msk (0x2000000UL) /*!< SWI4 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI5_Pos (27UL) /*!< SWI5 (Bit 27)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI5_Msk (0x8000000UL) /*!< SWI5 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI6_Pos (29UL) /*!< SWI6 (Bit 29)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI6_Msk (0x20000000UL) /*!< SWI6 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI7_Pos (31UL) /*!< SWI7 (Bit 31)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR16_SWI7_Msk (0x80000000UL) /*!< SWI7 (Bitfield-Mask: 0x01)                 */
/* =====================================================  GICD_ICFGR20  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT80_Pos (1UL) /*!< INT80 (Bit 1)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT80_Msk (0x2UL) /*!< INT80 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT81_Pos (3UL) /*!< INT81 (Bit 3)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT81_Msk (0x8UL) /*!< INT81 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT82_Pos (5UL) /*!< INT82 (Bit 5)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT82_Msk (0x20UL) /*!< INT82 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT83_Pos (7UL) /*!< INT83 (Bit 7)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT83_Msk (0x80UL) /*!< INT83 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT84_Pos (9UL) /*!< INT84 (Bit 9)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT84_Msk (0x200UL) /*!< INT84 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT85_Pos (11UL) /*!< INT85 (Bit 11)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT85_Msk (0x800UL) /*!< INT85 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT86_Pos (13UL) /*!< INT86 (Bit 13)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT86_Msk (0x2000UL) /*!< INT86 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT87_Pos (15UL) /*!< INT87 (Bit 15)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT87_Msk (0x8000UL) /*!< INT87 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT88_Pos (17UL) /*!< INT88 (Bit 17)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT88_Msk (0x20000UL) /*!< INT88 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT89_Pos (19UL) /*!< INT89 (Bit 19)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT89_Msk (0x80000UL) /*!< INT89 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT90_Pos (21UL) /*!< INT90 (Bit 21)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT90_Msk (0x200000UL) /*!< INT90 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT91_Pos (23UL) /*!< INT91 (Bit 23)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT91_Msk (0x800000UL) /*!< INT91 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT92_Pos (25UL) /*!< INT92 (Bit 25)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT92_Msk (0x2000000UL) /*!< INT92 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT93_Pos (27UL) /*!< INT93 (Bit 27)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT93_Msk (0x8000000UL) /*!< INT93 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT94_Pos (29UL) /*!< INT94 (Bit 29)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT94_Msk (0x20000000UL) /*!< INT94 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT95_Pos (31UL) /*!< INT95 (Bit 31)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR20_INT95_Msk (0x80000000UL) /*!< INT95 (Bitfield-Mask: 0x01)               */
/* =====================================================  GICD_ICFGR24  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_0_Pos (1UL) /*!< TIMER_0 (Bit 1)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_0_Msk (0x2UL) /*!< TIMER_0 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_1_Pos (3UL) /*!< TIMER_1 (Bit 3)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_1_Msk (0x8UL) /*!< TIMER_1 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_2_Pos (5UL) /*!< TIMER_2 (Bit 5)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_2_Msk (0x20UL) /*!< TIMER_2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_3_Pos (7UL) /*!< TIMER_3 (Bit 7)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TIMER_3_Msk (0x80UL) /*!< TIMER_3 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_H264_0_Pos (9UL) /*!< H264_0 (Bit 9)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_H264_0_Msk (0x200UL) /*!< H264_0 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_H264_1_Pos (11UL) /*!< H264_1 (Bit 11)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_H264_1_Msk (0x800UL) /*!< H264_1 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_H264_2_Pos (13UL) /*!< H264_2 (Bit 13)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_H264_2_Msk (0x2000UL) /*!< H264_2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_JPEG_Pos (15UL) /*!< JPEG (Bit 15)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_JPEG_Msk (0x8000UL) /*!< JPEG (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_ISP_Pos (17UL) /*!< ISP (Bit 17)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_ISP_Msk (0x20000UL) /*!< ISP (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_USB_Pos (19UL) /*!< USB (Bit 19)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_USB_Msk (0x80000UL) /*!< USB (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_V3D_Pos (21UL) /*!< V3D (Bit 21)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_V3D_Msk (0x200000UL) /*!< V3D (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TRANSPOSER_Pos (23UL) /*!< TRANSPOSER (Bit 23)                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_TRANSPOSER_Msk (0x800000UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_0_Pos (25UL) /*!< MULTICORE_SYNC_0 (Bit 25)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_0_Msk (0x2000000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_1_Pos (27UL) /*!< MULTICORE_SYNC_1 (Bit 27)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_1_Msk (0x8000000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_2_Pos (29UL) /*!< MULTICORE_SYNC_2 (Bit 29)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_2_Msk (0x20000000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_3_Pos (31UL) /*!< MULTICORE_SYNC_3 (Bit 31)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_3_Msk (0x80000000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01) */
/* =====================================================  GICD_ICFGR28  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_0_Pos (1UL) /*!< DMA_0 (Bit 1)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_0_Msk (0x2UL) /*!< DMA_0 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_1_Pos (3UL) /*!< DMA_1 (Bit 3)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_1_Msk (0x8UL) /*!< DMA_1 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_2_Pos (5UL) /*!< DMA_2 (Bit 5)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_2_Msk (0x20UL) /*!< DMA_2 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_3_Pos (7UL) /*!< DMA_3 (Bit 7)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_3_Msk (0x80UL) /*!< DMA_3 (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_4_Pos (9UL) /*!< DMA_4 (Bit 9)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_4_Msk (0x200UL) /*!< DMA_4 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_5_Pos (11UL) /*!< DMA_5 (Bit 11)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_5_Msk (0x800UL) /*!< DMA_5 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_6_Pos (13UL) /*!< DMA_6 (Bit 13)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_6_Msk (0x2000UL) /*!< DMA_6 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_7_8_Pos (15UL) /*!< DMA_7_8 (Bit 15)                                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_7_8_Msk (0x8000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_9_10_Pos (17UL) /*!< DMA_9_10 (Bit 17)                              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_9_10_Msk (0x20000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)            */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_11_Pos (19UL) /*!< DMA_11 (Bit 19)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_11_Msk (0x80000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_12_Pos (21UL) /*!< DMA_12 (Bit 21)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_12_Msk (0x200000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_13_Pos (23UL) /*!< DMA_13 (Bit 23)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_13_Msk (0x800000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_14_Pos (25UL) /*!< DMA_14 (Bit 25)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_14_Msk (0x2000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_AUX_Pos (27UL) /*!< AUX (Bit 27)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_AUX_Msk (0x8000000UL) /*!< AUX (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_ARM_Pos (29UL) /*!< ARM (Bit 29)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_ARM_Msk (0x20000000UL) /*!< ARM (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_15_Pos (31UL) /*!< DMA_15 (Bit 31)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR28_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)             */
/* =====================================================  GICD_ICFGR32  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HDMI_CEC_Pos (1UL) /*!< HDMI_CEC (Bit 1)                                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HDMI_CEC_Msk (0x2UL) /*!< HDMI_CEC (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HVS_Pos (3UL) /*!< HVS (Bit 3)                                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HVS_Msk (0x8UL) /*!< HVS (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_RPIVID_Pos (5UL) /*!< RPIVID (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_RPIVID_Msk (0x20UL) /*!< RPIVID (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_SDC_Pos (7UL) /*!< SDC (Bit 7)                                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_SDC_Msk (0x80UL) /*!< SDC (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_DSI_0_Pos (9UL) /*!< DSI_0 (Bit 9)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_DSI_0_Msk (0x200UL) /*!< DSI_0 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_2_Pos (11UL) /*!< PIXEL_VALVE_2 (Bit 11)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_2_Msk (0x800UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_CAMERA_0_Pos (13UL) /*!< CAMERA_0 (Bit 13)                              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_CAMERA_0_Msk (0x2000UL) /*!< CAMERA_0 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_CAMERA_1_Pos (15UL) /*!< CAMERA_1 (Bit 15)                              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_CAMERA_1_Msk (0x8000UL) /*!< CAMERA_1 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HDMI_0_Pos (17UL) /*!< HDMI_0 (Bit 17)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HDMI_0_Msk (0x20000UL) /*!< HDMI_0 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HDMI_1_Pos (19UL) /*!< HDMI_1 (Bit 19)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_HDMI_1_Msk (0x80000UL) /*!< HDMI_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_3_Pos (21UL) /*!< PIXEL_VALVE_3 (Bit 21)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_3_Msk (0x200000UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_SPI_BSC_SLAVE_Pos (23UL) /*!< SPI_BSC_SLAVE (Bit 23)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_SPI_BSC_SLAVE_Msk (0x800000UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_DSI_1_Pos (25UL) /*!< DSI_1 (Bit 25)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_DSI_1_Msk (0x2000000UL) /*!< DSI_1 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_0_Pos (27UL) /*!< PIXEL_VALVE_0 (Bit 27)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_0_Msk (0x8000000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_1_2_Pos (29UL) /*!< PIXEL_VALVE_1_2 (Bit 29)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_1_2_Msk (0x20000000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01) */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_CPR_Pos (31UL) /*!< CPR (Bit 31)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR32_CPR_Msk (0x80000000UL) /*!< CPR (Bitfield-Mask: 0x01)                   */
/* =====================================================  GICD_ICFGR36  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_SMI_Pos (1UL) /*!< SMI (Bit 1)                                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_SMI_Msk (0x2UL) /*!< SMI (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_0_Pos (3UL) /*!< GPIO_0 (Bit 3)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_0_Msk (0x8UL) /*!< GPIO_0 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_1_Pos (5UL) /*!< GPIO_1 (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_1_Msk (0x20UL) /*!< GPIO_1 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_2_Pos (7UL) /*!< GPIO_2 (Bit 7)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_2_Msk (0x80UL) /*!< GPIO_2 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_3_Pos (9UL) /*!< GPIO_3 (Bit 9)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_GPIO_3_Msk (0x200UL) /*!< GPIO_3 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_I2C_Pos (11UL) /*!< I2C (Bit 11)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_I2C_Msk (0x800UL) /*!< I2C (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_SPI_Pos (13UL) /*!< SPI (Bit 13)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_SPI_Msk (0x2000UL) /*!< SPI (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_PCM_I2S_Pos (15UL) /*!< PCM_I2S (Bit 15)                                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_PCM_I2S_Msk (0x8000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_SDHOST_Pos (17UL) /*!< SDHOST (Bit 17)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_SDHOST_Msk (0x20000UL) /*!< SDHOST (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_UART_Pos (19UL) /*!< UART (Bit 19)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_UART_Msk (0x80000UL) /*!< UART (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_Pos (21UL) /*!< ETH_PCIE (Bit 21)                              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_Msk (0x200000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_VEC_Pos (23UL) /*!< VEC (Bit 23)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_VEC_Msk (0x800000UL) /*!< VEC (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_CPG_Pos (25UL) /*!< CPG (Bit 25)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_CPG_Msk (0x2000000UL) /*!< CPG (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_RNG_Pos (27UL) /*!< RNG (Bit 27)                                        */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_RNG_Msk (0x8000000UL) /*!< RNG (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_EMMC_Pos (29UL) /*!< EMMC (Bit 29)                                      */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_EMMC_Msk (0x20000000UL) /*!< EMMC (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01) */
/* =====================================================  GICD_ICFGR40  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT160_Pos (1UL) /*!< INT160 (Bit 1)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT160_Msk (0x2UL) /*!< INT160 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT161_Pos (3UL) /*!< INT161 (Bit 3)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT161_Msk (0x8UL) /*!< INT161 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT162_Pos (5UL) /*!< INT162 (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT162_Msk (0x20UL) /*!< INT162 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT163_Pos (7UL) /*!< INT163 (Bit 7)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT163_Msk (0x80UL) /*!< INT163 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT164_Pos (9UL) /*!< INT164 (Bit 9)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT164_Msk (0x200UL) /*!< INT164 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT165_Pos (11UL) /*!< INT165 (Bit 11)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT165_Msk (0x800UL) /*!< INT165 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT166_Pos (13UL) /*!< INT166 (Bit 13)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT166_Msk (0x2000UL) /*!< INT166 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT167_Pos (15UL) /*!< INT167 (Bit 15)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT167_Msk (0x8000UL) /*!< INT167 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT168_Pos (17UL) /*!< INT168 (Bit 17)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT168_Msk (0x20000UL) /*!< INT168 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT169_Pos (19UL) /*!< INT169 (Bit 19)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT169_Msk (0x80000UL) /*!< INT169 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT170_Pos (21UL) /*!< INT170 (Bit 21)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT170_Msk (0x200000UL) /*!< INT170 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT171_Pos (23UL) /*!< INT171 (Bit 23)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT171_Msk (0x800000UL) /*!< INT171 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT172_Pos (25UL) /*!< INT172 (Bit 25)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT172_Msk (0x2000000UL) /*!< INT172 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT173_Pos (27UL) /*!< INT173 (Bit 27)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT173_Msk (0x8000000UL) /*!< INT173 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT174_Pos (29UL) /*!< INT174 (Bit 29)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT174_Msk (0x20000000UL) /*!< INT174 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT175_Pos (31UL) /*!< INT175 (Bit 31)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR40_INT175_Msk (0x80000000UL) /*!< INT175 (Bitfield-Mask: 0x01)             */
/* =====================================================  GICD_ICFGR44  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT176_Pos (1UL) /*!< INT176 (Bit 1)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT176_Msk (0x2UL) /*!< INT176 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT177_Pos (3UL) /*!< INT177 (Bit 3)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT177_Msk (0x8UL) /*!< INT177 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT178_Pos (5UL) /*!< INT178 (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT178_Msk (0x20UL) /*!< INT178 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT179_Pos (7UL) /*!< INT179 (Bit 7)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT179_Msk (0x80UL) /*!< INT179 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT180_Pos (9UL) /*!< INT180 (Bit 9)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT180_Msk (0x200UL) /*!< INT180 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT181_Pos (11UL) /*!< INT181 (Bit 11)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT181_Msk (0x800UL) /*!< INT181 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT182_Pos (13UL) /*!< INT182 (Bit 13)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT182_Msk (0x2000UL) /*!< INT182 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT183_Pos (15UL) /*!< INT183 (Bit 15)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT183_Msk (0x8000UL) /*!< INT183 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT184_Pos (17UL) /*!< INT184 (Bit 17)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT184_Msk (0x20000UL) /*!< INT184 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT185_Pos (19UL) /*!< INT185 (Bit 19)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT185_Msk (0x80000UL) /*!< INT185 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT186_Pos (21UL) /*!< INT186 (Bit 21)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT186_Msk (0x200000UL) /*!< INT186 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT187_Pos (23UL) /*!< INT187 (Bit 23)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT187_Msk (0x800000UL) /*!< INT187 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT188_Pos (25UL) /*!< INT188 (Bit 25)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT188_Msk (0x2000000UL) /*!< INT188 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT189_Pos (27UL) /*!< INT189 (Bit 27)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT189_Msk (0x8000000UL) /*!< INT189 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT190_Pos (29UL) /*!< INT190 (Bit 29)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT190_Msk (0x20000000UL) /*!< INT190 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT191_Pos (31UL) /*!< INT191 (Bit 31)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR44_INT191_Msk (0x80000000UL) /*!< INT191 (Bitfield-Mask: 0x01)             */
/* =====================================================  GICD_ICFGR48  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT192_Pos (1UL) /*!< INT192 (Bit 1)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT192_Msk (0x2UL) /*!< INT192 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT193_Pos (3UL) /*!< INT193 (Bit 3)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT193_Msk (0x8UL) /*!< INT193 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT194_Pos (5UL) /*!< INT194 (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT194_Msk (0x20UL) /*!< INT194 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT195_Pos (7UL) /*!< INT195 (Bit 7)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT195_Msk (0x80UL) /*!< INT195 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT196_Pos (9UL) /*!< INT196 (Bit 9)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT196_Msk (0x200UL) /*!< INT196 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT197_Pos (11UL) /*!< INT197 (Bit 11)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT197_Msk (0x800UL) /*!< INT197 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT198_Pos (13UL) /*!< INT198 (Bit 13)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT198_Msk (0x2000UL) /*!< INT198 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT199_Pos (15UL) /*!< INT199 (Bit 15)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT199_Msk (0x8000UL) /*!< INT199 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT200_Pos (17UL) /*!< INT200 (Bit 17)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT200_Msk (0x20000UL) /*!< INT200 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT201_Pos (19UL) /*!< INT201 (Bit 19)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT201_Msk (0x80000UL) /*!< INT201 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT202_Pos (21UL) /*!< INT202 (Bit 21)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT202_Msk (0x200000UL) /*!< INT202 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT203_Pos (23UL) /*!< INT203 (Bit 23)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT203_Msk (0x800000UL) /*!< INT203 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT204_Pos (25UL) /*!< INT204 (Bit 25)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT204_Msk (0x2000000UL) /*!< INT204 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT205_Pos (27UL) /*!< INT205 (Bit 27)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT205_Msk (0x8000000UL) /*!< INT205 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT206_Pos (29UL) /*!< INT206 (Bit 29)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT206_Msk (0x20000000UL) /*!< INT206 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT207_Pos (31UL) /*!< INT207 (Bit 31)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR48_INT207_Msk (0x80000000UL) /*!< INT207 (Bitfield-Mask: 0x01)             */
/* =====================================================  GICD_ICFGR52  ====================================================== */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT208_Pos (1UL) /*!< INT208 (Bit 1)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT208_Msk (0x2UL) /*!< INT208 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT209_Pos (3UL) /*!< INT209 (Bit 3)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT209_Msk (0x8UL) /*!< INT209 (Bitfield-Mask: 0x01)                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT210_Pos (5UL) /*!< INT210 (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT210_Msk (0x20UL) /*!< INT210 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT211_Pos (7UL) /*!< INT211 (Bit 7)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT211_Msk (0x80UL) /*!< INT211 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT212_Pos (9UL) /*!< INT212 (Bit 9)                                    */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT212_Msk (0x200UL) /*!< INT212 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT213_Pos (11UL) /*!< INT213 (Bit 11)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT213_Msk (0x800UL) /*!< INT213 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT214_Pos (13UL) /*!< INT214 (Bit 13)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT214_Msk (0x2000UL) /*!< INT214 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT215_Pos (15UL) /*!< INT215 (Bit 15)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT215_Msk (0x8000UL) /*!< INT215 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT216_Pos (17UL) /*!< INT216 (Bit 17)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT216_Msk (0x20000UL) /*!< INT216 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT217_Pos (19UL) /*!< INT217 (Bit 19)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT217_Msk (0x80000UL) /*!< INT217 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT218_Pos (21UL) /*!< INT218 (Bit 21)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT218_Msk (0x200000UL) /*!< INT218 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT219_Pos (23UL) /*!< INT219 (Bit 23)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT219_Msk (0x800000UL) /*!< INT219 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT220_Pos (25UL) /*!< INT220 (Bit 25)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT220_Msk (0x2000000UL) /*!< INT220 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT221_Pos (27UL) /*!< INT221 (Bit 27)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT221_Msk (0x8000000UL) /*!< INT221 (Bitfield-Mask: 0x01)              */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT222_Pos (29UL) /*!< INT222 (Bit 29)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT222_Msk (0x20000000UL) /*!< INT222 (Bitfield-Mask: 0x01)             */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT223_Pos (31UL) /*!< INT223 (Bit 31)                                  */
#define ARM_GIC400_Distributor_GICD_ICFGR_GICD_ICFGR52_INT223_Msk (0x80000000UL) /*!< INT223 (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                       HOST_CHANNEL                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  HCCHAR  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MPSIZ_Pos (0UL)            /*!< MPSIZ (Bit 0)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MPSIZ_Msk (0x7ffUL)        /*!< MPSIZ (Bitfield-Mask: 0x7ff)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPNUM_Pos (11UL)           /*!< EPNUM (Bit 11)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPNUM_Msk (0x7800UL)       /*!< EPNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPDIR_Pos (15UL)           /*!< EPDIR (Bit 15)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPDIR_Msk (0x8000UL)       /*!< EPDIR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_LSDEV_Pos (17UL)           /*!< LSDEV (Bit 17)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_LSDEV_Msk (0x20000UL)      /*!< LSDEV (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPTYP_Pos (18UL)           /*!< EPTYP (Bit 18)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPTYP_Msk (0xc0000UL)      /*!< EPTYP (Bitfield-Mask: 0x03)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MC_Pos (20UL)              /*!< MC (Bit 20)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MC_Msk (0x300000UL)        /*!< MC (Bitfield-Mask: 0x03)                              */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_DAD_Pos (22UL)             /*!< DAD (Bit 22)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_DAD_Msk (0x1fc00000UL)     /*!< DAD (Bitfield-Mask: 0x7f)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_ODDFRM_Pos (29UL)          /*!< ODDFRM (Bit 29)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_ODDFRM_Msk (0x20000000UL)  /*!< ODDFRM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHDIS_Pos (30UL)           /*!< CHDIS (Bit 30)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHDIS_Msk (0x40000000UL)   /*!< CHDIS (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHENA_Pos (31UL)           /*!< CHENA (Bit 31)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHENA_Msk (0x80000000UL)   /*!< CHENA (Bitfield-Mask: 0x01)                           */
/* ========================================================  HCSPLT  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_PRTADDR_Pos (0UL)          /*!< PRTADDR (Bit 0)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_PRTADDR_Msk (0x7fUL)       /*!< PRTADDR (Bitfield-Mask: 0x7f)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_HUBADDR_Pos (7UL)          /*!< HUBADDR (Bit 7)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_HUBADDR_Msk (0x3f80UL)     /*!< HUBADDR (Bitfield-Mask: 0x7f)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_XACTPOS_Pos (14UL)         /*!< XACTPOS (Bit 14)                                      */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_XACTPOS_Msk (0xc000UL)     /*!< XACTPOS (Bitfield-Mask: 0x03)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_COMPLSPLT_Pos (16UL)       /*!< COMPLSPLT (Bit 16)                                    */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_COMPLSPLT_Msk (0x10000UL)  /*!< COMPLSPLT (Bitfield-Mask: 0x01)                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_SPLITEN_Pos (31UL)         /*!< SPLITEN (Bit 31)                                      */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_SPLITEN_Msk (0x80000000UL) /*!< SPLITEN (Bitfield-Mask: 0x01)                         */
/* =========================================================  HCINT  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_XFRC_Pos (0UL)              /*!< XFRC (Bit 0)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_XFRC_Msk (0x1UL)            /*!< XFRC (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_CHH_Pos (1UL)               /*!< CHH (Bit 1)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_CHH_Msk (0x2UL)             /*!< CHH (Bitfield-Mask: 0x01)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_AHBERR_Pos (2UL)            /*!< AHBERR (Bit 2)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_AHBERR_Msk (0x4UL)          /*!< AHBERR (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_STALL_Pos (3UL)             /*!< STALL (Bit 3)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_STALL_Msk (0x8UL)           /*!< STALL (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NAK_Pos (4UL)               /*!< NAK (Bit 4)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NAK_Msk (0x10UL)            /*!< NAK (Bitfield-Mask: 0x01)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_ACK_Pos (5UL)               /*!< ACK (Bit 5)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_ACK_Msk (0x20UL)            /*!< ACK (Bitfield-Mask: 0x01)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NYET_Pos (6UL)              /*!< NYET (Bit 6)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NYET_Msk (0x40UL)           /*!< NYET (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_TXERR_Pos (7UL)             /*!< TXERR (Bit 7)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_TXERR_Msk (0x80UL)          /*!< TXERR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_BBERR_Pos (8UL)             /*!< BBERR (Bit 8)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_BBERR_Msk (0x100UL)         /*!< BBERR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_FRMOR_Pos (9UL)             /*!< FRMOR (Bit 9)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_FRMOR_Msk (0x200UL)         /*!< FRMOR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_DTERR_Pos (10UL)            /*!< DTERR (Bit 10)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_DTERR_Msk (0x400UL)         /*!< DTERR (Bitfield-Mask: 0x01)                           */
/* =======================================================  HCINTMSK  ======================================================== */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_XFRCM_Pos (0UL)          /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_XFRCM_Msk (0x1UL)        /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_CHHM_Pos (1UL)           /*!< CHHM (Bit 1)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_CHHM_Msk (0x2UL)         /*!< CHHM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_AHBERR_Pos (2UL)         /*!< AHBERR (Bit 2)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_AHBERR_Msk (0x4UL)       /*!< AHBERR (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_STALLM_Pos (3UL)         /*!< STALLM (Bit 3)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_STALLM_Msk (0x8UL)       /*!< STALLM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NAKM_Pos (4UL)           /*!< NAKM (Bit 4)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NAKM_Msk (0x10UL)        /*!< NAKM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_ACKM_Pos (5UL)           /*!< ACKM (Bit 5)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_ACKM_Msk (0x20UL)        /*!< ACKM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NYET_Pos (6UL)           /*!< NYET (Bit 6)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NYET_Msk (0x40UL)        /*!< NYET (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_TXERRM_Pos (7UL)         /*!< TXERRM (Bit 7)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_TXERRM_Msk (0x80UL)      /*!< TXERRM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_BBERRM_Pos (8UL)         /*!< BBERRM (Bit 8)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_BBERRM_Msk (0x100UL)     /*!< BBERRM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_FRMORM_Pos (9UL)         /*!< FRMORM (Bit 9)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_FRMORM_Msk (0x200UL)     /*!< FRMORM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_DTERRM_Pos (10UL)        /*!< DTERRM (Bit 10)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_DTERRM_Msk (0x400UL)     /*!< DTERRM (Bitfield-Mask: 0x01)                          */
/* ========================================================  HCTSIZ  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_XFRSIZ_Pos (0UL)           /*!< XFRSIZ (Bit 0)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_XFRSIZ_Msk (0x7ffffUL)     /*!< XFRSIZ (Bitfield-Mask: 0x7ffff)                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_PKTCNT_Pos (19UL)          /*!< PKTCNT (Bit 19)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_PKTCNT_Msk (0x1ff80000UL)  /*!< PKTCNT (Bitfield-Mask: 0x3ff)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_DPID_Pos (29UL)            /*!< DPID (Bit 29)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_DPID_Msk (0x60000000UL)    /*!< DPID (Bitfield-Mask: 0x03)                            */
/* =========================================================  HCDMA  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCDMA_DMAADDR_Pos (0UL)           /*!< DMAADDR (Bit 0)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCDMA_DMAADDR_Msk (0xffffffffUL)  /*!< DMAADDR (Bitfield-Mask: 0xffffffff)                   */


/* =========================================================================================================================== */
/* ================                                        IN_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* =======================================================  DIEPCTL0  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_MPSIZ_Pos (0UL)         /*!< MPSIZ (Bit 0)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_MPSIZ_Msk (0x7ffUL)     /*!< MPSIZ (Bitfield-Mask: 0x7ff)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_USBAEP_Pos (15UL)       /*!< USBAEP (Bit 15)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_USBAEP_Msk (0x8000UL)   /*!< USBAEP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EONUM_DPID_Pos (16UL)   /*!< EONUM_DPID (Bit 16)                                   */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EONUM_DPID_Msk (0x10000UL) /*!< EONUM_DPID (Bitfield-Mask: 0x01)                   */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_NAKSTS_Pos (17UL)       /*!< NAKSTS (Bit 17)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_NAKSTS_Msk (0x20000UL)  /*!< NAKSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPTYP_Pos (18UL)        /*!< EPTYP (Bit 18)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPTYP_Msk (0xc0000UL)   /*!< EPTYP (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_Stall_Pos (21UL)        /*!< Stall (Bit 21)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_Stall_Msk (0x200000UL)  /*!< Stall (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_TXFNUM_Pos (22UL)       /*!< TXFNUM (Bit 22)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_TXFNUM_Msk (0x3c00000UL) /*!< TXFNUM (Bitfield-Mask: 0x0f)                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_CNAK_Pos (26UL)         /*!< CNAK (Bit 26)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_CNAK_Msk (0x4000000UL)  /*!< CNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SNAK_Pos (27UL)         /*!< SNAK (Bit 27)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SNAK_Msk (0x8000000UL)  /*!< SNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SD0PID_SEVNFRM_Pos (28UL) /*!< SD0PID_SEVNFRM (Bit 28)                             */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SD0PID_SEVNFRM_Msk (0x10000000UL) /*!< SD0PID_SEVNFRM (Bitfield-Mask: 0x01)        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SODDFRM_Pos (29UL)      /*!< SODDFRM (Bit 29)                                      */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SODDFRM_Msk (0x20000000UL) /*!< SODDFRM (Bitfield-Mask: 0x01)                      */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPDIS_Pos (30UL)        /*!< EPDIS (Bit 30)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPDIS_Msk (0x40000000UL) /*!< EPDIS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPENA_Pos (31UL)        /*!< EPENA (Bit 31)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPENA_Msk (0x80000000UL) /*!< EPENA (Bitfield-Mask: 0x01)                          */
/* ========================================================  DIEPINT  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_XFRC_Pos (0UL)           /*!< XFRC (Bit 0)                                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_XFRC_Msk (0x1UL)         /*!< XFRC (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_EPDISD_Pos (1UL)         /*!< EPDISD (Bit 1)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_EPDISD_Msk (0x2UL)       /*!< EPDISD (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TOC_Pos (3UL)            /*!< TOC (Bit 3)                                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TOC_Msk (0x8UL)          /*!< TOC (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_ITTXFE_Pos (4UL)         /*!< ITTXFE (Bit 4)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_ITTXFE_Msk (0x10UL)      /*!< ITTXFE (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_INEPNE_Pos (6UL)         /*!< INEPNE (Bit 6)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_INEPNE_Msk (0x40UL)      /*!< INEPNE (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFE_Pos (7UL)           /*!< TXFE (Bit 7)                                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFE_Msk (0x80UL)        /*!< TXFE (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFIFOUDRN_Pos (8UL)     /*!< TXFIFOUDRN (Bit 8)                                    */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFIFOUDRN_Msk (0x100UL) /*!< TXFIFOUDRN (Bitfield-Mask: 0x01)                      */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BNA_Pos (9UL)            /*!< BNA (Bit 9)                                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BNA_Msk (0x200UL)        /*!< BNA (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_PKTDRPSTS_Pos (11UL)     /*!< PKTDRPSTS (Bit 11)                                    */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_PKTDRPSTS_Msk (0x800UL)  /*!< PKTDRPSTS (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BERR_Pos (12UL)          /*!< BERR (Bit 12)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BERR_Msk (0x1000UL)      /*!< BERR (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_NAK_Pos (13UL)           /*!< NAK (Bit 13)                                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_NAK_Msk (0x2000UL)       /*!< NAK (Bitfield-Mask: 0x01)                             */
/* =======================================================  DIEPTSIZ  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_XFRSIZ_Pos (0UL)        /*!< XFRSIZ (Bit 0)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_XFRSIZ_Msk (0x7fUL)     /*!< XFRSIZ (Bitfield-Mask: 0x7f)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_PKTCNT_Pos (19UL)       /*!< PKTCNT (Bit 19)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_PKTCNT_Msk (0x180000UL) /*!< PKTCNT (Bitfield-Mask: 0x03)                          */
/* ========================================================  DIEPDMA  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPDMA_DMAADDR_Pos (0UL)        /*!< DMAADDR (Bit 0)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPDMA_DMAADDR_Msk (0xffffffffUL) /*!< DMAADDR (Bitfield-Mask: 0xffffffff)                 */
/* ========================================================  DTXFSTS  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DTXFSTS_INEPTFSAV_Pos (0UL)      /*!< INEPTFSAV (Bit 0)                                     */
#define USB_OTG_DEVICE_IN_ENDPOINT_DTXFSTS_INEPTFSAV_Msk (0xffffUL) /*!< INEPTFSAV (Bitfield-Mask: 0xffff)                     */


/* =========================================================================================================================== */
/* ================                                       OUT_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  DOEPCTL  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_MPSIZ_Pos (0UL)         /*!< MPSIZ (Bit 0)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_MPSIZ_Msk (0x3UL)       /*!< MPSIZ (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_USBAEP_Pos (15UL)       /*!< USBAEP (Bit 15)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_USBAEP_Msk (0x8000UL)   /*!< USBAEP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_NAKSTS_Pos (17UL)       /*!< NAKSTS (Bit 17)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_NAKSTS_Msk (0x20000UL)  /*!< NAKSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPTYP_Pos (18UL)        /*!< EPTYP (Bit 18)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPTYP_Msk (0xc0000UL)   /*!< EPTYP (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNPM_Pos (20UL)         /*!< SNPM (Bit 20)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNPM_Msk (0x100000UL)   /*!< SNPM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_Stall_Pos (21UL)        /*!< Stall (Bit 21)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_Stall_Msk (0x200000UL)  /*!< Stall (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_CNAK_Pos (26UL)         /*!< CNAK (Bit 26)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_CNAK_Msk (0x4000000UL)  /*!< CNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNAK_Pos (27UL)         /*!< SNAK (Bit 27)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNAK_Msk (0x8000000UL)  /*!< SNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPDIS_Pos (30UL)        /*!< EPDIS (Bit 30)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPDIS_Msk (0x40000000UL) /*!< EPDIS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPENA_Pos (31UL)        /*!< EPENA (Bit 31)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPENA_Msk (0x80000000UL) /*!< EPENA (Bitfield-Mask: 0x01)                          */
/* ========================================================  DOEPINT  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_XFRC_Pos (0UL)          /*!< XFRC (Bit 0)                                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_XFRC_Msk (0x1UL)        /*!< XFRC (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_EPDISD_Pos (1UL)        /*!< EPDISD (Bit 1)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_EPDISD_Msk (0x2UL)      /*!< EPDISD (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_STUP_Pos (3UL)          /*!< STUP (Bit 3)                                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_STUP_Msk (0x8UL)        /*!< STUP (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_OTEPDIS_Pos (4UL)       /*!< OTEPDIS (Bit 4)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_OTEPDIS_Msk (0x10UL)    /*!< OTEPDIS (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_B2BSTUP_Pos (6UL)       /*!< B2BSTUP (Bit 6)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_B2BSTUP_Msk (0x40UL)    /*!< B2BSTUP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_NYET_Pos (14UL)         /*!< NYET (Bit 14)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_NYET_Msk (0x4000UL)     /*!< NYET (Bitfield-Mask: 0x01)                            */
/* =======================================================  DOEPTSIZ  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_XFRSIZ_Pos (0UL)       /*!< XFRSIZ (Bit 0)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_XFRSIZ_Msk (0x7fUL)    /*!< XFRSIZ (Bitfield-Mask: 0x7f)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_PKTCNT_Pos (19UL)      /*!< PKTCNT (Bit 19)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_PKTCNT_Msk (0x80000UL) /*!< PKTCNT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_STUPCNT_Pos (29UL)     /*!< STUPCNT (Bit 29)                                      */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_STUPCNT_Msk (0x60000000UL) /*!< STUPCNT (Bitfield-Mask: 0x03)                     */
/* ========================================================  DOEPDMA  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPDMA_DMAADDR_Pos (0UL)       /*!< DMAADDR (Bit 0)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPDMA_DMAADDR_Msk (0xffffffffUL) /*!< DMAADDR (Bitfield-Mask: 0xffffffff)                */

/** @} */ /* End of group PosMask_clusters */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         VCMAILBOX                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  READ  ========================================================== */
/* =========================================================  PEEK0  ========================================================= */
/* ========================================================  SENDER0  ======================================================== */
/* ========================================================  STATUS0  ======================================================== */
#define VCMAILBOX_STATUS0_FULL_Pos        (31UL)                    /*!< FULL (Bit 31)                                         */
#define VCMAILBOX_STATUS0_FULL_Msk        (0x80000000UL)            /*!< FULL (Bitfield-Mask: 0x01)                            */
#define VCMAILBOX_STATUS0_EMPTY_Pos       (30UL)                    /*!< EMPTY (Bit 30)                                        */
#define VCMAILBOX_STATUS0_EMPTY_Msk       (0x40000000UL)            /*!< EMPTY (Bitfield-Mask: 0x01)                           */
/* ========================================================  CONFIG0  ======================================================== */
#define VCMAILBOX_CONFIG0_IRQEN_Pos       (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define VCMAILBOX_CONFIG0_IRQEN_Msk       (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  WRITE  ========================================================= */
/* =========================================================  PEEK1  ========================================================= */
/* ========================================================  SENDER1  ======================================================== */
/* ========================================================  STATUS1  ======================================================== */
/* ========================================================  CONFIG1  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          CM_PCM                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define CM_PCM_CS_PASSWD_Pos              (24UL)                    /*!< PASSWD (Bit 24)                                       */
#define CM_PCM_CS_PASSWD_Msk              (0xff000000UL)            /*!< PASSWD (Bitfield-Mask: 0xff)                          */
#define CM_PCM_CS_MASH_Pos                (9UL)                     /*!< MASH (Bit 9)                                          */
#define CM_PCM_CS_MASH_Msk                (0x600UL)                 /*!< MASH (Bitfield-Mask: 0x03)                            */
#define CM_PCM_CS_FLIP_Pos                (8UL)                     /*!< FLIP (Bit 8)                                          */
#define CM_PCM_CS_FLIP_Msk                (0x100UL)                 /*!< FLIP (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_BUSY_Pos                (7UL)                     /*!< BUSY (Bit 7)                                          */
#define CM_PCM_CS_BUSY_Msk                (0x80UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_KILL_Pos                (5UL)                     /*!< KILL (Bit 5)                                          */
#define CM_PCM_CS_KILL_Msk                (0x20UL)                  /*!< KILL (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_ENAB_Pos                (4UL)                     /*!< ENAB (Bit 4)                                          */
#define CM_PCM_CS_ENAB_Msk                (0x10UL)                  /*!< ENAB (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_SRC_Pos                 (0UL)                     /*!< SRC (Bit 0)                                           */
#define CM_PCM_CS_SRC_Msk                 (0xfUL)                   /*!< SRC (Bitfield-Mask: 0x0f)                             */
/* ==========================================================  DIV  ========================================================== */
#define CM_PCM_DIV_PASSWD_Pos             (24UL)                    /*!< PASSWD (Bit 24)                                       */
#define CM_PCM_DIV_PASSWD_Msk             (0xff000000UL)            /*!< PASSWD (Bitfield-Mask: 0xff)                          */
#define CM_PCM_DIV_DIVI_Pos               (12UL)                    /*!< DIVI (Bit 12)                                         */
#define CM_PCM_DIV_DIVI_Msk               (0xfff000UL)              /*!< DIVI (Bitfield-Mask: 0xfff)                           */
#define CM_PCM_DIV_DIVF_Pos               (0UL)                     /*!< DIVF (Bit 0)                                          */
#define CM_PCM_DIV_DIVF_Msk               (0xfffUL)                 /*!< DIVF (Bitfield-Mask: 0xfff)                           */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  GPFSEL0  ======================================================== */
#define GPIO_GPFSEL0_FSEL0_Pos            (0UL)                     /*!< FSEL0 (Bit 0)                                         */
#define GPIO_GPFSEL0_FSEL0_Msk            (0x7UL)                   /*!< FSEL0 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL1_Pos            (3UL)                     /*!< FSEL1 (Bit 3)                                         */
#define GPIO_GPFSEL0_FSEL1_Msk            (0x38UL)                  /*!< FSEL1 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL2_Pos            (6UL)                     /*!< FSEL2 (Bit 6)                                         */
#define GPIO_GPFSEL0_FSEL2_Msk            (0x1c0UL)                 /*!< FSEL2 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL3_Pos            (9UL)                     /*!< FSEL3 (Bit 9)                                         */
#define GPIO_GPFSEL0_FSEL3_Msk            (0xe00UL)                 /*!< FSEL3 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL4_Pos            (12UL)                    /*!< FSEL4 (Bit 12)                                        */
#define GPIO_GPFSEL0_FSEL4_Msk            (0x7000UL)                /*!< FSEL4 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL5_Pos            (15UL)                    /*!< FSEL5 (Bit 15)                                        */
#define GPIO_GPFSEL0_FSEL5_Msk            (0x38000UL)               /*!< FSEL5 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL6_Pos            (18UL)                    /*!< FSEL6 (Bit 18)                                        */
#define GPIO_GPFSEL0_FSEL6_Msk            (0x1c0000UL)              /*!< FSEL6 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL7_Pos            (21UL)                    /*!< FSEL7 (Bit 21)                                        */
#define GPIO_GPFSEL0_FSEL7_Msk            (0xe00000UL)              /*!< FSEL7 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL8_Pos            (24UL)                    /*!< FSEL8 (Bit 24)                                        */
#define GPIO_GPFSEL0_FSEL8_Msk            (0x7000000UL)             /*!< FSEL8 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL9_Pos            (27UL)                    /*!< FSEL9 (Bit 27)                                        */
#define GPIO_GPFSEL0_FSEL9_Msk            (0x38000000UL)            /*!< FSEL9 (Bitfield-Mask: 0x07)                           */
/* ========================================================  GPFSEL1  ======================================================== */
#define GPIO_GPFSEL1_FSEL10_Pos           (0UL)                     /*!< FSEL10 (Bit 0)                                        */
#define GPIO_GPFSEL1_FSEL10_Msk           (0x7UL)                   /*!< FSEL10 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL11_Pos           (3UL)                     /*!< FSEL11 (Bit 3)                                        */
#define GPIO_GPFSEL1_FSEL11_Msk           (0x38UL)                  /*!< FSEL11 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL12_Pos           (6UL)                     /*!< FSEL12 (Bit 6)                                        */
#define GPIO_GPFSEL1_FSEL12_Msk           (0x1c0UL)                 /*!< FSEL12 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL13_Pos           (9UL)                     /*!< FSEL13 (Bit 9)                                        */
#define GPIO_GPFSEL1_FSEL13_Msk           (0xe00UL)                 /*!< FSEL13 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL14_Pos           (12UL)                    /*!< FSEL14 (Bit 12)                                       */
#define GPIO_GPFSEL1_FSEL14_Msk           (0x7000UL)                /*!< FSEL14 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL15_Pos           (15UL)                    /*!< FSEL15 (Bit 15)                                       */
#define GPIO_GPFSEL1_FSEL15_Msk           (0x38000UL)               /*!< FSEL15 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL16_Pos           (18UL)                    /*!< FSEL16 (Bit 18)                                       */
#define GPIO_GPFSEL1_FSEL16_Msk           (0x1c0000UL)              /*!< FSEL16 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL17_Pos           (21UL)                    /*!< FSEL17 (Bit 21)                                       */
#define GPIO_GPFSEL1_FSEL17_Msk           (0xe00000UL)              /*!< FSEL17 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL18_Pos           (24UL)                    /*!< FSEL18 (Bit 24)                                       */
#define GPIO_GPFSEL1_FSEL18_Msk           (0x7000000UL)             /*!< FSEL18 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL19_Pos           (27UL)                    /*!< FSEL19 (Bit 27)                                       */
#define GPIO_GPFSEL1_FSEL19_Msk           (0x38000000UL)            /*!< FSEL19 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL2  ======================================================== */
#define GPIO_GPFSEL2_FSEL20_Pos           (0UL)                     /*!< FSEL20 (Bit 0)                                        */
#define GPIO_GPFSEL2_FSEL20_Msk           (0x7UL)                   /*!< FSEL20 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL21_Pos           (3UL)                     /*!< FSEL21 (Bit 3)                                        */
#define GPIO_GPFSEL2_FSEL21_Msk           (0x38UL)                  /*!< FSEL21 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL22_Pos           (6UL)                     /*!< FSEL22 (Bit 6)                                        */
#define GPIO_GPFSEL2_FSEL22_Msk           (0x1c0UL)                 /*!< FSEL22 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL23_Pos           (9UL)                     /*!< FSEL23 (Bit 9)                                        */
#define GPIO_GPFSEL2_FSEL23_Msk           (0xe00UL)                 /*!< FSEL23 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL24_Pos           (12UL)                    /*!< FSEL24 (Bit 12)                                       */
#define GPIO_GPFSEL2_FSEL24_Msk           (0x7000UL)                /*!< FSEL24 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL25_Pos           (15UL)                    /*!< FSEL25 (Bit 15)                                       */
#define GPIO_GPFSEL2_FSEL25_Msk           (0x38000UL)               /*!< FSEL25 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL26_Pos           (18UL)                    /*!< FSEL26 (Bit 18)                                       */
#define GPIO_GPFSEL2_FSEL26_Msk           (0x1c0000UL)              /*!< FSEL26 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL27_Pos           (21UL)                    /*!< FSEL27 (Bit 21)                                       */
#define GPIO_GPFSEL2_FSEL27_Msk           (0xe00000UL)              /*!< FSEL27 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL28_Pos           (24UL)                    /*!< FSEL28 (Bit 24)                                       */
#define GPIO_GPFSEL2_FSEL28_Msk           (0x7000000UL)             /*!< FSEL28 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL29_Pos           (27UL)                    /*!< FSEL29 (Bit 27)                                       */
#define GPIO_GPFSEL2_FSEL29_Msk           (0x38000000UL)            /*!< FSEL29 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL3  ======================================================== */
#define GPIO_GPFSEL3_FSEL30_Pos           (0UL)                     /*!< FSEL30 (Bit 0)                                        */
#define GPIO_GPFSEL3_FSEL30_Msk           (0x7UL)                   /*!< FSEL30 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL31_Pos           (3UL)                     /*!< FSEL31 (Bit 3)                                        */
#define GPIO_GPFSEL3_FSEL31_Msk           (0x38UL)                  /*!< FSEL31 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL32_Pos           (6UL)                     /*!< FSEL32 (Bit 6)                                        */
#define GPIO_GPFSEL3_FSEL32_Msk           (0x1c0UL)                 /*!< FSEL32 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL33_Pos           (9UL)                     /*!< FSEL33 (Bit 9)                                        */
#define GPIO_GPFSEL3_FSEL33_Msk           (0xe00UL)                 /*!< FSEL33 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL34_Pos           (12UL)                    /*!< FSEL34 (Bit 12)                                       */
#define GPIO_GPFSEL3_FSEL34_Msk           (0x7000UL)                /*!< FSEL34 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL35_Pos           (15UL)                    /*!< FSEL35 (Bit 15)                                       */
#define GPIO_GPFSEL3_FSEL35_Msk           (0x38000UL)               /*!< FSEL35 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL36_Pos           (18UL)                    /*!< FSEL36 (Bit 18)                                       */
#define GPIO_GPFSEL3_FSEL36_Msk           (0x1c0000UL)              /*!< FSEL36 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL37_Pos           (21UL)                    /*!< FSEL37 (Bit 21)                                       */
#define GPIO_GPFSEL3_FSEL37_Msk           (0xe00000UL)              /*!< FSEL37 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL38_Pos           (24UL)                    /*!< FSEL38 (Bit 24)                                       */
#define GPIO_GPFSEL3_FSEL38_Msk           (0x7000000UL)             /*!< FSEL38 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL39_Pos           (27UL)                    /*!< FSEL39 (Bit 27)                                       */
#define GPIO_GPFSEL3_FSEL39_Msk           (0x38000000UL)            /*!< FSEL39 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL4  ======================================================== */
#define GPIO_GPFSEL4_FSEL40_Pos           (0UL)                     /*!< FSEL40 (Bit 0)                                        */
#define GPIO_GPFSEL4_FSEL40_Msk           (0x7UL)                   /*!< FSEL40 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL41_Pos           (3UL)                     /*!< FSEL41 (Bit 3)                                        */
#define GPIO_GPFSEL4_FSEL41_Msk           (0x38UL)                  /*!< FSEL41 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL42_Pos           (6UL)                     /*!< FSEL42 (Bit 6)                                        */
#define GPIO_GPFSEL4_FSEL42_Msk           (0x1c0UL)                 /*!< FSEL42 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL43_Pos           (9UL)                     /*!< FSEL43 (Bit 9)                                        */
#define GPIO_GPFSEL4_FSEL43_Msk           (0xe00UL)                 /*!< FSEL43 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL44_Pos           (12UL)                    /*!< FSEL44 (Bit 12)                                       */
#define GPIO_GPFSEL4_FSEL44_Msk           (0x7000UL)                /*!< FSEL44 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL45_Pos           (15UL)                    /*!< FSEL45 (Bit 15)                                       */
#define GPIO_GPFSEL4_FSEL45_Msk           (0x38000UL)               /*!< FSEL45 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL46_Pos           (18UL)                    /*!< FSEL46 (Bit 18)                                       */
#define GPIO_GPFSEL4_FSEL46_Msk           (0x1c0000UL)              /*!< FSEL46 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL47_Pos           (21UL)                    /*!< FSEL47 (Bit 21)                                       */
#define GPIO_GPFSEL4_FSEL47_Msk           (0xe00000UL)              /*!< FSEL47 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL48_Pos           (24UL)                    /*!< FSEL48 (Bit 24)                                       */
#define GPIO_GPFSEL4_FSEL48_Msk           (0x7000000UL)             /*!< FSEL48 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL49_Pos           (27UL)                    /*!< FSEL49 (Bit 27)                                       */
#define GPIO_GPFSEL4_FSEL49_Msk           (0x38000000UL)            /*!< FSEL49 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL5  ======================================================== */
#define GPIO_GPFSEL5_FSEL50_Pos           (0UL)                     /*!< FSEL50 (Bit 0)                                        */
#define GPIO_GPFSEL5_FSEL50_Msk           (0x7UL)                   /*!< FSEL50 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL51_Pos           (3UL)                     /*!< FSEL51 (Bit 3)                                        */
#define GPIO_GPFSEL5_FSEL51_Msk           (0x38UL)                  /*!< FSEL51 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL52_Pos           (6UL)                     /*!< FSEL52 (Bit 6)                                        */
#define GPIO_GPFSEL5_FSEL52_Msk           (0x1c0UL)                 /*!< FSEL52 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL53_Pos           (9UL)                     /*!< FSEL53 (Bit 9)                                        */
#define GPIO_GPFSEL5_FSEL53_Msk           (0xe00UL)                 /*!< FSEL53 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL54_Pos           (12UL)                    /*!< FSEL54 (Bit 12)                                       */
#define GPIO_GPFSEL5_FSEL54_Msk           (0x7000UL)                /*!< FSEL54 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL55_Pos           (15UL)                    /*!< FSEL55 (Bit 15)                                       */
#define GPIO_GPFSEL5_FSEL55_Msk           (0x38000UL)               /*!< FSEL55 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL56_Pos           (18UL)                    /*!< FSEL56 (Bit 18)                                       */
#define GPIO_GPFSEL5_FSEL56_Msk           (0x1c0000UL)              /*!< FSEL56 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL57_Pos           (21UL)                    /*!< FSEL57 (Bit 21)                                       */
#define GPIO_GPFSEL5_FSEL57_Msk           (0xe00000UL)              /*!< FSEL57 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPSET0  ========================================================= */
#define GPIO_GPSET0_SET0_Pos              (0UL)                     /*!< SET0 (Bit 0)                                          */
#define GPIO_GPSET0_SET0_Msk              (0x1UL)                   /*!< SET0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET1_Pos              (1UL)                     /*!< SET1 (Bit 1)                                          */
#define GPIO_GPSET0_SET1_Msk              (0x2UL)                   /*!< SET1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET2_Pos              (2UL)                     /*!< SET2 (Bit 2)                                          */
#define GPIO_GPSET0_SET2_Msk              (0x4UL)                   /*!< SET2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET3_Pos              (3UL)                     /*!< SET3 (Bit 3)                                          */
#define GPIO_GPSET0_SET3_Msk              (0x8UL)                   /*!< SET3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET4_Pos              (4UL)                     /*!< SET4 (Bit 4)                                          */
#define GPIO_GPSET0_SET4_Msk              (0x10UL)                  /*!< SET4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET5_Pos              (5UL)                     /*!< SET5 (Bit 5)                                          */
#define GPIO_GPSET0_SET5_Msk              (0x20UL)                  /*!< SET5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET6_Pos              (6UL)                     /*!< SET6 (Bit 6)                                          */
#define GPIO_GPSET0_SET6_Msk              (0x40UL)                  /*!< SET6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET7_Pos              (7UL)                     /*!< SET7 (Bit 7)                                          */
#define GPIO_GPSET0_SET7_Msk              (0x80UL)                  /*!< SET7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET8_Pos              (8UL)                     /*!< SET8 (Bit 8)                                          */
#define GPIO_GPSET0_SET8_Msk              (0x100UL)                 /*!< SET8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET9_Pos              (9UL)                     /*!< SET9 (Bit 9)                                          */
#define GPIO_GPSET0_SET9_Msk              (0x200UL)                 /*!< SET9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET10_Pos             (10UL)                    /*!< SET10 (Bit 10)                                        */
#define GPIO_GPSET0_SET10_Msk             (0x400UL)                 /*!< SET10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET11_Pos             (11UL)                    /*!< SET11 (Bit 11)                                        */
#define GPIO_GPSET0_SET11_Msk             (0x800UL)                 /*!< SET11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET12_Pos             (12UL)                    /*!< SET12 (Bit 12)                                        */
#define GPIO_GPSET0_SET12_Msk             (0x1000UL)                /*!< SET12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET13_Pos             (13UL)                    /*!< SET13 (Bit 13)                                        */
#define GPIO_GPSET0_SET13_Msk             (0x2000UL)                /*!< SET13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET14_Pos             (14UL)                    /*!< SET14 (Bit 14)                                        */
#define GPIO_GPSET0_SET14_Msk             (0x4000UL)                /*!< SET14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET15_Pos             (15UL)                    /*!< SET15 (Bit 15)                                        */
#define GPIO_GPSET0_SET15_Msk             (0x8000UL)                /*!< SET15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET16_Pos             (16UL)                    /*!< SET16 (Bit 16)                                        */
#define GPIO_GPSET0_SET16_Msk             (0x10000UL)               /*!< SET16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET17_Pos             (17UL)                    /*!< SET17 (Bit 17)                                        */
#define GPIO_GPSET0_SET17_Msk             (0x20000UL)               /*!< SET17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET18_Pos             (18UL)                    /*!< SET18 (Bit 18)                                        */
#define GPIO_GPSET0_SET18_Msk             (0x40000UL)               /*!< SET18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET19_Pos             (19UL)                    /*!< SET19 (Bit 19)                                        */
#define GPIO_GPSET0_SET19_Msk             (0x80000UL)               /*!< SET19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET20_Pos             (20UL)                    /*!< SET20 (Bit 20)                                        */
#define GPIO_GPSET0_SET20_Msk             (0x100000UL)              /*!< SET20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET21_Pos             (21UL)                    /*!< SET21 (Bit 21)                                        */
#define GPIO_GPSET0_SET21_Msk             (0x200000UL)              /*!< SET21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET22_Pos             (22UL)                    /*!< SET22 (Bit 22)                                        */
#define GPIO_GPSET0_SET22_Msk             (0x400000UL)              /*!< SET22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET23_Pos             (23UL)                    /*!< SET23 (Bit 23)                                        */
#define GPIO_GPSET0_SET23_Msk             (0x800000UL)              /*!< SET23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET24_Pos             (24UL)                    /*!< SET24 (Bit 24)                                        */
#define GPIO_GPSET0_SET24_Msk             (0x1000000UL)             /*!< SET24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET25_Pos             (25UL)                    /*!< SET25 (Bit 25)                                        */
#define GPIO_GPSET0_SET25_Msk             (0x2000000UL)             /*!< SET25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET26_Pos             (26UL)                    /*!< SET26 (Bit 26)                                        */
#define GPIO_GPSET0_SET26_Msk             (0x4000000UL)             /*!< SET26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET27_Pos             (27UL)                    /*!< SET27 (Bit 27)                                        */
#define GPIO_GPSET0_SET27_Msk             (0x8000000UL)             /*!< SET27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET28_Pos             (28UL)                    /*!< SET28 (Bit 28)                                        */
#define GPIO_GPSET0_SET28_Msk             (0x10000000UL)            /*!< SET28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET29_Pos             (29UL)                    /*!< SET29 (Bit 29)                                        */
#define GPIO_GPSET0_SET29_Msk             (0x20000000UL)            /*!< SET29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET30_Pos             (30UL)                    /*!< SET30 (Bit 30)                                        */
#define GPIO_GPSET0_SET30_Msk             (0x40000000UL)            /*!< SET30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET31_Pos             (31UL)                    /*!< SET31 (Bit 31)                                        */
#define GPIO_GPSET0_SET31_Msk             (0x80000000UL)            /*!< SET31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPSET1  ========================================================= */
#define GPIO_GPSET1_SET32_Pos             (0UL)                     /*!< SET32 (Bit 0)                                         */
#define GPIO_GPSET1_SET32_Msk             (0x1UL)                   /*!< SET32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET33_Pos             (1UL)                     /*!< SET33 (Bit 1)                                         */
#define GPIO_GPSET1_SET33_Msk             (0x2UL)                   /*!< SET33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET34_Pos             (2UL)                     /*!< SET34 (Bit 2)                                         */
#define GPIO_GPSET1_SET34_Msk             (0x4UL)                   /*!< SET34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET35_Pos             (3UL)                     /*!< SET35 (Bit 3)                                         */
#define GPIO_GPSET1_SET35_Msk             (0x8UL)                   /*!< SET35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET36_Pos             (4UL)                     /*!< SET36 (Bit 4)                                         */
#define GPIO_GPSET1_SET36_Msk             (0x10UL)                  /*!< SET36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET37_Pos             (5UL)                     /*!< SET37 (Bit 5)                                         */
#define GPIO_GPSET1_SET37_Msk             (0x20UL)                  /*!< SET37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET38_Pos             (6UL)                     /*!< SET38 (Bit 6)                                         */
#define GPIO_GPSET1_SET38_Msk             (0x40UL)                  /*!< SET38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET39_Pos             (7UL)                     /*!< SET39 (Bit 7)                                         */
#define GPIO_GPSET1_SET39_Msk             (0x80UL)                  /*!< SET39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET40_Pos             (8UL)                     /*!< SET40 (Bit 8)                                         */
#define GPIO_GPSET1_SET40_Msk             (0x100UL)                 /*!< SET40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET41_Pos             (9UL)                     /*!< SET41 (Bit 9)                                         */
#define GPIO_GPSET1_SET41_Msk             (0x200UL)                 /*!< SET41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET42_Pos             (10UL)                    /*!< SET42 (Bit 10)                                        */
#define GPIO_GPSET1_SET42_Msk             (0x400UL)                 /*!< SET42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET43_Pos             (11UL)                    /*!< SET43 (Bit 11)                                        */
#define GPIO_GPSET1_SET43_Msk             (0x800UL)                 /*!< SET43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET44_Pos             (12UL)                    /*!< SET44 (Bit 12)                                        */
#define GPIO_GPSET1_SET44_Msk             (0x1000UL)                /*!< SET44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET45_Pos             (13UL)                    /*!< SET45 (Bit 13)                                        */
#define GPIO_GPSET1_SET45_Msk             (0x2000UL)                /*!< SET45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET46_Pos             (14UL)                    /*!< SET46 (Bit 14)                                        */
#define GPIO_GPSET1_SET46_Msk             (0x4000UL)                /*!< SET46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET47_Pos             (15UL)                    /*!< SET47 (Bit 15)                                        */
#define GPIO_GPSET1_SET47_Msk             (0x8000UL)                /*!< SET47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET48_Pos             (16UL)                    /*!< SET48 (Bit 16)                                        */
#define GPIO_GPSET1_SET48_Msk             (0x10000UL)               /*!< SET48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET49_Pos             (17UL)                    /*!< SET49 (Bit 17)                                        */
#define GPIO_GPSET1_SET49_Msk             (0x20000UL)               /*!< SET49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET50_Pos             (18UL)                    /*!< SET50 (Bit 18)                                        */
#define GPIO_GPSET1_SET50_Msk             (0x40000UL)               /*!< SET50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET51_Pos             (19UL)                    /*!< SET51 (Bit 19)                                        */
#define GPIO_GPSET1_SET51_Msk             (0x80000UL)               /*!< SET51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET52_Pos             (20UL)                    /*!< SET52 (Bit 20)                                        */
#define GPIO_GPSET1_SET52_Msk             (0x100000UL)              /*!< SET52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET53_Pos             (21UL)                    /*!< SET53 (Bit 21)                                        */
#define GPIO_GPSET1_SET53_Msk             (0x200000UL)              /*!< SET53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET54_Pos             (22UL)                    /*!< SET54 (Bit 22)                                        */
#define GPIO_GPSET1_SET54_Msk             (0x400000UL)              /*!< SET54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET55_Pos             (23UL)                    /*!< SET55 (Bit 23)                                        */
#define GPIO_GPSET1_SET55_Msk             (0x800000UL)              /*!< SET55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET56_Pos             (24UL)                    /*!< SET56 (Bit 24)                                        */
#define GPIO_GPSET1_SET56_Msk             (0x1000000UL)             /*!< SET56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET57_Pos             (25UL)                    /*!< SET57 (Bit 25)                                        */
#define GPIO_GPSET1_SET57_Msk             (0x2000000UL)             /*!< SET57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPCLR0  ========================================================= */
#define GPIO_GPCLR0_CLR0_Pos              (0UL)                     /*!< CLR0 (Bit 0)                                          */
#define GPIO_GPCLR0_CLR0_Msk              (0x1UL)                   /*!< CLR0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR1_Pos              (1UL)                     /*!< CLR1 (Bit 1)                                          */
#define GPIO_GPCLR0_CLR1_Msk              (0x2UL)                   /*!< CLR1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR2_Pos              (2UL)                     /*!< CLR2 (Bit 2)                                          */
#define GPIO_GPCLR0_CLR2_Msk              (0x4UL)                   /*!< CLR2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR3_Pos              (3UL)                     /*!< CLR3 (Bit 3)                                          */
#define GPIO_GPCLR0_CLR3_Msk              (0x8UL)                   /*!< CLR3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR4_Pos              (4UL)                     /*!< CLR4 (Bit 4)                                          */
#define GPIO_GPCLR0_CLR4_Msk              (0x10UL)                  /*!< CLR4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR5_Pos              (5UL)                     /*!< CLR5 (Bit 5)                                          */
#define GPIO_GPCLR0_CLR5_Msk              (0x20UL)                  /*!< CLR5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR6_Pos              (6UL)                     /*!< CLR6 (Bit 6)                                          */
#define GPIO_GPCLR0_CLR6_Msk              (0x40UL)                  /*!< CLR6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR7_Pos              (7UL)                     /*!< CLR7 (Bit 7)                                          */
#define GPIO_GPCLR0_CLR7_Msk              (0x80UL)                  /*!< CLR7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR8_Pos              (8UL)                     /*!< CLR8 (Bit 8)                                          */
#define GPIO_GPCLR0_CLR8_Msk              (0x100UL)                 /*!< CLR8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR9_Pos              (9UL)                     /*!< CLR9 (Bit 9)                                          */
#define GPIO_GPCLR0_CLR9_Msk              (0x200UL)                 /*!< CLR9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR10_Pos             (10UL)                    /*!< CLR10 (Bit 10)                                        */
#define GPIO_GPCLR0_CLR10_Msk             (0x400UL)                 /*!< CLR10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR11_Pos             (11UL)                    /*!< CLR11 (Bit 11)                                        */
#define GPIO_GPCLR0_CLR11_Msk             (0x800UL)                 /*!< CLR11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR12_Pos             (12UL)                    /*!< CLR12 (Bit 12)                                        */
#define GPIO_GPCLR0_CLR12_Msk             (0x1000UL)                /*!< CLR12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR13_Pos             (13UL)                    /*!< CLR13 (Bit 13)                                        */
#define GPIO_GPCLR0_CLR13_Msk             (0x2000UL)                /*!< CLR13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR14_Pos             (14UL)                    /*!< CLR14 (Bit 14)                                        */
#define GPIO_GPCLR0_CLR14_Msk             (0x4000UL)                /*!< CLR14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR15_Pos             (15UL)                    /*!< CLR15 (Bit 15)                                        */
#define GPIO_GPCLR0_CLR15_Msk             (0x8000UL)                /*!< CLR15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR16_Pos             (16UL)                    /*!< CLR16 (Bit 16)                                        */
#define GPIO_GPCLR0_CLR16_Msk             (0x10000UL)               /*!< CLR16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR17_Pos             (17UL)                    /*!< CLR17 (Bit 17)                                        */
#define GPIO_GPCLR0_CLR17_Msk             (0x20000UL)               /*!< CLR17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR18_Pos             (18UL)                    /*!< CLR18 (Bit 18)                                        */
#define GPIO_GPCLR0_CLR18_Msk             (0x40000UL)               /*!< CLR18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR19_Pos             (19UL)                    /*!< CLR19 (Bit 19)                                        */
#define GPIO_GPCLR0_CLR19_Msk             (0x80000UL)               /*!< CLR19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR20_Pos             (20UL)                    /*!< CLR20 (Bit 20)                                        */
#define GPIO_GPCLR0_CLR20_Msk             (0x100000UL)              /*!< CLR20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR21_Pos             (21UL)                    /*!< CLR21 (Bit 21)                                        */
#define GPIO_GPCLR0_CLR21_Msk             (0x200000UL)              /*!< CLR21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR22_Pos             (22UL)                    /*!< CLR22 (Bit 22)                                        */
#define GPIO_GPCLR0_CLR22_Msk             (0x400000UL)              /*!< CLR22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR23_Pos             (23UL)                    /*!< CLR23 (Bit 23)                                        */
#define GPIO_GPCLR0_CLR23_Msk             (0x800000UL)              /*!< CLR23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR24_Pos             (24UL)                    /*!< CLR24 (Bit 24)                                        */
#define GPIO_GPCLR0_CLR24_Msk             (0x1000000UL)             /*!< CLR24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR25_Pos             (25UL)                    /*!< CLR25 (Bit 25)                                        */
#define GPIO_GPCLR0_CLR25_Msk             (0x2000000UL)             /*!< CLR25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR26_Pos             (26UL)                    /*!< CLR26 (Bit 26)                                        */
#define GPIO_GPCLR0_CLR26_Msk             (0x4000000UL)             /*!< CLR26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR27_Pos             (27UL)                    /*!< CLR27 (Bit 27)                                        */
#define GPIO_GPCLR0_CLR27_Msk             (0x8000000UL)             /*!< CLR27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR28_Pos             (28UL)                    /*!< CLR28 (Bit 28)                                        */
#define GPIO_GPCLR0_CLR28_Msk             (0x10000000UL)            /*!< CLR28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR29_Pos             (29UL)                    /*!< CLR29 (Bit 29)                                        */
#define GPIO_GPCLR0_CLR29_Msk             (0x20000000UL)            /*!< CLR29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR30_Pos             (30UL)                    /*!< CLR30 (Bit 30)                                        */
#define GPIO_GPCLR0_CLR30_Msk             (0x40000000UL)            /*!< CLR30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR31_Pos             (31UL)                    /*!< CLR31 (Bit 31)                                        */
#define GPIO_GPCLR0_CLR31_Msk             (0x80000000UL)            /*!< CLR31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPCLR1  ========================================================= */
#define GPIO_GPCLR1_CLR32_Pos             (0UL)                     /*!< CLR32 (Bit 0)                                         */
#define GPIO_GPCLR1_CLR32_Msk             (0x1UL)                   /*!< CLR32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR33_Pos             (1UL)                     /*!< CLR33 (Bit 1)                                         */
#define GPIO_GPCLR1_CLR33_Msk             (0x2UL)                   /*!< CLR33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR34_Pos             (2UL)                     /*!< CLR34 (Bit 2)                                         */
#define GPIO_GPCLR1_CLR34_Msk             (0x4UL)                   /*!< CLR34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR35_Pos             (3UL)                     /*!< CLR35 (Bit 3)                                         */
#define GPIO_GPCLR1_CLR35_Msk             (0x8UL)                   /*!< CLR35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR36_Pos             (4UL)                     /*!< CLR36 (Bit 4)                                         */
#define GPIO_GPCLR1_CLR36_Msk             (0x10UL)                  /*!< CLR36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR37_Pos             (5UL)                     /*!< CLR37 (Bit 5)                                         */
#define GPIO_GPCLR1_CLR37_Msk             (0x20UL)                  /*!< CLR37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR38_Pos             (6UL)                     /*!< CLR38 (Bit 6)                                         */
#define GPIO_GPCLR1_CLR38_Msk             (0x40UL)                  /*!< CLR38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR39_Pos             (7UL)                     /*!< CLR39 (Bit 7)                                         */
#define GPIO_GPCLR1_CLR39_Msk             (0x80UL)                  /*!< CLR39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR40_Pos             (8UL)                     /*!< CLR40 (Bit 8)                                         */
#define GPIO_GPCLR1_CLR40_Msk             (0x100UL)                 /*!< CLR40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR41_Pos             (9UL)                     /*!< CLR41 (Bit 9)                                         */
#define GPIO_GPCLR1_CLR41_Msk             (0x200UL)                 /*!< CLR41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR42_Pos             (10UL)                    /*!< CLR42 (Bit 10)                                        */
#define GPIO_GPCLR1_CLR42_Msk             (0x400UL)                 /*!< CLR42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR43_Pos             (11UL)                    /*!< CLR43 (Bit 11)                                        */
#define GPIO_GPCLR1_CLR43_Msk             (0x800UL)                 /*!< CLR43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR44_Pos             (12UL)                    /*!< CLR44 (Bit 12)                                        */
#define GPIO_GPCLR1_CLR44_Msk             (0x1000UL)                /*!< CLR44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR45_Pos             (13UL)                    /*!< CLR45 (Bit 13)                                        */
#define GPIO_GPCLR1_CLR45_Msk             (0x2000UL)                /*!< CLR45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR46_Pos             (14UL)                    /*!< CLR46 (Bit 14)                                        */
#define GPIO_GPCLR1_CLR46_Msk             (0x4000UL)                /*!< CLR46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR47_Pos             (15UL)                    /*!< CLR47 (Bit 15)                                        */
#define GPIO_GPCLR1_CLR47_Msk             (0x8000UL)                /*!< CLR47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR48_Pos             (16UL)                    /*!< CLR48 (Bit 16)                                        */
#define GPIO_GPCLR1_CLR48_Msk             (0x10000UL)               /*!< CLR48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR49_Pos             (17UL)                    /*!< CLR49 (Bit 17)                                        */
#define GPIO_GPCLR1_CLR49_Msk             (0x20000UL)               /*!< CLR49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR50_Pos             (18UL)                    /*!< CLR50 (Bit 18)                                        */
#define GPIO_GPCLR1_CLR50_Msk             (0x40000UL)               /*!< CLR50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR51_Pos             (19UL)                    /*!< CLR51 (Bit 19)                                        */
#define GPIO_GPCLR1_CLR51_Msk             (0x80000UL)               /*!< CLR51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR52_Pos             (20UL)                    /*!< CLR52 (Bit 20)                                        */
#define GPIO_GPCLR1_CLR52_Msk             (0x100000UL)              /*!< CLR52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR53_Pos             (21UL)                    /*!< CLR53 (Bit 21)                                        */
#define GPIO_GPCLR1_CLR53_Msk             (0x200000UL)              /*!< CLR53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR54_Pos             (22UL)                    /*!< CLR54 (Bit 22)                                        */
#define GPIO_GPCLR1_CLR54_Msk             (0x400000UL)              /*!< CLR54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR55_Pos             (23UL)                    /*!< CLR55 (Bit 23)                                        */
#define GPIO_GPCLR1_CLR55_Msk             (0x800000UL)              /*!< CLR55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR56_Pos             (24UL)                    /*!< CLR56 (Bit 24)                                        */
#define GPIO_GPCLR1_CLR56_Msk             (0x1000000UL)             /*!< CLR56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR57_Pos             (25UL)                    /*!< CLR57 (Bit 25)                                        */
#define GPIO_GPCLR1_CLR57_Msk             (0x2000000UL)             /*!< CLR57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEV0  ========================================================= */
#define GPIO_GPLEV0_LEV0_Pos              (0UL)                     /*!< LEV0 (Bit 0)                                          */
#define GPIO_GPLEV0_LEV0_Msk              (0x1UL)                   /*!< LEV0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV1_Pos              (1UL)                     /*!< LEV1 (Bit 1)                                          */
#define GPIO_GPLEV0_LEV1_Msk              (0x2UL)                   /*!< LEV1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV2_Pos              (2UL)                     /*!< LEV2 (Bit 2)                                          */
#define GPIO_GPLEV0_LEV2_Msk              (0x4UL)                   /*!< LEV2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV3_Pos              (3UL)                     /*!< LEV3 (Bit 3)                                          */
#define GPIO_GPLEV0_LEV3_Msk              (0x8UL)                   /*!< LEV3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV4_Pos              (4UL)                     /*!< LEV4 (Bit 4)                                          */
#define GPIO_GPLEV0_LEV4_Msk              (0x10UL)                  /*!< LEV4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV5_Pos              (5UL)                     /*!< LEV5 (Bit 5)                                          */
#define GPIO_GPLEV0_LEV5_Msk              (0x20UL)                  /*!< LEV5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV6_Pos              (6UL)                     /*!< LEV6 (Bit 6)                                          */
#define GPIO_GPLEV0_LEV6_Msk              (0x40UL)                  /*!< LEV6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV7_Pos              (7UL)                     /*!< LEV7 (Bit 7)                                          */
#define GPIO_GPLEV0_LEV7_Msk              (0x80UL)                  /*!< LEV7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV8_Pos              (8UL)                     /*!< LEV8 (Bit 8)                                          */
#define GPIO_GPLEV0_LEV8_Msk              (0x100UL)                 /*!< LEV8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV9_Pos              (9UL)                     /*!< LEV9 (Bit 9)                                          */
#define GPIO_GPLEV0_LEV9_Msk              (0x200UL)                 /*!< LEV9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV10_Pos             (10UL)                    /*!< LEV10 (Bit 10)                                        */
#define GPIO_GPLEV0_LEV10_Msk             (0x400UL)                 /*!< LEV10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV11_Pos             (11UL)                    /*!< LEV11 (Bit 11)                                        */
#define GPIO_GPLEV0_LEV11_Msk             (0x800UL)                 /*!< LEV11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV12_Pos             (12UL)                    /*!< LEV12 (Bit 12)                                        */
#define GPIO_GPLEV0_LEV12_Msk             (0x1000UL)                /*!< LEV12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV13_Pos             (13UL)                    /*!< LEV13 (Bit 13)                                        */
#define GPIO_GPLEV0_LEV13_Msk             (0x2000UL)                /*!< LEV13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV14_Pos             (14UL)                    /*!< LEV14 (Bit 14)                                        */
#define GPIO_GPLEV0_LEV14_Msk             (0x4000UL)                /*!< LEV14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV15_Pos             (15UL)                    /*!< LEV15 (Bit 15)                                        */
#define GPIO_GPLEV0_LEV15_Msk             (0x8000UL)                /*!< LEV15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV16_Pos             (16UL)                    /*!< LEV16 (Bit 16)                                        */
#define GPIO_GPLEV0_LEV16_Msk             (0x10000UL)               /*!< LEV16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV17_Pos             (17UL)                    /*!< LEV17 (Bit 17)                                        */
#define GPIO_GPLEV0_LEV17_Msk             (0x20000UL)               /*!< LEV17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV18_Pos             (18UL)                    /*!< LEV18 (Bit 18)                                        */
#define GPIO_GPLEV0_LEV18_Msk             (0x40000UL)               /*!< LEV18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV19_Pos             (19UL)                    /*!< LEV19 (Bit 19)                                        */
#define GPIO_GPLEV0_LEV19_Msk             (0x80000UL)               /*!< LEV19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV20_Pos             (20UL)                    /*!< LEV20 (Bit 20)                                        */
#define GPIO_GPLEV0_LEV20_Msk             (0x100000UL)              /*!< LEV20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV21_Pos             (21UL)                    /*!< LEV21 (Bit 21)                                        */
#define GPIO_GPLEV0_LEV21_Msk             (0x200000UL)              /*!< LEV21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV22_Pos             (22UL)                    /*!< LEV22 (Bit 22)                                        */
#define GPIO_GPLEV0_LEV22_Msk             (0x400000UL)              /*!< LEV22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV23_Pos             (23UL)                    /*!< LEV23 (Bit 23)                                        */
#define GPIO_GPLEV0_LEV23_Msk             (0x800000UL)              /*!< LEV23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV24_Pos             (24UL)                    /*!< LEV24 (Bit 24)                                        */
#define GPIO_GPLEV0_LEV24_Msk             (0x1000000UL)             /*!< LEV24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV25_Pos             (25UL)                    /*!< LEV25 (Bit 25)                                        */
#define GPIO_GPLEV0_LEV25_Msk             (0x2000000UL)             /*!< LEV25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV26_Pos             (26UL)                    /*!< LEV26 (Bit 26)                                        */
#define GPIO_GPLEV0_LEV26_Msk             (0x4000000UL)             /*!< LEV26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV27_Pos             (27UL)                    /*!< LEV27 (Bit 27)                                        */
#define GPIO_GPLEV0_LEV27_Msk             (0x8000000UL)             /*!< LEV27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV28_Pos             (28UL)                    /*!< LEV28 (Bit 28)                                        */
#define GPIO_GPLEV0_LEV28_Msk             (0x10000000UL)            /*!< LEV28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV29_Pos             (29UL)                    /*!< LEV29 (Bit 29)                                        */
#define GPIO_GPLEV0_LEV29_Msk             (0x20000000UL)            /*!< LEV29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV30_Pos             (30UL)                    /*!< LEV30 (Bit 30)                                        */
#define GPIO_GPLEV0_LEV30_Msk             (0x40000000UL)            /*!< LEV30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV31_Pos             (31UL)                    /*!< LEV31 (Bit 31)                                        */
#define GPIO_GPLEV0_LEV31_Msk             (0x80000000UL)            /*!< LEV31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEV1  ========================================================= */
#define GPIO_GPLEV1_LEV32_Pos             (0UL)                     /*!< LEV32 (Bit 0)                                         */
#define GPIO_GPLEV1_LEV32_Msk             (0x1UL)                   /*!< LEV32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV33_Pos             (1UL)                     /*!< LEV33 (Bit 1)                                         */
#define GPIO_GPLEV1_LEV33_Msk             (0x2UL)                   /*!< LEV33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV34_Pos             (2UL)                     /*!< LEV34 (Bit 2)                                         */
#define GPIO_GPLEV1_LEV34_Msk             (0x4UL)                   /*!< LEV34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV35_Pos             (3UL)                     /*!< LEV35 (Bit 3)                                         */
#define GPIO_GPLEV1_LEV35_Msk             (0x8UL)                   /*!< LEV35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV36_Pos             (4UL)                     /*!< LEV36 (Bit 4)                                         */
#define GPIO_GPLEV1_LEV36_Msk             (0x10UL)                  /*!< LEV36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV37_Pos             (5UL)                     /*!< LEV37 (Bit 5)                                         */
#define GPIO_GPLEV1_LEV37_Msk             (0x20UL)                  /*!< LEV37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV38_Pos             (6UL)                     /*!< LEV38 (Bit 6)                                         */
#define GPIO_GPLEV1_LEV38_Msk             (0x40UL)                  /*!< LEV38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV39_Pos             (7UL)                     /*!< LEV39 (Bit 7)                                         */
#define GPIO_GPLEV1_LEV39_Msk             (0x80UL)                  /*!< LEV39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV40_Pos             (8UL)                     /*!< LEV40 (Bit 8)                                         */
#define GPIO_GPLEV1_LEV40_Msk             (0x100UL)                 /*!< LEV40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV41_Pos             (9UL)                     /*!< LEV41 (Bit 9)                                         */
#define GPIO_GPLEV1_LEV41_Msk             (0x200UL)                 /*!< LEV41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV42_Pos             (10UL)                    /*!< LEV42 (Bit 10)                                        */
#define GPIO_GPLEV1_LEV42_Msk             (0x400UL)                 /*!< LEV42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV43_Pos             (11UL)                    /*!< LEV43 (Bit 11)                                        */
#define GPIO_GPLEV1_LEV43_Msk             (0x800UL)                 /*!< LEV43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV44_Pos             (12UL)                    /*!< LEV44 (Bit 12)                                        */
#define GPIO_GPLEV1_LEV44_Msk             (0x1000UL)                /*!< LEV44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV45_Pos             (13UL)                    /*!< LEV45 (Bit 13)                                        */
#define GPIO_GPLEV1_LEV45_Msk             (0x2000UL)                /*!< LEV45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV46_Pos             (14UL)                    /*!< LEV46 (Bit 14)                                        */
#define GPIO_GPLEV1_LEV46_Msk             (0x4000UL)                /*!< LEV46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV47_Pos             (15UL)                    /*!< LEV47 (Bit 15)                                        */
#define GPIO_GPLEV1_LEV47_Msk             (0x8000UL)                /*!< LEV47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV48_Pos             (16UL)                    /*!< LEV48 (Bit 16)                                        */
#define GPIO_GPLEV1_LEV48_Msk             (0x10000UL)               /*!< LEV48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV49_Pos             (17UL)                    /*!< LEV49 (Bit 17)                                        */
#define GPIO_GPLEV1_LEV49_Msk             (0x20000UL)               /*!< LEV49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV50_Pos             (18UL)                    /*!< LEV50 (Bit 18)                                        */
#define GPIO_GPLEV1_LEV50_Msk             (0x40000UL)               /*!< LEV50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV51_Pos             (19UL)                    /*!< LEV51 (Bit 19)                                        */
#define GPIO_GPLEV1_LEV51_Msk             (0x80000UL)               /*!< LEV51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV52_Pos             (20UL)                    /*!< LEV52 (Bit 20)                                        */
#define GPIO_GPLEV1_LEV52_Msk             (0x100000UL)              /*!< LEV52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV53_Pos             (21UL)                    /*!< LEV53 (Bit 21)                                        */
#define GPIO_GPLEV1_LEV53_Msk             (0x200000UL)              /*!< LEV53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV54_Pos             (22UL)                    /*!< LEV54 (Bit 22)                                        */
#define GPIO_GPLEV1_LEV54_Msk             (0x400000UL)              /*!< LEV54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV55_Pos             (23UL)                    /*!< LEV55 (Bit 23)                                        */
#define GPIO_GPLEV1_LEV55_Msk             (0x800000UL)              /*!< LEV55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV56_Pos             (24UL)                    /*!< LEV56 (Bit 24)                                        */
#define GPIO_GPLEV1_LEV56_Msk             (0x1000000UL)             /*!< LEV56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV57_Pos             (25UL)                    /*!< LEV57 (Bit 25)                                        */
#define GPIO_GPLEV1_LEV57_Msk             (0x2000000UL)             /*!< LEV57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPEDS0  ========================================================= */
#define GPIO_GPEDS0_EDS0_Pos              (0UL)                     /*!< EDS0 (Bit 0)                                          */
#define GPIO_GPEDS0_EDS0_Msk              (0x1UL)                   /*!< EDS0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS1_Pos              (1UL)                     /*!< EDS1 (Bit 1)                                          */
#define GPIO_GPEDS0_EDS1_Msk              (0x2UL)                   /*!< EDS1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS2_Pos              (2UL)                     /*!< EDS2 (Bit 2)                                          */
#define GPIO_GPEDS0_EDS2_Msk              (0x4UL)                   /*!< EDS2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS3_Pos              (3UL)                     /*!< EDS3 (Bit 3)                                          */
#define GPIO_GPEDS0_EDS3_Msk              (0x8UL)                   /*!< EDS3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS4_Pos              (4UL)                     /*!< EDS4 (Bit 4)                                          */
#define GPIO_GPEDS0_EDS4_Msk              (0x10UL)                  /*!< EDS4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS5_Pos              (5UL)                     /*!< EDS5 (Bit 5)                                          */
#define GPIO_GPEDS0_EDS5_Msk              (0x20UL)                  /*!< EDS5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS6_Pos              (6UL)                     /*!< EDS6 (Bit 6)                                          */
#define GPIO_GPEDS0_EDS6_Msk              (0x40UL)                  /*!< EDS6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS7_Pos              (7UL)                     /*!< EDS7 (Bit 7)                                          */
#define GPIO_GPEDS0_EDS7_Msk              (0x80UL)                  /*!< EDS7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS8_Pos              (8UL)                     /*!< EDS8 (Bit 8)                                          */
#define GPIO_GPEDS0_EDS8_Msk              (0x100UL)                 /*!< EDS8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS9_Pos              (9UL)                     /*!< EDS9 (Bit 9)                                          */
#define GPIO_GPEDS0_EDS9_Msk              (0x200UL)                 /*!< EDS9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS10_Pos             (10UL)                    /*!< EDS10 (Bit 10)                                        */
#define GPIO_GPEDS0_EDS10_Msk             (0x400UL)                 /*!< EDS10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS11_Pos             (11UL)                    /*!< EDS11 (Bit 11)                                        */
#define GPIO_GPEDS0_EDS11_Msk             (0x800UL)                 /*!< EDS11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS12_Pos             (12UL)                    /*!< EDS12 (Bit 12)                                        */
#define GPIO_GPEDS0_EDS12_Msk             (0x1000UL)                /*!< EDS12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS13_Pos             (13UL)                    /*!< EDS13 (Bit 13)                                        */
#define GPIO_GPEDS0_EDS13_Msk             (0x2000UL)                /*!< EDS13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS14_Pos             (14UL)                    /*!< EDS14 (Bit 14)                                        */
#define GPIO_GPEDS0_EDS14_Msk             (0x4000UL)                /*!< EDS14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS15_Pos             (15UL)                    /*!< EDS15 (Bit 15)                                        */
#define GPIO_GPEDS0_EDS15_Msk             (0x8000UL)                /*!< EDS15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS16_Pos             (16UL)                    /*!< EDS16 (Bit 16)                                        */
#define GPIO_GPEDS0_EDS16_Msk             (0x10000UL)               /*!< EDS16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS17_Pos             (17UL)                    /*!< EDS17 (Bit 17)                                        */
#define GPIO_GPEDS0_EDS17_Msk             (0x20000UL)               /*!< EDS17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS18_Pos             (18UL)                    /*!< EDS18 (Bit 18)                                        */
#define GPIO_GPEDS0_EDS18_Msk             (0x40000UL)               /*!< EDS18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS19_Pos             (19UL)                    /*!< EDS19 (Bit 19)                                        */
#define GPIO_GPEDS0_EDS19_Msk             (0x80000UL)               /*!< EDS19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS20_Pos             (20UL)                    /*!< EDS20 (Bit 20)                                        */
#define GPIO_GPEDS0_EDS20_Msk             (0x100000UL)              /*!< EDS20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS21_Pos             (21UL)                    /*!< EDS21 (Bit 21)                                        */
#define GPIO_GPEDS0_EDS21_Msk             (0x200000UL)              /*!< EDS21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS22_Pos             (22UL)                    /*!< EDS22 (Bit 22)                                        */
#define GPIO_GPEDS0_EDS22_Msk             (0x400000UL)              /*!< EDS22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS23_Pos             (23UL)                    /*!< EDS23 (Bit 23)                                        */
#define GPIO_GPEDS0_EDS23_Msk             (0x800000UL)              /*!< EDS23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS24_Pos             (24UL)                    /*!< EDS24 (Bit 24)                                        */
#define GPIO_GPEDS0_EDS24_Msk             (0x1000000UL)             /*!< EDS24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS25_Pos             (25UL)                    /*!< EDS25 (Bit 25)                                        */
#define GPIO_GPEDS0_EDS25_Msk             (0x2000000UL)             /*!< EDS25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS26_Pos             (26UL)                    /*!< EDS26 (Bit 26)                                        */
#define GPIO_GPEDS0_EDS26_Msk             (0x4000000UL)             /*!< EDS26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS27_Pos             (27UL)                    /*!< EDS27 (Bit 27)                                        */
#define GPIO_GPEDS0_EDS27_Msk             (0x8000000UL)             /*!< EDS27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS28_Pos             (28UL)                    /*!< EDS28 (Bit 28)                                        */
#define GPIO_GPEDS0_EDS28_Msk             (0x10000000UL)            /*!< EDS28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS29_Pos             (29UL)                    /*!< EDS29 (Bit 29)                                        */
#define GPIO_GPEDS0_EDS29_Msk             (0x20000000UL)            /*!< EDS29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS30_Pos             (30UL)                    /*!< EDS30 (Bit 30)                                        */
#define GPIO_GPEDS0_EDS30_Msk             (0x40000000UL)            /*!< EDS30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS31_Pos             (31UL)                    /*!< EDS31 (Bit 31)                                        */
#define GPIO_GPEDS0_EDS31_Msk             (0x80000000UL)            /*!< EDS31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPEDS1  ========================================================= */
#define GPIO_GPEDS1_EDS32_Pos             (0UL)                     /*!< EDS32 (Bit 0)                                         */
#define GPIO_GPEDS1_EDS32_Msk             (0x1UL)                   /*!< EDS32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS33_Pos             (1UL)                     /*!< EDS33 (Bit 1)                                         */
#define GPIO_GPEDS1_EDS33_Msk             (0x2UL)                   /*!< EDS33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS34_Pos             (2UL)                     /*!< EDS34 (Bit 2)                                         */
#define GPIO_GPEDS1_EDS34_Msk             (0x4UL)                   /*!< EDS34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS35_Pos             (3UL)                     /*!< EDS35 (Bit 3)                                         */
#define GPIO_GPEDS1_EDS35_Msk             (0x8UL)                   /*!< EDS35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS36_Pos             (4UL)                     /*!< EDS36 (Bit 4)                                         */
#define GPIO_GPEDS1_EDS36_Msk             (0x10UL)                  /*!< EDS36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS37_Pos             (5UL)                     /*!< EDS37 (Bit 5)                                         */
#define GPIO_GPEDS1_EDS37_Msk             (0x20UL)                  /*!< EDS37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS38_Pos             (6UL)                     /*!< EDS38 (Bit 6)                                         */
#define GPIO_GPEDS1_EDS38_Msk             (0x40UL)                  /*!< EDS38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS39_Pos             (7UL)                     /*!< EDS39 (Bit 7)                                         */
#define GPIO_GPEDS1_EDS39_Msk             (0x80UL)                  /*!< EDS39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS40_Pos             (8UL)                     /*!< EDS40 (Bit 8)                                         */
#define GPIO_GPEDS1_EDS40_Msk             (0x100UL)                 /*!< EDS40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS41_Pos             (9UL)                     /*!< EDS41 (Bit 9)                                         */
#define GPIO_GPEDS1_EDS41_Msk             (0x200UL)                 /*!< EDS41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS42_Pos             (10UL)                    /*!< EDS42 (Bit 10)                                        */
#define GPIO_GPEDS1_EDS42_Msk             (0x400UL)                 /*!< EDS42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS43_Pos             (11UL)                    /*!< EDS43 (Bit 11)                                        */
#define GPIO_GPEDS1_EDS43_Msk             (0x800UL)                 /*!< EDS43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS44_Pos             (12UL)                    /*!< EDS44 (Bit 12)                                        */
#define GPIO_GPEDS1_EDS44_Msk             (0x1000UL)                /*!< EDS44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS45_Pos             (13UL)                    /*!< EDS45 (Bit 13)                                        */
#define GPIO_GPEDS1_EDS45_Msk             (0x2000UL)                /*!< EDS45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS46_Pos             (14UL)                    /*!< EDS46 (Bit 14)                                        */
#define GPIO_GPEDS1_EDS46_Msk             (0x4000UL)                /*!< EDS46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS47_Pos             (15UL)                    /*!< EDS47 (Bit 15)                                        */
#define GPIO_GPEDS1_EDS47_Msk             (0x8000UL)                /*!< EDS47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS48_Pos             (16UL)                    /*!< EDS48 (Bit 16)                                        */
#define GPIO_GPEDS1_EDS48_Msk             (0x10000UL)               /*!< EDS48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS49_Pos             (17UL)                    /*!< EDS49 (Bit 17)                                        */
#define GPIO_GPEDS1_EDS49_Msk             (0x20000UL)               /*!< EDS49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS50_Pos             (18UL)                    /*!< EDS50 (Bit 18)                                        */
#define GPIO_GPEDS1_EDS50_Msk             (0x40000UL)               /*!< EDS50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS51_Pos             (19UL)                    /*!< EDS51 (Bit 19)                                        */
#define GPIO_GPEDS1_EDS51_Msk             (0x80000UL)               /*!< EDS51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS52_Pos             (20UL)                    /*!< EDS52 (Bit 20)                                        */
#define GPIO_GPEDS1_EDS52_Msk             (0x100000UL)              /*!< EDS52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS53_Pos             (21UL)                    /*!< EDS53 (Bit 21)                                        */
#define GPIO_GPEDS1_EDS53_Msk             (0x200000UL)              /*!< EDS53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS54_Pos             (22UL)                    /*!< EDS54 (Bit 22)                                        */
#define GPIO_GPEDS1_EDS54_Msk             (0x400000UL)              /*!< EDS54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS55_Pos             (23UL)                    /*!< EDS55 (Bit 23)                                        */
#define GPIO_GPEDS1_EDS55_Msk             (0x800000UL)              /*!< EDS55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS56_Pos             (24UL)                    /*!< EDS56 (Bit 24)                                        */
#define GPIO_GPEDS1_EDS56_Msk             (0x1000000UL)             /*!< EDS56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS57_Pos             (25UL)                    /*!< EDS57 (Bit 25)                                        */
#define GPIO_GPEDS1_EDS57_Msk             (0x2000000UL)             /*!< EDS57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPREN0  ========================================================= */
#define GPIO_GPREN0_REN0_Pos              (0UL)                     /*!< REN0 (Bit 0)                                          */
#define GPIO_GPREN0_REN0_Msk              (0x1UL)                   /*!< REN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN1_Pos              (1UL)                     /*!< REN1 (Bit 1)                                          */
#define GPIO_GPREN0_REN1_Msk              (0x2UL)                   /*!< REN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN2_Pos              (2UL)                     /*!< REN2 (Bit 2)                                          */
#define GPIO_GPREN0_REN2_Msk              (0x4UL)                   /*!< REN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN3_Pos              (3UL)                     /*!< REN3 (Bit 3)                                          */
#define GPIO_GPREN0_REN3_Msk              (0x8UL)                   /*!< REN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN4_Pos              (4UL)                     /*!< REN4 (Bit 4)                                          */
#define GPIO_GPREN0_REN4_Msk              (0x10UL)                  /*!< REN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN5_Pos              (5UL)                     /*!< REN5 (Bit 5)                                          */
#define GPIO_GPREN0_REN5_Msk              (0x20UL)                  /*!< REN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN6_Pos              (6UL)                     /*!< REN6 (Bit 6)                                          */
#define GPIO_GPREN0_REN6_Msk              (0x40UL)                  /*!< REN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN7_Pos              (7UL)                     /*!< REN7 (Bit 7)                                          */
#define GPIO_GPREN0_REN7_Msk              (0x80UL)                  /*!< REN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN8_Pos              (8UL)                     /*!< REN8 (Bit 8)                                          */
#define GPIO_GPREN0_REN8_Msk              (0x100UL)                 /*!< REN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN9_Pos              (9UL)                     /*!< REN9 (Bit 9)                                          */
#define GPIO_GPREN0_REN9_Msk              (0x200UL)                 /*!< REN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN10_Pos             (10UL)                    /*!< REN10 (Bit 10)                                        */
#define GPIO_GPREN0_REN10_Msk             (0x400UL)                 /*!< REN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN11_Pos             (11UL)                    /*!< REN11 (Bit 11)                                        */
#define GPIO_GPREN0_REN11_Msk             (0x800UL)                 /*!< REN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN12_Pos             (12UL)                    /*!< REN12 (Bit 12)                                        */
#define GPIO_GPREN0_REN12_Msk             (0x1000UL)                /*!< REN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN13_Pos             (13UL)                    /*!< REN13 (Bit 13)                                        */
#define GPIO_GPREN0_REN13_Msk             (0x2000UL)                /*!< REN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN14_Pos             (14UL)                    /*!< REN14 (Bit 14)                                        */
#define GPIO_GPREN0_REN14_Msk             (0x4000UL)                /*!< REN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN15_Pos             (15UL)                    /*!< REN15 (Bit 15)                                        */
#define GPIO_GPREN0_REN15_Msk             (0x8000UL)                /*!< REN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN16_Pos             (16UL)                    /*!< REN16 (Bit 16)                                        */
#define GPIO_GPREN0_REN16_Msk             (0x10000UL)               /*!< REN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN17_Pos             (17UL)                    /*!< REN17 (Bit 17)                                        */
#define GPIO_GPREN0_REN17_Msk             (0x20000UL)               /*!< REN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN18_Pos             (18UL)                    /*!< REN18 (Bit 18)                                        */
#define GPIO_GPREN0_REN18_Msk             (0x40000UL)               /*!< REN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN19_Pos             (19UL)                    /*!< REN19 (Bit 19)                                        */
#define GPIO_GPREN0_REN19_Msk             (0x80000UL)               /*!< REN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN20_Pos             (20UL)                    /*!< REN20 (Bit 20)                                        */
#define GPIO_GPREN0_REN20_Msk             (0x100000UL)              /*!< REN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN21_Pos             (21UL)                    /*!< REN21 (Bit 21)                                        */
#define GPIO_GPREN0_REN21_Msk             (0x200000UL)              /*!< REN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN22_Pos             (22UL)                    /*!< REN22 (Bit 22)                                        */
#define GPIO_GPREN0_REN22_Msk             (0x400000UL)              /*!< REN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN23_Pos             (23UL)                    /*!< REN23 (Bit 23)                                        */
#define GPIO_GPREN0_REN23_Msk             (0x800000UL)              /*!< REN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN24_Pos             (24UL)                    /*!< REN24 (Bit 24)                                        */
#define GPIO_GPREN0_REN24_Msk             (0x1000000UL)             /*!< REN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN25_Pos             (25UL)                    /*!< REN25 (Bit 25)                                        */
#define GPIO_GPREN0_REN25_Msk             (0x2000000UL)             /*!< REN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN26_Pos             (26UL)                    /*!< REN26 (Bit 26)                                        */
#define GPIO_GPREN0_REN26_Msk             (0x4000000UL)             /*!< REN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN27_Pos             (27UL)                    /*!< REN27 (Bit 27)                                        */
#define GPIO_GPREN0_REN27_Msk             (0x8000000UL)             /*!< REN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN28_Pos             (28UL)                    /*!< REN28 (Bit 28)                                        */
#define GPIO_GPREN0_REN28_Msk             (0x10000000UL)            /*!< REN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN29_Pos             (29UL)                    /*!< REN29 (Bit 29)                                        */
#define GPIO_GPREN0_REN29_Msk             (0x20000000UL)            /*!< REN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN30_Pos             (30UL)                    /*!< REN30 (Bit 30)                                        */
#define GPIO_GPREN0_REN30_Msk             (0x40000000UL)            /*!< REN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN31_Pos             (31UL)                    /*!< REN31 (Bit 31)                                        */
#define GPIO_GPREN0_REN31_Msk             (0x80000000UL)            /*!< REN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPREN1  ========================================================= */
#define GPIO_GPREN1_REN32_Pos             (0UL)                     /*!< REN32 (Bit 0)                                         */
#define GPIO_GPREN1_REN32_Msk             (0x1UL)                   /*!< REN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN33_Pos             (1UL)                     /*!< REN33 (Bit 1)                                         */
#define GPIO_GPREN1_REN33_Msk             (0x2UL)                   /*!< REN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN34_Pos             (2UL)                     /*!< REN34 (Bit 2)                                         */
#define GPIO_GPREN1_REN34_Msk             (0x4UL)                   /*!< REN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN35_Pos             (3UL)                     /*!< REN35 (Bit 3)                                         */
#define GPIO_GPREN1_REN35_Msk             (0x8UL)                   /*!< REN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN36_Pos             (4UL)                     /*!< REN36 (Bit 4)                                         */
#define GPIO_GPREN1_REN36_Msk             (0x10UL)                  /*!< REN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN37_Pos             (5UL)                     /*!< REN37 (Bit 5)                                         */
#define GPIO_GPREN1_REN37_Msk             (0x20UL)                  /*!< REN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN38_Pos             (6UL)                     /*!< REN38 (Bit 6)                                         */
#define GPIO_GPREN1_REN38_Msk             (0x40UL)                  /*!< REN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN39_Pos             (7UL)                     /*!< REN39 (Bit 7)                                         */
#define GPIO_GPREN1_REN39_Msk             (0x80UL)                  /*!< REN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN40_Pos             (8UL)                     /*!< REN40 (Bit 8)                                         */
#define GPIO_GPREN1_REN40_Msk             (0x100UL)                 /*!< REN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN41_Pos             (9UL)                     /*!< REN41 (Bit 9)                                         */
#define GPIO_GPREN1_REN41_Msk             (0x200UL)                 /*!< REN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN42_Pos             (10UL)                    /*!< REN42 (Bit 10)                                        */
#define GPIO_GPREN1_REN42_Msk             (0x400UL)                 /*!< REN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN43_Pos             (11UL)                    /*!< REN43 (Bit 11)                                        */
#define GPIO_GPREN1_REN43_Msk             (0x800UL)                 /*!< REN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN44_Pos             (12UL)                    /*!< REN44 (Bit 12)                                        */
#define GPIO_GPREN1_REN44_Msk             (0x1000UL)                /*!< REN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN45_Pos             (13UL)                    /*!< REN45 (Bit 13)                                        */
#define GPIO_GPREN1_REN45_Msk             (0x2000UL)                /*!< REN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN46_Pos             (14UL)                    /*!< REN46 (Bit 14)                                        */
#define GPIO_GPREN1_REN46_Msk             (0x4000UL)                /*!< REN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN47_Pos             (15UL)                    /*!< REN47 (Bit 15)                                        */
#define GPIO_GPREN1_REN47_Msk             (0x8000UL)                /*!< REN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN48_Pos             (16UL)                    /*!< REN48 (Bit 16)                                        */
#define GPIO_GPREN1_REN48_Msk             (0x10000UL)               /*!< REN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN49_Pos             (17UL)                    /*!< REN49 (Bit 17)                                        */
#define GPIO_GPREN1_REN49_Msk             (0x20000UL)               /*!< REN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN50_Pos             (18UL)                    /*!< REN50 (Bit 18)                                        */
#define GPIO_GPREN1_REN50_Msk             (0x40000UL)               /*!< REN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN51_Pos             (19UL)                    /*!< REN51 (Bit 19)                                        */
#define GPIO_GPREN1_REN51_Msk             (0x80000UL)               /*!< REN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN52_Pos             (20UL)                    /*!< REN52 (Bit 20)                                        */
#define GPIO_GPREN1_REN52_Msk             (0x100000UL)              /*!< REN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN53_Pos             (21UL)                    /*!< REN53 (Bit 21)                                        */
#define GPIO_GPREN1_REN53_Msk             (0x200000UL)              /*!< REN53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN54_Pos             (22UL)                    /*!< REN54 (Bit 22)                                        */
#define GPIO_GPREN1_REN54_Msk             (0x400000UL)              /*!< REN54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN55_Pos             (23UL)                    /*!< REN55 (Bit 23)                                        */
#define GPIO_GPREN1_REN55_Msk             (0x800000UL)              /*!< REN55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN56_Pos             (24UL)                    /*!< REN56 (Bit 24)                                        */
#define GPIO_GPREN1_REN56_Msk             (0x1000000UL)             /*!< REN56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN57_Pos             (25UL)                    /*!< REN57 (Bit 25)                                        */
#define GPIO_GPREN1_REN57_Msk             (0x2000000UL)             /*!< REN57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPFEN0  ========================================================= */
#define GPIO_GPFEN0_FEN0_Pos              (0UL)                     /*!< FEN0 (Bit 0)                                          */
#define GPIO_GPFEN0_FEN0_Msk              (0x1UL)                   /*!< FEN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN1_Pos              (1UL)                     /*!< FEN1 (Bit 1)                                          */
#define GPIO_GPFEN0_FEN1_Msk              (0x2UL)                   /*!< FEN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN2_Pos              (2UL)                     /*!< FEN2 (Bit 2)                                          */
#define GPIO_GPFEN0_FEN2_Msk              (0x4UL)                   /*!< FEN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN3_Pos              (3UL)                     /*!< FEN3 (Bit 3)                                          */
#define GPIO_GPFEN0_FEN3_Msk              (0x8UL)                   /*!< FEN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN4_Pos              (4UL)                     /*!< FEN4 (Bit 4)                                          */
#define GPIO_GPFEN0_FEN4_Msk              (0x10UL)                  /*!< FEN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN5_Pos              (5UL)                     /*!< FEN5 (Bit 5)                                          */
#define GPIO_GPFEN0_FEN5_Msk              (0x20UL)                  /*!< FEN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN6_Pos              (6UL)                     /*!< FEN6 (Bit 6)                                          */
#define GPIO_GPFEN0_FEN6_Msk              (0x40UL)                  /*!< FEN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN7_Pos              (7UL)                     /*!< FEN7 (Bit 7)                                          */
#define GPIO_GPFEN0_FEN7_Msk              (0x80UL)                  /*!< FEN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN8_Pos              (8UL)                     /*!< FEN8 (Bit 8)                                          */
#define GPIO_GPFEN0_FEN8_Msk              (0x100UL)                 /*!< FEN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN9_Pos              (9UL)                     /*!< FEN9 (Bit 9)                                          */
#define GPIO_GPFEN0_FEN9_Msk              (0x200UL)                 /*!< FEN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN10_Pos             (10UL)                    /*!< FEN10 (Bit 10)                                        */
#define GPIO_GPFEN0_FEN10_Msk             (0x400UL)                 /*!< FEN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN11_Pos             (11UL)                    /*!< FEN11 (Bit 11)                                        */
#define GPIO_GPFEN0_FEN11_Msk             (0x800UL)                 /*!< FEN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN12_Pos             (12UL)                    /*!< FEN12 (Bit 12)                                        */
#define GPIO_GPFEN0_FEN12_Msk             (0x1000UL)                /*!< FEN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN13_Pos             (13UL)                    /*!< FEN13 (Bit 13)                                        */
#define GPIO_GPFEN0_FEN13_Msk             (0x2000UL)                /*!< FEN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN14_Pos             (14UL)                    /*!< FEN14 (Bit 14)                                        */
#define GPIO_GPFEN0_FEN14_Msk             (0x4000UL)                /*!< FEN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN15_Pos             (15UL)                    /*!< FEN15 (Bit 15)                                        */
#define GPIO_GPFEN0_FEN15_Msk             (0x8000UL)                /*!< FEN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN16_Pos             (16UL)                    /*!< FEN16 (Bit 16)                                        */
#define GPIO_GPFEN0_FEN16_Msk             (0x10000UL)               /*!< FEN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN17_Pos             (17UL)                    /*!< FEN17 (Bit 17)                                        */
#define GPIO_GPFEN0_FEN17_Msk             (0x20000UL)               /*!< FEN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN18_Pos             (18UL)                    /*!< FEN18 (Bit 18)                                        */
#define GPIO_GPFEN0_FEN18_Msk             (0x40000UL)               /*!< FEN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN19_Pos             (19UL)                    /*!< FEN19 (Bit 19)                                        */
#define GPIO_GPFEN0_FEN19_Msk             (0x80000UL)               /*!< FEN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN20_Pos             (20UL)                    /*!< FEN20 (Bit 20)                                        */
#define GPIO_GPFEN0_FEN20_Msk             (0x100000UL)              /*!< FEN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN21_Pos             (21UL)                    /*!< FEN21 (Bit 21)                                        */
#define GPIO_GPFEN0_FEN21_Msk             (0x200000UL)              /*!< FEN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN22_Pos             (22UL)                    /*!< FEN22 (Bit 22)                                        */
#define GPIO_GPFEN0_FEN22_Msk             (0x400000UL)              /*!< FEN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN23_Pos             (23UL)                    /*!< FEN23 (Bit 23)                                        */
#define GPIO_GPFEN0_FEN23_Msk             (0x800000UL)              /*!< FEN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN24_Pos             (24UL)                    /*!< FEN24 (Bit 24)                                        */
#define GPIO_GPFEN0_FEN24_Msk             (0x1000000UL)             /*!< FEN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN25_Pos             (25UL)                    /*!< FEN25 (Bit 25)                                        */
#define GPIO_GPFEN0_FEN25_Msk             (0x2000000UL)             /*!< FEN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN26_Pos             (26UL)                    /*!< FEN26 (Bit 26)                                        */
#define GPIO_GPFEN0_FEN26_Msk             (0x4000000UL)             /*!< FEN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN27_Pos             (27UL)                    /*!< FEN27 (Bit 27)                                        */
#define GPIO_GPFEN0_FEN27_Msk             (0x8000000UL)             /*!< FEN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN28_Pos             (28UL)                    /*!< FEN28 (Bit 28)                                        */
#define GPIO_GPFEN0_FEN28_Msk             (0x10000000UL)            /*!< FEN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN29_Pos             (29UL)                    /*!< FEN29 (Bit 29)                                        */
#define GPIO_GPFEN0_FEN29_Msk             (0x20000000UL)            /*!< FEN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN30_Pos             (30UL)                    /*!< FEN30 (Bit 30)                                        */
#define GPIO_GPFEN0_FEN30_Msk             (0x40000000UL)            /*!< FEN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN31_Pos             (31UL)                    /*!< FEN31 (Bit 31)                                        */
#define GPIO_GPFEN0_FEN31_Msk             (0x80000000UL)            /*!< FEN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPFEN1  ========================================================= */
#define GPIO_GPFEN1_FEN32_Pos             (0UL)                     /*!< FEN32 (Bit 0)                                         */
#define GPIO_GPFEN1_FEN32_Msk             (0x1UL)                   /*!< FEN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN33_Pos             (1UL)                     /*!< FEN33 (Bit 1)                                         */
#define GPIO_GPFEN1_FEN33_Msk             (0x2UL)                   /*!< FEN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN34_Pos             (2UL)                     /*!< FEN34 (Bit 2)                                         */
#define GPIO_GPFEN1_FEN34_Msk             (0x4UL)                   /*!< FEN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN35_Pos             (3UL)                     /*!< FEN35 (Bit 3)                                         */
#define GPIO_GPFEN1_FEN35_Msk             (0x8UL)                   /*!< FEN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN36_Pos             (4UL)                     /*!< FEN36 (Bit 4)                                         */
#define GPIO_GPFEN1_FEN36_Msk             (0x10UL)                  /*!< FEN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN37_Pos             (5UL)                     /*!< FEN37 (Bit 5)                                         */
#define GPIO_GPFEN1_FEN37_Msk             (0x20UL)                  /*!< FEN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN38_Pos             (6UL)                     /*!< FEN38 (Bit 6)                                         */
#define GPIO_GPFEN1_FEN38_Msk             (0x40UL)                  /*!< FEN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN39_Pos             (7UL)                     /*!< FEN39 (Bit 7)                                         */
#define GPIO_GPFEN1_FEN39_Msk             (0x80UL)                  /*!< FEN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN40_Pos             (8UL)                     /*!< FEN40 (Bit 8)                                         */
#define GPIO_GPFEN1_FEN40_Msk             (0x100UL)                 /*!< FEN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN41_Pos             (9UL)                     /*!< FEN41 (Bit 9)                                         */
#define GPIO_GPFEN1_FEN41_Msk             (0x200UL)                 /*!< FEN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN42_Pos             (10UL)                    /*!< FEN42 (Bit 10)                                        */
#define GPIO_GPFEN1_FEN42_Msk             (0x400UL)                 /*!< FEN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN43_Pos             (11UL)                    /*!< FEN43 (Bit 11)                                        */
#define GPIO_GPFEN1_FEN43_Msk             (0x800UL)                 /*!< FEN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN44_Pos             (12UL)                    /*!< FEN44 (Bit 12)                                        */
#define GPIO_GPFEN1_FEN44_Msk             (0x1000UL)                /*!< FEN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN45_Pos             (13UL)                    /*!< FEN45 (Bit 13)                                        */
#define GPIO_GPFEN1_FEN45_Msk             (0x2000UL)                /*!< FEN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN46_Pos             (14UL)                    /*!< FEN46 (Bit 14)                                        */
#define GPIO_GPFEN1_FEN46_Msk             (0x4000UL)                /*!< FEN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN47_Pos             (15UL)                    /*!< FEN47 (Bit 15)                                        */
#define GPIO_GPFEN1_FEN47_Msk             (0x8000UL)                /*!< FEN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN48_Pos             (16UL)                    /*!< FEN48 (Bit 16)                                        */
#define GPIO_GPFEN1_FEN48_Msk             (0x10000UL)               /*!< FEN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN49_Pos             (17UL)                    /*!< FEN49 (Bit 17)                                        */
#define GPIO_GPFEN1_FEN49_Msk             (0x20000UL)               /*!< FEN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN50_Pos             (18UL)                    /*!< FEN50 (Bit 18)                                        */
#define GPIO_GPFEN1_FEN50_Msk             (0x40000UL)               /*!< FEN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN51_Pos             (19UL)                    /*!< FEN51 (Bit 19)                                        */
#define GPIO_GPFEN1_FEN51_Msk             (0x80000UL)               /*!< FEN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN52_Pos             (20UL)                    /*!< FEN52 (Bit 20)                                        */
#define GPIO_GPFEN1_FEN52_Msk             (0x100000UL)              /*!< FEN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN53_Pos             (21UL)                    /*!< FEN53 (Bit 21)                                        */
#define GPIO_GPFEN1_FEN53_Msk             (0x200000UL)              /*!< FEN53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN54_Pos             (22UL)                    /*!< FEN54 (Bit 22)                                        */
#define GPIO_GPFEN1_FEN54_Msk             (0x400000UL)              /*!< FEN54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN55_Pos             (23UL)                    /*!< FEN55 (Bit 23)                                        */
#define GPIO_GPFEN1_FEN55_Msk             (0x800000UL)              /*!< FEN55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN56_Pos             (24UL)                    /*!< FEN56 (Bit 24)                                        */
#define GPIO_GPFEN1_FEN56_Msk             (0x1000000UL)             /*!< FEN56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN57_Pos             (25UL)                    /*!< FEN57 (Bit 25)                                        */
#define GPIO_GPFEN1_FEN57_Msk             (0x2000000UL)             /*!< FEN57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPHEN0  ========================================================= */
#define GPIO_GPHEN0_HEN0_Pos              (0UL)                     /*!< HEN0 (Bit 0)                                          */
#define GPIO_GPHEN0_HEN0_Msk              (0x1UL)                   /*!< HEN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN1_Pos              (1UL)                     /*!< HEN1 (Bit 1)                                          */
#define GPIO_GPHEN0_HEN1_Msk              (0x2UL)                   /*!< HEN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN2_Pos              (2UL)                     /*!< HEN2 (Bit 2)                                          */
#define GPIO_GPHEN0_HEN2_Msk              (0x4UL)                   /*!< HEN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN3_Pos              (3UL)                     /*!< HEN3 (Bit 3)                                          */
#define GPIO_GPHEN0_HEN3_Msk              (0x8UL)                   /*!< HEN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN4_Pos              (4UL)                     /*!< HEN4 (Bit 4)                                          */
#define GPIO_GPHEN0_HEN4_Msk              (0x10UL)                  /*!< HEN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN5_Pos              (5UL)                     /*!< HEN5 (Bit 5)                                          */
#define GPIO_GPHEN0_HEN5_Msk              (0x20UL)                  /*!< HEN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN6_Pos              (6UL)                     /*!< HEN6 (Bit 6)                                          */
#define GPIO_GPHEN0_HEN6_Msk              (0x40UL)                  /*!< HEN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN7_Pos              (7UL)                     /*!< HEN7 (Bit 7)                                          */
#define GPIO_GPHEN0_HEN7_Msk              (0x80UL)                  /*!< HEN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN8_Pos              (8UL)                     /*!< HEN8 (Bit 8)                                          */
#define GPIO_GPHEN0_HEN8_Msk              (0x100UL)                 /*!< HEN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN9_Pos              (9UL)                     /*!< HEN9 (Bit 9)                                          */
#define GPIO_GPHEN0_HEN9_Msk              (0x200UL)                 /*!< HEN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN10_Pos             (10UL)                    /*!< HEN10 (Bit 10)                                        */
#define GPIO_GPHEN0_HEN10_Msk             (0x400UL)                 /*!< HEN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN11_Pos             (11UL)                    /*!< HEN11 (Bit 11)                                        */
#define GPIO_GPHEN0_HEN11_Msk             (0x800UL)                 /*!< HEN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN12_Pos             (12UL)                    /*!< HEN12 (Bit 12)                                        */
#define GPIO_GPHEN0_HEN12_Msk             (0x1000UL)                /*!< HEN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN13_Pos             (13UL)                    /*!< HEN13 (Bit 13)                                        */
#define GPIO_GPHEN0_HEN13_Msk             (0x2000UL)                /*!< HEN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN14_Pos             (14UL)                    /*!< HEN14 (Bit 14)                                        */
#define GPIO_GPHEN0_HEN14_Msk             (0x4000UL)                /*!< HEN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN15_Pos             (15UL)                    /*!< HEN15 (Bit 15)                                        */
#define GPIO_GPHEN0_HEN15_Msk             (0x8000UL)                /*!< HEN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN16_Pos             (16UL)                    /*!< HEN16 (Bit 16)                                        */
#define GPIO_GPHEN0_HEN16_Msk             (0x10000UL)               /*!< HEN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN17_Pos             (17UL)                    /*!< HEN17 (Bit 17)                                        */
#define GPIO_GPHEN0_HEN17_Msk             (0x20000UL)               /*!< HEN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN18_Pos             (18UL)                    /*!< HEN18 (Bit 18)                                        */
#define GPIO_GPHEN0_HEN18_Msk             (0x40000UL)               /*!< HEN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN19_Pos             (19UL)                    /*!< HEN19 (Bit 19)                                        */
#define GPIO_GPHEN0_HEN19_Msk             (0x80000UL)               /*!< HEN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN20_Pos             (20UL)                    /*!< HEN20 (Bit 20)                                        */
#define GPIO_GPHEN0_HEN20_Msk             (0x100000UL)              /*!< HEN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN21_Pos             (21UL)                    /*!< HEN21 (Bit 21)                                        */
#define GPIO_GPHEN0_HEN21_Msk             (0x200000UL)              /*!< HEN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN22_Pos             (22UL)                    /*!< HEN22 (Bit 22)                                        */
#define GPIO_GPHEN0_HEN22_Msk             (0x400000UL)              /*!< HEN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN23_Pos             (23UL)                    /*!< HEN23 (Bit 23)                                        */
#define GPIO_GPHEN0_HEN23_Msk             (0x800000UL)              /*!< HEN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN24_Pos             (24UL)                    /*!< HEN24 (Bit 24)                                        */
#define GPIO_GPHEN0_HEN24_Msk             (0x1000000UL)             /*!< HEN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN25_Pos             (25UL)                    /*!< HEN25 (Bit 25)                                        */
#define GPIO_GPHEN0_HEN25_Msk             (0x2000000UL)             /*!< HEN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN26_Pos             (26UL)                    /*!< HEN26 (Bit 26)                                        */
#define GPIO_GPHEN0_HEN26_Msk             (0x4000000UL)             /*!< HEN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN27_Pos             (27UL)                    /*!< HEN27 (Bit 27)                                        */
#define GPIO_GPHEN0_HEN27_Msk             (0x8000000UL)             /*!< HEN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN28_Pos             (28UL)                    /*!< HEN28 (Bit 28)                                        */
#define GPIO_GPHEN0_HEN28_Msk             (0x10000000UL)            /*!< HEN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN29_Pos             (29UL)                    /*!< HEN29 (Bit 29)                                        */
#define GPIO_GPHEN0_HEN29_Msk             (0x20000000UL)            /*!< HEN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN30_Pos             (30UL)                    /*!< HEN30 (Bit 30)                                        */
#define GPIO_GPHEN0_HEN30_Msk             (0x40000000UL)            /*!< HEN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN31_Pos             (31UL)                    /*!< HEN31 (Bit 31)                                        */
#define GPIO_GPHEN0_HEN31_Msk             (0x80000000UL)            /*!< HEN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPHEN1  ========================================================= */
#define GPIO_GPHEN1_HEN32_Pos             (0UL)                     /*!< HEN32 (Bit 0)                                         */
#define GPIO_GPHEN1_HEN32_Msk             (0x1UL)                   /*!< HEN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN33_Pos             (1UL)                     /*!< HEN33 (Bit 1)                                         */
#define GPIO_GPHEN1_HEN33_Msk             (0x2UL)                   /*!< HEN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN34_Pos             (2UL)                     /*!< HEN34 (Bit 2)                                         */
#define GPIO_GPHEN1_HEN34_Msk             (0x4UL)                   /*!< HEN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN35_Pos             (3UL)                     /*!< HEN35 (Bit 3)                                         */
#define GPIO_GPHEN1_HEN35_Msk             (0x8UL)                   /*!< HEN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN36_Pos             (4UL)                     /*!< HEN36 (Bit 4)                                         */
#define GPIO_GPHEN1_HEN36_Msk             (0x10UL)                  /*!< HEN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN37_Pos             (5UL)                     /*!< HEN37 (Bit 5)                                         */
#define GPIO_GPHEN1_HEN37_Msk             (0x20UL)                  /*!< HEN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN38_Pos             (6UL)                     /*!< HEN38 (Bit 6)                                         */
#define GPIO_GPHEN1_HEN38_Msk             (0x40UL)                  /*!< HEN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN39_Pos             (7UL)                     /*!< HEN39 (Bit 7)                                         */
#define GPIO_GPHEN1_HEN39_Msk             (0x80UL)                  /*!< HEN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN40_Pos             (8UL)                     /*!< HEN40 (Bit 8)                                         */
#define GPIO_GPHEN1_HEN40_Msk             (0x100UL)                 /*!< HEN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN41_Pos             (9UL)                     /*!< HEN41 (Bit 9)                                         */
#define GPIO_GPHEN1_HEN41_Msk             (0x200UL)                 /*!< HEN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN42_Pos             (10UL)                    /*!< HEN42 (Bit 10)                                        */
#define GPIO_GPHEN1_HEN42_Msk             (0x400UL)                 /*!< HEN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN43_Pos             (11UL)                    /*!< HEN43 (Bit 11)                                        */
#define GPIO_GPHEN1_HEN43_Msk             (0x800UL)                 /*!< HEN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN44_Pos             (12UL)                    /*!< HEN44 (Bit 12)                                        */
#define GPIO_GPHEN1_HEN44_Msk             (0x1000UL)                /*!< HEN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN45_Pos             (13UL)                    /*!< HEN45 (Bit 13)                                        */
#define GPIO_GPHEN1_HEN45_Msk             (0x2000UL)                /*!< HEN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN46_Pos             (14UL)                    /*!< HEN46 (Bit 14)                                        */
#define GPIO_GPHEN1_HEN46_Msk             (0x4000UL)                /*!< HEN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN47_Pos             (15UL)                    /*!< HEN47 (Bit 15)                                        */
#define GPIO_GPHEN1_HEN47_Msk             (0x8000UL)                /*!< HEN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN48_Pos             (16UL)                    /*!< HEN48 (Bit 16)                                        */
#define GPIO_GPHEN1_HEN48_Msk             (0x10000UL)               /*!< HEN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN49_Pos             (17UL)                    /*!< HEN49 (Bit 17)                                        */
#define GPIO_GPHEN1_HEN49_Msk             (0x20000UL)               /*!< HEN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN50_Pos             (18UL)                    /*!< HEN50 (Bit 18)                                        */
#define GPIO_GPHEN1_HEN50_Msk             (0x40000UL)               /*!< HEN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN51_Pos             (19UL)                    /*!< HEN51 (Bit 19)                                        */
#define GPIO_GPHEN1_HEN51_Msk             (0x80000UL)               /*!< HEN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN52_Pos             (20UL)                    /*!< HEN52 (Bit 20)                                        */
#define GPIO_GPHEN1_HEN52_Msk             (0x100000UL)              /*!< HEN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN53_Pos             (21UL)                    /*!< HEN53 (Bit 21)                                        */
#define GPIO_GPHEN1_HEN53_Msk             (0x200000UL)              /*!< HEN53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN54_Pos             (22UL)                    /*!< HEN54 (Bit 22)                                        */
#define GPIO_GPHEN1_HEN54_Msk             (0x400000UL)              /*!< HEN54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN55_Pos             (23UL)                    /*!< HEN55 (Bit 23)                                        */
#define GPIO_GPHEN1_HEN55_Msk             (0x800000UL)              /*!< HEN55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN56_Pos             (24UL)                    /*!< HEN56 (Bit 24)                                        */
#define GPIO_GPHEN1_HEN56_Msk             (0x1000000UL)             /*!< HEN56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN57_Pos             (25UL)                    /*!< HEN57 (Bit 25)                                        */
#define GPIO_GPHEN1_HEN57_Msk             (0x2000000UL)             /*!< HEN57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEN0  ========================================================= */
#define GPIO_GPLEN0_LEN0_Pos              (0UL)                     /*!< LEN0 (Bit 0)                                          */
#define GPIO_GPLEN0_LEN0_Msk              (0x1UL)                   /*!< LEN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN1_Pos              (1UL)                     /*!< LEN1 (Bit 1)                                          */
#define GPIO_GPLEN0_LEN1_Msk              (0x2UL)                   /*!< LEN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN2_Pos              (2UL)                     /*!< LEN2 (Bit 2)                                          */
#define GPIO_GPLEN0_LEN2_Msk              (0x4UL)                   /*!< LEN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN3_Pos              (3UL)                     /*!< LEN3 (Bit 3)                                          */
#define GPIO_GPLEN0_LEN3_Msk              (0x8UL)                   /*!< LEN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN4_Pos              (4UL)                     /*!< LEN4 (Bit 4)                                          */
#define GPIO_GPLEN0_LEN4_Msk              (0x10UL)                  /*!< LEN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN5_Pos              (5UL)                     /*!< LEN5 (Bit 5)                                          */
#define GPIO_GPLEN0_LEN5_Msk              (0x20UL)                  /*!< LEN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN6_Pos              (6UL)                     /*!< LEN6 (Bit 6)                                          */
#define GPIO_GPLEN0_LEN6_Msk              (0x40UL)                  /*!< LEN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN7_Pos              (7UL)                     /*!< LEN7 (Bit 7)                                          */
#define GPIO_GPLEN0_LEN7_Msk              (0x80UL)                  /*!< LEN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN8_Pos              (8UL)                     /*!< LEN8 (Bit 8)                                          */
#define GPIO_GPLEN0_LEN8_Msk              (0x100UL)                 /*!< LEN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN9_Pos              (9UL)                     /*!< LEN9 (Bit 9)                                          */
#define GPIO_GPLEN0_LEN9_Msk              (0x200UL)                 /*!< LEN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN10_Pos             (10UL)                    /*!< LEN10 (Bit 10)                                        */
#define GPIO_GPLEN0_LEN10_Msk             (0x400UL)                 /*!< LEN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN11_Pos             (11UL)                    /*!< LEN11 (Bit 11)                                        */
#define GPIO_GPLEN0_LEN11_Msk             (0x800UL)                 /*!< LEN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN12_Pos             (12UL)                    /*!< LEN12 (Bit 12)                                        */
#define GPIO_GPLEN0_LEN12_Msk             (0x1000UL)                /*!< LEN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN13_Pos             (13UL)                    /*!< LEN13 (Bit 13)                                        */
#define GPIO_GPLEN0_LEN13_Msk             (0x2000UL)                /*!< LEN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN14_Pos             (14UL)                    /*!< LEN14 (Bit 14)                                        */
#define GPIO_GPLEN0_LEN14_Msk             (0x4000UL)                /*!< LEN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN15_Pos             (15UL)                    /*!< LEN15 (Bit 15)                                        */
#define GPIO_GPLEN0_LEN15_Msk             (0x8000UL)                /*!< LEN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN16_Pos             (16UL)                    /*!< LEN16 (Bit 16)                                        */
#define GPIO_GPLEN0_LEN16_Msk             (0x10000UL)               /*!< LEN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN17_Pos             (17UL)                    /*!< LEN17 (Bit 17)                                        */
#define GPIO_GPLEN0_LEN17_Msk             (0x20000UL)               /*!< LEN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN18_Pos             (18UL)                    /*!< LEN18 (Bit 18)                                        */
#define GPIO_GPLEN0_LEN18_Msk             (0x40000UL)               /*!< LEN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN19_Pos             (19UL)                    /*!< LEN19 (Bit 19)                                        */
#define GPIO_GPLEN0_LEN19_Msk             (0x80000UL)               /*!< LEN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN20_Pos             (20UL)                    /*!< LEN20 (Bit 20)                                        */
#define GPIO_GPLEN0_LEN20_Msk             (0x100000UL)              /*!< LEN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN21_Pos             (21UL)                    /*!< LEN21 (Bit 21)                                        */
#define GPIO_GPLEN0_LEN21_Msk             (0x200000UL)              /*!< LEN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN22_Pos             (22UL)                    /*!< LEN22 (Bit 22)                                        */
#define GPIO_GPLEN0_LEN22_Msk             (0x400000UL)              /*!< LEN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN23_Pos             (23UL)                    /*!< LEN23 (Bit 23)                                        */
#define GPIO_GPLEN0_LEN23_Msk             (0x800000UL)              /*!< LEN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN24_Pos             (24UL)                    /*!< LEN24 (Bit 24)                                        */
#define GPIO_GPLEN0_LEN24_Msk             (0x1000000UL)             /*!< LEN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN25_Pos             (25UL)                    /*!< LEN25 (Bit 25)                                        */
#define GPIO_GPLEN0_LEN25_Msk             (0x2000000UL)             /*!< LEN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN26_Pos             (26UL)                    /*!< LEN26 (Bit 26)                                        */
#define GPIO_GPLEN0_LEN26_Msk             (0x4000000UL)             /*!< LEN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN27_Pos             (27UL)                    /*!< LEN27 (Bit 27)                                        */
#define GPIO_GPLEN0_LEN27_Msk             (0x8000000UL)             /*!< LEN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN28_Pos             (28UL)                    /*!< LEN28 (Bit 28)                                        */
#define GPIO_GPLEN0_LEN28_Msk             (0x10000000UL)            /*!< LEN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN29_Pos             (29UL)                    /*!< LEN29 (Bit 29)                                        */
#define GPIO_GPLEN0_LEN29_Msk             (0x20000000UL)            /*!< LEN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN30_Pos             (30UL)                    /*!< LEN30 (Bit 30)                                        */
#define GPIO_GPLEN0_LEN30_Msk             (0x40000000UL)            /*!< LEN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN31_Pos             (31UL)                    /*!< LEN31 (Bit 31)                                        */
#define GPIO_GPLEN0_LEN31_Msk             (0x80000000UL)            /*!< LEN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEN1  ========================================================= */
#define GPIO_GPLEN1_LEN32_Pos             (0UL)                     /*!< LEN32 (Bit 0)                                         */
#define GPIO_GPLEN1_LEN32_Msk             (0x1UL)                   /*!< LEN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN33_Pos             (1UL)                     /*!< LEN33 (Bit 1)                                         */
#define GPIO_GPLEN1_LEN33_Msk             (0x2UL)                   /*!< LEN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN34_Pos             (2UL)                     /*!< LEN34 (Bit 2)                                         */
#define GPIO_GPLEN1_LEN34_Msk             (0x4UL)                   /*!< LEN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN35_Pos             (3UL)                     /*!< LEN35 (Bit 3)                                         */
#define GPIO_GPLEN1_LEN35_Msk             (0x8UL)                   /*!< LEN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN36_Pos             (4UL)                     /*!< LEN36 (Bit 4)                                         */
#define GPIO_GPLEN1_LEN36_Msk             (0x10UL)                  /*!< LEN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN37_Pos             (5UL)                     /*!< LEN37 (Bit 5)                                         */
#define GPIO_GPLEN1_LEN37_Msk             (0x20UL)                  /*!< LEN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN38_Pos             (6UL)                     /*!< LEN38 (Bit 6)                                         */
#define GPIO_GPLEN1_LEN38_Msk             (0x40UL)                  /*!< LEN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN39_Pos             (7UL)                     /*!< LEN39 (Bit 7)                                         */
#define GPIO_GPLEN1_LEN39_Msk             (0x80UL)                  /*!< LEN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN40_Pos             (8UL)                     /*!< LEN40 (Bit 8)                                         */
#define GPIO_GPLEN1_LEN40_Msk             (0x100UL)                 /*!< LEN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN41_Pos             (9UL)                     /*!< LEN41 (Bit 9)                                         */
#define GPIO_GPLEN1_LEN41_Msk             (0x200UL)                 /*!< LEN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN42_Pos             (10UL)                    /*!< LEN42 (Bit 10)                                        */
#define GPIO_GPLEN1_LEN42_Msk             (0x400UL)                 /*!< LEN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN43_Pos             (11UL)                    /*!< LEN43 (Bit 11)                                        */
#define GPIO_GPLEN1_LEN43_Msk             (0x800UL)                 /*!< LEN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN44_Pos             (12UL)                    /*!< LEN44 (Bit 12)                                        */
#define GPIO_GPLEN1_LEN44_Msk             (0x1000UL)                /*!< LEN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN45_Pos             (13UL)                    /*!< LEN45 (Bit 13)                                        */
#define GPIO_GPLEN1_LEN45_Msk             (0x2000UL)                /*!< LEN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN46_Pos             (14UL)                    /*!< LEN46 (Bit 14)                                        */
#define GPIO_GPLEN1_LEN46_Msk             (0x4000UL)                /*!< LEN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN47_Pos             (15UL)                    /*!< LEN47 (Bit 15)                                        */
#define GPIO_GPLEN1_LEN47_Msk             (0x8000UL)                /*!< LEN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN48_Pos             (16UL)                    /*!< LEN48 (Bit 16)                                        */
#define GPIO_GPLEN1_LEN48_Msk             (0x10000UL)               /*!< LEN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN49_Pos             (17UL)                    /*!< LEN49 (Bit 17)                                        */
#define GPIO_GPLEN1_LEN49_Msk             (0x20000UL)               /*!< LEN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN50_Pos             (18UL)                    /*!< LEN50 (Bit 18)                                        */
#define GPIO_GPLEN1_LEN50_Msk             (0x40000UL)               /*!< LEN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN51_Pos             (19UL)                    /*!< LEN51 (Bit 19)                                        */
#define GPIO_GPLEN1_LEN51_Msk             (0x80000UL)               /*!< LEN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN52_Pos             (20UL)                    /*!< LEN52 (Bit 20)                                        */
#define GPIO_GPLEN1_LEN52_Msk             (0x100000UL)              /*!< LEN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN53_Pos             (21UL)                    /*!< LEN53 (Bit 21)                                        */
#define GPIO_GPLEN1_LEN53_Msk             (0x200000UL)              /*!< LEN53 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN54_Pos             (22UL)                    /*!< LEN54 (Bit 22)                                        */
#define GPIO_GPLEN1_LEN54_Msk             (0x400000UL)              /*!< LEN54 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN55_Pos             (23UL)                    /*!< LEN55 (Bit 23)                                        */
#define GPIO_GPLEN1_LEN55_Msk             (0x800000UL)              /*!< LEN55 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN56_Pos             (24UL)                    /*!< LEN56 (Bit 24)                                        */
#define GPIO_GPLEN1_LEN56_Msk             (0x1000000UL)             /*!< LEN56 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN57_Pos             (25UL)                    /*!< LEN57 (Bit 25)                                        */
#define GPIO_GPLEN1_LEN57_Msk             (0x2000000UL)             /*!< LEN57 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPAREN0  ======================================================== */
#define GPIO_GPAREN0_AREN0_Pos            (0UL)                     /*!< AREN0 (Bit 0)                                         */
#define GPIO_GPAREN0_AREN0_Msk            (0x1UL)                   /*!< AREN0 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN1_Pos            (1UL)                     /*!< AREN1 (Bit 1)                                         */
#define GPIO_GPAREN0_AREN1_Msk            (0x2UL)                   /*!< AREN1 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN2_Pos            (2UL)                     /*!< AREN2 (Bit 2)                                         */
#define GPIO_GPAREN0_AREN2_Msk            (0x4UL)                   /*!< AREN2 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN3_Pos            (3UL)                     /*!< AREN3 (Bit 3)                                         */
#define GPIO_GPAREN0_AREN3_Msk            (0x8UL)                   /*!< AREN3 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN4_Pos            (4UL)                     /*!< AREN4 (Bit 4)                                         */
#define GPIO_GPAREN0_AREN4_Msk            (0x10UL)                  /*!< AREN4 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN5_Pos            (5UL)                     /*!< AREN5 (Bit 5)                                         */
#define GPIO_GPAREN0_AREN5_Msk            (0x20UL)                  /*!< AREN5 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN6_Pos            (6UL)                     /*!< AREN6 (Bit 6)                                         */
#define GPIO_GPAREN0_AREN6_Msk            (0x40UL)                  /*!< AREN6 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN7_Pos            (7UL)                     /*!< AREN7 (Bit 7)                                         */
#define GPIO_GPAREN0_AREN7_Msk            (0x80UL)                  /*!< AREN7 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN8_Pos            (8UL)                     /*!< AREN8 (Bit 8)                                         */
#define GPIO_GPAREN0_AREN8_Msk            (0x100UL)                 /*!< AREN8 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN9_Pos            (9UL)                     /*!< AREN9 (Bit 9)                                         */
#define GPIO_GPAREN0_AREN9_Msk            (0x200UL)                 /*!< AREN9 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN10_Pos           (10UL)                    /*!< AREN10 (Bit 10)                                       */
#define GPIO_GPAREN0_AREN10_Msk           (0x400UL)                 /*!< AREN10 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN11_Pos           (11UL)                    /*!< AREN11 (Bit 11)                                       */
#define GPIO_GPAREN0_AREN11_Msk           (0x800UL)                 /*!< AREN11 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN12_Pos           (12UL)                    /*!< AREN12 (Bit 12)                                       */
#define GPIO_GPAREN0_AREN12_Msk           (0x1000UL)                /*!< AREN12 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN13_Pos           (13UL)                    /*!< AREN13 (Bit 13)                                       */
#define GPIO_GPAREN0_AREN13_Msk           (0x2000UL)                /*!< AREN13 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN14_Pos           (14UL)                    /*!< AREN14 (Bit 14)                                       */
#define GPIO_GPAREN0_AREN14_Msk           (0x4000UL)                /*!< AREN14 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN15_Pos           (15UL)                    /*!< AREN15 (Bit 15)                                       */
#define GPIO_GPAREN0_AREN15_Msk           (0x8000UL)                /*!< AREN15 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN16_Pos           (16UL)                    /*!< AREN16 (Bit 16)                                       */
#define GPIO_GPAREN0_AREN16_Msk           (0x10000UL)               /*!< AREN16 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN17_Pos           (17UL)                    /*!< AREN17 (Bit 17)                                       */
#define GPIO_GPAREN0_AREN17_Msk           (0x20000UL)               /*!< AREN17 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN18_Pos           (18UL)                    /*!< AREN18 (Bit 18)                                       */
#define GPIO_GPAREN0_AREN18_Msk           (0x40000UL)               /*!< AREN18 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN19_Pos           (19UL)                    /*!< AREN19 (Bit 19)                                       */
#define GPIO_GPAREN0_AREN19_Msk           (0x80000UL)               /*!< AREN19 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN20_Pos           (20UL)                    /*!< AREN20 (Bit 20)                                       */
#define GPIO_GPAREN0_AREN20_Msk           (0x100000UL)              /*!< AREN20 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN21_Pos           (21UL)                    /*!< AREN21 (Bit 21)                                       */
#define GPIO_GPAREN0_AREN21_Msk           (0x200000UL)              /*!< AREN21 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN22_Pos           (22UL)                    /*!< AREN22 (Bit 22)                                       */
#define GPIO_GPAREN0_AREN22_Msk           (0x400000UL)              /*!< AREN22 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN23_Pos           (23UL)                    /*!< AREN23 (Bit 23)                                       */
#define GPIO_GPAREN0_AREN23_Msk           (0x800000UL)              /*!< AREN23 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN24_Pos           (24UL)                    /*!< AREN24 (Bit 24)                                       */
#define GPIO_GPAREN0_AREN24_Msk           (0x1000000UL)             /*!< AREN24 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN25_Pos           (25UL)                    /*!< AREN25 (Bit 25)                                       */
#define GPIO_GPAREN0_AREN25_Msk           (0x2000000UL)             /*!< AREN25 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN26_Pos           (26UL)                    /*!< AREN26 (Bit 26)                                       */
#define GPIO_GPAREN0_AREN26_Msk           (0x4000000UL)             /*!< AREN26 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN27_Pos           (27UL)                    /*!< AREN27 (Bit 27)                                       */
#define GPIO_GPAREN0_AREN27_Msk           (0x8000000UL)             /*!< AREN27 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN28_Pos           (28UL)                    /*!< AREN28 (Bit 28)                                       */
#define GPIO_GPAREN0_AREN28_Msk           (0x10000000UL)            /*!< AREN28 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN29_Pos           (29UL)                    /*!< AREN29 (Bit 29)                                       */
#define GPIO_GPAREN0_AREN29_Msk           (0x20000000UL)            /*!< AREN29 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN30_Pos           (30UL)                    /*!< AREN30 (Bit 30)                                       */
#define GPIO_GPAREN0_AREN30_Msk           (0x40000000UL)            /*!< AREN30 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN31_Pos           (31UL)                    /*!< AREN31 (Bit 31)                                       */
#define GPIO_GPAREN0_AREN31_Msk           (0x80000000UL)            /*!< AREN31 (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPAREN1  ======================================================== */
#define GPIO_GPAREN1_AREN32_Pos           (0UL)                     /*!< AREN32 (Bit 0)                                        */
#define GPIO_GPAREN1_AREN32_Msk           (0x1UL)                   /*!< AREN32 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN33_Pos           (1UL)                     /*!< AREN33 (Bit 1)                                        */
#define GPIO_GPAREN1_AREN33_Msk           (0x2UL)                   /*!< AREN33 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN34_Pos           (2UL)                     /*!< AREN34 (Bit 2)                                        */
#define GPIO_GPAREN1_AREN34_Msk           (0x4UL)                   /*!< AREN34 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN35_Pos           (3UL)                     /*!< AREN35 (Bit 3)                                        */
#define GPIO_GPAREN1_AREN35_Msk           (0x8UL)                   /*!< AREN35 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN36_Pos           (4UL)                     /*!< AREN36 (Bit 4)                                        */
#define GPIO_GPAREN1_AREN36_Msk           (0x10UL)                  /*!< AREN36 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN37_Pos           (5UL)                     /*!< AREN37 (Bit 5)                                        */
#define GPIO_GPAREN1_AREN37_Msk           (0x20UL)                  /*!< AREN37 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN38_Pos           (6UL)                     /*!< AREN38 (Bit 6)                                        */
#define GPIO_GPAREN1_AREN38_Msk           (0x40UL)                  /*!< AREN38 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN39_Pos           (7UL)                     /*!< AREN39 (Bit 7)                                        */
#define GPIO_GPAREN1_AREN39_Msk           (0x80UL)                  /*!< AREN39 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN40_Pos           (8UL)                     /*!< AREN40 (Bit 8)                                        */
#define GPIO_GPAREN1_AREN40_Msk           (0x100UL)                 /*!< AREN40 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN41_Pos           (9UL)                     /*!< AREN41 (Bit 9)                                        */
#define GPIO_GPAREN1_AREN41_Msk           (0x200UL)                 /*!< AREN41 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN42_Pos           (10UL)                    /*!< AREN42 (Bit 10)                                       */
#define GPIO_GPAREN1_AREN42_Msk           (0x400UL)                 /*!< AREN42 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN43_Pos           (11UL)                    /*!< AREN43 (Bit 11)                                       */
#define GPIO_GPAREN1_AREN43_Msk           (0x800UL)                 /*!< AREN43 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN44_Pos           (12UL)                    /*!< AREN44 (Bit 12)                                       */
#define GPIO_GPAREN1_AREN44_Msk           (0x1000UL)                /*!< AREN44 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN45_Pos           (13UL)                    /*!< AREN45 (Bit 13)                                       */
#define GPIO_GPAREN1_AREN45_Msk           (0x2000UL)                /*!< AREN45 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN46_Pos           (14UL)                    /*!< AREN46 (Bit 14)                                       */
#define GPIO_GPAREN1_AREN46_Msk           (0x4000UL)                /*!< AREN46 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN47_Pos           (15UL)                    /*!< AREN47 (Bit 15)                                       */
#define GPIO_GPAREN1_AREN47_Msk           (0x8000UL)                /*!< AREN47 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN48_Pos           (16UL)                    /*!< AREN48 (Bit 16)                                       */
#define GPIO_GPAREN1_AREN48_Msk           (0x10000UL)               /*!< AREN48 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN49_Pos           (17UL)                    /*!< AREN49 (Bit 17)                                       */
#define GPIO_GPAREN1_AREN49_Msk           (0x20000UL)               /*!< AREN49 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN50_Pos           (18UL)                    /*!< AREN50 (Bit 18)                                       */
#define GPIO_GPAREN1_AREN50_Msk           (0x40000UL)               /*!< AREN50 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN51_Pos           (19UL)                    /*!< AREN51 (Bit 19)                                       */
#define GPIO_GPAREN1_AREN51_Msk           (0x80000UL)               /*!< AREN51 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN52_Pos           (20UL)                    /*!< AREN52 (Bit 20)                                       */
#define GPIO_GPAREN1_AREN52_Msk           (0x100000UL)              /*!< AREN52 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN53_Pos           (21UL)                    /*!< AREN53 (Bit 21)                                       */
#define GPIO_GPAREN1_AREN53_Msk           (0x200000UL)              /*!< AREN53 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN54_Pos           (22UL)                    /*!< AREN54 (Bit 22)                                       */
#define GPIO_GPAREN1_AREN54_Msk           (0x400000UL)              /*!< AREN54 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN55_Pos           (23UL)                    /*!< AREN55 (Bit 23)                                       */
#define GPIO_GPAREN1_AREN55_Msk           (0x800000UL)              /*!< AREN55 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN56_Pos           (24UL)                    /*!< AREN56 (Bit 24)                                       */
#define GPIO_GPAREN1_AREN56_Msk           (0x1000000UL)             /*!< AREN56 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN57_Pos           (25UL)                    /*!< AREN57 (Bit 25)                                       */
#define GPIO_GPAREN1_AREN57_Msk           (0x2000000UL)             /*!< AREN57 (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPAFEN0  ======================================================== */
#define GPIO_GPAFEN0_AFEN0_Pos            (0UL)                     /*!< AFEN0 (Bit 0)                                         */
#define GPIO_GPAFEN0_AFEN0_Msk            (0x1UL)                   /*!< AFEN0 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN1_Pos            (1UL)                     /*!< AFEN1 (Bit 1)                                         */
#define GPIO_GPAFEN0_AFEN1_Msk            (0x2UL)                   /*!< AFEN1 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN2_Pos            (2UL)                     /*!< AFEN2 (Bit 2)                                         */
#define GPIO_GPAFEN0_AFEN2_Msk            (0x4UL)                   /*!< AFEN2 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN3_Pos            (3UL)                     /*!< AFEN3 (Bit 3)                                         */
#define GPIO_GPAFEN0_AFEN3_Msk            (0x8UL)                   /*!< AFEN3 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN4_Pos            (4UL)                     /*!< AFEN4 (Bit 4)                                         */
#define GPIO_GPAFEN0_AFEN4_Msk            (0x10UL)                  /*!< AFEN4 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN5_Pos            (5UL)                     /*!< AFEN5 (Bit 5)                                         */
#define GPIO_GPAFEN0_AFEN5_Msk            (0x20UL)                  /*!< AFEN5 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN6_Pos            (6UL)                     /*!< AFEN6 (Bit 6)                                         */
#define GPIO_GPAFEN0_AFEN6_Msk            (0x40UL)                  /*!< AFEN6 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN7_Pos            (7UL)                     /*!< AFEN7 (Bit 7)                                         */
#define GPIO_GPAFEN0_AFEN7_Msk            (0x80UL)                  /*!< AFEN7 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN8_Pos            (8UL)                     /*!< AFEN8 (Bit 8)                                         */
#define GPIO_GPAFEN0_AFEN8_Msk            (0x100UL)                 /*!< AFEN8 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN9_Pos            (9UL)                     /*!< AFEN9 (Bit 9)                                         */
#define GPIO_GPAFEN0_AFEN9_Msk            (0x200UL)                 /*!< AFEN9 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN10_Pos           (10UL)                    /*!< AFEN10 (Bit 10)                                       */
#define GPIO_GPAFEN0_AFEN10_Msk           (0x400UL)                 /*!< AFEN10 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN11_Pos           (11UL)                    /*!< AFEN11 (Bit 11)                                       */
#define GPIO_GPAFEN0_AFEN11_Msk           (0x800UL)                 /*!< AFEN11 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN12_Pos           (12UL)                    /*!< AFEN12 (Bit 12)                                       */
#define GPIO_GPAFEN0_AFEN12_Msk           (0x1000UL)                /*!< AFEN12 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN13_Pos           (13UL)                    /*!< AFEN13 (Bit 13)                                       */
#define GPIO_GPAFEN0_AFEN13_Msk           (0x2000UL)                /*!< AFEN13 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN14_Pos           (14UL)                    /*!< AFEN14 (Bit 14)                                       */
#define GPIO_GPAFEN0_AFEN14_Msk           (0x4000UL)                /*!< AFEN14 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN15_Pos           (15UL)                    /*!< AFEN15 (Bit 15)                                       */
#define GPIO_GPAFEN0_AFEN15_Msk           (0x8000UL)                /*!< AFEN15 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN16_Pos           (16UL)                    /*!< AFEN16 (Bit 16)                                       */
#define GPIO_GPAFEN0_AFEN16_Msk           (0x10000UL)               /*!< AFEN16 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN17_Pos           (17UL)                    /*!< AFEN17 (Bit 17)                                       */
#define GPIO_GPAFEN0_AFEN17_Msk           (0x20000UL)               /*!< AFEN17 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN18_Pos           (18UL)                    /*!< AFEN18 (Bit 18)                                       */
#define GPIO_GPAFEN0_AFEN18_Msk           (0x40000UL)               /*!< AFEN18 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN19_Pos           (19UL)                    /*!< AFEN19 (Bit 19)                                       */
#define GPIO_GPAFEN0_AFEN19_Msk           (0x80000UL)               /*!< AFEN19 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN20_Pos           (20UL)                    /*!< AFEN20 (Bit 20)                                       */
#define GPIO_GPAFEN0_AFEN20_Msk           (0x100000UL)              /*!< AFEN20 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN21_Pos           (21UL)                    /*!< AFEN21 (Bit 21)                                       */
#define GPIO_GPAFEN0_AFEN21_Msk           (0x200000UL)              /*!< AFEN21 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN22_Pos           (22UL)                    /*!< AFEN22 (Bit 22)                                       */
#define GPIO_GPAFEN0_AFEN22_Msk           (0x400000UL)              /*!< AFEN22 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN23_Pos           (23UL)                    /*!< AFEN23 (Bit 23)                                       */
#define GPIO_GPAFEN0_AFEN23_Msk           (0x800000UL)              /*!< AFEN23 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN24_Pos           (24UL)                    /*!< AFEN24 (Bit 24)                                       */
#define GPIO_GPAFEN0_AFEN24_Msk           (0x1000000UL)             /*!< AFEN24 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN25_Pos           (25UL)                    /*!< AFEN25 (Bit 25)                                       */
#define GPIO_GPAFEN0_AFEN25_Msk           (0x2000000UL)             /*!< AFEN25 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN26_Pos           (26UL)                    /*!< AFEN26 (Bit 26)                                       */
#define GPIO_GPAFEN0_AFEN26_Msk           (0x4000000UL)             /*!< AFEN26 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN27_Pos           (27UL)                    /*!< AFEN27 (Bit 27)                                       */
#define GPIO_GPAFEN0_AFEN27_Msk           (0x8000000UL)             /*!< AFEN27 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN28_Pos           (28UL)                    /*!< AFEN28 (Bit 28)                                       */
#define GPIO_GPAFEN0_AFEN28_Msk           (0x10000000UL)            /*!< AFEN28 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN29_Pos           (29UL)                    /*!< AFEN29 (Bit 29)                                       */
#define GPIO_GPAFEN0_AFEN29_Msk           (0x20000000UL)            /*!< AFEN29 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN30_Pos           (30UL)                    /*!< AFEN30 (Bit 30)                                       */
#define GPIO_GPAFEN0_AFEN30_Msk           (0x40000000UL)            /*!< AFEN30 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN31_Pos           (31UL)                    /*!< AFEN31 (Bit 31)                                       */
#define GPIO_GPAFEN0_AFEN31_Msk           (0x80000000UL)            /*!< AFEN31 (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPAFEN1  ======================================================== */
#define GPIO_GPAFEN1_AFEN32_Pos           (0UL)                     /*!< AFEN32 (Bit 0)                                        */
#define GPIO_GPAFEN1_AFEN32_Msk           (0x1UL)                   /*!< AFEN32 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN33_Pos           (1UL)                     /*!< AFEN33 (Bit 1)                                        */
#define GPIO_GPAFEN1_AFEN33_Msk           (0x2UL)                   /*!< AFEN33 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN34_Pos           (2UL)                     /*!< AFEN34 (Bit 2)                                        */
#define GPIO_GPAFEN1_AFEN34_Msk           (0x4UL)                   /*!< AFEN34 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN35_Pos           (3UL)                     /*!< AFEN35 (Bit 3)                                        */
#define GPIO_GPAFEN1_AFEN35_Msk           (0x8UL)                   /*!< AFEN35 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN36_Pos           (4UL)                     /*!< AFEN36 (Bit 4)                                        */
#define GPIO_GPAFEN1_AFEN36_Msk           (0x10UL)                  /*!< AFEN36 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN37_Pos           (5UL)                     /*!< AFEN37 (Bit 5)                                        */
#define GPIO_GPAFEN1_AFEN37_Msk           (0x20UL)                  /*!< AFEN37 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN38_Pos           (6UL)                     /*!< AFEN38 (Bit 6)                                        */
#define GPIO_GPAFEN1_AFEN38_Msk           (0x40UL)                  /*!< AFEN38 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN39_Pos           (7UL)                     /*!< AFEN39 (Bit 7)                                        */
#define GPIO_GPAFEN1_AFEN39_Msk           (0x80UL)                  /*!< AFEN39 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN40_Pos           (8UL)                     /*!< AFEN40 (Bit 8)                                        */
#define GPIO_GPAFEN1_AFEN40_Msk           (0x100UL)                 /*!< AFEN40 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN41_Pos           (9UL)                     /*!< AFEN41 (Bit 9)                                        */
#define GPIO_GPAFEN1_AFEN41_Msk           (0x200UL)                 /*!< AFEN41 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN42_Pos           (10UL)                    /*!< AFEN42 (Bit 10)                                       */
#define GPIO_GPAFEN1_AFEN42_Msk           (0x400UL)                 /*!< AFEN42 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN43_Pos           (11UL)                    /*!< AFEN43 (Bit 11)                                       */
#define GPIO_GPAFEN1_AFEN43_Msk           (0x800UL)                 /*!< AFEN43 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN44_Pos           (12UL)                    /*!< AFEN44 (Bit 12)                                       */
#define GPIO_GPAFEN1_AFEN44_Msk           (0x1000UL)                /*!< AFEN44 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN45_Pos           (13UL)                    /*!< AFEN45 (Bit 13)                                       */
#define GPIO_GPAFEN1_AFEN45_Msk           (0x2000UL)                /*!< AFEN45 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN46_Pos           (14UL)                    /*!< AFEN46 (Bit 14)                                       */
#define GPIO_GPAFEN1_AFEN46_Msk           (0x4000UL)                /*!< AFEN46 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN47_Pos           (15UL)                    /*!< AFEN47 (Bit 15)                                       */
#define GPIO_GPAFEN1_AFEN47_Msk           (0x8000UL)                /*!< AFEN47 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN48_Pos           (16UL)                    /*!< AFEN48 (Bit 16)                                       */
#define GPIO_GPAFEN1_AFEN48_Msk           (0x10000UL)               /*!< AFEN48 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN49_Pos           (17UL)                    /*!< AFEN49 (Bit 17)                                       */
#define GPIO_GPAFEN1_AFEN49_Msk           (0x20000UL)               /*!< AFEN49 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN50_Pos           (18UL)                    /*!< AFEN50 (Bit 18)                                       */
#define GPIO_GPAFEN1_AFEN50_Msk           (0x40000UL)               /*!< AFEN50 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN51_Pos           (19UL)                    /*!< AFEN51 (Bit 19)                                       */
#define GPIO_GPAFEN1_AFEN51_Msk           (0x80000UL)               /*!< AFEN51 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN52_Pos           (20UL)                    /*!< AFEN52 (Bit 20)                                       */
#define GPIO_GPAFEN1_AFEN52_Msk           (0x100000UL)              /*!< AFEN52 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN53_Pos           (21UL)                    /*!< AFEN53 (Bit 21)                                       */
#define GPIO_GPAFEN1_AFEN53_Msk           (0x200000UL)              /*!< AFEN53 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN54_Pos           (22UL)                    /*!< AFEN54 (Bit 22)                                       */
#define GPIO_GPAFEN1_AFEN54_Msk           (0x400000UL)              /*!< AFEN54 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN55_Pos           (23UL)                    /*!< AFEN55 (Bit 23)                                       */
#define GPIO_GPAFEN1_AFEN55_Msk           (0x800000UL)              /*!< AFEN55 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN56_Pos           (24UL)                    /*!< AFEN56 (Bit 24)                                       */
#define GPIO_GPAFEN1_AFEN56_Msk           (0x1000000UL)             /*!< AFEN56 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN57_Pos           (25UL)                    /*!< AFEN57 (Bit 25)                                       */
#define GPIO_GPAFEN1_AFEN57_Msk           (0x2000000UL)             /*!< AFEN57 (Bitfield-Mask: 0x01)                          */
/* =======================================================  EXTRA_MUX  ======================================================= */
#define GPIO_EXTRA_MUX_SDIO_Pos           (1UL)                     /*!< SDIO (Bit 1)                                          */
#define GPIO_EXTRA_MUX_SDIO_Msk           (0x2UL)                   /*!< SDIO (Bitfield-Mask: 0x01)                            */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG0  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL0_Pos (0UL)  /*!< GPIO_PUP_PDN_CNTRL0 (Bit 0)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL0_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL0 (Bitfield-Mask: 0x03)            */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_Pos (2UL)  /*!< GPIO_PUP_PDN_CNTRL1 (Bit 2)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL1 (Bitfield-Mask: 0x03)            */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_Pos (4UL)  /*!< GPIO_PUP_PDN_CNTRL2 (Bit 4)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL2 (Bitfield-Mask: 0x03)           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_Pos (6UL)  /*!< GPIO_PUP_PDN_CNTRL3 (Bit 6)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL3 (Bitfield-Mask: 0x03)           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_Pos (8UL)  /*!< GPIO_PUP_PDN_CNTRL4 (Bit 8)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL4 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL5 (Bit 10)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL5 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL6 (Bit 12)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL6 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL7 (Bit 14)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL7 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL8 (Bit 16)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL8 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL9 (Bit 18)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL9 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_Pos (20UL) /*!< GPIO_PUP_PDN_CNTRL10 (Bit 20)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_Msk (0x300000UL) /*!< GPIO_PUP_PDN_CNTRL10 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_Pos (22UL) /*!< GPIO_PUP_PDN_CNTRL11 (Bit 22)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_Msk (0xc00000UL) /*!< GPIO_PUP_PDN_CNTRL11 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_Pos (24UL) /*!< GPIO_PUP_PDN_CNTRL12 (Bit 24)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_Msk (0x3000000UL) /*!< GPIO_PUP_PDN_CNTRL12 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_Pos (26UL) /*!< GPIO_PUP_PDN_CNTRL13 (Bit 26)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_Msk (0xc000000UL) /*!< GPIO_PUP_PDN_CNTRL13 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_Pos (28UL) /*!< GPIO_PUP_PDN_CNTRL14 (Bit 28)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_Msk (0x30000000UL) /*!< GPIO_PUP_PDN_CNTRL14 (Bitfield-Mask: 0x03)   */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_Pos (30UL) /*!< GPIO_PUP_PDN_CNTRL15 (Bit 30)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_Msk (0xc0000000UL) /*!< GPIO_PUP_PDN_CNTRL15 (Bitfield-Mask: 0x03)   */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG1  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_Pos (0UL) /*!< GPIO_PUP_PDN_CNTRL16 (Bit 0)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL16 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_Pos (2UL) /*!< GPIO_PUP_PDN_CNTRL17 (Bit 2)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL17 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_Pos (4UL) /*!< GPIO_PUP_PDN_CNTRL18 (Bit 4)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL18 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_Pos (6UL) /*!< GPIO_PUP_PDN_CNTRL19 (Bit 6)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL19 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_Pos (8UL) /*!< GPIO_PUP_PDN_CNTRL20 (Bit 8)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL20 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL21 (Bit 10)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL21 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL22 (Bit 12)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL22 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL23 (Bit 14)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL23 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL24 (Bit 16)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL24 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL25 (Bit 18)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL25 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_Pos (20UL) /*!< GPIO_PUP_PDN_CNTRL26 (Bit 20)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_Msk (0x300000UL) /*!< GPIO_PUP_PDN_CNTRL26 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_Pos (22UL) /*!< GPIO_PUP_PDN_CNTRL27 (Bit 22)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_Msk (0xc00000UL) /*!< GPIO_PUP_PDN_CNTRL27 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_Pos (24UL) /*!< GPIO_PUP_PDN_CNTRL28 (Bit 24)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_Msk (0x3000000UL) /*!< GPIO_PUP_PDN_CNTRL28 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_Pos (26UL) /*!< GPIO_PUP_PDN_CNTRL29 (Bit 26)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_Msk (0xc000000UL) /*!< GPIO_PUP_PDN_CNTRL29 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_Pos (28UL) /*!< GPIO_PUP_PDN_CNTRL30 (Bit 28)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_Msk (0x30000000UL) /*!< GPIO_PUP_PDN_CNTRL30 (Bitfield-Mask: 0x03)   */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_Pos (30UL) /*!< GPIO_PUP_PDN_CNTRL31 (Bit 30)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_Msk (0xc0000000UL) /*!< GPIO_PUP_PDN_CNTRL31 (Bitfield-Mask: 0x03)   */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG2  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_Pos (0UL) /*!< GPIO_PUP_PDN_CNTRL32 (Bit 0)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL32 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_Pos (2UL) /*!< GPIO_PUP_PDN_CNTRL33 (Bit 2)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL33 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_Pos (4UL) /*!< GPIO_PUP_PDN_CNTRL34 (Bit 4)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL34 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_Pos (6UL) /*!< GPIO_PUP_PDN_CNTRL35 (Bit 6)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL35 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_Pos (8UL) /*!< GPIO_PUP_PDN_CNTRL36 (Bit 8)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL36 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL37 (Bit 10)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL37 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL38 (Bit 12)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL38 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL39 (Bit 14)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL39 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL40 (Bit 16)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL40 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL41 (Bit 18)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL41 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_Pos (20UL) /*!< GPIO_PUP_PDN_CNTRL42 (Bit 20)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_Msk (0x300000UL) /*!< GPIO_PUP_PDN_CNTRL42 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_Pos (22UL) /*!< GPIO_PUP_PDN_CNTRL43 (Bit 22)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_Msk (0xc00000UL) /*!< GPIO_PUP_PDN_CNTRL43 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_Pos (24UL) /*!< GPIO_PUP_PDN_CNTRL44 (Bit 24)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_Msk (0x3000000UL) /*!< GPIO_PUP_PDN_CNTRL44 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_Pos (26UL) /*!< GPIO_PUP_PDN_CNTRL45 (Bit 26)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_Msk (0xc000000UL) /*!< GPIO_PUP_PDN_CNTRL45 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_Pos (28UL) /*!< GPIO_PUP_PDN_CNTRL46 (Bit 28)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_Msk (0x30000000UL) /*!< GPIO_PUP_PDN_CNTRL46 (Bitfield-Mask: 0x03)   */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_Pos (30UL) /*!< GPIO_PUP_PDN_CNTRL47 (Bit 30)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_Msk (0xc0000000UL) /*!< GPIO_PUP_PDN_CNTRL47 (Bitfield-Mask: 0x03)   */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG3  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_Pos (0UL) /*!< GPIO_PUP_PDN_CNTRL48 (Bit 0)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL48 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_Pos (2UL) /*!< GPIO_PUP_PDN_CNTRL49 (Bit 2)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL49 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_Pos (4UL) /*!< GPIO_PUP_PDN_CNTRL50 (Bit 4)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL50 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_Pos (6UL) /*!< GPIO_PUP_PDN_CNTRL51 (Bit 6)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL51 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_Pos (8UL) /*!< GPIO_PUP_PDN_CNTRL52 (Bit 8)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL52 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL53 (Bit 10)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL53 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL54 (Bit 12)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL54 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL55 (Bit 14)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL55 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL56 (Bit 16)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL56 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL57 (Bit 18)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL57 (Bitfield-Mask: 0x03)      */


/* =========================================================================================================================== */
/* ================                                          SYSTMR                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define SYSTMR_CS_M3_Pos                  (3UL)                     /*!< M3 (Bit 3)                                            */
#define SYSTMR_CS_M3_Msk                  (0x8UL)                   /*!< M3 (Bitfield-Mask: 0x01)                              */
#define SYSTMR_CS_M2_Pos                  (2UL)                     /*!< M2 (Bit 2)                                            */
#define SYSTMR_CS_M2_Msk                  (0x4UL)                   /*!< M2 (Bitfield-Mask: 0x01)                              */
#define SYSTMR_CS_M1_Pos                  (1UL)                     /*!< M1 (Bit 1)                                            */
#define SYSTMR_CS_M1_Msk                  (0x2UL)                   /*!< M1 (Bitfield-Mask: 0x01)                              */
#define SYSTMR_CS_M0_Pos                  (0UL)                     /*!< M0 (Bit 0)                                            */
#define SYSTMR_CS_M0_Msk                  (0x1UL)                   /*!< M0 (Bitfield-Mask: 0x01)                              */
/* ==========================================================  CLO  ========================================================== */
/* ==========================================================  CHI  ========================================================== */
/* ==========================================================  C0  =========================================================== */
/* ==========================================================  C1  =========================================================== */
/* ==========================================================  C2  =========================================================== */
/* ==========================================================  C3  =========================================================== */


/* =========================================================================================================================== */
/* ================                                      ARM_UART_PL011                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
#define ARM_UART_PL011_DR_DATA_Pos        (0UL)                     /*!< DATA (Bit 0)                                          */
#define ARM_UART_PL011_DR_DATA_Msk        (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
#define ARM_UART_PL011_DR_FE_Pos          (8UL)                     /*!< FE (Bit 8)                                            */
#define ARM_UART_PL011_DR_FE_Msk          (0x100UL)                 /*!< FE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_DR_PE_Pos          (9UL)                     /*!< PE (Bit 9)                                            */
#define ARM_UART_PL011_DR_PE_Msk          (0x200UL)                 /*!< PE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_DR_BE_Pos          (10UL)                    /*!< BE (Bit 10)                                           */
#define ARM_UART_PL011_DR_BE_Msk          (0x400UL)                 /*!< BE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_DR_OE_Pos          (11UL)                    /*!< OE (Bit 11)                                           */
#define ARM_UART_PL011_DR_OE_Msk          (0x800UL)                 /*!< OE (Bitfield-Mask: 0x01)                              */
/* ==========================================================  RSR  ========================================================== */
#define ARM_UART_PL011_RSR_FE_Pos         (0UL)                     /*!< FE (Bit 0)                                            */
#define ARM_UART_PL011_RSR_FE_Msk         (0x1UL)                   /*!< FE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_RSR_PE_Pos         (1UL)                     /*!< PE (Bit 1)                                            */
#define ARM_UART_PL011_RSR_PE_Msk         (0x2UL)                   /*!< PE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_RSR_BE_Pos         (2UL)                     /*!< BE (Bit 2)                                            */
#define ARM_UART_PL011_RSR_BE_Msk         (0x4UL)                   /*!< BE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_RSR_OE_Pos         (3UL)                     /*!< OE (Bit 3)                                            */
#define ARM_UART_PL011_RSR_OE_Msk         (0x8UL)                   /*!< OE (Bitfield-Mask: 0x01)                              */
/* ==========================================================  ECR  ========================================================== */
#define ARM_UART_PL011_ECR_FE_Pos         (0UL)                     /*!< FE (Bit 0)                                            */
#define ARM_UART_PL011_ECR_FE_Msk         (0x1UL)                   /*!< FE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_ECR_PE_Pos         (1UL)                     /*!< PE (Bit 1)                                            */
#define ARM_UART_PL011_ECR_PE_Msk         (0x2UL)                   /*!< PE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_ECR_BE_Pos         (2UL)                     /*!< BE (Bit 2)                                            */
#define ARM_UART_PL011_ECR_BE_Msk         (0x4UL)                   /*!< BE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_ECR_OE_Pos         (3UL)                     /*!< OE (Bit 3)                                            */
#define ARM_UART_PL011_ECR_OE_Msk         (0x8UL)                   /*!< OE (Bitfield-Mask: 0x01)                              */
/* ==========================================================  FR  =========================================================== */
#define ARM_UART_PL011_FR_CTS_Pos         (0UL)                     /*!< CTS (Bit 0)                                           */
#define ARM_UART_PL011_FR_CTS_Msk         (0x1UL)                   /*!< CTS (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_FR_DSR_Pos         (1UL)                     /*!< DSR (Bit 1)                                           */
#define ARM_UART_PL011_FR_DSR_Msk         (0x2UL)                   /*!< DSR (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_FR_DCD_Pos         (2UL)                     /*!< DCD (Bit 2)                                           */
#define ARM_UART_PL011_FR_DCD_Msk         (0x4UL)                   /*!< DCD (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_FR_BUSY_Pos        (3UL)                     /*!< BUSY (Bit 3)                                          */
#define ARM_UART_PL011_FR_BUSY_Msk        (0x8UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_RXFE_Pos        (4UL)                     /*!< RXFE (Bit 4)                                          */
#define ARM_UART_PL011_FR_RXFE_Msk        (0x10UL)                  /*!< RXFE (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_TXFF_Pos        (5UL)                     /*!< TXFF (Bit 5)                                          */
#define ARM_UART_PL011_FR_TXFF_Msk        (0x20UL)                  /*!< TXFF (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_RXFF_Pos        (6UL)                     /*!< RXFF (Bit 6)                                          */
#define ARM_UART_PL011_FR_RXFF_Msk        (0x40UL)                  /*!< RXFF (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_TXFE_Pos        (7UL)                     /*!< TXFE (Bit 7)                                          */
#define ARM_UART_PL011_FR_TXFE_Msk        (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_RI_Pos          (8UL)                     /*!< RI (Bit 8)                                            */
#define ARM_UART_PL011_FR_RI_Msk          (0x100UL)                 /*!< RI (Bitfield-Mask: 0x01)                              */
/* =========================================================  IBRD  ========================================================== */
#define ARM_UART_PL011_IBRD_BAUDDIVINT_Pos (0UL)                    /*!< BAUDDIVINT (Bit 0)                                    */
#define ARM_UART_PL011_IBRD_BAUDDIVINT_Msk (0xffffUL)               /*!< BAUDDIVINT (Bitfield-Mask: 0xffff)                    */
/* =========================================================  FBRD  ========================================================== */
#define ARM_UART_PL011_FBRD_BAUDDIVFRAC_Pos (0UL)                   /*!< BAUDDIVFRAC (Bit 0)                                   */
#define ARM_UART_PL011_FBRD_BAUDDIVFRAC_Msk (0x3fUL)                /*!< BAUDDIVFRAC (Bitfield-Mask: 0x3f)                     */
/* =========================================================  LCR_H  ========================================================= */
#define ARM_UART_PL011_LCR_H_BRK_Pos      (0UL)                     /*!< BRK (Bit 0)                                           */
#define ARM_UART_PL011_LCR_H_BRK_Msk      (0x1UL)                   /*!< BRK (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_PEN_Pos      (1UL)                     /*!< PEN (Bit 1)                                           */
#define ARM_UART_PL011_LCR_H_PEN_Msk      (0x2UL)                   /*!< PEN (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_EPS_Pos      (2UL)                     /*!< EPS (Bit 2)                                           */
#define ARM_UART_PL011_LCR_H_EPS_Msk      (0x4UL)                   /*!< EPS (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_STP2_Pos     (3UL)                     /*!< STP2 (Bit 3)                                          */
#define ARM_UART_PL011_LCR_H_STP2_Msk     (0x8UL)                   /*!< STP2 (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_LCR_H_FEN_Pos      (4UL)                     /*!< FEN (Bit 4)                                           */
#define ARM_UART_PL011_LCR_H_FEN_Msk      (0x10UL)                  /*!< FEN (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_WLEN_Pos     (5UL)                     /*!< WLEN (Bit 5)                                          */
#define ARM_UART_PL011_LCR_H_WLEN_Msk     (0x60UL)                  /*!< WLEN (Bitfield-Mask: 0x03)                            */
#define ARM_UART_PL011_LCR_H_SPS_Pos      (7UL)                     /*!< SPS (Bit 7)                                           */
#define ARM_UART_PL011_LCR_H_SPS_Msk      (0x80UL)                  /*!< SPS (Bitfield-Mask: 0x01)                             */
/* ==========================================================  CR  =========================================================== */
#define ARM_UART_PL011_CR_UARTEN_Pos      (0UL)                     /*!< UARTEN (Bit 0)                                        */
#define ARM_UART_PL011_CR_UARTEN_Msk      (0x1UL)                   /*!< UARTEN (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_CR_SIREN_Pos       (1UL)                     /*!< SIREN (Bit 1)                                         */
#define ARM_UART_PL011_CR_SIREN_Msk       (0x2UL)                   /*!< SIREN (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_CR_SIRLP_Pos       (2UL)                     /*!< SIRLP (Bit 2)                                         */
#define ARM_UART_PL011_CR_SIRLP_Msk       (0x4UL)                   /*!< SIRLP (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_CR_TXE_Pos         (8UL)                     /*!< TXE (Bit 8)                                           */
#define ARM_UART_PL011_CR_TXE_Msk         (0x100UL)                 /*!< TXE (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_RXE_Pos         (9UL)                     /*!< RXE (Bit 9)                                           */
#define ARM_UART_PL011_CR_RXE_Msk         (0x200UL)                 /*!< RXE (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_DTR_Pos         (10UL)                    /*!< DTR (Bit 10)                                          */
#define ARM_UART_PL011_CR_DTR_Msk         (0x400UL)                 /*!< DTR (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_RTS_Pos         (11UL)                    /*!< RTS (Bit 11)                                          */
#define ARM_UART_PL011_CR_RTS_Msk         (0x800UL)                 /*!< RTS (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_RTSEN_Pos       (14UL)                    /*!< RTSEN (Bit 14)                                        */
#define ARM_UART_PL011_CR_RTSEN_Msk       (0x4000UL)                /*!< RTSEN (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_CR_CTSEN_Pos       (15UL)                    /*!< CTSEN (Bit 15)                                        */
#define ARM_UART_PL011_CR_CTSEN_Msk       (0x8000UL)                /*!< CTSEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  IFLS  ========================================================== */
#define ARM_UART_PL011_IFLS_TXIFLSEL_Pos  (0UL)                     /*!< TXIFLSEL (Bit 0)                                      */
#define ARM_UART_PL011_IFLS_TXIFLSEL_Msk  (0x7UL)                   /*!< TXIFLSEL (Bitfield-Mask: 0x07)                        */
#define ARM_UART_PL011_IFLS_RXIFLSEL_Pos  (3UL)                     /*!< RXIFLSEL (Bit 3)                                      */
#define ARM_UART_PL011_IFLS_RXIFLSEL_Msk  (0x38UL)                  /*!< RXIFLSEL (Bitfield-Mask: 0x07)                        */
/* =========================================================  IMSC  ========================================================== */
#define ARM_UART_PL011_IMSC_RIMIM_Pos     (0UL)                     /*!< RIMIM (Bit 0)                                         */
#define ARM_UART_PL011_IMSC_RIMIM_Msk     (0x1UL)                   /*!< RIMIM (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_IMSC_CTSMIM_Pos    (1UL)                     /*!< CTSMIM (Bit 1)                                        */
#define ARM_UART_PL011_IMSC_CTSMIM_Msk    (0x2UL)                   /*!< CTSMIM (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_IMSC_DCDMIM_Pos    (2UL)                     /*!< DCDMIM (Bit 2)                                        */
#define ARM_UART_PL011_IMSC_DCDMIM_Msk    (0x4UL)                   /*!< DCDMIM (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_IMSC_DSRMIM_Pos    (3UL)                     /*!< DSRMIM (Bit 3)                                        */
#define ARM_UART_PL011_IMSC_DSRMIM_Msk    (0x8UL)                   /*!< DSRMIM (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_IMSC_RXIM_Pos      (4UL)                     /*!< RXIM (Bit 4)                                          */
#define ARM_UART_PL011_IMSC_RXIM_Msk      (0x10UL)                  /*!< RXIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_TXIM_Pos      (5UL)                     /*!< TXIM (Bit 5)                                          */
#define ARM_UART_PL011_IMSC_TXIM_Msk      (0x20UL)                  /*!< TXIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_RTIM_Pos      (6UL)                     /*!< RTIM (Bit 6)                                          */
#define ARM_UART_PL011_IMSC_RTIM_Msk      (0x40UL)                  /*!< RTIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_FEIM_Pos      (7UL)                     /*!< FEIM (Bit 7)                                          */
#define ARM_UART_PL011_IMSC_FEIM_Msk      (0x80UL)                  /*!< FEIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_PEIM_Pos      (8UL)                     /*!< PEIM (Bit 8)                                          */
#define ARM_UART_PL011_IMSC_PEIM_Msk      (0x100UL)                 /*!< PEIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_BEIM_Pos      (9UL)                     /*!< BEIM (Bit 9)                                          */
#define ARM_UART_PL011_IMSC_BEIM_Msk      (0x200UL)                 /*!< BEIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_OEIM_Pos      (10UL)                    /*!< OEIM (Bit 10)                                         */
#define ARM_UART_PL011_IMSC_OEIM_Msk      (0x400UL)                 /*!< OEIM (Bitfield-Mask: 0x01)                            */
/* ==========================================================  RIS  ========================================================== */
#define ARM_UART_PL011_RIS_RIRMIS_Pos     (0UL)                     /*!< RIRMIS (Bit 0)                                        */
#define ARM_UART_PL011_RIS_RIRMIS_Msk     (0x1UL)                   /*!< RIRMIS (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_RIS_CTSRMIS_Pos    (1UL)                     /*!< CTSRMIS (Bit 1)                                       */
#define ARM_UART_PL011_RIS_CTSRMIS_Msk    (0x2UL)                   /*!< CTSRMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_RIS_DCDRMIS_Pos    (2UL)                     /*!< DCDRMIS (Bit 2)                                       */
#define ARM_UART_PL011_RIS_DCDRMIS_Msk    (0x4UL)                   /*!< DCDRMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_RIS_DSRRMIS_Pos    (3UL)                     /*!< DSRRMIS (Bit 3)                                       */
#define ARM_UART_PL011_RIS_DSRRMIS_Msk    (0x8UL)                   /*!< DSRRMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_RIS_RXRIS_Pos      (4UL)                     /*!< RXRIS (Bit 4)                                         */
#define ARM_UART_PL011_RIS_RXRIS_Msk      (0x10UL)                  /*!< RXRIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_TXRIS_Pos      (5UL)                     /*!< TXRIS (Bit 5)                                         */
#define ARM_UART_PL011_RIS_TXRIS_Msk      (0x20UL)                  /*!< TXRIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_RTRIS_Pos      (6UL)                     /*!< RTRIS (Bit 6)                                         */
#define ARM_UART_PL011_RIS_RTRIS_Msk      (0x40UL)                  /*!< RTRIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_FERIS_Pos      (7UL)                     /*!< FERIS (Bit 7)                                         */
#define ARM_UART_PL011_RIS_FERIS_Msk      (0x80UL)                  /*!< FERIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_PERIS_Pos      (8UL)                     /*!< PERIS (Bit 8)                                         */
#define ARM_UART_PL011_RIS_PERIS_Msk      (0x100UL)                 /*!< PERIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_BERIS_Pos      (9UL)                     /*!< BERIS (Bit 9)                                         */
#define ARM_UART_PL011_RIS_BERIS_Msk      (0x200UL)                 /*!< BERIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_OERIS_Pos      (10UL)                    /*!< OERIS (Bit 10)                                        */
#define ARM_UART_PL011_RIS_OERIS_Msk      (0x400UL)                 /*!< OERIS (Bitfield-Mask: 0x01)                           */
/* ==========================================================  MIS  ========================================================== */
#define ARM_UART_PL011_MIS_RIMMIS_Pos     (0UL)                     /*!< RIMMIS (Bit 0)                                        */
#define ARM_UART_PL011_MIS_RIMMIS_Msk     (0x1UL)                   /*!< RIMMIS (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_MIS_CTSMMIS_Pos    (1UL)                     /*!< CTSMMIS (Bit 1)                                       */
#define ARM_UART_PL011_MIS_CTSMMIS_Msk    (0x2UL)                   /*!< CTSMMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_MIS_DCDMMIS_Pos    (2UL)                     /*!< DCDMMIS (Bit 2)                                       */
#define ARM_UART_PL011_MIS_DCDMMIS_Msk    (0x4UL)                   /*!< DCDMMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_MIS_DSRMMIS_Pos    (3UL)                     /*!< DSRMMIS (Bit 3)                                       */
#define ARM_UART_PL011_MIS_DSRMMIS_Msk    (0x8UL)                   /*!< DSRMMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_MIS_RXMIS_Pos      (4UL)                     /*!< RXMIS (Bit 4)                                         */
#define ARM_UART_PL011_MIS_RXMIS_Msk      (0x10UL)                  /*!< RXMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_TXMIS_Pos      (5UL)                     /*!< TXMIS (Bit 5)                                         */
#define ARM_UART_PL011_MIS_TXMIS_Msk      (0x20UL)                  /*!< TXMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_RTMIS_Pos      (6UL)                     /*!< RTMIS (Bit 6)                                         */
#define ARM_UART_PL011_MIS_RTMIS_Msk      (0x40UL)                  /*!< RTMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_FEMIS_Pos      (7UL)                     /*!< FEMIS (Bit 7)                                         */
#define ARM_UART_PL011_MIS_FEMIS_Msk      (0x80UL)                  /*!< FEMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_PEMIS_Pos      (8UL)                     /*!< PEMIS (Bit 8)                                         */
#define ARM_UART_PL011_MIS_PEMIS_Msk      (0x100UL)                 /*!< PEMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_BEMIS_Pos      (9UL)                     /*!< BEMIS (Bit 9)                                         */
#define ARM_UART_PL011_MIS_BEMIS_Msk      (0x200UL)                 /*!< BEMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_OEMIS_Pos      (10UL)                    /*!< OEMIS (Bit 10)                                        */
#define ARM_UART_PL011_MIS_OEMIS_Msk      (0x400UL)                 /*!< OEMIS (Bitfield-Mask: 0x01)                           */
/* ==========================================================  ICR  ========================================================== */
#define ARM_UART_PL011_ICR_RIMIC_Pos      (0UL)                     /*!< RIMIC (Bit 0)                                         */
#define ARM_UART_PL011_ICR_RIMIC_Msk      (0x1UL)                   /*!< RIMIC (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_ICR_CTSMIC_Pos     (1UL)                     /*!< CTSMIC (Bit 1)                                        */
#define ARM_UART_PL011_ICR_CTSMIC_Msk     (0x2UL)                   /*!< CTSMIC (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_ICR_DCDMIC_Pos     (2UL)                     /*!< DCDMIC (Bit 2)                                        */
#define ARM_UART_PL011_ICR_DCDMIC_Msk     (0x4UL)                   /*!< DCDMIC (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_ICR_DSRMIC_Pos     (3UL)                     /*!< DSRMIC (Bit 3)                                        */
#define ARM_UART_PL011_ICR_DSRMIC_Msk     (0x8UL)                   /*!< DSRMIC (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_ICR_RXIC_Pos       (4UL)                     /*!< RXIC (Bit 4)                                          */
#define ARM_UART_PL011_ICR_RXIC_Msk       (0x10UL)                  /*!< RXIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_TXIC_Pos       (5UL)                     /*!< TXIC (Bit 5)                                          */
#define ARM_UART_PL011_ICR_TXIC_Msk       (0x20UL)                  /*!< TXIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_RTIC_Pos       (6UL)                     /*!< RTIC (Bit 6)                                          */
#define ARM_UART_PL011_ICR_RTIC_Msk       (0x40UL)                  /*!< RTIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_FEIC_Pos       (7UL)                     /*!< FEIC (Bit 7)                                          */
#define ARM_UART_PL011_ICR_FEIC_Msk       (0x80UL)                  /*!< FEIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_PEIC_Pos       (8UL)                     /*!< PEIC (Bit 8)                                          */
#define ARM_UART_PL011_ICR_PEIC_Msk       (0x100UL)                 /*!< PEIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_BEIC_Pos       (9UL)                     /*!< BEIC (Bit 9)                                          */
#define ARM_UART_PL011_ICR_BEIC_Msk       (0x200UL)                 /*!< BEIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_OEIC_Pos       (10UL)                    /*!< OEIC (Bit 10)                                         */
#define ARM_UART_PL011_ICR_OEIC_Msk       (0x400UL)                 /*!< OEIC (Bitfield-Mask: 0x01)                            */
/* =========================================================  DMACR  ========================================================= */
#define ARM_UART_PL011_DMACR_RXDMAE_Pos   (0UL)                     /*!< RXDMAE (Bit 0)                                        */
#define ARM_UART_PL011_DMACR_RXDMAE_Msk   (0x1UL)                   /*!< RXDMAE (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_DMACR_TXDMAE_Pos   (1UL)                     /*!< TXDMAE (Bit 1)                                        */
#define ARM_UART_PL011_DMACR_TXDMAE_Msk   (0x2UL)                   /*!< TXDMAE (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_DMACR_DMAONERR_Pos (2UL)                     /*!< DMAONERR (Bit 2)                                      */
#define ARM_UART_PL011_DMACR_DMAONERR_Msk (0x4UL)                   /*!< DMAONERR (Bitfield-Mask: 0x01)                        */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define SPI0_CS_LEN_LONG_Pos              (25UL)                    /*!< LEN_LONG (Bit 25)                                     */
#define SPI0_CS_LEN_LONG_Msk              (0x2000000UL)             /*!< LEN_LONG (Bitfield-Mask: 0x01)                        */
#define SPI0_CS_DMA_LEN_Pos               (24UL)                    /*!< DMA_LEN (Bit 24)                                      */
#define SPI0_CS_DMA_LEN_Msk               (0x1000000UL)             /*!< DMA_LEN (Bitfield-Mask: 0x01)                         */
#define SPI0_CS_CSPOL2_Pos                (23UL)                    /*!< CSPOL2 (Bit 23)                                       */
#define SPI0_CS_CSPOL2_Msk                (0x800000UL)              /*!< CSPOL2 (Bitfield-Mask: 0x01)                          */
#define SPI0_CS_CSPOL1_Pos                (22UL)                    /*!< CSPOL1 (Bit 22)                                       */
#define SPI0_CS_CSPOL1_Msk                (0x400000UL)              /*!< CSPOL1 (Bitfield-Mask: 0x01)                          */
#define SPI0_CS_CSPOL0_Pos                (21UL)                    /*!< CSPOL0 (Bit 21)                                       */
#define SPI0_CS_CSPOL0_Msk                (0x200000UL)              /*!< CSPOL0 (Bitfield-Mask: 0x01)                          */
#define SPI0_CS_RXF_Pos                   (20UL)                    /*!< RXF (Bit 20)                                          */
#define SPI0_CS_RXF_Msk                   (0x100000UL)              /*!< RXF (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_RXR_Pos                   (19UL)                    /*!< RXR (Bit 19)                                          */
#define SPI0_CS_RXR_Msk                   (0x80000UL)               /*!< RXR (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_TXD_Pos                   (18UL)                    /*!< TXD (Bit 18)                                          */
#define SPI0_CS_TXD_Msk                   (0x40000UL)               /*!< TXD (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_RXD_Pos                   (17UL)                    /*!< RXD (Bit 17)                                          */
#define SPI0_CS_RXD_Msk                   (0x20000UL)               /*!< RXD (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_DONE_Pos                  (16UL)                    /*!< DONE (Bit 16)                                         */
#define SPI0_CS_DONE_Msk                  (0x10000UL)               /*!< DONE (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_TE_EN_Pos                 (15UL)                    /*!< TE_EN (Bit 15)                                        */
#define SPI0_CS_TE_EN_Msk                 (0x8000UL)                /*!< TE_EN (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_LMONO_Pos                 (14UL)                    /*!< LMONO (Bit 14)                                        */
#define SPI0_CS_LMONO_Msk                 (0x4000UL)                /*!< LMONO (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_LEN_Pos                   (13UL)                    /*!< LEN (Bit 13)                                          */
#define SPI0_CS_LEN_Msk                   (0x2000UL)                /*!< LEN (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_REN_Pos                   (12UL)                    /*!< REN (Bit 12)                                          */
#define SPI0_CS_REN_Msk                   (0x1000UL)                /*!< REN (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_ADCS_Pos                  (11UL)                    /*!< ADCS (Bit 11)                                         */
#define SPI0_CS_ADCS_Msk                  (0x800UL)                 /*!< ADCS (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_INTR_Pos                  (10UL)                    /*!< INTR (Bit 10)                                         */
#define SPI0_CS_INTR_Msk                  (0x400UL)                 /*!< INTR (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_INTD_Pos                  (9UL)                     /*!< INTD (Bit 9)                                          */
#define SPI0_CS_INTD_Msk                  (0x200UL)                 /*!< INTD (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_DMAEN_Pos                 (8UL)                     /*!< DMAEN (Bit 8)                                         */
#define SPI0_CS_DMAEN_Msk                 (0x100UL)                 /*!< DMAEN (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_TA_Pos                    (7UL)                     /*!< TA (Bit 7)                                            */
#define SPI0_CS_TA_Msk                    (0x80UL)                  /*!< TA (Bitfield-Mask: 0x01)                              */
#define SPI0_CS_CSPOL_Pos                 (6UL)                     /*!< CSPOL (Bit 6)                                         */
#define SPI0_CS_CSPOL_Msk                 (0x40UL)                  /*!< CSPOL (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_CLEAR_Pos                 (4UL)                     /*!< CLEAR (Bit 4)                                         */
#define SPI0_CS_CLEAR_Msk                 (0x30UL)                  /*!< CLEAR (Bitfield-Mask: 0x03)                           */
#define SPI0_CS_CPOL_Pos                  (3UL)                     /*!< CPOL (Bit 3)                                          */
#define SPI0_CS_CPOL_Msk                  (0x8UL)                   /*!< CPOL (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_CPHA_Pos                  (2UL)                     /*!< CPHA (Bit 2)                                          */
#define SPI0_CS_CPHA_Msk                  (0x4UL)                   /*!< CPHA (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_CS_Pos                    (0UL)                     /*!< CS (Bit 0)                                            */
#define SPI0_CS_CS_Msk                    (0x3UL)                   /*!< CS (Bitfield-Mask: 0x03)                              */
/* =========================================================  FIFO  ========================================================== */
#define SPI0_FIFO_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI0_FIFO_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff)                      */
/* ==========================================================  CLK  ========================================================== */
#define SPI0_CLK_CDIV_Pos                 (0UL)                     /*!< CDIV (Bit 0)                                          */
#define SPI0_CLK_CDIV_Msk                 (0xffffUL)                /*!< CDIV (Bitfield-Mask: 0xffff)                          */
/* =========================================================  DLEN  ========================================================== */
#define SPI0_DLEN_DLEN_Pos                (0UL)                     /*!< DLEN (Bit 0)                                          */
#define SPI0_DLEN_DLEN_Msk                (0xffffUL)                /*!< DLEN (Bitfield-Mask: 0xffff)                          */
/* =========================================================  LTOH  ========================================================== */
#define SPI0_LTOH_TOH_Pos                 (0UL)                     /*!< TOH (Bit 0)                                           */
#define SPI0_LTOH_TOH_Msk                 (0xfUL)                   /*!< TOH (Bitfield-Mask: 0x0f)                             */
/* ==========================================================  DC  =========================================================== */
#define SPI0_DC_RPANIC_Pos                (24UL)                    /*!< RPANIC (Bit 24)                                       */
#define SPI0_DC_RPANIC_Msk                (0xff000000UL)            /*!< RPANIC (Bitfield-Mask: 0xff)                          */
#define SPI0_DC_RDREQ_Pos                 (16UL)                    /*!< RDREQ (Bit 16)                                        */
#define SPI0_DC_RDREQ_Msk                 (0xff0000UL)              /*!< RDREQ (Bitfield-Mask: 0xff)                           */
#define SPI0_DC_TPANIC_Pos                (8UL)                     /*!< TPANIC (Bit 8)                                        */
#define SPI0_DC_TPANIC_Msk                (0xff00UL)                /*!< TPANIC (Bitfield-Mask: 0xff)                          */
#define SPI0_DC_TDREQ_Pos                 (0UL)                     /*!< TDREQ (Bit 0)                                         */
#define SPI0_DC_TDREQ_Msk                 (0xffUL)                  /*!< TDREQ (Bitfield-Mask: 0xff)                           */


/* =========================================================================================================================== */
/* ================                                           PACTL                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define PACTL_CS_SPI_0_Pos                (0UL)                     /*!< SPI_0 (Bit 0)                                         */
#define PACTL_CS_SPI_0_Msk                (0x1UL)                   /*!< SPI_0 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_SPI_1_Pos                (1UL)                     /*!< SPI_1 (Bit 1)                                         */
#define PACTL_CS_SPI_1_Msk                (0x2UL)                   /*!< SPI_1 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_SPI_2_Pos                (2UL)                     /*!< SPI_2 (Bit 2)                                         */
#define PACTL_CS_SPI_2_Msk                (0x4UL)                   /*!< SPI_2 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_SPI_3_Pos                (3UL)                     /*!< SPI_3 (Bit 3)                                         */
#define PACTL_CS_SPI_3_Msk                (0x8UL)                   /*!< SPI_3 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_SPI_4_Pos                (4UL)                     /*!< SPI_4 (Bit 4)                                         */
#define PACTL_CS_SPI_4_Msk                (0x10UL)                  /*!< SPI_4 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_SPI_5_Pos                (5UL)                     /*!< SPI_5 (Bit 5)                                         */
#define PACTL_CS_SPI_5_Msk                (0x20UL)                  /*!< SPI_5 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_SPI_6_Pos                (6UL)                     /*!< SPI_6 (Bit 6)                                         */
#define PACTL_CS_SPI_6_Msk                (0x40UL)                  /*!< SPI_6 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_0_Pos                (8UL)                     /*!< I2C_0 (Bit 8)                                         */
#define PACTL_CS_I2C_0_Msk                (0x100UL)                 /*!< I2C_0 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_1_Pos                (9UL)                     /*!< I2C_1 (Bit 9)                                         */
#define PACTL_CS_I2C_1_Msk                (0x200UL)                 /*!< I2C_1 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_2_Pos                (10UL)                    /*!< I2C_2 (Bit 10)                                        */
#define PACTL_CS_I2C_2_Msk                (0x400UL)                 /*!< I2C_2 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_3_Pos                (11UL)                    /*!< I2C_3 (Bit 11)                                        */
#define PACTL_CS_I2C_3_Msk                (0x800UL)                 /*!< I2C_3 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_4_Pos                (12UL)                    /*!< I2C_4 (Bit 12)                                        */
#define PACTL_CS_I2C_4_Msk                (0x1000UL)                /*!< I2C_4 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_5_Pos                (13UL)                    /*!< I2C_5 (Bit 13)                                        */
#define PACTL_CS_I2C_5_Msk                (0x2000UL)                /*!< I2C_5 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_6_Pos                (14UL)                    /*!< I2C_6 (Bit 14)                                        */
#define PACTL_CS_I2C_6_Msk                (0x4000UL)                /*!< I2C_6 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_I2C_7_Pos                (15UL)                    /*!< I2C_7 (Bit 15)                                        */
#define PACTL_CS_I2C_7_Msk                (0x8000UL)                /*!< I2C_7 (Bitfield-Mask: 0x01)                           */
#define PACTL_CS_UART_5_Pos               (16UL)                    /*!< UART_5 (Bit 16)                                       */
#define PACTL_CS_UART_5_Msk               (0x10000UL)               /*!< UART_5 (Bitfield-Mask: 0x01)                          */
#define PACTL_CS_UART_4_Pos               (17UL)                    /*!< UART_4 (Bit 17)                                       */
#define PACTL_CS_UART_4_Msk               (0x20000UL)               /*!< UART_4 (Bitfield-Mask: 0x01)                          */
#define PACTL_CS_UART_3_Pos               (18UL)                    /*!< UART_3 (Bit 18)                                       */
#define PACTL_CS_UART_3_Msk               (0x40000UL)               /*!< UART_3 (Bitfield-Mask: 0x01)                          */
#define PACTL_CS_UART_2_Pos               (19UL)                    /*!< UART_2 (Bit 19)                                       */
#define PACTL_CS_UART_2_Msk               (0x80000UL)               /*!< UART_2 (Bitfield-Mask: 0x01)                          */
#define PACTL_CS_UART_0_Pos               (20UL)                    /*!< UART_0 (Bit 20)                                       */
#define PACTL_CS_UART_0_Msk               (0x100000UL)              /*!< UART_0 (Bitfield-Mask: 0x01)                          */


/* =========================================================================================================================== */
/* ================                                           BSC0                                            ================ */
/* =========================================================================================================================== */

/* ===========================================================  C  =========================================================== */
#define BSC0_C_I2CEN_Pos                  (15UL)                    /*!< I2CEN (Bit 15)                                        */
#define BSC0_C_I2CEN_Msk                  (0x8000UL)                /*!< I2CEN (Bitfield-Mask: 0x01)                           */
#define BSC0_C_INTR_Pos                   (10UL)                    /*!< INTR (Bit 10)                                         */
#define BSC0_C_INTR_Msk                   (0x400UL)                 /*!< INTR (Bitfield-Mask: 0x01)                            */
#define BSC0_C_INTT_Pos                   (9UL)                     /*!< INTT (Bit 9)                                          */
#define BSC0_C_INTT_Msk                   (0x200UL)                 /*!< INTT (Bitfield-Mask: 0x01)                            */
#define BSC0_C_INTD_Pos                   (8UL)                     /*!< INTD (Bit 8)                                          */
#define BSC0_C_INTD_Msk                   (0x100UL)                 /*!< INTD (Bitfield-Mask: 0x01)                            */
#define BSC0_C_ST_Pos                     (7UL)                     /*!< ST (Bit 7)                                            */
#define BSC0_C_ST_Msk                     (0x80UL)                  /*!< ST (Bitfield-Mask: 0x01)                              */
#define BSC0_C_CLEAR_Pos                  (4UL)                     /*!< CLEAR (Bit 4)                                         */
#define BSC0_C_CLEAR_Msk                  (0x30UL)                  /*!< CLEAR (Bitfield-Mask: 0x03)                           */
#define BSC0_C_READ_Pos                   (0UL)                     /*!< READ (Bit 0)                                          */
#define BSC0_C_READ_Msk                   (0x1UL)                   /*!< READ (Bitfield-Mask: 0x01)                            */
/* ===========================================================  S  =========================================================== */
#define BSC0_S_CLKT_Pos                   (9UL)                     /*!< CLKT (Bit 9)                                          */
#define BSC0_S_CLKT_Msk                   (0x200UL)                 /*!< CLKT (Bitfield-Mask: 0x01)                            */
#define BSC0_S_ERR_Pos                    (8UL)                     /*!< ERR (Bit 8)                                           */
#define BSC0_S_ERR_Msk                    (0x100UL)                 /*!< ERR (Bitfield-Mask: 0x01)                             */
#define BSC0_S_RXF_Pos                    (7UL)                     /*!< RXF (Bit 7)                                           */
#define BSC0_S_RXF_Msk                    (0x80UL)                  /*!< RXF (Bitfield-Mask: 0x01)                             */
#define BSC0_S_TXE_Pos                    (6UL)                     /*!< TXE (Bit 6)                                           */
#define BSC0_S_TXE_Msk                    (0x40UL)                  /*!< TXE (Bitfield-Mask: 0x01)                             */
#define BSC0_S_RXD_Pos                    (5UL)                     /*!< RXD (Bit 5)                                           */
#define BSC0_S_RXD_Msk                    (0x20UL)                  /*!< RXD (Bitfield-Mask: 0x01)                             */
#define BSC0_S_TXD_Pos                    (4UL)                     /*!< TXD (Bit 4)                                           */
#define BSC0_S_TXD_Msk                    (0x10UL)                  /*!< TXD (Bitfield-Mask: 0x01)                             */
#define BSC0_S_RXR_Pos                    (3UL)                     /*!< RXR (Bit 3)                                           */
#define BSC0_S_RXR_Msk                    (0x8UL)                   /*!< RXR (Bitfield-Mask: 0x01)                             */
#define BSC0_S_TXW_Pos                    (2UL)                     /*!< TXW (Bit 2)                                           */
#define BSC0_S_TXW_Msk                    (0x4UL)                   /*!< TXW (Bitfield-Mask: 0x01)                             */
#define BSC0_S_DONE_Pos                   (1UL)                     /*!< DONE (Bit 1)                                          */
#define BSC0_S_DONE_Msk                   (0x2UL)                   /*!< DONE (Bitfield-Mask: 0x01)                            */
#define BSC0_S_TA_Pos                     (0UL)                     /*!< TA (Bit 0)                                            */
#define BSC0_S_TA_Msk                     (0x1UL)                   /*!< TA (Bitfield-Mask: 0x01)                              */
/* =========================================================  DLEN  ========================================================== */
#define BSC0_DLEN_DLEN_Pos                (0UL)                     /*!< DLEN (Bit 0)                                          */
#define BSC0_DLEN_DLEN_Msk                (0xffffUL)                /*!< DLEN (Bitfield-Mask: 0xffff)                          */
/* ===========================================================  A  =========================================================== */
#define BSC0_A_ADDR_Pos                   (0UL)                     /*!< ADDR (Bit 0)                                          */
#define BSC0_A_ADDR_Msk                   (0x7fUL)                  /*!< ADDR (Bitfield-Mask: 0x7f)                            */
/* =========================================================  FIFO  ========================================================== */
#define BSC0_FIFO_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define BSC0_FIFO_DATA_Msk                (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  DIV  ========================================================== */
#define BSC0_DIV_CDIV_Pos                 (0UL)                     /*!< CDIV (Bit 0)                                          */
#define BSC0_DIV_CDIV_Msk                 (0xffffUL)                /*!< CDIV (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  DEL  ========================================================== */
#define BSC0_DEL_FEDL_Pos                 (16UL)                    /*!< FEDL (Bit 16)                                         */
#define BSC0_DEL_FEDL_Msk                 (0xffff0000UL)            /*!< FEDL (Bitfield-Mask: 0xffff)                          */
#define BSC0_DEL_REDL_Pos                 (0UL)                     /*!< REDL (Bit 0)                                          */
#define BSC0_DEL_REDL_Msk                 (0xffffUL)                /*!< REDL (Bitfield-Mask: 0xffff)                          */
/* =========================================================  CLKT  ========================================================== */
#define BSC0_CLKT_TOUT_Pos                (0UL)                     /*!< TOUT (Bit 0)                                          */
#define BSC0_CLKT_TOUT_Msk                (0xffffUL)                /*!< TOUT (Bitfield-Mask: 0xffff)                          */


/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define PWM0_CTL_MSEN2_Pos                (15UL)                    /*!< MSEN2 (Bit 15)                                        */
#define PWM0_CTL_MSEN2_Msk                (0x8000UL)                /*!< MSEN2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_USEF2_Pos                (13UL)                    /*!< USEF2 (Bit 13)                                        */
#define PWM0_CTL_USEF2_Msk                (0x2000UL)                /*!< USEF2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_POLA2_Pos                (12UL)                    /*!< POLA2 (Bit 12)                                        */
#define PWM0_CTL_POLA2_Msk                (0x1000UL)                /*!< POLA2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_SBIT2_Pos                (11UL)                    /*!< SBIT2 (Bit 11)                                        */
#define PWM0_CTL_SBIT2_Msk                (0x800UL)                 /*!< SBIT2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_RPTL2_Pos                (10UL)                    /*!< RPTL2 (Bit 10)                                        */
#define PWM0_CTL_RPTL2_Msk                (0x400UL)                 /*!< RPTL2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_MODE2_Pos                (9UL)                     /*!< MODE2 (Bit 9)                                         */
#define PWM0_CTL_MODE2_Msk                (0x200UL)                 /*!< MODE2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_PWEN2_Pos                (8UL)                     /*!< PWEN2 (Bit 8)                                         */
#define PWM0_CTL_PWEN2_Msk                (0x100UL)                 /*!< PWEN2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_MSEN1_Pos                (7UL)                     /*!< MSEN1 (Bit 7)                                         */
#define PWM0_CTL_MSEN1_Msk                (0x80UL)                  /*!< MSEN1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_CLRF1_Pos                (6UL)                     /*!< CLRF1 (Bit 6)                                         */
#define PWM0_CTL_CLRF1_Msk                (0x40UL)                  /*!< CLRF1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_USEF1_Pos                (5UL)                     /*!< USEF1 (Bit 5)                                         */
#define PWM0_CTL_USEF1_Msk                (0x20UL)                  /*!< USEF1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_POLA1_Pos                (4UL)                     /*!< POLA1 (Bit 4)                                         */
#define PWM0_CTL_POLA1_Msk                (0x10UL)                  /*!< POLA1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_SBIT1_Pos                (3UL)                     /*!< SBIT1 (Bit 3)                                         */
#define PWM0_CTL_SBIT1_Msk                (0x8UL)                   /*!< SBIT1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_RPTL1_Pos                (2UL)                     /*!< RPTL1 (Bit 2)                                         */
#define PWM0_CTL_RPTL1_Msk                (0x4UL)                   /*!< RPTL1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_MODE1_Pos                (1UL)                     /*!< MODE1 (Bit 1)                                         */
#define PWM0_CTL_MODE1_Msk                (0x2UL)                   /*!< MODE1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_PWEN1_Pos                (0UL)                     /*!< PWEN1 (Bit 0)                                         */
#define PWM0_CTL_PWEN1_Msk                (0x1UL)                   /*!< PWEN1 (Bitfield-Mask: 0x01)                           */
/* ==========================================================  STA  ========================================================== */
#define PWM0_STA_STA4_Pos                 (12UL)                    /*!< STA4 (Bit 12)                                         */
#define PWM0_STA_STA4_Msk                 (0x1000UL)                /*!< STA4 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_STA3_Pos                 (11UL)                    /*!< STA3 (Bit 11)                                         */
#define PWM0_STA_STA3_Msk                 (0x800UL)                 /*!< STA3 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_STA2_Pos                 (10UL)                    /*!< STA2 (Bit 10)                                         */
#define PWM0_STA_STA2_Msk                 (0x400UL)                 /*!< STA2 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_STA1_Pos                 (9UL)                     /*!< STA1 (Bit 9)                                          */
#define PWM0_STA_STA1_Msk                 (0x200UL)                 /*!< STA1 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_BERR_Pos                 (8UL)                     /*!< BERR (Bit 8)                                          */
#define PWM0_STA_BERR_Msk                 (0x100UL)                 /*!< BERR (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_GAPO4_Pos                (7UL)                     /*!< GAPO4 (Bit 7)                                         */
#define PWM0_STA_GAPO4_Msk                (0x80UL)                  /*!< GAPO4 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_GAPO3_Pos                (6UL)                     /*!< GAPO3 (Bit 6)                                         */
#define PWM0_STA_GAPO3_Msk                (0x40UL)                  /*!< GAPO3 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_GAPO2_Pos                (5UL)                     /*!< GAPO2 (Bit 5)                                         */
#define PWM0_STA_GAPO2_Msk                (0x20UL)                  /*!< GAPO2 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_GAPO1_Pos                (4UL)                     /*!< GAPO1 (Bit 4)                                         */
#define PWM0_STA_GAPO1_Msk                (0x10UL)                  /*!< GAPO1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_RERR1_Pos                (3UL)                     /*!< RERR1 (Bit 3)                                         */
#define PWM0_STA_RERR1_Msk                (0x8UL)                   /*!< RERR1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_WERR1_Pos                (2UL)                     /*!< WERR1 (Bit 2)                                         */
#define PWM0_STA_WERR1_Msk                (0x4UL)                   /*!< WERR1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_EMPT1_Pos                (1UL)                     /*!< EMPT1 (Bit 1)                                         */
#define PWM0_STA_EMPT1_Msk                (0x2UL)                   /*!< EMPT1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_FULL1_Pos                (0UL)                     /*!< FULL1 (Bit 0)                                         */
#define PWM0_STA_FULL1_Msk                (0x1UL)                   /*!< FULL1 (Bitfield-Mask: 0x01)                           */
/* =========================================================  DMAC  ========================================================== */
#define PWM0_DMAC_ENAB_Pos                (31UL)                    /*!< ENAB (Bit 31)                                         */
#define PWM0_DMAC_ENAB_Msk                (0x80000000UL)            /*!< ENAB (Bitfield-Mask: 0x01)                            */
#define PWM0_DMAC_PANIC_Pos               (8UL)                     /*!< PANIC (Bit 8)                                         */
#define PWM0_DMAC_PANIC_Msk               (0xff00UL)                /*!< PANIC (Bitfield-Mask: 0xff)                           */
#define PWM0_DMAC_DREQ_Pos                (0UL)                     /*!< DREQ (Bit 0)                                          */
#define PWM0_DMAC_DREQ_Msk                (0xffUL)                  /*!< DREQ (Bitfield-Mask: 0xff)                            */
/* =========================================================  RNG1  ========================================================== */
/* =========================================================  DAT1  ========================================================== */
/* =========================================================  FIF1  ========================================================== */
/* =========================================================  RNG2  ========================================================== */
/* =========================================================  DAT2  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            AUX                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  IRQ  ========================================================== */
#define AUX_IRQ_SPI_2_Pos                 (2UL)                     /*!< SPI_2 (Bit 2)                                         */
#define AUX_IRQ_SPI_2_Msk                 (0x4UL)                   /*!< SPI_2 (Bitfield-Mask: 0x01)                           */
#define AUX_IRQ_SPI_1_Pos                 (1UL)                     /*!< SPI_1 (Bit 1)                                         */
#define AUX_IRQ_SPI_1_Msk                 (0x2UL)                   /*!< SPI_1 (Bitfield-Mask: 0x01)                           */
#define AUX_IRQ_UART_1_Pos                (0UL)                     /*!< UART_1 (Bit 0)                                        */
#define AUX_IRQ_UART_1_Msk                (0x1UL)                   /*!< UART_1 (Bitfield-Mask: 0x01)                          */
/* ========================================================  ENABLES  ======================================================== */
#define AUX_ENABLES_SPI_2_Pos             (2UL)                     /*!< SPI_2 (Bit 2)                                         */
#define AUX_ENABLES_SPI_2_Msk             (0x4UL)                   /*!< SPI_2 (Bitfield-Mask: 0x01)                           */
#define AUX_ENABLES_SPI_1_Pos             (1UL)                     /*!< SPI_1 (Bit 1)                                         */
#define AUX_ENABLES_SPI_1_Msk             (0x2UL)                   /*!< SPI_1 (Bitfield-Mask: 0x01)                           */
#define AUX_ENABLES_UART_1_Pos            (0UL)                     /*!< UART_1 (Bit 0)                                        */
#define AUX_ENABLES_UART_1_Msk            (0x1UL)                   /*!< UART_1 (Bitfield-Mask: 0x01)                          */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  IO  =========================================================== */
#define UART1_IO_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART1_IO_DATA_Msk                 (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* =========================================================  BAUDL  ========================================================= */
/* ==========================================================  IER  ========================================================== */
#define UART1_IER_TX_READY_Pos            (1UL)                     /*!< TX_READY (Bit 1)                                      */
#define UART1_IER_TX_READY_Msk            (0x2UL)                   /*!< TX_READY (Bitfield-Mask: 0x01)                        */
#define UART1_IER_DATA_READY_Pos          (0UL)                     /*!< DATA_READY (Bit 0)                                    */
#define UART1_IER_DATA_READY_Msk          (0x1UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
/* =========================================================  BAUDH  ========================================================= */
/* ==========================================================  IIR  ========================================================== */
#define UART1_IIR_TX_READY_Pos            (2UL)                     /*!< TX_READY (Bit 2)                                      */
#define UART1_IIR_TX_READY_Msk            (0x4UL)                   /*!< TX_READY (Bitfield-Mask: 0x01)                        */
#define UART1_IIR_DATA_READY_Pos          (1UL)                     /*!< DATA_READY (Bit 1)                                    */
#define UART1_IIR_DATA_READY_Msk          (0x2UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
#define UART1_IIR_nPENDING_Pos            (0UL)                     /*!< nPENDING (Bit 0)                                      */
#define UART1_IIR_nPENDING_Msk            (0x1UL)                   /*!< nPENDING (Bitfield-Mask: 0x01)                        */
/* ==========================================================  LCR  ========================================================== */
#define UART1_LCR_DLAB_Pos                (7UL)                     /*!< DLAB (Bit 7)                                          */
#define UART1_LCR_DLAB_Msk                (0x80UL)                  /*!< DLAB (Bitfield-Mask: 0x01)                            */
#define UART1_LCR_BREAK_Pos               (6UL)                     /*!< BREAK (Bit 6)                                         */
#define UART1_LCR_BREAK_Msk               (0x40UL)                  /*!< BREAK (Bitfield-Mask: 0x01)                           */
#define UART1_LCR_DATA_SIZE_Pos           (0UL)                     /*!< DATA_SIZE (Bit 0)                                     */
#define UART1_LCR_DATA_SIZE_Msk           (0x3UL)                   /*!< DATA_SIZE (Bitfield-Mask: 0x03)                       */
/* ==========================================================  MCR  ========================================================== */
#define UART1_MCR_RTS_Pos                 (1UL)                     /*!< RTS (Bit 1)                                           */
#define UART1_MCR_RTS_Msk                 (0x2UL)                   /*!< RTS (Bitfield-Mask: 0x01)                             */
/* ==========================================================  LSR  ========================================================== */
#define UART1_LSR_TX_IDLE_Pos             (6UL)                     /*!< TX_IDLE (Bit 6)                                       */
#define UART1_LSR_TX_IDLE_Msk             (0x40UL)                  /*!< TX_IDLE (Bitfield-Mask: 0x01)                         */
#define UART1_LSR_TX_EMPTY_Pos            (5UL)                     /*!< TX_EMPTY (Bit 5)                                      */
#define UART1_LSR_TX_EMPTY_Msk            (0x20UL)                  /*!< TX_EMPTY (Bitfield-Mask: 0x01)                        */
#define UART1_LSR_RX_OVERRUN_Pos          (1UL)                     /*!< RX_OVERRUN (Bit 1)                                    */
#define UART1_LSR_RX_OVERRUN_Msk          (0x2UL)                   /*!< RX_OVERRUN (Bitfield-Mask: 0x01)                      */
#define UART1_LSR_DATA_READY_Pos          (0UL)                     /*!< DATA_READY (Bit 0)                                    */
#define UART1_LSR_DATA_READY_Msk          (0x1UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
/* ==========================================================  MSR  ========================================================== */
#define UART1_MSR_CTS_Pos                 (4UL)                     /*!< CTS (Bit 4)                                           */
#define UART1_MSR_CTS_Msk                 (0x10UL)                  /*!< CTS (Bitfield-Mask: 0x01)                             */
/* ========================================================  SCRATCH  ======================================================== */
/* =========================================================  CNTL  ========================================================== */
#define UART1_CNTL_CTS_ASSERT_Pos         (7UL)                     /*!< CTS_ASSERT (Bit 7)                                    */
#define UART1_CNTL_CTS_ASSERT_Msk         (0x80UL)                  /*!< CTS_ASSERT (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_RTS_ASSERT_Pos         (6UL)                     /*!< RTS_ASSERT (Bit 6)                                    */
#define UART1_CNTL_RTS_ASSERT_Msk         (0x40UL)                  /*!< RTS_ASSERT (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_RTS_FIFO_LEVEL_Pos     (4UL)                     /*!< RTS_FIFO_LEVEL (Bit 4)                                */
#define UART1_CNTL_RTS_FIFO_LEVEL_Msk     (0x30UL)                  /*!< RTS_FIFO_LEVEL (Bitfield-Mask: 0x03)                  */
#define UART1_CNTL_CTS_ENABLE_Pos         (3UL)                     /*!< CTS_ENABLE (Bit 3)                                    */
#define UART1_CNTL_CTS_ENABLE_Msk         (0x8UL)                   /*!< CTS_ENABLE (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_RTS_ENABLE_Pos         (2UL)                     /*!< RTS_ENABLE (Bit 2)                                    */
#define UART1_CNTL_RTS_ENABLE_Msk         (0x4UL)                   /*!< RTS_ENABLE (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_TX_ENABLE_Pos          (1UL)                     /*!< TX_ENABLE (Bit 1)                                     */
#define UART1_CNTL_TX_ENABLE_Msk          (0x2UL)                   /*!< TX_ENABLE (Bitfield-Mask: 0x01)                       */
#define UART1_CNTL_RX_ENABLE_Pos          (0UL)                     /*!< RX_ENABLE (Bit 0)                                     */
#define UART1_CNTL_RX_ENABLE_Msk          (0x1UL)                   /*!< RX_ENABLE (Bitfield-Mask: 0x01)                       */
/* =========================================================  STAT  ========================================================== */
#define UART1_STAT_TX_FIFO_LEVEL_Pos      (24UL)                    /*!< TX_FIFO_LEVEL (Bit 24)                                */
#define UART1_STAT_TX_FIFO_LEVEL_Msk      (0xf000000UL)             /*!< TX_FIFO_LEVEL (Bitfield-Mask: 0x0f)                   */
#define UART1_STAT_RX_FIFO_LEVEL_Pos      (16UL)                    /*!< RX_FIFO_LEVEL (Bit 16)                                */
#define UART1_STAT_RX_FIFO_LEVEL_Msk      (0xf0000UL)               /*!< RX_FIFO_LEVEL (Bitfield-Mask: 0x0f)                   */
#define UART1_STAT_TX_DONE_Pos            (9UL)                     /*!< TX_DONE (Bit 9)                                       */
#define UART1_STAT_TX_DONE_Msk            (0x200UL)                 /*!< TX_DONE (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_TX_EMPTY_Pos           (8UL)                     /*!< TX_EMPTY (Bit 8)                                      */
#define UART1_STAT_TX_EMPTY_Msk           (0x100UL)                 /*!< TX_EMPTY (Bitfield-Mask: 0x01)                        */
#define UART1_STAT_CTS_STATUS_Pos         (7UL)                     /*!< CTS_STATUS (Bit 7)                                    */
#define UART1_STAT_CTS_STATUS_Msk         (0x80UL)                  /*!< CTS_STATUS (Bitfield-Mask: 0x01)                      */
#define UART1_STAT_RTS_STATUS_Pos         (6UL)                     /*!< RTS_STATUS (Bit 6)                                    */
#define UART1_STAT_RTS_STATUS_Msk         (0x40UL)                  /*!< RTS_STATUS (Bitfield-Mask: 0x01)                      */
#define UART1_STAT_TX_FULL_Pos            (5UL)                     /*!< TX_FULL (Bit 5)                                       */
#define UART1_STAT_TX_FULL_Msk            (0x20UL)                  /*!< TX_FULL (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_RX_OVERRUN_Pos         (4UL)                     /*!< RX_OVERRUN (Bit 4)                                    */
#define UART1_STAT_RX_OVERRUN_Msk         (0x10UL)                  /*!< RX_OVERRUN (Bitfield-Mask: 0x01)                      */
#define UART1_STAT_TX_IDLE_Pos            (3UL)                     /*!< TX_IDLE (Bit 3)                                       */
#define UART1_STAT_TX_IDLE_Msk            (0x8UL)                   /*!< TX_IDLE (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_RX_IDLE_Pos            (2UL)                     /*!< RX_IDLE (Bit 2)                                       */
#define UART1_STAT_RX_IDLE_Msk            (0x4UL)                   /*!< RX_IDLE (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_TX_READY_Pos           (1UL)                     /*!< TX_READY (Bit 1)                                      */
#define UART1_STAT_TX_READY_Msk           (0x2UL)                   /*!< TX_READY (Bitfield-Mask: 0x01)                        */
#define UART1_STAT_DATA_READY_Pos         (0UL)                     /*!< DATA_READY (Bit 0)                                    */
#define UART1_STAT_DATA_READY_Msk         (0x1UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
/* =========================================================  BAUD  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CNTL0  ========================================================= */
#define SPI1_CNTL0_SPEED_Pos              (20UL)                    /*!< SPEED (Bit 20)                                        */
#define SPI1_CNTL0_SPEED_Msk              (0xfff00000UL)            /*!< SPEED (Bitfield-Mask: 0xfff)                          */
#define SPI1_CNTL0_CHIP_SELECTS_Pos       (17UL)                    /*!< CHIP_SELECTS (Bit 17)                                 */
#define SPI1_CNTL0_CHIP_SELECTS_Msk       (0xe0000UL)               /*!< CHIP_SELECTS (Bitfield-Mask: 0x07)                    */
#define SPI1_CNTL0_POST_INPUT_Pos         (16UL)                    /*!< POST_INPUT (Bit 16)                                   */
#define SPI1_CNTL0_POST_INPUT_Msk         (0x10000UL)               /*!< POST_INPUT (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL0_VARIABLE_CS_Pos        (15UL)                    /*!< VARIABLE_CS (Bit 15)                                  */
#define SPI1_CNTL0_VARIABLE_CS_Msk        (0x8000UL)                /*!< VARIABLE_CS (Bitfield-Mask: 0x01)                     */
#define SPI1_CNTL0_VARIABLE_WIDTH_Pos     (14UL)                    /*!< VARIABLE_WIDTH (Bit 14)                               */
#define SPI1_CNTL0_VARIABLE_WIDTH_Msk     (0x4000UL)                /*!< VARIABLE_WIDTH (Bitfield-Mask: 0x01)                  */
#define SPI1_CNTL0_DOUT_HOLD_TIME_Pos     (12UL)                    /*!< DOUT_HOLD_TIME (Bit 12)                               */
#define SPI1_CNTL0_DOUT_HOLD_TIME_Msk     (0x3000UL)                /*!< DOUT_HOLD_TIME (Bitfield-Mask: 0x03)                  */
#define SPI1_CNTL0_ENABLE_Pos             (11UL)                    /*!< ENABLE (Bit 11)                                       */
#define SPI1_CNTL0_ENABLE_Msk             (0x800UL)                 /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define SPI1_CNTL0_IN_RISING_Pos          (10UL)                    /*!< IN_RISING (Bit 10)                                    */
#define SPI1_CNTL0_IN_RISING_Msk          (0x400UL)                 /*!< IN_RISING (Bitfield-Mask: 0x01)                       */
#define SPI1_CNTL0_CLEAR_FIFOS_Pos        (9UL)                     /*!< CLEAR_FIFOS (Bit 9)                                   */
#define SPI1_CNTL0_CLEAR_FIFOS_Msk        (0x200UL)                 /*!< CLEAR_FIFOS (Bitfield-Mask: 0x01)                     */
#define SPI1_CNTL0_OUT_RISING_Pos         (8UL)                     /*!< OUT_RISING (Bit 8)                                    */
#define SPI1_CNTL0_OUT_RISING_Msk         (0x100UL)                 /*!< OUT_RISING (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL0_INVERT_CLK_Pos         (7UL)                     /*!< INVERT_CLK (Bit 7)                                    */
#define SPI1_CNTL0_INVERT_CLK_Msk         (0x80UL)                  /*!< INVERT_CLK (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL0_MSB_FIRST_Pos          (6UL)                     /*!< MSB_FIRST (Bit 6)                                     */
#define SPI1_CNTL0_MSB_FIRST_Msk          (0x40UL)                  /*!< MSB_FIRST (Bitfield-Mask: 0x01)                       */
#define SPI1_CNTL0_SHIFT_LENGTH_Pos       (0UL)                     /*!< SHIFT_LENGTH (Bit 0)                                  */
#define SPI1_CNTL0_SHIFT_LENGTH_Msk       (0x3fUL)                  /*!< SHIFT_LENGTH (Bitfield-Mask: 0x3f)                    */
/* =========================================================  CNTL1  ========================================================= */
#define SPI1_CNTL1_CS_HIGH_TIME_Pos       (8UL)                     /*!< CS_HIGH_TIME (Bit 8)                                  */
#define SPI1_CNTL1_CS_HIGH_TIME_Msk       (0x700UL)                 /*!< CS_HIGH_TIME (Bitfield-Mask: 0x07)                    */
#define SPI1_CNTL1_TXE_ENABLE_Pos         (7UL)                     /*!< TXE_ENABLE (Bit 7)                                    */
#define SPI1_CNTL1_TXE_ENABLE_Msk         (0x80UL)                  /*!< TXE_ENABLE (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL1_DONE_ENABLE_Pos        (6UL)                     /*!< DONE_ENABLE (Bit 6)                                   */
#define SPI1_CNTL1_DONE_ENABLE_Msk        (0x40UL)                  /*!< DONE_ENABLE (Bitfield-Mask: 0x01)                     */
#define SPI1_CNTL1_MSB_FIRST_Pos          (1UL)                     /*!< MSB_FIRST (Bit 1)                                     */
#define SPI1_CNTL1_MSB_FIRST_Msk          (0x2UL)                   /*!< MSB_FIRST (Bitfield-Mask: 0x01)                       */
#define SPI1_CNTL1_KEEP_INPUT_Pos         (0UL)                     /*!< KEEP_INPUT (Bit 0)                                    */
#define SPI1_CNTL1_KEEP_INPUT_Msk         (0x1UL)                   /*!< KEEP_INPUT (Bitfield-Mask: 0x01)                      */
/* =========================================================  STAT  ========================================================== */
#define SPI1_STAT_TX_LEVEL_Pos            (24UL)                    /*!< TX_LEVEL (Bit 24)                                     */
#define SPI1_STAT_TX_LEVEL_Msk            (0xf000000UL)             /*!< TX_LEVEL (Bitfield-Mask: 0x0f)                        */
#define SPI1_STAT_RX_LEVEL_Pos            (16UL)                    /*!< RX_LEVEL (Bit 16)                                     */
#define SPI1_STAT_RX_LEVEL_Msk            (0xf0000UL)               /*!< RX_LEVEL (Bitfield-Mask: 0x0f)                        */
#define SPI1_STAT_TX_FULL_Pos             (10UL)                    /*!< TX_FULL (Bit 10)                                      */
#define SPI1_STAT_TX_FULL_Msk             (0x400UL)                 /*!< TX_FULL (Bitfield-Mask: 0x01)                         */
#define SPI1_STAT_TX_EMPTY_Pos            (9UL)                     /*!< TX_EMPTY (Bit 9)                                      */
#define SPI1_STAT_TX_EMPTY_Msk            (0x200UL)                 /*!< TX_EMPTY (Bitfield-Mask: 0x01)                        */
#define SPI1_STAT_RX_FULL_Pos             (8UL)                     /*!< RX_FULL (Bit 8)                                       */
#define SPI1_STAT_RX_FULL_Msk             (0x100UL)                 /*!< RX_FULL (Bitfield-Mask: 0x01)                         */
#define SPI1_STAT_RX_EMPTY_Pos            (7UL)                     /*!< RX_EMPTY (Bit 7)                                      */
#define SPI1_STAT_RX_EMPTY_Msk            (0x80UL)                  /*!< RX_EMPTY (Bitfield-Mask: 0x01)                        */
#define SPI1_STAT_BUSY_Pos                (6UL)                     /*!< BUSY (Bit 6)                                          */
#define SPI1_STAT_BUSY_Msk                (0x40UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define SPI1_STAT_BIT_COUNT_Pos           (0UL)                     /*!< BIT_COUNT (Bit 0)                                     */
#define SPI1_STAT_BIT_COUNT_Msk           (0x3fUL)                  /*!< BIT_COUNT (Bitfield-Mask: 0x3f)                       */
/* =========================================================  PEEK  ========================================================== */
#define SPI1_PEEK_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_PEEK_DATA_Msk                (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO0  ========================================================== */
#define SPI1_IO0_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO0_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO1  ========================================================== */
#define SPI1_IO1_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO1_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO2  ========================================================== */
#define SPI1_IO2_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO2_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO3  ========================================================== */
#define SPI1_IO3_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO3_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD0  ======================================================== */
#define SPI1_TXHOLD0_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD0_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD1  ======================================================== */
#define SPI1_TXHOLD1_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD1_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD2  ======================================================== */
#define SPI1_TXHOLD2_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD2_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD3  ======================================================== */
#define SPI1_TXHOLD3_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD3_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */


/* =========================================================================================================================== */
/* ================                                          BCM_LIC                                          ================ */
/* =========================================================================================================================== */

/* =====================================================  BASIC_PENDING  ===================================================== */
#define BCM_LIC_BASIC_PENDING_TIMER_Pos   (0UL)                     /*!< TIMER (Bit 0)                                         */
#define BCM_LIC_BASIC_PENDING_TIMER_Msk   (0x1UL)                   /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_MAILBOX_Pos (1UL)                     /*!< MAILBOX (Bit 1)                                       */
#define BCM_LIC_BASIC_PENDING_MAILBOX_Msk (0x2UL)                   /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_BASIC_PENDING_DOORBELL0_Pos (2UL)                   /*!< DOORBELL0 (Bit 2)                                     */
#define BCM_LIC_BASIC_PENDING_DOORBELL0_Msk (0x4UL)                 /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_DOORBELL1_Pos (3UL)                   /*!< DOORBELL1 (Bit 3)                                     */
#define BCM_LIC_BASIC_PENDING_DOORBELL1_Msk (0x8UL)                 /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_VPU0_HALTED_Pos (4UL)                 /*!< VPU0_HALTED (Bit 4)                                   */
#define BCM_LIC_BASIC_PENDING_VPU0_HALTED_Msk (0x10UL)              /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_BASIC_PENDING_VPU1_HALTED_Pos (5UL)                 /*!< VPU1_HALTED (Bit 5)                                   */
#define BCM_LIC_BASIC_PENDING_VPU1_HALTED_Msk (0x20UL)              /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_BASIC_PENDING_ARM_ADDRESS_ERROR_Pos (6UL)           /*!< ARM_ADDRESS_ERROR (Bit 6)                             */
#define BCM_LIC_BASIC_PENDING_ARM_ADDRESS_ERROR_Msk (0x40UL)        /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)               */
#define BCM_LIC_BASIC_PENDING_ARM_AXI_ERROR_Pos (7UL)               /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define BCM_LIC_BASIC_PENDING_ARM_AXI_ERROR_Msk (0x80UL)            /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_BASIC_PENDING_PENDING_1_Pos (8UL)                   /*!< PENDING_1 (Bit 8)                                     */
#define BCM_LIC_BASIC_PENDING_PENDING_1_Msk (0x100UL)               /*!< PENDING_1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_PENDING_2_Pos (9UL)                   /*!< PENDING_2 (Bit 9)                                     */
#define BCM_LIC_BASIC_PENDING_PENDING_2_Msk (0x200UL)               /*!< PENDING_2 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_INT7_Pos    (10UL)                    /*!< INT7 (Bit 10)                                         */
#define BCM_LIC_BASIC_PENDING_INT7_Msk    (0x400UL)                 /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_BASIC_PENDING_INT9_Pos    (11UL)                    /*!< INT9 (Bit 11)                                         */
#define BCM_LIC_BASIC_PENDING_INT9_Msk    (0x800UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_BASIC_PENDING_INT10_Pos   (12UL)                    /*!< INT10 (Bit 12)                                        */
#define BCM_LIC_BASIC_PENDING_INT10_Msk   (0x1000UL)                /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT18_Pos   (13UL)                    /*!< INT18 (Bit 13)                                        */
#define BCM_LIC_BASIC_PENDING_INT18_Msk   (0x2000UL)                /*!< INT18 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT19_Pos   (14UL)                    /*!< INT19 (Bit 14)                                        */
#define BCM_LIC_BASIC_PENDING_INT19_Msk   (0x4000UL)                /*!< INT19 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT53_Pos   (15UL)                    /*!< INT53 (Bit 15)                                        */
#define BCM_LIC_BASIC_PENDING_INT53_Msk   (0x8000UL)                /*!< INT53 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT54_Pos   (16UL)                    /*!< INT54 (Bit 16)                                        */
#define BCM_LIC_BASIC_PENDING_INT54_Msk   (0x10000UL)               /*!< INT54 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT55_Pos   (17UL)                    /*!< INT55 (Bit 17)                                        */
#define BCM_LIC_BASIC_PENDING_INT55_Msk   (0x20000UL)               /*!< INT55 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT56_Pos   (18UL)                    /*!< INT56 (Bit 18)                                        */
#define BCM_LIC_BASIC_PENDING_INT56_Msk   (0x40000UL)               /*!< INT56 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT57_Pos   (19UL)                    /*!< INT57 (Bit 19)                                        */
#define BCM_LIC_BASIC_PENDING_INT57_Msk   (0x80000UL)               /*!< INT57 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_INT62_Pos   (20UL)                    /*!< INT62 (Bit 20)                                        */
#define BCM_LIC_BASIC_PENDING_INT62_Msk   (0x100000UL)              /*!< INT62 (Bitfield-Mask: 0x01)                           */
/* =======================================================  PENDING_1  ======================================================= */
#define BCM_LIC_PENDING_1_INT0_Pos        (0UL)                     /*!< INT0 (Bit 0)                                          */
#define BCM_LIC_PENDING_1_INT0_Msk        (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT1_Pos        (1UL)                     /*!< INT1 (Bit 1)                                          */
#define BCM_LIC_PENDING_1_INT1_Msk        (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT2_Pos        (2UL)                     /*!< INT2 (Bit 2)                                          */
#define BCM_LIC_PENDING_1_INT2_Msk        (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT3_Pos        (3UL)                     /*!< INT3 (Bit 3)                                          */
#define BCM_LIC_PENDING_1_INT3_Msk        (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT4_Pos        (4UL)                     /*!< INT4 (Bit 4)                                          */
#define BCM_LIC_PENDING_1_INT4_Msk        (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT5_Pos        (5UL)                     /*!< INT5 (Bit 5)                                          */
#define BCM_LIC_PENDING_1_INT5_Msk        (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT6_Pos        (6UL)                     /*!< INT6 (Bit 6)                                          */
#define BCM_LIC_PENDING_1_INT6_Msk        (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT7_Pos        (7UL)                     /*!< INT7 (Bit 7)                                          */
#define BCM_LIC_PENDING_1_INT7_Msk        (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT8_Pos        (8UL)                     /*!< INT8 (Bit 8)                                          */
#define BCM_LIC_PENDING_1_INT8_Msk        (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT9_Pos        (9UL)                     /*!< INT9 (Bit 9)                                          */
#define BCM_LIC_PENDING_1_INT9_Msk        (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_INT10_Pos       (10UL)                    /*!< INT10 (Bit 10)                                        */
#define BCM_LIC_PENDING_1_INT10_Msk       (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT11_Pos       (11UL)                    /*!< INT11 (Bit 11)                                        */
#define BCM_LIC_PENDING_1_INT11_Msk       (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT12_Pos       (12UL)                    /*!< INT12 (Bit 12)                                        */
#define BCM_LIC_PENDING_1_INT12_Msk       (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT13_Pos       (13UL)                    /*!< INT13 (Bit 13)                                        */
#define BCM_LIC_PENDING_1_INT13_Msk       (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT14_Pos       (14UL)                    /*!< INT14 (Bit 14)                                        */
#define BCM_LIC_PENDING_1_INT14_Msk       (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT15_Pos       (15UL)                    /*!< INT15 (Bit 15)                                        */
#define BCM_LIC_PENDING_1_INT15_Msk       (0x8000UL)                /*!< INT15 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT16_Pos       (16UL)                    /*!< INT16 (Bit 16)                                        */
#define BCM_LIC_PENDING_1_INT16_Msk       (0x10000UL)               /*!< INT16 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT17_Pos       (17UL)                    /*!< INT17 (Bit 17)                                        */
#define BCM_LIC_PENDING_1_INT17_Msk       (0x20000UL)               /*!< INT17 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT18_Pos       (18UL)                    /*!< INT18 (Bit 18)                                        */
#define BCM_LIC_PENDING_1_INT18_Msk       (0x40000UL)               /*!< INT18 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT19_Pos       (19UL)                    /*!< INT19 (Bit 19)                                        */
#define BCM_LIC_PENDING_1_INT19_Msk       (0x80000UL)               /*!< INT19 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT20_Pos       (20UL)                    /*!< INT20 (Bit 20)                                        */
#define BCM_LIC_PENDING_1_INT20_Msk       (0x100000UL)              /*!< INT20 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT21_Pos       (21UL)                    /*!< INT21 (Bit 21)                                        */
#define BCM_LIC_PENDING_1_INT21_Msk       (0x200000UL)              /*!< INT21 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT22_Pos       (22UL)                    /*!< INT22 (Bit 22)                                        */
#define BCM_LIC_PENDING_1_INT22_Msk       (0x400000UL)              /*!< INT22 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT23_Pos       (23UL)                    /*!< INT23 (Bit 23)                                        */
#define BCM_LIC_PENDING_1_INT23_Msk       (0x800000UL)              /*!< INT23 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT24_Pos       (24UL)                    /*!< INT24 (Bit 24)                                        */
#define BCM_LIC_PENDING_1_INT24_Msk       (0x1000000UL)             /*!< INT24 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT25_Pos       (25UL)                    /*!< INT25 (Bit 25)                                        */
#define BCM_LIC_PENDING_1_INT25_Msk       (0x2000000UL)             /*!< INT25 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT26_Pos       (26UL)                    /*!< INT26 (Bit 26)                                        */
#define BCM_LIC_PENDING_1_INT26_Msk       (0x4000000UL)             /*!< INT26 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT27_Pos       (27UL)                    /*!< INT27 (Bit 27)                                        */
#define BCM_LIC_PENDING_1_INT27_Msk       (0x8000000UL)             /*!< INT27 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT28_Pos       (28UL)                    /*!< INT28 (Bit 28)                                        */
#define BCM_LIC_PENDING_1_INT28_Msk       (0x10000000UL)            /*!< INT28 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT29_Pos       (29UL)                    /*!< INT29 (Bit 29)                                        */
#define BCM_LIC_PENDING_1_INT29_Msk       (0x20000000UL)            /*!< INT29 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT30_Pos       (30UL)                    /*!< INT30 (Bit 30)                                        */
#define BCM_LIC_PENDING_1_INT30_Msk       (0x40000000UL)            /*!< INT30 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_INT31_Pos       (31UL)                    /*!< INT31 (Bit 31)                                        */
#define BCM_LIC_PENDING_1_INT31_Msk       (0x80000000UL)            /*!< INT31 (Bitfield-Mask: 0x01)                           */
/* =======================================================  PENDING_2  ======================================================= */
#define BCM_LIC_PENDING_2_INT32_Pos       (0UL)                     /*!< INT32 (Bit 0)                                         */
#define BCM_LIC_PENDING_2_INT32_Msk       (0x1UL)                   /*!< INT32 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT33_Pos       (1UL)                     /*!< INT33 (Bit 1)                                         */
#define BCM_LIC_PENDING_2_INT33_Msk       (0x2UL)                   /*!< INT33 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT34_Pos       (2UL)                     /*!< INT34 (Bit 2)                                         */
#define BCM_LIC_PENDING_2_INT34_Msk       (0x4UL)                   /*!< INT34 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT35_Pos       (3UL)                     /*!< INT35 (Bit 3)                                         */
#define BCM_LIC_PENDING_2_INT35_Msk       (0x8UL)                   /*!< INT35 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT36_Pos       (4UL)                     /*!< INT36 (Bit 4)                                         */
#define BCM_LIC_PENDING_2_INT36_Msk       (0x10UL)                  /*!< INT36 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT37_Pos       (5UL)                     /*!< INT37 (Bit 5)                                         */
#define BCM_LIC_PENDING_2_INT37_Msk       (0x20UL)                  /*!< INT37 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT38_Pos       (6UL)                     /*!< INT38 (Bit 6)                                         */
#define BCM_LIC_PENDING_2_INT38_Msk       (0x40UL)                  /*!< INT38 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT39_Pos       (7UL)                     /*!< INT39 (Bit 7)                                         */
#define BCM_LIC_PENDING_2_INT39_Msk       (0x80UL)                  /*!< INT39 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT40_Pos       (8UL)                     /*!< INT40 (Bit 8)                                         */
#define BCM_LIC_PENDING_2_INT40_Msk       (0x100UL)                 /*!< INT40 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT41_Pos       (9UL)                     /*!< INT41 (Bit 9)                                         */
#define BCM_LIC_PENDING_2_INT41_Msk       (0x200UL)                 /*!< INT41 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT42_Pos       (10UL)                    /*!< INT42 (Bit 10)                                        */
#define BCM_LIC_PENDING_2_INT42_Msk       (0x400UL)                 /*!< INT42 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT43_Pos       (11UL)                    /*!< INT43 (Bit 11)                                        */
#define BCM_LIC_PENDING_2_INT43_Msk       (0x800UL)                 /*!< INT43 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT44_Pos       (12UL)                    /*!< INT44 (Bit 12)                                        */
#define BCM_LIC_PENDING_2_INT44_Msk       (0x1000UL)                /*!< INT44 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT45_Pos       (13UL)                    /*!< INT45 (Bit 13)                                        */
#define BCM_LIC_PENDING_2_INT45_Msk       (0x2000UL)                /*!< INT45 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT46_Pos       (14UL)                    /*!< INT46 (Bit 14)                                        */
#define BCM_LIC_PENDING_2_INT46_Msk       (0x4000UL)                /*!< INT46 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT47_Pos       (15UL)                    /*!< INT47 (Bit 15)                                        */
#define BCM_LIC_PENDING_2_INT47_Msk       (0x8000UL)                /*!< INT47 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT48_Pos       (16UL)                    /*!< INT48 (Bit 16)                                        */
#define BCM_LIC_PENDING_2_INT48_Msk       (0x10000UL)               /*!< INT48 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT49_Pos       (17UL)                    /*!< INT49 (Bit 17)                                        */
#define BCM_LIC_PENDING_2_INT49_Msk       (0x20000UL)               /*!< INT49 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT50_Pos       (18UL)                    /*!< INT50 (Bit 18)                                        */
#define BCM_LIC_PENDING_2_INT50_Msk       (0x40000UL)               /*!< INT50 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT51_Pos       (19UL)                    /*!< INT51 (Bit 19)                                        */
#define BCM_LIC_PENDING_2_INT51_Msk       (0x80000UL)               /*!< INT51 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT52_Pos       (20UL)                    /*!< INT52 (Bit 20)                                        */
#define BCM_LIC_PENDING_2_INT52_Msk       (0x100000UL)              /*!< INT52 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT53_Pos       (21UL)                    /*!< INT53 (Bit 21)                                        */
#define BCM_LIC_PENDING_2_INT53_Msk       (0x200000UL)              /*!< INT53 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT54_Pos       (22UL)                    /*!< INT54 (Bit 22)                                        */
#define BCM_LIC_PENDING_2_INT54_Msk       (0x400000UL)              /*!< INT54 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT55_Pos       (23UL)                    /*!< INT55 (Bit 23)                                        */
#define BCM_LIC_PENDING_2_INT55_Msk       (0x800000UL)              /*!< INT55 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT56_Pos       (24UL)                    /*!< INT56 (Bit 24)                                        */
#define BCM_LIC_PENDING_2_INT56_Msk       (0x1000000UL)             /*!< INT56 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT57_Pos       (25UL)                    /*!< INT57 (Bit 25)                                        */
#define BCM_LIC_PENDING_2_INT57_Msk       (0x2000000UL)             /*!< INT57 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT58_Pos       (26UL)                    /*!< INT58 (Bit 26)                                        */
#define BCM_LIC_PENDING_2_INT58_Msk       (0x4000000UL)             /*!< INT58 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT59_Pos       (27UL)                    /*!< INT59 (Bit 27)                                        */
#define BCM_LIC_PENDING_2_INT59_Msk       (0x8000000UL)             /*!< INT59 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT60_Pos       (28UL)                    /*!< INT60 (Bit 28)                                        */
#define BCM_LIC_PENDING_2_INT60_Msk       (0x10000000UL)            /*!< INT60 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT61_Pos       (29UL)                    /*!< INT61 (Bit 29)                                        */
#define BCM_LIC_PENDING_2_INT61_Msk       (0x20000000UL)            /*!< INT61 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT62_Pos       (30UL)                    /*!< INT62 (Bit 30)                                        */
#define BCM_LIC_PENDING_2_INT62_Msk       (0x40000000UL)            /*!< INT62 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_INT63_Pos       (31UL)                    /*!< INT63 (Bit 31)                                        */
#define BCM_LIC_PENDING_2_INT63_Msk       (0x80000000UL)            /*!< INT63 (Bitfield-Mask: 0x01)                           */
/* ======================================================  FIQ_CONTROL  ====================================================== */
#define BCM_LIC_FIQ_CONTROL_ENABLE_Pos    (7UL)                     /*!< ENABLE (Bit 7)                                        */
#define BCM_LIC_FIQ_CONTROL_ENABLE_Msk    (0x80UL)                  /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_FIQ_CONTROL_SOURCE_Pos    (0UL)                     /*!< SOURCE (Bit 0)                                        */
#define BCM_LIC_FIQ_CONTROL_SOURCE_Msk    (0x7fUL)                  /*!< SOURCE (Bitfield-Mask: 0x7f)                          */
/* =======================================================  ENABLE_1  ======================================================== */
#define BCM_LIC_ENABLE_1_INT0_Pos         (0UL)                     /*!< INT0 (Bit 0)                                          */
#define BCM_LIC_ENABLE_1_INT0_Msk         (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT1_Pos         (1UL)                     /*!< INT1 (Bit 1)                                          */
#define BCM_LIC_ENABLE_1_INT1_Msk         (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT2_Pos         (2UL)                     /*!< INT2 (Bit 2)                                          */
#define BCM_LIC_ENABLE_1_INT2_Msk         (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT3_Pos         (3UL)                     /*!< INT3 (Bit 3)                                          */
#define BCM_LIC_ENABLE_1_INT3_Msk         (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT4_Pos         (4UL)                     /*!< INT4 (Bit 4)                                          */
#define BCM_LIC_ENABLE_1_INT4_Msk         (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT5_Pos         (5UL)                     /*!< INT5 (Bit 5)                                          */
#define BCM_LIC_ENABLE_1_INT5_Msk         (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT6_Pos         (6UL)                     /*!< INT6 (Bit 6)                                          */
#define BCM_LIC_ENABLE_1_INT6_Msk         (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT7_Pos         (7UL)                     /*!< INT7 (Bit 7)                                          */
#define BCM_LIC_ENABLE_1_INT7_Msk         (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT8_Pos         (8UL)                     /*!< INT8 (Bit 8)                                          */
#define BCM_LIC_ENABLE_1_INT8_Msk         (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT9_Pos         (9UL)                     /*!< INT9 (Bit 9)                                          */
#define BCM_LIC_ENABLE_1_INT9_Msk         (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_INT10_Pos        (10UL)                    /*!< INT10 (Bit 10)                                        */
#define BCM_LIC_ENABLE_1_INT10_Msk        (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT11_Pos        (11UL)                    /*!< INT11 (Bit 11)                                        */
#define BCM_LIC_ENABLE_1_INT11_Msk        (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT12_Pos        (12UL)                    /*!< INT12 (Bit 12)                                        */
#define BCM_LIC_ENABLE_1_INT12_Msk        (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT13_Pos        (13UL)                    /*!< INT13 (Bit 13)                                        */
#define BCM_LIC_ENABLE_1_INT13_Msk        (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT14_Pos        (14UL)                    /*!< INT14 (Bit 14)                                        */
#define BCM_LIC_ENABLE_1_INT14_Msk        (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT15_Pos        (15UL)                    /*!< INT15 (Bit 15)                                        */
#define BCM_LIC_ENABLE_1_INT15_Msk        (0x8000UL)                /*!< INT15 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT16_Pos        (16UL)                    /*!< INT16 (Bit 16)                                        */
#define BCM_LIC_ENABLE_1_INT16_Msk        (0x10000UL)               /*!< INT16 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT17_Pos        (17UL)                    /*!< INT17 (Bit 17)                                        */
#define BCM_LIC_ENABLE_1_INT17_Msk        (0x20000UL)               /*!< INT17 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT18_Pos        (18UL)                    /*!< INT18 (Bit 18)                                        */
#define BCM_LIC_ENABLE_1_INT18_Msk        (0x40000UL)               /*!< INT18 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT19_Pos        (19UL)                    /*!< INT19 (Bit 19)                                        */
#define BCM_LIC_ENABLE_1_INT19_Msk        (0x80000UL)               /*!< INT19 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT20_Pos        (20UL)                    /*!< INT20 (Bit 20)                                        */
#define BCM_LIC_ENABLE_1_INT20_Msk        (0x100000UL)              /*!< INT20 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT21_Pos        (21UL)                    /*!< INT21 (Bit 21)                                        */
#define BCM_LIC_ENABLE_1_INT21_Msk        (0x200000UL)              /*!< INT21 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT22_Pos        (22UL)                    /*!< INT22 (Bit 22)                                        */
#define BCM_LIC_ENABLE_1_INT22_Msk        (0x400000UL)              /*!< INT22 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT23_Pos        (23UL)                    /*!< INT23 (Bit 23)                                        */
#define BCM_LIC_ENABLE_1_INT23_Msk        (0x800000UL)              /*!< INT23 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT24_Pos        (24UL)                    /*!< INT24 (Bit 24)                                        */
#define BCM_LIC_ENABLE_1_INT24_Msk        (0x1000000UL)             /*!< INT24 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT25_Pos        (25UL)                    /*!< INT25 (Bit 25)                                        */
#define BCM_LIC_ENABLE_1_INT25_Msk        (0x2000000UL)             /*!< INT25 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT26_Pos        (26UL)                    /*!< INT26 (Bit 26)                                        */
#define BCM_LIC_ENABLE_1_INT26_Msk        (0x4000000UL)             /*!< INT26 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT27_Pos        (27UL)                    /*!< INT27 (Bit 27)                                        */
#define BCM_LIC_ENABLE_1_INT27_Msk        (0x8000000UL)             /*!< INT27 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT28_Pos        (28UL)                    /*!< INT28 (Bit 28)                                        */
#define BCM_LIC_ENABLE_1_INT28_Msk        (0x10000000UL)            /*!< INT28 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT29_Pos        (29UL)                    /*!< INT29 (Bit 29)                                        */
#define BCM_LIC_ENABLE_1_INT29_Msk        (0x20000000UL)            /*!< INT29 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT30_Pos        (30UL)                    /*!< INT30 (Bit 30)                                        */
#define BCM_LIC_ENABLE_1_INT30_Msk        (0x40000000UL)            /*!< INT30 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_INT31_Pos        (31UL)                    /*!< INT31 (Bit 31)                                        */
#define BCM_LIC_ENABLE_1_INT31_Msk        (0x80000000UL)            /*!< INT31 (Bitfield-Mask: 0x01)                           */
/* =======================================================  ENABLE_2  ======================================================== */
#define BCM_LIC_ENABLE_2_INT32_Pos        (0UL)                     /*!< INT32 (Bit 0)                                         */
#define BCM_LIC_ENABLE_2_INT32_Msk        (0x1UL)                   /*!< INT32 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT33_Pos        (1UL)                     /*!< INT33 (Bit 1)                                         */
#define BCM_LIC_ENABLE_2_INT33_Msk        (0x2UL)                   /*!< INT33 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT34_Pos        (2UL)                     /*!< INT34 (Bit 2)                                         */
#define BCM_LIC_ENABLE_2_INT34_Msk        (0x4UL)                   /*!< INT34 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT35_Pos        (3UL)                     /*!< INT35 (Bit 3)                                         */
#define BCM_LIC_ENABLE_2_INT35_Msk        (0x8UL)                   /*!< INT35 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT36_Pos        (4UL)                     /*!< INT36 (Bit 4)                                         */
#define BCM_LIC_ENABLE_2_INT36_Msk        (0x10UL)                  /*!< INT36 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT37_Pos        (5UL)                     /*!< INT37 (Bit 5)                                         */
#define BCM_LIC_ENABLE_2_INT37_Msk        (0x20UL)                  /*!< INT37 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT38_Pos        (6UL)                     /*!< INT38 (Bit 6)                                         */
#define BCM_LIC_ENABLE_2_INT38_Msk        (0x40UL)                  /*!< INT38 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT39_Pos        (7UL)                     /*!< INT39 (Bit 7)                                         */
#define BCM_LIC_ENABLE_2_INT39_Msk        (0x80UL)                  /*!< INT39 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT40_Pos        (8UL)                     /*!< INT40 (Bit 8)                                         */
#define BCM_LIC_ENABLE_2_INT40_Msk        (0x100UL)                 /*!< INT40 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT41_Pos        (9UL)                     /*!< INT41 (Bit 9)                                         */
#define BCM_LIC_ENABLE_2_INT41_Msk        (0x200UL)                 /*!< INT41 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT42_Pos        (10UL)                    /*!< INT42 (Bit 10)                                        */
#define BCM_LIC_ENABLE_2_INT42_Msk        (0x400UL)                 /*!< INT42 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT43_Pos        (11UL)                    /*!< INT43 (Bit 11)                                        */
#define BCM_LIC_ENABLE_2_INT43_Msk        (0x800UL)                 /*!< INT43 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT44_Pos        (12UL)                    /*!< INT44 (Bit 12)                                        */
#define BCM_LIC_ENABLE_2_INT44_Msk        (0x1000UL)                /*!< INT44 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT45_Pos        (13UL)                    /*!< INT45 (Bit 13)                                        */
#define BCM_LIC_ENABLE_2_INT45_Msk        (0x2000UL)                /*!< INT45 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT46_Pos        (14UL)                    /*!< INT46 (Bit 14)                                        */
#define BCM_LIC_ENABLE_2_INT46_Msk        (0x4000UL)                /*!< INT46 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT47_Pos        (15UL)                    /*!< INT47 (Bit 15)                                        */
#define BCM_LIC_ENABLE_2_INT47_Msk        (0x8000UL)                /*!< INT47 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT48_Pos        (16UL)                    /*!< INT48 (Bit 16)                                        */
#define BCM_LIC_ENABLE_2_INT48_Msk        (0x10000UL)               /*!< INT48 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT49_Pos        (17UL)                    /*!< INT49 (Bit 17)                                        */
#define BCM_LIC_ENABLE_2_INT49_Msk        (0x20000UL)               /*!< INT49 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT50_Pos        (18UL)                    /*!< INT50 (Bit 18)                                        */
#define BCM_LIC_ENABLE_2_INT50_Msk        (0x40000UL)               /*!< INT50 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT51_Pos        (19UL)                    /*!< INT51 (Bit 19)                                        */
#define BCM_LIC_ENABLE_2_INT51_Msk        (0x80000UL)               /*!< INT51 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT52_Pos        (20UL)                    /*!< INT52 (Bit 20)                                        */
#define BCM_LIC_ENABLE_2_INT52_Msk        (0x100000UL)              /*!< INT52 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT53_Pos        (21UL)                    /*!< INT53 (Bit 21)                                        */
#define BCM_LIC_ENABLE_2_INT53_Msk        (0x200000UL)              /*!< INT53 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT54_Pos        (22UL)                    /*!< INT54 (Bit 22)                                        */
#define BCM_LIC_ENABLE_2_INT54_Msk        (0x400000UL)              /*!< INT54 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT55_Pos        (23UL)                    /*!< INT55 (Bit 23)                                        */
#define BCM_LIC_ENABLE_2_INT55_Msk        (0x800000UL)              /*!< INT55 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT56_Pos        (24UL)                    /*!< INT56 (Bit 24)                                        */
#define BCM_LIC_ENABLE_2_INT56_Msk        (0x1000000UL)             /*!< INT56 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT57_Pos        (25UL)                    /*!< INT57 (Bit 25)                                        */
#define BCM_LIC_ENABLE_2_INT57_Msk        (0x2000000UL)             /*!< INT57 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT58_Pos        (26UL)                    /*!< INT58 (Bit 26)                                        */
#define BCM_LIC_ENABLE_2_INT58_Msk        (0x4000000UL)             /*!< INT58 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT59_Pos        (27UL)                    /*!< INT59 (Bit 27)                                        */
#define BCM_LIC_ENABLE_2_INT59_Msk        (0x8000000UL)             /*!< INT59 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT60_Pos        (28UL)                    /*!< INT60 (Bit 28)                                        */
#define BCM_LIC_ENABLE_2_INT60_Msk        (0x10000000UL)            /*!< INT60 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT61_Pos        (29UL)                    /*!< INT61 (Bit 29)                                        */
#define BCM_LIC_ENABLE_2_INT61_Msk        (0x20000000UL)            /*!< INT61 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT62_Pos        (30UL)                    /*!< INT62 (Bit 30)                                        */
#define BCM_LIC_ENABLE_2_INT62_Msk        (0x40000000UL)            /*!< INT62 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_INT63_Pos        (31UL)                    /*!< INT63 (Bit 31)                                        */
#define BCM_LIC_ENABLE_2_INT63_Msk        (0x80000000UL)            /*!< INT63 (Bitfield-Mask: 0x01)                           */
/* =====================================================  ENABLE_BASIC  ====================================================== */
#define BCM_LIC_ENABLE_BASIC_TIMER_Pos    (0UL)                     /*!< TIMER (Bit 0)                                         */
#define BCM_LIC_ENABLE_BASIC_TIMER_Msk    (0x1UL)                   /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_BASIC_MAILBOX_Pos  (1UL)                     /*!< MAILBOX (Bit 1)                                       */
#define BCM_LIC_ENABLE_BASIC_MAILBOX_Msk  (0x2UL)                   /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_BASIC_DOORBELL0_Pos (2UL)                    /*!< DOORBELL0 (Bit 2)                                     */
#define BCM_LIC_ENABLE_BASIC_DOORBELL0_Msk (0x4UL)                  /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_ENABLE_BASIC_DOORBELL1_Pos (3UL)                    /*!< DOORBELL1 (Bit 3)                                     */
#define BCM_LIC_ENABLE_BASIC_DOORBELL1_Msk (0x8UL)                  /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_ENABLE_BASIC_VPU0_HALTED_Pos (4UL)                  /*!< VPU0_HALTED (Bit 4)                                   */
#define BCM_LIC_ENABLE_BASIC_VPU0_HALTED_Msk (0x10UL)               /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_ENABLE_BASIC_VPU1_HALTED_Pos (5UL)                  /*!< VPU1_HALTED (Bit 5)                                   */
#define BCM_LIC_ENABLE_BASIC_VPU1_HALTED_Msk (0x20UL)               /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_ENABLE_BASIC_ARM_ADDRESS_ERROR_Pos (6UL)            /*!< ARM_ADDRESS_ERROR (Bit 6)                             */
#define BCM_LIC_ENABLE_BASIC_ARM_ADDRESS_ERROR_Msk (0x40UL)         /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)               */
#define BCM_LIC_ENABLE_BASIC_ARM_AXI_ERROR_Pos (7UL)                /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define BCM_LIC_ENABLE_BASIC_ARM_AXI_ERROR_Msk (0x80UL)             /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                   */
/* =======================================================  DISABLE_1  ======================================================= */
#define BCM_LIC_DISABLE_1_INT0_Pos        (0UL)                     /*!< INT0 (Bit 0)                                          */
#define BCM_LIC_DISABLE_1_INT0_Msk        (0x1UL)                   /*!< INT0 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT1_Pos        (1UL)                     /*!< INT1 (Bit 1)                                          */
#define BCM_LIC_DISABLE_1_INT1_Msk        (0x2UL)                   /*!< INT1 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT2_Pos        (2UL)                     /*!< INT2 (Bit 2)                                          */
#define BCM_LIC_DISABLE_1_INT2_Msk        (0x4UL)                   /*!< INT2 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT3_Pos        (3UL)                     /*!< INT3 (Bit 3)                                          */
#define BCM_LIC_DISABLE_1_INT3_Msk        (0x8UL)                   /*!< INT3 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT4_Pos        (4UL)                     /*!< INT4 (Bit 4)                                          */
#define BCM_LIC_DISABLE_1_INT4_Msk        (0x10UL)                  /*!< INT4 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT5_Pos        (5UL)                     /*!< INT5 (Bit 5)                                          */
#define BCM_LIC_DISABLE_1_INT5_Msk        (0x20UL)                  /*!< INT5 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT6_Pos        (6UL)                     /*!< INT6 (Bit 6)                                          */
#define BCM_LIC_DISABLE_1_INT6_Msk        (0x40UL)                  /*!< INT6 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT7_Pos        (7UL)                     /*!< INT7 (Bit 7)                                          */
#define BCM_LIC_DISABLE_1_INT7_Msk        (0x80UL)                  /*!< INT7 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT8_Pos        (8UL)                     /*!< INT8 (Bit 8)                                          */
#define BCM_LIC_DISABLE_1_INT8_Msk        (0x100UL)                 /*!< INT8 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT9_Pos        (9UL)                     /*!< INT9 (Bit 9)                                          */
#define BCM_LIC_DISABLE_1_INT9_Msk        (0x200UL)                 /*!< INT9 (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_INT10_Pos       (10UL)                    /*!< INT10 (Bit 10)                                        */
#define BCM_LIC_DISABLE_1_INT10_Msk       (0x400UL)                 /*!< INT10 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT11_Pos       (11UL)                    /*!< INT11 (Bit 11)                                        */
#define BCM_LIC_DISABLE_1_INT11_Msk       (0x800UL)                 /*!< INT11 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT12_Pos       (12UL)                    /*!< INT12 (Bit 12)                                        */
#define BCM_LIC_DISABLE_1_INT12_Msk       (0x1000UL)                /*!< INT12 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT13_Pos       (13UL)                    /*!< INT13 (Bit 13)                                        */
#define BCM_LIC_DISABLE_1_INT13_Msk       (0x2000UL)                /*!< INT13 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT14_Pos       (14UL)                    /*!< INT14 (Bit 14)                                        */
#define BCM_LIC_DISABLE_1_INT14_Msk       (0x4000UL)                /*!< INT14 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT15_Pos       (15UL)                    /*!< INT15 (Bit 15)                                        */
#define BCM_LIC_DISABLE_1_INT15_Msk       (0x8000UL)                /*!< INT15 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT16_Pos       (16UL)                    /*!< INT16 (Bit 16)                                        */
#define BCM_LIC_DISABLE_1_INT16_Msk       (0x10000UL)               /*!< INT16 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT17_Pos       (17UL)                    /*!< INT17 (Bit 17)                                        */
#define BCM_LIC_DISABLE_1_INT17_Msk       (0x20000UL)               /*!< INT17 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT18_Pos       (18UL)                    /*!< INT18 (Bit 18)                                        */
#define BCM_LIC_DISABLE_1_INT18_Msk       (0x40000UL)               /*!< INT18 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT19_Pos       (19UL)                    /*!< INT19 (Bit 19)                                        */
#define BCM_LIC_DISABLE_1_INT19_Msk       (0x80000UL)               /*!< INT19 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT20_Pos       (20UL)                    /*!< INT20 (Bit 20)                                        */
#define BCM_LIC_DISABLE_1_INT20_Msk       (0x100000UL)              /*!< INT20 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT21_Pos       (21UL)                    /*!< INT21 (Bit 21)                                        */
#define BCM_LIC_DISABLE_1_INT21_Msk       (0x200000UL)              /*!< INT21 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT22_Pos       (22UL)                    /*!< INT22 (Bit 22)                                        */
#define BCM_LIC_DISABLE_1_INT22_Msk       (0x400000UL)              /*!< INT22 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT23_Pos       (23UL)                    /*!< INT23 (Bit 23)                                        */
#define BCM_LIC_DISABLE_1_INT23_Msk       (0x800000UL)              /*!< INT23 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT24_Pos       (24UL)                    /*!< INT24 (Bit 24)                                        */
#define BCM_LIC_DISABLE_1_INT24_Msk       (0x1000000UL)             /*!< INT24 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT25_Pos       (25UL)                    /*!< INT25 (Bit 25)                                        */
#define BCM_LIC_DISABLE_1_INT25_Msk       (0x2000000UL)             /*!< INT25 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT26_Pos       (26UL)                    /*!< INT26 (Bit 26)                                        */
#define BCM_LIC_DISABLE_1_INT26_Msk       (0x4000000UL)             /*!< INT26 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT27_Pos       (27UL)                    /*!< INT27 (Bit 27)                                        */
#define BCM_LIC_DISABLE_1_INT27_Msk       (0x8000000UL)             /*!< INT27 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT28_Pos       (28UL)                    /*!< INT28 (Bit 28)                                        */
#define BCM_LIC_DISABLE_1_INT28_Msk       (0x10000000UL)            /*!< INT28 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT29_Pos       (29UL)                    /*!< INT29 (Bit 29)                                        */
#define BCM_LIC_DISABLE_1_INT29_Msk       (0x20000000UL)            /*!< INT29 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT30_Pos       (30UL)                    /*!< INT30 (Bit 30)                                        */
#define BCM_LIC_DISABLE_1_INT30_Msk       (0x40000000UL)            /*!< INT30 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_INT31_Pos       (31UL)                    /*!< INT31 (Bit 31)                                        */
#define BCM_LIC_DISABLE_1_INT31_Msk       (0x80000000UL)            /*!< INT31 (Bitfield-Mask: 0x01)                           */
/* =======================================================  DISABLE_2  ======================================================= */
#define BCM_LIC_DISABLE_2_INT32_Pos       (0UL)                     /*!< INT32 (Bit 0)                                         */
#define BCM_LIC_DISABLE_2_INT32_Msk       (0x1UL)                   /*!< INT32 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT33_Pos       (1UL)                     /*!< INT33 (Bit 1)                                         */
#define BCM_LIC_DISABLE_2_INT33_Msk       (0x2UL)                   /*!< INT33 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT34_Pos       (2UL)                     /*!< INT34 (Bit 2)                                         */
#define BCM_LIC_DISABLE_2_INT34_Msk       (0x4UL)                   /*!< INT34 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT35_Pos       (3UL)                     /*!< INT35 (Bit 3)                                         */
#define BCM_LIC_DISABLE_2_INT35_Msk       (0x8UL)                   /*!< INT35 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT36_Pos       (4UL)                     /*!< INT36 (Bit 4)                                         */
#define BCM_LIC_DISABLE_2_INT36_Msk       (0x10UL)                  /*!< INT36 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT37_Pos       (5UL)                     /*!< INT37 (Bit 5)                                         */
#define BCM_LIC_DISABLE_2_INT37_Msk       (0x20UL)                  /*!< INT37 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT38_Pos       (6UL)                     /*!< INT38 (Bit 6)                                         */
#define BCM_LIC_DISABLE_2_INT38_Msk       (0x40UL)                  /*!< INT38 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT39_Pos       (7UL)                     /*!< INT39 (Bit 7)                                         */
#define BCM_LIC_DISABLE_2_INT39_Msk       (0x80UL)                  /*!< INT39 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT40_Pos       (8UL)                     /*!< INT40 (Bit 8)                                         */
#define BCM_LIC_DISABLE_2_INT40_Msk       (0x100UL)                 /*!< INT40 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT41_Pos       (9UL)                     /*!< INT41 (Bit 9)                                         */
#define BCM_LIC_DISABLE_2_INT41_Msk       (0x200UL)                 /*!< INT41 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT42_Pos       (10UL)                    /*!< INT42 (Bit 10)                                        */
#define BCM_LIC_DISABLE_2_INT42_Msk       (0x400UL)                 /*!< INT42 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT43_Pos       (11UL)                    /*!< INT43 (Bit 11)                                        */
#define BCM_LIC_DISABLE_2_INT43_Msk       (0x800UL)                 /*!< INT43 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT44_Pos       (12UL)                    /*!< INT44 (Bit 12)                                        */
#define BCM_LIC_DISABLE_2_INT44_Msk       (0x1000UL)                /*!< INT44 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT45_Pos       (13UL)                    /*!< INT45 (Bit 13)                                        */
#define BCM_LIC_DISABLE_2_INT45_Msk       (0x2000UL)                /*!< INT45 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT46_Pos       (14UL)                    /*!< INT46 (Bit 14)                                        */
#define BCM_LIC_DISABLE_2_INT46_Msk       (0x4000UL)                /*!< INT46 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT47_Pos       (15UL)                    /*!< INT47 (Bit 15)                                        */
#define BCM_LIC_DISABLE_2_INT47_Msk       (0x8000UL)                /*!< INT47 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT48_Pos       (16UL)                    /*!< INT48 (Bit 16)                                        */
#define BCM_LIC_DISABLE_2_INT48_Msk       (0x10000UL)               /*!< INT48 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT49_Pos       (17UL)                    /*!< INT49 (Bit 17)                                        */
#define BCM_LIC_DISABLE_2_INT49_Msk       (0x20000UL)               /*!< INT49 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT50_Pos       (18UL)                    /*!< INT50 (Bit 18)                                        */
#define BCM_LIC_DISABLE_2_INT50_Msk       (0x40000UL)               /*!< INT50 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT51_Pos       (19UL)                    /*!< INT51 (Bit 19)                                        */
#define BCM_LIC_DISABLE_2_INT51_Msk       (0x80000UL)               /*!< INT51 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT52_Pos       (20UL)                    /*!< INT52 (Bit 20)                                        */
#define BCM_LIC_DISABLE_2_INT52_Msk       (0x100000UL)              /*!< INT52 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT53_Pos       (21UL)                    /*!< INT53 (Bit 21)                                        */
#define BCM_LIC_DISABLE_2_INT53_Msk       (0x200000UL)              /*!< INT53 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT54_Pos       (22UL)                    /*!< INT54 (Bit 22)                                        */
#define BCM_LIC_DISABLE_2_INT54_Msk       (0x400000UL)              /*!< INT54 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT55_Pos       (23UL)                    /*!< INT55 (Bit 23)                                        */
#define BCM_LIC_DISABLE_2_INT55_Msk       (0x800000UL)              /*!< INT55 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT56_Pos       (24UL)                    /*!< INT56 (Bit 24)                                        */
#define BCM_LIC_DISABLE_2_INT56_Msk       (0x1000000UL)             /*!< INT56 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT57_Pos       (25UL)                    /*!< INT57 (Bit 25)                                        */
#define BCM_LIC_DISABLE_2_INT57_Msk       (0x2000000UL)             /*!< INT57 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT58_Pos       (26UL)                    /*!< INT58 (Bit 26)                                        */
#define BCM_LIC_DISABLE_2_INT58_Msk       (0x4000000UL)             /*!< INT58 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT59_Pos       (27UL)                    /*!< INT59 (Bit 27)                                        */
#define BCM_LIC_DISABLE_2_INT59_Msk       (0x8000000UL)             /*!< INT59 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT60_Pos       (28UL)                    /*!< INT60 (Bit 28)                                        */
#define BCM_LIC_DISABLE_2_INT60_Msk       (0x10000000UL)            /*!< INT60 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT61_Pos       (29UL)                    /*!< INT61 (Bit 29)                                        */
#define BCM_LIC_DISABLE_2_INT61_Msk       (0x20000000UL)            /*!< INT61 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT62_Pos       (30UL)                    /*!< INT62 (Bit 30)                                        */
#define BCM_LIC_DISABLE_2_INT62_Msk       (0x40000000UL)            /*!< INT62 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_INT63_Pos       (31UL)                    /*!< INT63 (Bit 31)                                        */
#define BCM_LIC_DISABLE_2_INT63_Msk       (0x80000000UL)            /*!< INT63 (Bitfield-Mask: 0x01)                           */
/* =====================================================  DISABLE_BASIC  ===================================================== */
#define BCM_LIC_DISABLE_BASIC_TIMER_Pos   (0UL)                     /*!< TIMER (Bit 0)                                         */
#define BCM_LIC_DISABLE_BASIC_TIMER_Msk   (0x1UL)                   /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_BASIC_MAILBOX_Pos (1UL)                     /*!< MAILBOX (Bit 1)                                       */
#define BCM_LIC_DISABLE_BASIC_MAILBOX_Msk (0x2UL)                   /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_BASIC_DOORBELL0_Pos (2UL)                   /*!< DOORBELL0 (Bit 2)                                     */
#define BCM_LIC_DISABLE_BASIC_DOORBELL0_Msk (0x4UL)                 /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_DISABLE_BASIC_DOORBELL1_Pos (3UL)                   /*!< DOORBELL1 (Bit 3)                                     */
#define BCM_LIC_DISABLE_BASIC_DOORBELL1_Msk (0x8UL)                 /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_DISABLE_BASIC_VPU0_HALTED_Pos (4UL)                 /*!< VPU0_HALTED (Bit 4)                                   */
#define BCM_LIC_DISABLE_BASIC_VPU0_HALTED_Msk (0x10UL)              /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_DISABLE_BASIC_VPU1_HALTED_Pos (5UL)                 /*!< VPU1_HALTED (Bit 5)                                   */
#define BCM_LIC_DISABLE_BASIC_VPU1_HALTED_Msk (0x20UL)              /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_DISABLE_BASIC_ARM_ADDRESS_ERROR_Pos (6UL)           /*!< ARM_ADDRESS_ERROR (Bit 6)                             */
#define BCM_LIC_DISABLE_BASIC_ARM_ADDRESS_ERROR_Msk (0x40UL)        /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)               */
#define BCM_LIC_DISABLE_BASIC_ARM_AXI_ERROR_Pos (7UL)               /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define BCM_LIC_DISABLE_BASIC_ARM_AXI_ERROR_Msk (0x80UL)            /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                   */


/* =========================================================================================================================== */
/* ================                                  ARM_GIC400_Distributor                                   ================ */
/* =========================================================================================================================== */

/* =======================================================  GICD_CTLR  ======================================================= */
#define ARM_GIC400_Distributor_GICD_CTLR_ENABLE_GROUP0_Pos (0UL)    /*!< ENABLE_GROUP0 (Bit 0)                                 */
#define ARM_GIC400_Distributor_GICD_CTLR_ENABLE_GROUP0_Msk (0x1UL)  /*!< ENABLE_GROUP0 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_Distributor_GICD_CTLR_ENABLE_GROUP1_Pos (1UL)    /*!< ENABLE_GROUP1 (Bit 1)                                 */
#define ARM_GIC400_Distributor_GICD_CTLR_ENABLE_GROUP1_Msk (0x2UL)  /*!< ENABLE_GROUP1 (Bitfield-Mask: 0x01)                   */
/* ======================================================  GICD_TYPER  ======================================================= */
#define ARM_GIC400_Distributor_GICD_TYPER_IT_LINES_NUMBER_Pos (0UL) /*!< IT_LINES_NUMBER (Bit 0)                               */
#define ARM_GIC400_Distributor_GICD_TYPER_IT_LINES_NUMBER_Msk (0x1fUL) /*!< IT_LINES_NUMBER (Bitfield-Mask: 0x1f)              */
#define ARM_GIC400_Distributor_GICD_TYPER_CPU_NUMBER_Pos (5UL)      /*!< CPU_NUMBER (Bit 5)                                    */
#define ARM_GIC400_Distributor_GICD_TYPER_CPU_NUMBER_Msk (0xe0UL)   /*!< CPU_NUMBER (Bitfield-Mask: 0x07)                      */
#define ARM_GIC400_Distributor_GICD_TYPER_SECURITY_EXTENSION_Pos (10UL) /*!< SECURITY_EXTENSION (Bit 10)                       */
#define ARM_GIC400_Distributor_GICD_TYPER_SECURITY_EXTENSION_Msk (0x400UL) /*!< SECURITY_EXTENSION (Bitfield-Mask: 0x01)       */
#define ARM_GIC400_Distributor_GICD_TYPER_LSPI_Pos (11UL)           /*!< LSPI (Bit 11)                                         */
#define ARM_GIC400_Distributor_GICD_TYPER_LSPI_Msk (0x7800UL)       /*!< LSPI (Bitfield-Mask: 0x0f)                            */
/* =======================================================  GICD_IIDR  ======================================================= */
#define ARM_GIC400_Distributor_GICD_IIDR_PRODUCT_ID_Pos (24UL)      /*!< PRODUCT_ID (Bit 24)                                   */
#define ARM_GIC400_Distributor_GICD_IIDR_PRODUCT_ID_Msk (0xff000000UL) /*!< PRODUCT_ID (Bitfield-Mask: 0xff)                   */
#define ARM_GIC400_Distributor_GICD_IIDR_VARIANT_Pos (16UL)         /*!< VARIANT (Bit 16)                                      */
#define ARM_GIC400_Distributor_GICD_IIDR_VARIANT_Msk (0xf0000UL)    /*!< VARIANT (Bitfield-Mask: 0x0f)                         */
#define ARM_GIC400_Distributor_GICD_IIDR_REVISION_Pos (12UL)        /*!< REVISION (Bit 12)                                     */
#define ARM_GIC400_Distributor_GICD_IIDR_REVISION_Msk (0xf000UL)    /*!< REVISION (Bitfield-Mask: 0x0f)                        */
#define ARM_GIC400_Distributor_GICD_IIDR_IMPLEMENTER_Pos (0UL)      /*!< IMPLEMENTER (Bit 0)                                   */
#define ARM_GIC400_Distributor_GICD_IIDR_IMPLEMENTER_Msk (0xfffUL)  /*!< IMPLEMENTER (Bitfield-Mask: 0xfff)                    */
/* ======================================================  GICD_PPISR  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PPISR_ID31_Pos (15UL)           /*!< ID31 (Bit 15)                                         */
#define ARM_GIC400_Distributor_GICD_PPISR_ID31_Msk (0x8000UL)       /*!< ID31 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_PPISR_ID30_Pos (14UL)           /*!< ID30 (Bit 14)                                         */
#define ARM_GIC400_Distributor_GICD_PPISR_ID30_Msk (0x4000UL)       /*!< ID30 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_PPISR_ID29_Pos (13UL)           /*!< ID29 (Bit 13)                                         */
#define ARM_GIC400_Distributor_GICD_PPISR_ID29_Msk (0x2000UL)       /*!< ID29 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_PPISR_ID28_Pos (12UL)           /*!< ID28 (Bit 12)                                         */
#define ARM_GIC400_Distributor_GICD_PPISR_ID28_Msk (0x1000UL)       /*!< ID28 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_PPISR_ID27_Pos (11UL)           /*!< ID27 (Bit 11)                                         */
#define ARM_GIC400_Distributor_GICD_PPISR_ID27_Msk (0x800UL)        /*!< ID27 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_PPISR_ID26_Pos (10UL)           /*!< ID26 (Bit 10)                                         */
#define ARM_GIC400_Distributor_GICD_PPISR_ID26_Msk (0x400UL)        /*!< ID26 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_PPISR_ID25_Pos (9UL)            /*!< ID25 (Bit 9)                                          */
#define ARM_GIC400_Distributor_GICD_PPISR_ID25_Msk (0x200UL)        /*!< ID25 (Bitfield-Mask: 0x01)                            */
/* ======================================================  GICD_SPISR0  ====================================================== */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI32_Pos (0UL)          /*!< SPI32 (Bit 0)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI32_Msk (0x1UL)        /*!< SPI32 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI33_Pos (1UL)          /*!< SPI33 (Bit 1)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI33_Msk (0x2UL)        /*!< SPI33 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI34_Pos (2UL)          /*!< SPI34 (Bit 2)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI34_Msk (0x4UL)        /*!< SPI34 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI35_Pos (3UL)          /*!< SPI35 (Bit 3)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI35_Msk (0x8UL)        /*!< SPI35 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI36_Pos (4UL)          /*!< SPI36 (Bit 4)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI36_Msk (0x10UL)       /*!< SPI36 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI37_Pos (5UL)          /*!< SPI37 (Bit 5)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI37_Msk (0x20UL)       /*!< SPI37 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI38_Pos (6UL)          /*!< SPI38 (Bit 6)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI38_Msk (0x40UL)       /*!< SPI38 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI39_Pos (7UL)          /*!< SPI39 (Bit 7)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI39_Msk (0x80UL)       /*!< SPI39 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI40_Pos (8UL)          /*!< SPI40 (Bit 8)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI40_Msk (0x100UL)      /*!< SPI40 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI41_Pos (9UL)          /*!< SPI41 (Bit 9)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI41_Msk (0x200UL)      /*!< SPI41 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI42_Pos (10UL)         /*!< SPI42 (Bit 10)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI42_Msk (0x400UL)      /*!< SPI42 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI43_Pos (11UL)         /*!< SPI43 (Bit 11)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI43_Msk (0x800UL)      /*!< SPI43 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI44_Pos (12UL)         /*!< SPI44 (Bit 12)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI44_Msk (0x1000UL)     /*!< SPI44 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI45_Pos (13UL)         /*!< SPI45 (Bit 13)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI45_Msk (0x2000UL)     /*!< SPI45 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI46_Pos (14UL)         /*!< SPI46 (Bit 14)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI46_Msk (0x4000UL)     /*!< SPI46 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI47_Pos (15UL)         /*!< SPI47 (Bit 15)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI47_Msk (0x8000UL)     /*!< SPI47 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI48_Pos (16UL)         /*!< SPI48 (Bit 16)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI48_Msk (0x10000UL)    /*!< SPI48 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI49_Pos (17UL)         /*!< SPI49 (Bit 17)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI49_Msk (0x20000UL)    /*!< SPI49 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI50_Pos (18UL)         /*!< SPI50 (Bit 18)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI50_Msk (0x40000UL)    /*!< SPI50 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI51_Pos (19UL)         /*!< SPI51 (Bit 19)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI51_Msk (0x80000UL)    /*!< SPI51 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI52_Pos (20UL)         /*!< SPI52 (Bit 20)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI52_Msk (0x100000UL)   /*!< SPI52 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI53_Pos (21UL)         /*!< SPI53 (Bit 21)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI53_Msk (0x200000UL)   /*!< SPI53 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI54_Pos (22UL)         /*!< SPI54 (Bit 22)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI54_Msk (0x400000UL)   /*!< SPI54 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI55_Pos (23UL)         /*!< SPI55 (Bit 23)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI55_Msk (0x800000UL)   /*!< SPI55 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI56_Pos (24UL)         /*!< SPI56 (Bit 24)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI56_Msk (0x1000000UL)  /*!< SPI56 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI57_Pos (25UL)         /*!< SPI57 (Bit 25)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI57_Msk (0x2000000UL)  /*!< SPI57 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI58_Pos (26UL)         /*!< SPI58 (Bit 26)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI58_Msk (0x4000000UL)  /*!< SPI58 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI59_Pos (27UL)         /*!< SPI59 (Bit 27)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI59_Msk (0x8000000UL)  /*!< SPI59 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI60_Pos (28UL)         /*!< SPI60 (Bit 28)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI60_Msk (0x10000000UL) /*!< SPI60 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI61_Pos (29UL)         /*!< SPI61 (Bit 29)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI61_Msk (0x20000000UL) /*!< SPI61 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI62_Pos (30UL)         /*!< SPI62 (Bit 30)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI62_Msk (0x40000000UL) /*!< SPI62 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI63_Pos (31UL)         /*!< SPI63 (Bit 31)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR0_SPI63_Msk (0x80000000UL) /*!< SPI63 (Bitfield-Mask: 0x01)                           */
/* ======================================================  GICD_SPISR1  ====================================================== */
#define ARM_GIC400_Distributor_GICD_SPISR1_TIMER_Pos (0UL)          /*!< TIMER (Bit 0)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_TIMER_Msk (0x1UL)        /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_MAILBOX_Pos (1UL)        /*!< MAILBOX (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR1_MAILBOX_Msk (0x2UL)      /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_DOORBELL0_Pos (2UL)      /*!< DOORBELL0 (Bit 2)                                     */
#define ARM_GIC400_Distributor_GICD_SPISR1_DOORBELL0_Msk (0x4UL)    /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_SPISR1_DOORBELL1_Pos (3UL)      /*!< DOORBELL1 (Bit 3)                                     */
#define ARM_GIC400_Distributor_GICD_SPISR1_DOORBELL1_Msk (0x8UL)    /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define ARM_GIC400_Distributor_GICD_SPISR1_VPU0_HALTED_Pos (4UL)    /*!< VPU0_HALTED (Bit 4)                                   */
#define ARM_GIC400_Distributor_GICD_SPISR1_VPU0_HALTED_Msk (0x10UL) /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_SPISR1_VPU1_HALTED_Pos (5UL)    /*!< VPU1_HALTED (Bit 5)                                   */
#define ARM_GIC400_Distributor_GICD_SPISR1_VPU1_HALTED_Msk (0x20UL) /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define ARM_GIC400_Distributor_GICD_SPISR1_ARM_ADDRESS_ERROR_Pos (6UL) /*!< ARM_ADDRESS_ERROR (Bit 6)                          */
#define ARM_GIC400_Distributor_GICD_SPISR1_ARM_ADDRESS_ERROR_Msk (0x40UL) /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_SPISR1_ARM_AXI_ERROR_Pos (7UL)  /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define ARM_GIC400_Distributor_GICD_SPISR1_ARM_AXI_ERROR_Msk (0x80UL) /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI0_Pos (8UL)           /*!< SWI0 (Bit 8)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI0_Msk (0x100UL)       /*!< SWI0 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI1_Pos (9UL)           /*!< SWI1 (Bit 9)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI1_Msk (0x200UL)       /*!< SWI1 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI2_Pos (10UL)          /*!< SWI2 (Bit 10)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI2_Msk (0x400UL)       /*!< SWI2 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI3_Pos (11UL)          /*!< SWI3 (Bit 11)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI3_Msk (0x800UL)       /*!< SWI3 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI4_Pos (12UL)          /*!< SWI4 (Bit 12)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI4_Msk (0x1000UL)      /*!< SWI4 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI5_Pos (13UL)          /*!< SWI5 (Bit 13)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI5_Msk (0x2000UL)      /*!< SWI5 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI6_Pos (14UL)          /*!< SWI6 (Bit 14)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI6_Msk (0x4000UL)      /*!< SWI6 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI7_Pos (15UL)          /*!< SWI7 (Bit 15)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR1_SWI7_Msk (0x8000UL)      /*!< SWI7 (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI80_Pos (16UL)         /*!< SPI80 (Bit 16)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI80_Msk (0x10000UL)    /*!< SPI80 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI81_Pos (17UL)         /*!< SPI81 (Bit 17)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI81_Msk (0x20000UL)    /*!< SPI81 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI82_Pos (18UL)         /*!< SPI82 (Bit 18)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI82_Msk (0x40000UL)    /*!< SPI82 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI83_Pos (19UL)         /*!< SPI83 (Bit 19)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI83_Msk (0x80000UL)    /*!< SPI83 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI84_Pos (20UL)         /*!< SPI84 (Bit 20)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI84_Msk (0x100000UL)   /*!< SPI84 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI85_Pos (21UL)         /*!< SPI85 (Bit 21)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI85_Msk (0x200000UL)   /*!< SPI85 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI86_Pos (22UL)         /*!< SPI86 (Bit 22)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI86_Msk (0x400000UL)   /*!< SPI86 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI87_Pos (23UL)         /*!< SPI87 (Bit 23)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI87_Msk (0x800000UL)   /*!< SPI87 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI88_Pos (24UL)         /*!< SPI88 (Bit 24)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI88_Msk (0x1000000UL)  /*!< SPI88 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI89_Pos (25UL)         /*!< SPI89 (Bit 25)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI89_Msk (0x2000000UL)  /*!< SPI89 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI90_Pos (26UL)         /*!< SPI90 (Bit 26)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI90_Msk (0x4000000UL)  /*!< SPI90 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI91_Pos (27UL)         /*!< SPI91 (Bit 27)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI91_Msk (0x8000000UL)  /*!< SPI91 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI92_Pos (28UL)         /*!< SPI92 (Bit 28)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI92_Msk (0x10000000UL) /*!< SPI92 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI93_Pos (29UL)         /*!< SPI93 (Bit 29)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI93_Msk (0x20000000UL) /*!< SPI93 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI94_Pos (30UL)         /*!< SPI94 (Bit 30)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI94_Msk (0x40000000UL) /*!< SPI94 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI95_Pos (31UL)         /*!< SPI95 (Bit 31)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR1_SPI95_Msk (0x80000000UL) /*!< SPI95 (Bitfield-Mask: 0x01)                           */
/* ======================================================  GICD_SPISR2  ====================================================== */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_0_Pos (0UL)        /*!< TIMER_0 (Bit 0)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_0_Msk (0x1UL)      /*!< TIMER_0 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_1_Pos (1UL)        /*!< TIMER_1 (Bit 1)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_1_Msk (0x2UL)      /*!< TIMER_1 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_2_Pos (2UL)        /*!< TIMER_2 (Bit 2)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_2_Msk (0x4UL)      /*!< TIMER_2 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_3_Pos (3UL)        /*!< TIMER_3 (Bit 3)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_TIMER_3_Msk (0x8UL)      /*!< TIMER_3 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR2_H264_0_Pos (4UL)         /*!< H264_0 (Bit 4)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_H264_0_Msk (0x10UL)      /*!< H264_0 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_H264_1_Pos (5UL)         /*!< H264_1 (Bit 5)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_H264_1_Msk (0x20UL)      /*!< H264_1 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_H264_2_Pos (6UL)         /*!< H264_2 (Bit 6)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_H264_2_Msk (0x40UL)      /*!< H264_2 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_JPEG_Pos (7UL)           /*!< JPEG (Bit 7)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_JPEG_Msk (0x80UL)        /*!< JPEG (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR2_ISP_Pos (8UL)            /*!< ISP (Bit 8)                                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_ISP_Msk (0x100UL)        /*!< ISP (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR2_USB_Pos (9UL)            /*!< USB (Bit 9)                                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_USB_Msk (0x200UL)        /*!< USB (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR2_V3D_Pos (10UL)           /*!< V3D (Bit 10)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_V3D_Msk (0x400UL)        /*!< V3D (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR2_TRANSPOSER_Pos (11UL)    /*!< TRANSPOSER (Bit 11)                                   */
#define ARM_GIC400_Distributor_GICD_SPISR2_TRANSPOSER_Msk (0x800UL) /*!< TRANSPOSER (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_0_Pos (12UL) /*!< MULTICORE_SYNC_0 (Bit 12)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_0_Msk (0x1000UL) /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_1_Pos (13UL) /*!< MULTICORE_SYNC_1 (Bit 13)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_1_Msk (0x2000UL) /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_2_Pos (14UL) /*!< MULTICORE_SYNC_2 (Bit 14)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_2_Msk (0x4000UL) /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_3_Pos (15UL) /*!< MULTICORE_SYNC_3 (Bit 15)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_MULTICORE_SYNC_3_Msk (0x8000UL) /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01)         */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_0_Pos (16UL)         /*!< DMA_0 (Bit 16)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_0_Msk (0x10000UL)    /*!< DMA_0 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_1_Pos (17UL)         /*!< DMA_1 (Bit 17)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_1_Msk (0x20000UL)    /*!< DMA_1 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_2_Pos (18UL)         /*!< DMA_2 (Bit 18)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_2_Msk (0x40000UL)    /*!< DMA_2 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_3_Pos (19UL)         /*!< DMA_3 (Bit 19)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_3_Msk (0x80000UL)    /*!< DMA_3 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_4_Pos (20UL)         /*!< DMA_4 (Bit 20)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_4_Msk (0x100000UL)   /*!< DMA_4 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_5_Pos (21UL)         /*!< DMA_5 (Bit 21)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_5_Msk (0x200000UL)   /*!< DMA_5 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_6_Pos (22UL)         /*!< DMA_6 (Bit 22)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_6_Msk (0x400000UL)   /*!< DMA_6 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_7_8_Pos (23UL)       /*!< DMA_7_8 (Bit 23)                                      */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_7_8_Msk (0x800000UL) /*!< DMA_7_8 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_9_10_Pos (24UL)      /*!< DMA_9_10 (Bit 24)                                     */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_9_10_Msk (0x1000000UL) /*!< DMA_9_10 (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_11_Pos (25UL)        /*!< DMA_11 (Bit 25)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_11_Msk (0x2000000UL) /*!< DMA_11 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_12_Pos (26UL)        /*!< DMA_12 (Bit 26)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_12_Msk (0x4000000UL) /*!< DMA_12 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_13_Pos (27UL)        /*!< DMA_13 (Bit 27)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_13_Msk (0x8000000UL) /*!< DMA_13 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_14_Pos (28UL)        /*!< DMA_14 (Bit 28)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_14_Msk (0x10000000UL) /*!< DMA_14 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR2_AUX_Pos (29UL)           /*!< AUX (Bit 29)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_AUX_Msk (0x20000000UL)   /*!< AUX (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR2_ARM_Pos (30UL)           /*!< ARM (Bit 30)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR2_ARM_Msk (0x40000000UL)   /*!< ARM (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_15_Pos (31UL)        /*!< DMA_15 (Bit 31)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR2_DMA_15_Msk (0x80000000UL) /*!< DMA_15 (Bitfield-Mask: 0x01)                         */
/* ======================================================  GICD_SPISR3  ====================================================== */
#define ARM_GIC400_Distributor_GICD_SPISR3_HDMI_CEC_Pos (0UL)       /*!< HDMI_CEC (Bit 0)                                      */
#define ARM_GIC400_Distributor_GICD_SPISR3_HDMI_CEC_Msk (0x1UL)     /*!< HDMI_CEC (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_HVS_Pos (1UL)            /*!< HVS (Bit 1)                                           */
#define ARM_GIC400_Distributor_GICD_SPISR3_HVS_Msk (0x2UL)          /*!< HVS (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_RPIVID_Pos (2UL)         /*!< RPIVID (Bit 2)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_RPIVID_Msk (0x4UL)       /*!< RPIVID (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_SDC_Pos (3UL)            /*!< SDC (Bit 3)                                           */
#define ARM_GIC400_Distributor_GICD_SPISR3_SDC_Msk (0x8UL)          /*!< SDC (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_DSI_0_Pos (4UL)          /*!< DSI_0 (Bit 4)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR3_DSI_0_Msk (0x10UL)       /*!< DSI_0 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_2_Pos (5UL)  /*!< PIXEL_VALVE_2 (Bit 5)                                 */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_2_Msk (0x20UL) /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)                 */
#define ARM_GIC400_Distributor_GICD_SPISR3_CAMERA_0_Pos (6UL)       /*!< CAMERA_0 (Bit 6)                                      */
#define ARM_GIC400_Distributor_GICD_SPISR3_CAMERA_0_Msk (0x40UL)    /*!< CAMERA_0 (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_CAMERA_1_Pos (7UL)       /*!< CAMERA_1 (Bit 7)                                      */
#define ARM_GIC400_Distributor_GICD_SPISR3_CAMERA_1_Msk (0x80UL)    /*!< CAMERA_1 (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_HDMI_0_Pos (8UL)         /*!< HDMI_0 (Bit 8)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_HDMI_0_Msk (0x100UL)     /*!< HDMI_0 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_HDMI_1_Pos (9UL)         /*!< HDMI_1 (Bit 9)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_HDMI_1_Msk (0x200UL)     /*!< HDMI_1 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_3_Pos (10UL) /*!< PIXEL_VALVE_3 (Bit 10)                                */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_3_Msk (0x400UL) /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_SPISR3_SPI_BSC_SLAVE_Pos (11UL) /*!< SPI_BSC_SLAVE (Bit 11)                                */
#define ARM_GIC400_Distributor_GICD_SPISR3_SPI_BSC_SLAVE_Msk (0x800UL) /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01)                */
#define ARM_GIC400_Distributor_GICD_SPISR3_DSI_1_Pos (12UL)         /*!< DSI_1 (Bit 12)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR3_DSI_1_Msk (0x1000UL)     /*!< DSI_1 (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_0_Pos (13UL) /*!< PIXEL_VALVE_0 (Bit 13)                                */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_0_Msk (0x2000UL) /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01)               */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_1_2_Pos (14UL) /*!< PIXEL_VALVE_1_2 (Bit 14)                            */
#define ARM_GIC400_Distributor_GICD_SPISR3_PIXEL_VALVE_1_2_Msk (0x4000UL) /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01)           */
#define ARM_GIC400_Distributor_GICD_SPISR3_CPR_Pos (15UL)           /*!< CPR (Bit 15)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_CPR_Msk (0x8000UL)       /*!< CPR (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_SMI_Pos (16UL)           /*!< SMI (Bit 16)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_SMI_Msk (0x10000UL)      /*!< SMI (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_0_Pos (17UL)        /*!< GPIO_0 (Bit 17)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_0_Msk (0x20000UL)   /*!< GPIO_0 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_1_Pos (18UL)        /*!< GPIO_1 (Bit 18)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_1_Msk (0x40000UL)   /*!< GPIO_1 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_2_Pos (19UL)        /*!< GPIO_2 (Bit 19)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_2_Msk (0x80000UL)   /*!< GPIO_2 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_3_Pos (20UL)        /*!< GPIO_3 (Bit 20)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR3_GPIO_3_Msk (0x100000UL)  /*!< GPIO_3 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_I2C_Pos (21UL)           /*!< I2C (Bit 21)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_I2C_Msk (0x200000UL)     /*!< I2C (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_SPI_Pos (22UL)           /*!< SPI (Bit 22)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_SPI_Msk (0x400000UL)     /*!< SPI (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_PCM_I2S_Pos (23UL)       /*!< PCM_I2S (Bit 23)                                      */
#define ARM_GIC400_Distributor_GICD_SPISR3_PCM_I2S_Msk (0x800000UL) /*!< PCM_I2S (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR3_SDHOST_Pos (24UL)        /*!< SDHOST (Bit 24)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR3_SDHOST_Msk (0x1000000UL) /*!< SDHOST (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_UART_Pos (25UL)          /*!< UART (Bit 25)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR3_UART_Msk (0x2000000UL)   /*!< UART (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR3_ETH_PCIE_Pos (26UL)      /*!< ETH_PCIE (Bit 26)                                     */
#define ARM_GIC400_Distributor_GICD_SPISR3_ETH_PCIE_Msk (0x4000000UL) /*!< ETH_PCIE (Bitfield-Mask: 0x01)                      */
#define ARM_GIC400_Distributor_GICD_SPISR3_VEC_Pos (27UL)           /*!< VEC (Bit 27)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_VEC_Msk (0x8000000UL)    /*!< VEC (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_CPG_Pos (28UL)           /*!< CPG (Bit 28)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_CPG_Msk (0x10000000UL)   /*!< CPG (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_RNG_Pos (29UL)           /*!< RNG (Bit 29)                                          */
#define ARM_GIC400_Distributor_GICD_SPISR3_RNG_Msk (0x20000000UL)   /*!< RNG (Bitfield-Mask: 0x01)                             */
#define ARM_GIC400_Distributor_GICD_SPISR3_EMMC_Pos (30UL)          /*!< EMMC (Bit 30)                                         */
#define ARM_GIC400_Distributor_GICD_SPISR3_EMMC_Msk (0x40000000UL)  /*!< EMMC (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_Distributor_GICD_SPISR3_ETH_PCIE_SECURE_Pos (31UL) /*!< ETH_PCIE_SECURE (Bit 31)                            */
#define ARM_GIC400_Distributor_GICD_SPISR3_ETH_PCIE_SECURE_Msk (0x80000000UL) /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01)       */
/* ======================================================  GICD_SPISR4  ====================================================== */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI160_Pos (0UL)         /*!< SPI160 (Bit 0)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI160_Msk (0x1UL)       /*!< SPI160 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI161_Pos (1UL)         /*!< SPI161 (Bit 1)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI161_Msk (0x2UL)       /*!< SPI161 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI162_Pos (2UL)         /*!< SPI162 (Bit 2)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI162_Msk (0x4UL)       /*!< SPI162 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI163_Pos (3UL)         /*!< SPI163 (Bit 3)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI163_Msk (0x8UL)       /*!< SPI163 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI164_Pos (4UL)         /*!< SPI164 (Bit 4)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI164_Msk (0x10UL)      /*!< SPI164 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI165_Pos (5UL)         /*!< SPI165 (Bit 5)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI165_Msk (0x20UL)      /*!< SPI165 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI166_Pos (6UL)         /*!< SPI166 (Bit 6)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI166_Msk (0x40UL)      /*!< SPI166 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI167_Pos (7UL)         /*!< SPI167 (Bit 7)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI167_Msk (0x80UL)      /*!< SPI167 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI168_Pos (8UL)         /*!< SPI168 (Bit 8)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI168_Msk (0x100UL)     /*!< SPI168 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI169_Pos (9UL)         /*!< SPI169 (Bit 9)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI169_Msk (0x200UL)     /*!< SPI169 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI170_Pos (10UL)        /*!< SPI170 (Bit 10)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI170_Msk (0x400UL)     /*!< SPI170 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI171_Pos (11UL)        /*!< SPI171 (Bit 11)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI171_Msk (0x800UL)     /*!< SPI171 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI172_Pos (12UL)        /*!< SPI172 (Bit 12)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI172_Msk (0x1000UL)    /*!< SPI172 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI173_Pos (13UL)        /*!< SPI173 (Bit 13)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI173_Msk (0x2000UL)    /*!< SPI173 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI174_Pos (14UL)        /*!< SPI174 (Bit 14)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI174_Msk (0x4000UL)    /*!< SPI174 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI175_Pos (15UL)        /*!< SPI175 (Bit 15)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI175_Msk (0x8000UL)    /*!< SPI175 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI176_Pos (16UL)        /*!< SPI176 (Bit 16)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI176_Msk (0x10000UL)   /*!< SPI176 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI177_Pos (17UL)        /*!< SPI177 (Bit 17)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI177_Msk (0x20000UL)   /*!< SPI177 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI178_Pos (18UL)        /*!< SPI178 (Bit 18)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI178_Msk (0x40000UL)   /*!< SPI178 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI179_Pos (19UL)        /*!< SPI179 (Bit 19)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI179_Msk (0x80000UL)   /*!< SPI179 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI180_Pos (20UL)        /*!< SPI180 (Bit 20)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI180_Msk (0x100000UL)  /*!< SPI180 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI181_Pos (21UL)        /*!< SPI181 (Bit 21)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI181_Msk (0x200000UL)  /*!< SPI181 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI182_Pos (22UL)        /*!< SPI182 (Bit 22)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI182_Msk (0x400000UL)  /*!< SPI182 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI183_Pos (23UL)        /*!< SPI183 (Bit 23)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI183_Msk (0x800000UL)  /*!< SPI183 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI184_Pos (24UL)        /*!< SPI184 (Bit 24)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI184_Msk (0x1000000UL) /*!< SPI184 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI185_Pos (25UL)        /*!< SPI185 (Bit 25)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI185_Msk (0x2000000UL) /*!< SPI185 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI186_Pos (26UL)        /*!< SPI186 (Bit 26)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI186_Msk (0x4000000UL) /*!< SPI186 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI187_Pos (27UL)        /*!< SPI187 (Bit 27)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI187_Msk (0x8000000UL) /*!< SPI187 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI188_Pos (28UL)        /*!< SPI188 (Bit 28)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI188_Msk (0x10000000UL) /*!< SPI188 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI189_Pos (29UL)        /*!< SPI189 (Bit 29)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI189_Msk (0x20000000UL) /*!< SPI189 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI190_Pos (30UL)        /*!< SPI190 (Bit 30)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI190_Msk (0x40000000UL) /*!< SPI190 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI191_Pos (31UL)        /*!< SPI191 (Bit 31)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR4_SPI191_Msk (0x80000000UL) /*!< SPI191 (Bitfield-Mask: 0x01)                         */
/* ======================================================  GICD_SPISR5  ====================================================== */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI192_Pos (0UL)         /*!< SPI192 (Bit 0)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI192_Msk (0x1UL)       /*!< SPI192 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI193_Pos (1UL)         /*!< SPI193 (Bit 1)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI193_Msk (0x2UL)       /*!< SPI193 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI194_Pos (2UL)         /*!< SPI194 (Bit 2)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI194_Msk (0x4UL)       /*!< SPI194 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI195_Pos (3UL)         /*!< SPI195 (Bit 3)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI195_Msk (0x8UL)       /*!< SPI195 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI196_Pos (4UL)         /*!< SPI196 (Bit 4)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI196_Msk (0x10UL)      /*!< SPI196 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI197_Pos (5UL)         /*!< SPI197 (Bit 5)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI197_Msk (0x20UL)      /*!< SPI197 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI198_Pos (6UL)         /*!< SPI198 (Bit 6)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI198_Msk (0x40UL)      /*!< SPI198 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI199_Pos (7UL)         /*!< SPI199 (Bit 7)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI199_Msk (0x80UL)      /*!< SPI199 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI200_Pos (8UL)         /*!< SPI200 (Bit 8)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI200_Msk (0x100UL)     /*!< SPI200 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI201_Pos (9UL)         /*!< SPI201 (Bit 9)                                        */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI201_Msk (0x200UL)     /*!< SPI201 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI202_Pos (10UL)        /*!< SPI202 (Bit 10)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI202_Msk (0x400UL)     /*!< SPI202 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI203_Pos (11UL)        /*!< SPI203 (Bit 11)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI203_Msk (0x800UL)     /*!< SPI203 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI204_Pos (12UL)        /*!< SPI204 (Bit 12)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI204_Msk (0x1000UL)    /*!< SPI204 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI205_Pos (13UL)        /*!< SPI205 (Bit 13)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI205_Msk (0x2000UL)    /*!< SPI205 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI206_Pos (14UL)        /*!< SPI206 (Bit 14)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI206_Msk (0x4000UL)    /*!< SPI206 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI207_Pos (15UL)        /*!< SPI207 (Bit 15)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI207_Msk (0x8000UL)    /*!< SPI207 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI208_Pos (16UL)        /*!< SPI208 (Bit 16)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI208_Msk (0x10000UL)   /*!< SPI208 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI209_Pos (17UL)        /*!< SPI209 (Bit 17)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI209_Msk (0x20000UL)   /*!< SPI209 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI210_Pos (18UL)        /*!< SPI210 (Bit 18)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI210_Msk (0x40000UL)   /*!< SPI210 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI211_Pos (19UL)        /*!< SPI211 (Bit 19)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI211_Msk (0x80000UL)   /*!< SPI211 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI212_Pos (20UL)        /*!< SPI212 (Bit 20)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI212_Msk (0x100000UL)  /*!< SPI212 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI213_Pos (21UL)        /*!< SPI213 (Bit 21)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI213_Msk (0x200000UL)  /*!< SPI213 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI214_Pos (22UL)        /*!< SPI214 (Bit 22)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI214_Msk (0x400000UL)  /*!< SPI214 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI215_Pos (23UL)        /*!< SPI215 (Bit 23)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI215_Msk (0x800000UL)  /*!< SPI215 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI216_Pos (24UL)        /*!< SPI216 (Bit 24)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI216_Msk (0x1000000UL) /*!< SPI216 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI217_Pos (25UL)        /*!< SPI217 (Bit 25)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI217_Msk (0x2000000UL) /*!< SPI217 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI218_Pos (26UL)        /*!< SPI218 (Bit 26)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI218_Msk (0x4000000UL) /*!< SPI218 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI219_Pos (27UL)        /*!< SPI219 (Bit 27)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI219_Msk (0x8000000UL) /*!< SPI219 (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI220_Pos (28UL)        /*!< SPI220 (Bit 28)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI220_Msk (0x10000000UL) /*!< SPI220 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI221_Pos (29UL)        /*!< SPI221 (Bit 29)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI221_Msk (0x20000000UL) /*!< SPI221 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI222_Pos (30UL)        /*!< SPI222 (Bit 30)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI222_Msk (0x40000000UL) /*!< SPI222 (Bitfield-Mask: 0x01)                         */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI223_Pos (31UL)        /*!< SPI223 (Bit 31)                                       */
#define ARM_GIC400_Distributor_GICD_SPISR5_SPI223_Msk (0x80000000UL) /*!< SPI223 (Bitfield-Mask: 0x01)                         */
/* =======================================================  GICD_SGIR  ======================================================= */
/* ====================================================  GICD_CPENDSGIRn  ==================================================== */
/* ====================================================  GICD_SPENDSGIRn  ==================================================== */
/* ======================================================  GICD_PIDR4  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR4_GICD_PIDR4_Pos (0UL)      /*!< GICD_PIDR4 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR4_GICD_PIDR4_Msk (0xffffffffUL) /*!< GICD_PIDR4 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR5  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR5_GICD_PIDR5_Pos (0UL)      /*!< GICD_PIDR5 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR5_GICD_PIDR5_Msk (0xffffffffUL) /*!< GICD_PIDR5 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR6  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR6_GICD_PIDR6_Pos (0UL)      /*!< GICD_PIDR6 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR6_GICD_PIDR6_Msk (0xffffffffUL) /*!< GICD_PIDR6 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR7  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR7_GICD_PIDR7_Pos (0UL)      /*!< GICD_PIDR7 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR7_GICD_PIDR7_Msk (0xffffffffUL) /*!< GICD_PIDR7 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR0  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR0_GICD_PIDR0_Pos (0UL)      /*!< GICD_PIDR0 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR0_GICD_PIDR0_Msk (0xffffffffUL) /*!< GICD_PIDR0 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR1  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR1_GICD_PIDR1_Pos (0UL)      /*!< GICD_PIDR1 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR1_GICD_PIDR1_Msk (0xffffffffUL) /*!< GICD_PIDR1 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR2  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR2_GICD_PIDR2_Pos (0UL)      /*!< GICD_PIDR2 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR2_GICD_PIDR2_Msk (0xffffffffUL) /*!< GICD_PIDR2 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_PIDR3  ======================================================= */
#define ARM_GIC400_Distributor_GICD_PIDR3_GICD_PIDR3_Pos (0UL)      /*!< GICD_PIDR3 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_PIDR3_GICD_PIDR3_Msk (0xffffffffUL) /*!< GICD_PIDR3 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_CIDR0  ======================================================= */
#define ARM_GIC400_Distributor_GICD_CIDR0_GICD_CIDR0_Pos (0UL)      /*!< GICD_CIDR0 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_CIDR0_GICD_CIDR0_Msk (0xffffffffUL) /*!< GICD_CIDR0 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_CIDR1  ======================================================= */
#define ARM_GIC400_Distributor_GICD_CIDR1_GICD_CIDR1_Pos (0UL)      /*!< GICD_CIDR1 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_CIDR1_GICD_CIDR1_Msk (0xffffffffUL) /*!< GICD_CIDR1 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_CIDR2  ======================================================= */
#define ARM_GIC400_Distributor_GICD_CIDR2_GICD_CIDR2_Pos (0UL)      /*!< GICD_CIDR2 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_CIDR2_GICD_CIDR2_Msk (0xffffffffUL) /*!< GICD_CIDR2 (Bitfield-Mask: 0xffffffff)            */
/* ======================================================  GICD_CIDR3  ======================================================= */
#define ARM_GIC400_Distributor_GICD_CIDR3_GICD_CIDR3_Pos (0UL)      /*!< GICD_CIDR3 (Bit 0)                                    */
#define ARM_GIC400_Distributor_GICD_CIDR3_GICD_CIDR3_Msk (0xffffffffUL) /*!< GICD_CIDR3 (Bitfield-Mask: 0xffffffff)            */


/* =========================================================================================================================== */
/* ================                                      ARM_GIC400_CPU                                       ================ */
/* =========================================================================================================================== */

/* =======================================================  GICC_CTLR  ======================================================= */
#define ARM_GIC400_CPU_GICC_CTLR_ENABLE_GROUP_0_Pos (0UL)           /*!< ENABLE_GROUP_0 (Bit 0)                                */
#define ARM_GIC400_CPU_GICC_CTLR_ENABLE_GROUP_0_Msk (0x1UL)         /*!< ENABLE_GROUP_0 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_CPU_GICC_CTLR_ENABLE_GROUP_1_Pos (1UL)           /*!< ENABLE_GROUP_1 (Bit 1)                                */
#define ARM_GIC400_CPU_GICC_CTLR_ENABLE_GROUP_1_Msk (0x2UL)         /*!< ENABLE_GROUP_1 (Bitfield-Mask: 0x01)                  */
#define ARM_GIC400_CPU_GICC_CTLR_ACKCTL_Pos (2UL)                   /*!< ACKCTL (Bit 2)                                        */
#define ARM_GIC400_CPU_GICC_CTLR_ACKCTL_Msk (0x4UL)                 /*!< ACKCTL (Bitfield-Mask: 0x01)                          */
#define ARM_GIC400_CPU_GICC_CTLR_FIQEN_Pos (3UL)                    /*!< FIQEN (Bit 3)                                         */
#define ARM_GIC400_CPU_GICC_CTLR_FIQEN_Msk (0x8UL)                  /*!< FIQEN (Bitfield-Mask: 0x01)                           */
#define ARM_GIC400_CPU_GICC_CTLR_CBPR_Pos (4UL)                     /*!< CBPR (Bit 4)                                          */
#define ARM_GIC400_CPU_GICC_CTLR_CBPR_Msk (0x10UL)                  /*!< CBPR (Bitfield-Mask: 0x01)                            */
#define ARM_GIC400_CPU_GICC_CTLR_FIQBYPDISGRP0_Pos (5UL)            /*!< FIQBYPDISGRP0 (Bit 5)                                 */
#define ARM_GIC400_CPU_GICC_CTLR_FIQBYPDISGRP0_Msk (0x20UL)         /*!< FIQBYPDISGRP0 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_CPU_GICC_CTLR_IRQBYPDISGRP0_Pos (6UL)            /*!< IRQBYPDISGRP0 (Bit 6)                                 */
#define ARM_GIC400_CPU_GICC_CTLR_IRQBYPDISGRP0_Msk (0x40UL)         /*!< IRQBYPDISGRP0 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_CPU_GICC_CTLR_FIQBYPDISGRP1_Pos (7UL)            /*!< FIQBYPDISGRP1 (Bit 7)                                 */
#define ARM_GIC400_CPU_GICC_CTLR_FIQBYPDISGRP1_Msk (0x80UL)         /*!< FIQBYPDISGRP1 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_CPU_GICC_CTLR_IRQBYPDISGRP1_Pos (8UL)            /*!< IRQBYPDISGRP1 (Bit 8)                                 */
#define ARM_GIC400_CPU_GICC_CTLR_IRQBYPDISGRP1_Msk (0x100UL)        /*!< IRQBYPDISGRP1 (Bitfield-Mask: 0x01)                   */
#define ARM_GIC400_CPU_GICC_CTLR_EOIMODES_Pos (9UL)                 /*!< EOIMODES (Bit 9)                                      */
#define ARM_GIC400_CPU_GICC_CTLR_EOIMODES_Msk (0x200UL)             /*!< EOIMODES (Bitfield-Mask: 0x01)                        */
#define ARM_GIC400_CPU_GICC_CTLR_EOIMODENS_Pos (10UL)               /*!< EOIMODENS (Bit 10)                                    */
#define ARM_GIC400_CPU_GICC_CTLR_EOIMODENS_Msk (0x400UL)            /*!< EOIMODENS (Bitfield-Mask: 0x01)                       */
/* =======================================================  GICC_PMR  ======================================================== */
#define ARM_GIC400_CPU_GICC_PMR_PRIORITY_Pos (0UL)                  /*!< PRIORITY (Bit 0)                                      */
#define ARM_GIC400_CPU_GICC_PMR_PRIORITY_Msk (0xffUL)               /*!< PRIORITY (Bitfield-Mask: 0xff)                        */
/* =======================================================  GICC_BPR  ======================================================== */
#define ARM_GIC400_CPU_GICC_BPR_BINARY_POINT_Pos (0UL)              /*!< BINARY_POINT (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_BPR_BINARY_POINT_Msk (0x7UL)            /*!< BINARY_POINT (Bitfield-Mask: 0x07)                    */
/* =======================================================  GICC_IAR  ======================================================== */
#define ARM_GIC400_CPU_GICC_IAR_CPUID_Pos (10UL)                    /*!< CPUID (Bit 10)                                        */
#define ARM_GIC400_CPU_GICC_IAR_CPUID_Msk (0x1c00UL)                /*!< CPUID (Bitfield-Mask: 0x07)                           */
#define ARM_GIC400_CPU_GICC_IAR_INTERRUPT_ID_Pos (0UL)              /*!< INTERRUPT_ID (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_IAR_INTERRUPT_ID_Msk (0x3ffUL)          /*!< INTERRUPT_ID (Bitfield-Mask: 0x3ff)                   */
/* =======================================================  GICC_EOIR  ======================================================= */
#define ARM_GIC400_CPU_GICC_EOIR_CPUID_Pos (10UL)                   /*!< CPUID (Bit 10)                                        */
#define ARM_GIC400_CPU_GICC_EOIR_CPUID_Msk (0x1c00UL)               /*!< CPUID (Bitfield-Mask: 0x07)                           */
#define ARM_GIC400_CPU_GICC_EOIR_INTERRUPT_ID_Pos (0UL)             /*!< INTERRUPT_ID (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_EOIR_INTERRUPT_ID_Msk (0x3ffUL)         /*!< INTERRUPT_ID (Bitfield-Mask: 0x3ff)                   */
/* =======================================================  GICC_RPR  ======================================================== */
#define ARM_GIC400_CPU_GICC_RPR_PRIORITY_Pos (0UL)                  /*!< PRIORITY (Bit 0)                                      */
#define ARM_GIC400_CPU_GICC_RPR_PRIORITY_Msk (0xffUL)               /*!< PRIORITY (Bitfield-Mask: 0xff)                        */
/* ======================================================  GICC_HPPIR  ======================================================= */
#define ARM_GIC400_CPU_GICC_HPPIR_CPUID_Pos (10UL)                  /*!< CPUID (Bit 10)                                        */
#define ARM_GIC400_CPU_GICC_HPPIR_CPUID_Msk (0x1c00UL)              /*!< CPUID (Bitfield-Mask: 0x07)                           */
#define ARM_GIC400_CPU_GICC_HPPIR_INTERRUPT_ID_Pos (0UL)            /*!< INTERRUPT_ID (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_HPPIR_INTERRUPT_ID_Msk (0x3ffUL)        /*!< INTERRUPT_ID (Bitfield-Mask: 0x3ff)                   */
/* =======================================================  GICC_ABPR  ======================================================= */
#define ARM_GIC400_CPU_GICC_ABPR_BINARY_POINT_Pos (0UL)             /*!< BINARY_POINT (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_ABPR_BINARY_POINT_Msk (0x7UL)           /*!< BINARY_POINT (Bitfield-Mask: 0x07)                    */
/* =======================================================  GICC_AIAR  ======================================================= */
#define ARM_GIC400_CPU_GICC_AIAR_CPUID_Pos (10UL)                   /*!< CPUID (Bit 10)                                        */
#define ARM_GIC400_CPU_GICC_AIAR_CPUID_Msk (0x1c00UL)               /*!< CPUID (Bitfield-Mask: 0x07)                           */
#define ARM_GIC400_CPU_GICC_AIAR_INTERRUPT_ID_Pos (0UL)             /*!< INTERRUPT_ID (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_AIAR_INTERRUPT_ID_Msk (0x3ffUL)         /*!< INTERRUPT_ID (Bitfield-Mask: 0x3ff)                   */
/* ======================================================  GICC_AEOIR  ======================================================= */
#define ARM_GIC400_CPU_GICC_AEOIR_CPUID_Pos (10UL)                  /*!< CPUID (Bit 10)                                        */
#define ARM_GIC400_CPU_GICC_AEOIR_CPUID_Msk (0x1c00UL)              /*!< CPUID (Bitfield-Mask: 0x07)                           */
#define ARM_GIC400_CPU_GICC_AEOIR_INTERRUPT_ID_Pos (0UL)            /*!< INTERRUPT_ID (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_AEOIR_INTERRUPT_ID_Msk (0x3ffUL)        /*!< INTERRUPT_ID (Bitfield-Mask: 0x3ff)                   */
/* ======================================================  GICC_AHPPIR  ====================================================== */
#define ARM_GIC400_CPU_GICC_AHPPIR_CPUID_Pos (10UL)                 /*!< CPUID (Bit 10)                                        */
#define ARM_GIC400_CPU_GICC_AHPPIR_CPUID_Msk (0x1c00UL)             /*!< CPUID (Bitfield-Mask: 0x07)                           */
#define ARM_GIC400_CPU_GICC_AHPPIR_INTERRUPT_ID_Pos (0UL)           /*!< INTERRUPT_ID (Bit 0)                                  */
#define ARM_GIC400_CPU_GICC_AHPPIR_INTERRUPT_ID_Msk (0x3ffUL)       /*!< INTERRUPT_ID (Bitfield-Mask: 0x3ff)                   */
/* =======================================================  GICC_APR0  ======================================================= */
/* ======================================================  GICC_NSAPR0  ====================================================== */
/* =======================================================  GICC_IIDR  ======================================================= */
#define ARM_GIC400_CPU_GICC_IIDR_ID_Pos   (0UL)                     /*!< ID (Bit 0)                                            */
#define ARM_GIC400_CPU_GICC_IIDR_ID_Msk   (0xffffffffUL)            /*!< ID (Bitfield-Mask: 0xffffffff)                        */
/* =======================================================  GICC_DIR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_GLOBAL                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCTL  ======================================================== */
#define USB_OTG_GLOBAL_GOTGCTL_SRQSCS_Pos (0UL)                     /*!< SRQSCS (Bit 0)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_SRQSCS_Msk (0x1UL)                   /*!< SRQSCS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_SRQ_Pos    (1UL)                     /*!< SRQ (Bit 1)                                           */
#define USB_OTG_GLOBAL_GOTGCTL_SRQ_Msk    (0x2UL)                   /*!< SRQ (Bitfield-Mask: 0x01)                             */
#define USB_OTG_GLOBAL_GOTGCTL_HNGSCS_Pos (8UL)                     /*!< HNGSCS (Bit 8)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_HNGSCS_Msk (0x100UL)                 /*!< HNGSCS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_HNPRQ_Pos  (9UL)                     /*!< HNPRQ (Bit 9)                                         */
#define USB_OTG_GLOBAL_GOTGCTL_HNPRQ_Msk  (0x200UL)                 /*!< HNPRQ (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GOTGCTL_HSHNPEN_Pos (10UL)                   /*!< HSHNPEN (Bit 10)                                      */
#define USB_OTG_GLOBAL_GOTGCTL_HSHNPEN_Msk (0x400UL)                /*!< HSHNPEN (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGCTL_DHNPEN_Pos (11UL)                    /*!< DHNPEN (Bit 11)                                       */
#define USB_OTG_GLOBAL_GOTGCTL_DHNPEN_Msk (0x800UL)                 /*!< DHNPEN (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_CIDSTS_Pos (16UL)                    /*!< CIDSTS (Bit 16)                                       */
#define USB_OTG_GLOBAL_GOTGCTL_CIDSTS_Msk (0x10000UL)               /*!< CIDSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_DBCT_Pos   (17UL)                    /*!< DBCT (Bit 17)                                         */
#define USB_OTG_GLOBAL_GOTGCTL_DBCT_Msk   (0x20000UL)               /*!< DBCT (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GOTGCTL_ASVLD_Pos  (18UL)                    /*!< ASVLD (Bit 18)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_ASVLD_Msk  (0x40000UL)               /*!< ASVLD (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GOTGCTL_BSVLD_Pos  (19UL)                    /*!< BSVLD (Bit 19)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_BSVLD_Msk  (0x80000UL)               /*!< BSVLD (Bitfield-Mask: 0x01)                           */
/* ========================================================  GOTGINT  ======================================================== */
#define USB_OTG_GLOBAL_GOTGINT_SEDET_Pos  (2UL)                     /*!< SEDET (Bit 2)                                         */
#define USB_OTG_GLOBAL_GOTGINT_SEDET_Msk  (0x4UL)                   /*!< SEDET (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GOTGINT_SRSSCHG_Pos (8UL)                    /*!< SRSSCHG (Bit 8)                                       */
#define USB_OTG_GLOBAL_GOTGINT_SRSSCHG_Msk (0x100UL)                /*!< SRSSCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGINT_HNSSCHG_Pos (9UL)                    /*!< HNSSCHG (Bit 9)                                       */
#define USB_OTG_GLOBAL_GOTGINT_HNSSCHG_Msk (0x200UL)                /*!< HNSSCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGINT_HNGDET_Pos (17UL)                    /*!< HNGDET (Bit 17)                                       */
#define USB_OTG_GLOBAL_GOTGINT_HNGDET_Msk (0x20000UL)               /*!< HNGDET (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGINT_ADTOCHG_Pos (18UL)                   /*!< ADTOCHG (Bit 18)                                      */
#define USB_OTG_GLOBAL_GOTGINT_ADTOCHG_Msk (0x40000UL)              /*!< ADTOCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGINT_DBCDNE_Pos (19UL)                    /*!< DBCDNE (Bit 19)                                       */
#define USB_OTG_GLOBAL_GOTGINT_DBCDNE_Msk (0x80000UL)               /*!< DBCDNE (Bitfield-Mask: 0x01)                          */
/* ========================================================  GAHBCFG  ======================================================== */
#define USB_OTG_GLOBAL_GAHBCFG_GINT_Pos   (0UL)                     /*!< GINT (Bit 0)                                          */
#define USB_OTG_GLOBAL_GAHBCFG_GINT_Msk   (0x1UL)                   /*!< GINT (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_WAIT_Pos (4UL)                   /*!< AXI_WAIT (Bit 4)                                      */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_WAIT_Msk (0x10UL)                /*!< AXI_WAIT (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_Pos (1UL)                  /*!< AXI_BURST (Bit 1)                                     */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_Msk (0x6UL)                /*!< AXI_BURST (Bitfield-Mask: 0x03)                       */
#define USB_OTG_GLOBAL_GAHBCFG_DMAEN_Pos  (5UL)                     /*!< DMAEN (Bit 5)                                         */
#define USB_OTG_GLOBAL_GAHBCFG_DMAEN_Msk  (0x20UL)                  /*!< DMAEN (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GAHBCFG_TXFELVL_Pos (7UL)                    /*!< TXFELVL (Bit 7)                                       */
#define USB_OTG_GLOBAL_GAHBCFG_TXFELVL_Msk (0x80UL)                 /*!< TXFELVL (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GAHBCFG_PTXFELVL_Pos (8UL)                   /*!< PTXFELVL (Bit 8)                                      */
#define USB_OTG_GLOBAL_GAHBCFG_PTXFELVL_Msk (0x100UL)               /*!< PTXFELVL (Bitfield-Mask: 0x01)                        */
/* ========================================================  GUSBCFG  ======================================================== */
#define USB_OTG_GLOBAL_GUSBCFG_TOCAL_Pos  (0UL)                     /*!< TOCAL (Bit 0)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_TOCAL_Msk  (0x7UL)                   /*!< TOCAL (Bitfield-Mask: 0x07)                           */
#define USB_OTG_GLOBAL_GUSBCFG_PHYIF_Pos  (3UL)                     /*!< PHYIF (Bit 3)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_PHYIF_Msk  (0x8UL)                   /*!< PHYIF (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_Pos (4UL)                    /*!< PHYTYPE (Bit 4)                                       */
#define USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_Msk (0x10UL)                 /*!< PHYTYPE (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_FSIF_Pos   (5UL)                     /*!< FSIF (Bit 5)                                          */
#define USB_OTG_GLOBAL_GUSBCFG_FSIF_Msk   (0x20UL)                  /*!< FSIF (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GUSBCFG_PHYSEL_Pos (6UL)                     /*!< PHYSEL (Bit 6)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_PHYSEL_Msk (0x40UL)                  /*!< PHYSEL (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_DDRSEL_Pos (7UL)                     /*!< DDRSEL (Bit 7)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_DDRSEL_Msk (0x80UL)                  /*!< DDRSEL (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_SRPCAP_Pos (8UL)                     /*!< SRPCAP (Bit 8)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_SRPCAP_Msk (0x100UL)                 /*!< SRPCAP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_HNPCAP_Pos (9UL)                     /*!< HNPCAP (Bit 9)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_HNPCAP_Msk (0x200UL)                 /*!< HNPCAP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_TRDT_Pos   (10UL)                    /*!< TRDT (Bit 10)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_TRDT_Msk   (0x3c00UL)                /*!< TRDT (Bitfield-Mask: 0x0f)                            */
#define USB_OTG_GLOBAL_GUSBCFG_PHYLPCS_Pos (15UL)                   /*!< PHYLPCS (Bit 15)                                      */
#define USB_OTG_GLOBAL_GUSBCFG_PHYLPCS_Msk (0x8000UL)               /*!< PHYLPCS (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIFSLS_Pos (17UL)                  /*!< ULPIFSLS (Bit 17)                                     */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIFSLS_Msk (0x20000UL)             /*!< ULPIFSLS (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIAR_Pos (18UL)                    /*!< ULPIAR (Bit 18)                                       */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIAR_Msk (0x40000UL)               /*!< ULPIAR (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_ULPICSM_Pos (19UL)                   /*!< ULPICSM (Bit 19)                                      */
#define USB_OTG_GLOBAL_GUSBCFG_ULPICSM_Msk (0x80000UL)              /*!< ULPICSM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSD_Pos (20UL)                /*!< ULPIEVBUSD (Bit 20)                                   */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSD_Msk (0x100000UL)          /*!< ULPIEVBUSD (Bitfield-Mask: 0x01)                      */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSI_Pos (21UL)                /*!< ULPIEVBUSI (Bit 21)                                   */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSI_Msk (0x200000UL)          /*!< ULPIEVBUSI (Bitfield-Mask: 0x01)                      */
#define USB_OTG_GLOBAL_GUSBCFG_TSDPS_Pos  (22UL)                    /*!< TSDPS (Bit 22)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_TSDPS_Msk  (0x400000UL)              /*!< TSDPS (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_PCCI_Pos   (23UL)                    /*!< PCCI (Bit 23)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_PCCI_Msk   (0x800000UL)              /*!< PCCI (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GUSBCFG_PTCI_Pos   (24UL)                    /*!< PTCI (Bit 24)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_PTCI_Msk   (0x1000000UL)             /*!< PTCI (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIIPD_Pos (25UL)                   /*!< ULPIIPD (Bit 25)                                      */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIIPD_Msk (0x2000000UL)            /*!< ULPIIPD (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_FHMOD_Pos  (29UL)                    /*!< FHMOD (Bit 29)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_FHMOD_Msk  (0x20000000UL)            /*!< FHMOD (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_FDMOD_Pos  (30UL)                    /*!< FDMOD (Bit 30)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_FDMOD_Msk  (0x40000000UL)            /*!< FDMOD (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_CTXPKT_Pos (31UL)                    /*!< CTXPKT (Bit 31)                                       */
#define USB_OTG_GLOBAL_GUSBCFG_CTXPKT_Msk (0x80000000UL)            /*!< CTXPKT (Bitfield-Mask: 0x01)                          */
/* ========================================================  GRSTCTL  ======================================================== */
#define USB_OTG_GLOBAL_GRSTCTL_CSRST_Pos  (0UL)                     /*!< CSRST (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRSTCTL_CSRST_Msk  (0x1UL)                   /*!< CSRST (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GRSTCTL_HSRST_Pos  (1UL)                     /*!< HSRST (Bit 1)                                         */
#define USB_OTG_GLOBAL_GRSTCTL_HSRST_Msk  (0x2UL)                   /*!< HSRST (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GRSTCTL_FCRST_Pos  (2UL)                     /*!< FCRST (Bit 2)                                         */
#define USB_OTG_GLOBAL_GRSTCTL_FCRST_Msk  (0x4UL)                   /*!< FCRST (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GRSTCTL_RXFFLSH_Pos (4UL)                    /*!< RXFFLSH (Bit 4)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_RXFFLSH_Msk (0x10UL)                 /*!< RXFFLSH (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GRSTCTL_TXFFLSH_Pos (5UL)                    /*!< TXFFLSH (Bit 5)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_TXFFLSH_Msk (0x20UL)                 /*!< TXFFLSH (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GRSTCTL_TXFNUM_Pos (6UL)                     /*!< TXFNUM (Bit 6)                                        */
#define USB_OTG_GLOBAL_GRSTCTL_TXFNUM_Msk (0x7c0UL)                 /*!< TXFNUM (Bitfield-Mask: 0x1f)                          */
#define USB_OTG_GLOBAL_GRSTCTL_DMAREQ_Pos (30UL)                    /*!< DMAREQ (Bit 30)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_DMAREQ_Msk (0x40000000UL)            /*!< DMAREQ (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GRSTCTL_AHBIDL_Pos (31UL)                    /*!< AHBIDL (Bit 31)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_AHBIDL_Msk (0x80000000UL)            /*!< AHBIDL (Bitfield-Mask: 0x01)                          */
/* ========================================================  GINTSTS  ======================================================== */
#define USB_OTG_GLOBAL_GINTSTS_CMOD_Pos   (0UL)                     /*!< CMOD (Bit 0)                                          */
#define USB_OTG_GLOBAL_GINTSTS_CMOD_Msk   (0x1UL)                   /*!< CMOD (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTSTS_MMIS_Pos   (1UL)                     /*!< MMIS (Bit 1)                                          */
#define USB_OTG_GLOBAL_GINTSTS_MMIS_Msk   (0x2UL)                   /*!< MMIS (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTSTS_OTGINT_Pos (2UL)                     /*!< OTGINT (Bit 2)                                        */
#define USB_OTG_GLOBAL_GINTSTS_OTGINT_Msk (0x4UL)                   /*!< OTGINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_SOF_Pos    (3UL)                     /*!< SOF (Bit 3)                                           */
#define USB_OTG_GLOBAL_GINTSTS_SOF_Msk    (0x8UL)                   /*!< SOF (Bitfield-Mask: 0x01)                             */
#define USB_OTG_GLOBAL_GINTSTS_RXFLVL_Pos (4UL)                     /*!< RXFLVL (Bit 4)                                        */
#define USB_OTG_GLOBAL_GINTSTS_RXFLVL_Msk (0x10UL)                  /*!< RXFLVL (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_NPTXFE_Pos (5UL)                     /*!< NPTXFE (Bit 5)                                        */
#define USB_OTG_GLOBAL_GINTSTS_NPTXFE_Msk (0x20UL)                  /*!< NPTXFE (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_GINAKEFF_Pos (6UL)                   /*!< GINAKEFF (Bit 6)                                      */
#define USB_OTG_GLOBAL_GINTSTS_GINAKEFF_Msk (0x40UL)                /*!< GINAKEFF (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTSTS_BOUTNAKEFF_Pos (7UL)                 /*!< BOUTNAKEFF (Bit 7)                                    */
#define USB_OTG_GLOBAL_GINTSTS_BOUTNAKEFF_Msk (0x80UL)              /*!< BOUTNAKEFF (Bitfield-Mask: 0x01)                      */
#define USB_OTG_GLOBAL_GINTSTS_ESUSP_Pos  (10UL)                    /*!< ESUSP (Bit 10)                                        */
#define USB_OTG_GLOBAL_GINTSTS_ESUSP_Msk  (0x400UL)                 /*!< ESUSP (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTSTS_USBSUSP_Pos (11UL)                   /*!< USBSUSP (Bit 11)                                      */
#define USB_OTG_GLOBAL_GINTSTS_USBSUSP_Msk (0x800UL)                /*!< USBSUSP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_USBRST_Pos (12UL)                    /*!< USBRST (Bit 12)                                       */
#define USB_OTG_GLOBAL_GINTSTS_USBRST_Msk (0x1000UL)                /*!< USBRST (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_ENUMDNE_Pos (13UL)                   /*!< ENUMDNE (Bit 13)                                      */
#define USB_OTG_GLOBAL_GINTSTS_ENUMDNE_Msk (0x2000UL)               /*!< ENUMDNE (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_ISOODRP_Pos (14UL)                   /*!< ISOODRP (Bit 14)                                      */
#define USB_OTG_GLOBAL_GINTSTS_ISOODRP_Msk (0x4000UL)               /*!< ISOODRP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_EOPF_Pos   (15UL)                    /*!< EOPF (Bit 15)                                         */
#define USB_OTG_GLOBAL_GINTSTS_EOPF_Msk   (0x8000UL)                /*!< EOPF (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTSTS_IEPINT_Pos (18UL)                    /*!< IEPINT (Bit 18)                                       */
#define USB_OTG_GLOBAL_GINTSTS_IEPINT_Msk (0x40000UL)               /*!< IEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_OEPINT_Pos (19UL)                    /*!< OEPINT (Bit 19)                                       */
#define USB_OTG_GLOBAL_GINTSTS_OEPINT_Msk (0x80000UL)               /*!< OEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_IISOIXFR_Pos (20UL)                  /*!< IISOIXFR (Bit 20)                                     */
#define USB_OTG_GLOBAL_GINTSTS_IISOIXFR_Msk (0x100000UL)            /*!< IISOIXFR (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTSTS_PXFR_INCOMPISOOUT_Pos (21UL)         /*!< PXFR_INCOMPISOOUT (Bit 21)                            */
#define USB_OTG_GLOBAL_GINTSTS_PXFR_INCOMPISOOUT_Msk (0x200000UL)   /*!< PXFR_INCOMPISOOUT (Bitfield-Mask: 0x01)               */
#define USB_OTG_GLOBAL_GINTSTS_DATAFSUSP_Pos (22UL)                 /*!< DATAFSUSP (Bit 22)                                    */
#define USB_OTG_GLOBAL_GINTSTS_DATAFSUSP_Msk (0x400000UL)           /*!< DATAFSUSP (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTSTS_HPRTINT_Pos (24UL)                   /*!< HPRTINT (Bit 24)                                      */
#define USB_OTG_GLOBAL_GINTSTS_HPRTINT_Msk (0x1000000UL)            /*!< HPRTINT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_HCINT_Pos  (25UL)                    /*!< HCINT (Bit 25)                                        */
#define USB_OTG_GLOBAL_GINTSTS_HCINT_Msk  (0x2000000UL)             /*!< HCINT (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTSTS_PTXFE_Pos  (26UL)                    /*!< PTXFE (Bit 26)                                        */
#define USB_OTG_GLOBAL_GINTSTS_PTXFE_Msk  (0x4000000UL)             /*!< PTXFE (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTSTS_CIDSCHG_Pos (28UL)                   /*!< CIDSCHG (Bit 28)                                      */
#define USB_OTG_GLOBAL_GINTSTS_CIDSCHG_Msk (0x10000000UL)           /*!< CIDSCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_DISCINT_Pos (29UL)                   /*!< DISCINT (Bit 29)                                      */
#define USB_OTG_GLOBAL_GINTSTS_DISCINT_Msk (0x20000000UL)           /*!< DISCINT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_SRQINT_Pos (30UL)                    /*!< SRQINT (Bit 30)                                       */
#define USB_OTG_GLOBAL_GINTSTS_SRQINT_Msk (0x40000000UL)            /*!< SRQINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_WKUINT_Pos (31UL)                    /*!< WKUINT (Bit 31)                                       */
#define USB_OTG_GLOBAL_GINTSTS_WKUINT_Msk (0x80000000UL)            /*!< WKUINT (Bitfield-Mask: 0x01)                          */
/* ========================================================  GINTMSK  ======================================================== */
#define USB_OTG_GLOBAL_GINTMSK_MMISM_Pos  (1UL)                     /*!< MMISM (Bit 1)                                         */
#define USB_OTG_GLOBAL_GINTMSK_MMISM_Msk  (0x2UL)                   /*!< MMISM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_OTGINT_Pos (2UL)                     /*!< OTGINT (Bit 2)                                        */
#define USB_OTG_GLOBAL_GINTMSK_OTGINT_Msk (0x4UL)                   /*!< OTGINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_SOFM_Pos   (3UL)                     /*!< SOFM (Bit 3)                                          */
#define USB_OTG_GLOBAL_GINTMSK_SOFM_Msk   (0x8UL)                   /*!< SOFM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTMSK_RXFLVLM_Pos (4UL)                    /*!< RXFLVLM (Bit 4)                                       */
#define USB_OTG_GLOBAL_GINTMSK_RXFLVLM_Msk (0x10UL)                 /*!< RXFLVLM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTMSK_NPTXFEM_Pos (5UL)                    /*!< NPTXFEM (Bit 5)                                       */
#define USB_OTG_GLOBAL_GINTMSK_NPTXFEM_Msk (0x20UL)                 /*!< NPTXFEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTMSK_GINAKEFFM_Pos (6UL)                  /*!< GINAKEFFM (Bit 6)                                     */
#define USB_OTG_GLOBAL_GINTMSK_GINAKEFFM_Msk (0x40UL)               /*!< GINAKEFFM (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTMSK_GONAKEFFM_Pos (7UL)                  /*!< GONAKEFFM (Bit 7)                                     */
#define USB_OTG_GLOBAL_GINTMSK_GONAKEFFM_Msk (0x80UL)               /*!< GONAKEFFM (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTMSK_ESUSPM_Pos (10UL)                    /*!< ESUSPM (Bit 10)                                       */
#define USB_OTG_GLOBAL_GINTMSK_ESUSPM_Msk (0x400UL)                 /*!< ESUSPM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_USBSUSPM_Pos (11UL)                  /*!< USBSUSPM (Bit 11)                                     */
#define USB_OTG_GLOBAL_GINTMSK_USBSUSPM_Msk (0x800UL)               /*!< USBSUSPM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_USBRST_Pos (12UL)                    /*!< USBRST (Bit 12)                                       */
#define USB_OTG_GLOBAL_GINTMSK_USBRST_Msk (0x1000UL)                /*!< USBRST (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_ENUMDNEM_Pos (13UL)                  /*!< ENUMDNEM (Bit 13)                                     */
#define USB_OTG_GLOBAL_GINTMSK_ENUMDNEM_Msk (0x2000UL)              /*!< ENUMDNEM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_ISOODRPM_Pos (14UL)                  /*!< ISOODRPM (Bit 14)                                     */
#define USB_OTG_GLOBAL_GINTMSK_ISOODRPM_Msk (0x4000UL)              /*!< ISOODRPM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_EOPFM_Pos  (15UL)                    /*!< EOPFM (Bit 15)                                        */
#define USB_OTG_GLOBAL_GINTMSK_EOPFM_Msk  (0x8000UL)                /*!< EOPFM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_EPMISM_Pos (17UL)                    /*!< EPMISM (Bit 17)                                       */
#define USB_OTG_GLOBAL_GINTMSK_EPMISM_Msk (0x20000UL)               /*!< EPMISM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_IEPINT_Pos (18UL)                    /*!< IEPINT (Bit 18)                                       */
#define USB_OTG_GLOBAL_GINTMSK_IEPINT_Msk (0x40000UL)               /*!< IEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_OEPINT_Pos (19UL)                    /*!< OEPINT (Bit 19)                                       */
#define USB_OTG_GLOBAL_GINTMSK_OEPINT_Msk (0x80000UL)               /*!< OEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_IISOIXFRM_Pos (20UL)                 /*!< IISOIXFRM (Bit 20)                                    */
#define USB_OTG_GLOBAL_GINTMSK_IISOIXFRM_Msk (0x100000UL)           /*!< IISOIXFRM (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTMSK_PXFRM_IISOOXFRM_Pos (21UL)           /*!< PXFRM_IISOOXFRM (Bit 21)                              */
#define USB_OTG_GLOBAL_GINTMSK_PXFRM_IISOOXFRM_Msk (0x200000UL)     /*!< PXFRM_IISOOXFRM (Bitfield-Mask: 0x01)                 */
#define USB_OTG_GLOBAL_GINTMSK_FSUSPM_Pos (22UL)                    /*!< FSUSPM (Bit 22)                                       */
#define USB_OTG_GLOBAL_GINTMSK_FSUSPM_Msk (0x400000UL)              /*!< FSUSPM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_PRTIM_Pos  (24UL)                    /*!< PRTIM (Bit 24)                                        */
#define USB_OTG_GLOBAL_GINTMSK_PRTIM_Msk  (0x1000000UL)             /*!< PRTIM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_HCIM_Pos   (25UL)                    /*!< HCIM (Bit 25)                                         */
#define USB_OTG_GLOBAL_GINTMSK_HCIM_Msk   (0x2000000UL)             /*!< HCIM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTMSK_PTXFEM_Pos (26UL)                    /*!< PTXFEM (Bit 26)                                       */
#define USB_OTG_GLOBAL_GINTMSK_PTXFEM_Msk (0x4000000UL)             /*!< PTXFEM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_CIDSCHGM_Pos (28UL)                  /*!< CIDSCHGM (Bit 28)                                     */
#define USB_OTG_GLOBAL_GINTMSK_CIDSCHGM_Msk (0x10000000UL)          /*!< CIDSCHGM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_DISCINT_Pos (29UL)                   /*!< DISCINT (Bit 29)                                      */
#define USB_OTG_GLOBAL_GINTMSK_DISCINT_Msk (0x20000000UL)           /*!< DISCINT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTMSK_SRQIM_Pos  (30UL)                    /*!< SRQIM (Bit 30)                                        */
#define USB_OTG_GLOBAL_GINTMSK_SRQIM_Msk  (0x40000000UL)            /*!< SRQIM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_WUIM_Pos   (31UL)                    /*!< WUIM (Bit 31)                                         */
#define USB_OTG_GLOBAL_GINTMSK_WUIM_Msk   (0x80000000UL)            /*!< WUIM (Bitfield-Mask: 0x01)                            */
/* =====================================================  GRXSTSR_Host  ====================================================== */
#define USB_OTG_GLOBAL_GRXSTSR_Host_CHNUM_Pos (0UL)                 /*!< CHNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Host_CHNUM_Msk (0xfUL)               /*!< CHNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Host_BCNT_Pos (4UL)                  /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSR_Host_BCNT_Msk (0x7ff0UL)             /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Host_DPID_Pos (15UL)                 /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Host_DPID_Msk (0x18000UL)            /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSR_Host_PKTSTS_Pos (17UL)               /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSR_Host_PKTSTS_Msk (0x1e0000UL)         /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
/* =====================================================  GRXSTSP_Host  ====================================================== */
#define USB_OTG_GLOBAL_GRXSTSP_Host_CHNUM_Pos (0UL)                 /*!< CHNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Host_CHNUM_Msk (0xfUL)               /*!< CHNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Host_BCNT_Pos (4UL)                  /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSP_Host_BCNT_Msk (0x7ff0UL)             /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Host_DPID_Pos (15UL)                 /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Host_DPID_Msk (0x18000UL)            /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSP_Host_PKTSTS_Pos (17UL)               /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSP_Host_PKTSTS_Msk (0x1e0000UL)         /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
/* ========================================================  GRXFSIZ  ======================================================== */
#define USB_OTG_GLOBAL_GRXFSIZ_RXFD_Pos   (0UL)                     /*!< RXFD (Bit 0)                                          */
#define USB_OTG_GLOBAL_GRXFSIZ_RXFD_Msk   (0xffffUL)                /*!< RXFD (Bitfield-Mask: 0xffff)                          */
/* ====================================================  GNPTXFSIZ_Host  ===================================================== */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFSA_Pos (0UL)             /*!< NPTXFSA (Bit 0)                                       */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFSA_Msk (0xffffUL)        /*!< NPTXFSA (Bitfield-Mask: 0xffff)                       */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFD_Pos (16UL)             /*!< NPTXFD (Bit 16)                                       */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFD_Msk (0xffff0000UL)     /*!< NPTXFD (Bitfield-Mask: 0xffff)                        */
/* ==================================================  TX0FSIZ_Peripheral  =================================================== */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FSA_Pos (0UL)          /*!< TX0FSA (Bit 0)                                        */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FSA_Msk (0xffffUL)     /*!< TX0FSA (Bitfield-Mask: 0xffff)                        */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FD_Pos (16UL)          /*!< TX0FD (Bit 16)                                        */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FD_Msk (0xffff0000UL)  /*!< TX0FD (Bitfield-Mask: 0xffff)                         */
/* =======================================================  GNPTXSTS  ======================================================== */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXFSAV_Pos (0UL)                  /*!< NPTXFSAV (Bit 0)                                      */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXFSAV_Msk (0xffffUL)             /*!< NPTXFSAV (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTQXSAV_Pos (16UL)                 /*!< NPTQXSAV (Bit 16)                                     */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTQXSAV_Msk (0xff0000UL)           /*!< NPTQXSAV (Bitfield-Mask: 0xff)                        */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXQTOP_Pos (24UL)                 /*!< NPTXQTOP (Bit 24)                                     */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXQTOP_Msk (0x7f000000UL)         /*!< NPTXQTOP (Bitfield-Mask: 0x7f)                        */
/* =========================================================  GCCFG  ========================================================= */
#define USB_OTG_GLOBAL_GCCFG_PWRDWN_Pos   (16UL)                    /*!< PWRDWN (Bit 16)                                       */
#define USB_OTG_GLOBAL_GCCFG_PWRDWN_Msk   (0x10000UL)               /*!< PWRDWN (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GCCFG_I2CPADEN_Pos (17UL)                    /*!< I2CPADEN (Bit 17)                                     */
#define USB_OTG_GLOBAL_GCCFG_I2CPADEN_Msk (0x20000UL)               /*!< I2CPADEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_VBUSASEN_Pos (18UL)                    /*!< VBUSASEN (Bit 18)                                     */
#define USB_OTG_GLOBAL_GCCFG_VBUSASEN_Msk (0x40000UL)               /*!< VBUSASEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_VBUSBSEN_Pos (19UL)                    /*!< VBUSBSEN (Bit 19)                                     */
#define USB_OTG_GLOBAL_GCCFG_VBUSBSEN_Msk (0x80000UL)               /*!< VBUSBSEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_SOFOUTEN_Pos (20UL)                    /*!< SOFOUTEN (Bit 20)                                     */
#define USB_OTG_GLOBAL_GCCFG_SOFOUTEN_Msk (0x100000UL)              /*!< SOFOUTEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_NOVBUSSENS_Pos (21UL)                  /*!< NOVBUSSENS (Bit 21)                                   */
#define USB_OTG_GLOBAL_GCCFG_NOVBUSSENS_Msk (0x200000UL)            /*!< NOVBUSSENS (Bitfield-Mask: 0x01)                      */
/* ==========================================================  CID  ========================================================== */
#define USB_OTG_GLOBAL_CID_PRODUCT_ID_Pos (0UL)                     /*!< PRODUCT_ID (Bit 0)                                    */
#define USB_OTG_GLOBAL_CID_PRODUCT_ID_Msk (0xffffffffUL)            /*!< PRODUCT_ID (Bitfield-Mask: 0xffffffff)                */
/* ==========================================================  VID  ========================================================== */
/* =====================================================  HW_DIRECTION  ====================================================== */
#define USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_Pos (0UL)             /*!< DIRECTION (Bit 0)                                     */
#define USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_Msk (0x3UL)           /*!< DIRECTION (Bitfield-Mask: 0x03)                       */
/* ======================================================  HW_CONFIG0  ======================================================= */
#define USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_Pos (0UL)          /*!< OPERATING_MODE (Bit 0)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_Msk (0x7UL)        /*!< OPERATING_MODE (Bitfield-Mask: 0x07)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_Pos (3UL)            /*!< ARCHITECTURE (Bit 3)                                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_Msk (0x18UL)         /*!< ARCHITECTURE (Bitfield-Mask: 0x03)                    */
#define USB_OTG_GLOBAL_HW_CONFIG0_POINT_TO_POINT_Pos (5UL)          /*!< POINT_TO_POINT (Bit 5)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_POINT_TO_POINT_Msk (0x20UL)       /*!< POINT_TO_POINT (Bitfield-Mask: 0x01)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_Pos (6UL)          /*!< HIGH_SPEED_PHY (Bit 6)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_Msk (0xc0UL)       /*!< HIGH_SPEED_PHY (Bitfield-Mask: 0x03)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_Pos (8UL)          /*!< FULL_SPEED_PHY (Bit 8)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_Msk (0x300UL)      /*!< FULL_SPEED_PHY (Bitfield-Mask: 0x03)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_END_POINT_COUNT_Pos (10UL) /*!< DEVICE_END_POINT_COUNT (Bit 10)                       */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_END_POINT_COUNT_Msk (0x3c00UL) /*!< DEVICE_END_POINT_COUNT (Bitfield-Mask: 0x0f)      */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_CHANNEL_COUNT_Pos (14UL)     /*!< HOST_CHANNEL_COUNT (Bit 14)                           */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_CHANNEL_COUNT_Msk (0x3c000UL) /*!< HOST_CHANNEL_COUNT (Bitfield-Mask: 0x0f)             */
#define USB_OTG_GLOBAL_HW_CONFIG0_SUPPORTS_PERIODIC_ENDPOINTS_Pos (18UL) /*!< SUPPORTS_PERIODIC_ENDPOINTS (Bit 18)             */
#define USB_OTG_GLOBAL_HW_CONFIG0_SUPPORTS_PERIODIC_ENDPOINTS_Msk (0x40000UL) /*!< SUPPORTS_PERIODIC_ENDPOINTS (Bitfield-Mask: 0x01) */
#define USB_OTG_GLOBAL_HW_CONFIG0_DYNAMIC_FIFO_Pos (19UL)           /*!< DYNAMIC_FIFO (Bit 19)                                 */
#define USB_OTG_GLOBAL_HW_CONFIG0_DYNAMIC_FIFO_Msk (0x80000UL)      /*!< DYNAMIC_FIFO (Bitfield-Mask: 0x01)                    */
#define USB_OTG_GLOBAL_HW_CONFIG0_MULTI_PROC_INT_Pos (20UL)         /*!< MULTI_PROC_INT (Bit 20)                               */
#define USB_OTG_GLOBAL_HW_CONFIG0_MULTI_PROC_INT_Msk (0x100000UL)   /*!< MULTI_PROC_INT (Bitfield-Mask: 0x01)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_NON_PERIODIC_QUEUE_DEPTH_Pos (22UL) /*!< NON_PERIODIC_QUEUE_DEPTH (Bit 22)                   */
#define USB_OTG_GLOBAL_HW_CONFIG0_NON_PERIODIC_QUEUE_DEPTH_Msk (0xc00000UL) /*!< NON_PERIODIC_QUEUE_DEPTH (Bitfield-Mask: 0x03) */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_PERIODIC_QUEUE_DEPTH_Pos (24UL) /*!< HOST_PERIODIC_QUEUE_DEPTH (Bit 24)                 */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_PERIODIC_QUEUE_DEPTH_Msk (0x3000000UL) /*!< HOST_PERIODIC_QUEUE_DEPTH (Bitfield-Mask: 0x03) */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_TOKEN_QUEUE_DEPTH_Pos (26UL) /*!< DEVICE_TOKEN_QUEUE_DEPTH (Bit 26)                   */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_TOKEN_QUEUE_DEPTH_Msk (0x7c000000UL) /*!< DEVICE_TOKEN_QUEUE_DEPTH (Bitfield-Mask: 0x1f) */
#define USB_OTG_GLOBAL_HW_CONFIG0_ENABLE_IC_USB_Pos (31UL)          /*!< ENABLE_IC_USB (Bit 31)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_ENABLE_IC_USB_Msk (0x80000000UL)  /*!< ENABLE_IC_USB (Bitfield-Mask: 0x01)                   */
/* =======================================================  HPTXFSIZ  ======================================================== */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXSA_Pos (0UL)                     /*!< PTXSA (Bit 0)                                         */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXSA_Msk (0xffffUL)                /*!< PTXSA (Bitfield-Mask: 0xffff)                         */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXFD_Pos (16UL)                    /*!< PTXFD (Bit 16)                                        */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXFD_Msk (0xffff0000UL)            /*!< PTXFD (Bitfield-Mask: 0xffff)                         */
/* =======================================================  DIEPTXF1  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF2  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF3  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF4  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF5  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF6  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF7  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* ==================================================  GRXSTSR_Peripheral  =================================================== */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_EPNUM_Pos (0UL)           /*!< EPNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_EPNUM_Msk (0xfUL)         /*!< EPNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_BCNT_Pos (4UL)            /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_BCNT_Msk (0x7ff0UL)       /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_DPID_Pos (15UL)           /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_DPID_Msk (0x18000UL)      /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_PKTSTS_Pos (17UL)         /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_PKTSTS_Msk (0x1e0000UL)   /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_FRMNUM_Pos (21UL)         /*!< FRMNUM (Bit 21)                                       */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_FRMNUM_Msk (0x1e00000UL)  /*!< FRMNUM (Bitfield-Mask: 0x0f)                          */
/* ==================================================  GRXSTSP_Peripheral  =================================================== */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_EPNUM_Pos (0UL)           /*!< EPNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_EPNUM_Msk (0xfUL)         /*!< EPNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_BCNT_Pos (4UL)            /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_BCNT_Msk (0x7ff0UL)       /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_DPID_Pos (15UL)           /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_DPID_Msk (0x18000UL)      /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_PKTSTS_Pos (17UL)         /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_PKTSTS_Msk (0x1e0000UL)   /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_FRMNUM_Pos (21UL)         /*!< FRMNUM (Bit 21)                                       */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_FRMNUM_Msk (0x1e00000UL)  /*!< FRMNUM (Bitfield-Mask: 0x0f)                          */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */

/* =========================================================  HCFG  ========================================================== */
#define USB_OTG_HOST_HCFG_FSLSPCS_Pos     (0UL)                     /*!< FSLSPCS (Bit 0)                                       */
#define USB_OTG_HOST_HCFG_FSLSPCS_Msk     (0x3UL)                   /*!< FSLSPCS (Bitfield-Mask: 0x03)                         */
#define USB_OTG_HOST_HCFG_FSLSS_Pos       (2UL)                     /*!< FSLSS (Bit 2)                                         */
#define USB_OTG_HOST_HCFG_FSLSS_Msk       (0x4UL)                   /*!< FSLSS (Bitfield-Mask: 0x01)                           */
/* =========================================================  HFIR  ========================================================== */
#define USB_OTG_HOST_HFIR_FRIVL_Pos       (0UL)                     /*!< FRIVL (Bit 0)                                         */
#define USB_OTG_HOST_HFIR_FRIVL_Msk       (0xffffUL)                /*!< FRIVL (Bitfield-Mask: 0xffff)                         */
/* =========================================================  HFNUM  ========================================================= */
#define USB_OTG_HOST_HFNUM_FRNUM_Pos      (0UL)                     /*!< FRNUM (Bit 0)                                         */
#define USB_OTG_HOST_HFNUM_FRNUM_Msk      (0xffffUL)                /*!< FRNUM (Bitfield-Mask: 0xffff)                         */
#define USB_OTG_HOST_HFNUM_FTREM_Pos      (16UL)                    /*!< FTREM (Bit 16)                                        */
#define USB_OTG_HOST_HFNUM_FTREM_Msk      (0xffff0000UL)            /*!< FTREM (Bitfield-Mask: 0xffff)                         */
/* ========================================================  HPTXSTS  ======================================================== */
#define USB_OTG_HOST_HPTXSTS_PTXFSAVL_Pos (0UL)                     /*!< PTXFSAVL (Bit 0)                                      */
#define USB_OTG_HOST_HPTXSTS_PTXFSAVL_Msk (0xffffUL)                /*!< PTXFSAVL (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_HOST_HPTXSTS_PTXQSAV_Pos  (16UL)                    /*!< PTXQSAV (Bit 16)                                      */
#define USB_OTG_HOST_HPTXSTS_PTXQSAV_Msk  (0xff0000UL)              /*!< PTXQSAV (Bitfield-Mask: 0xff)                         */
#define USB_OTG_HOST_HPTXSTS_PTXQTOP_Pos  (24UL)                    /*!< PTXQTOP (Bit 24)                                      */
#define USB_OTG_HOST_HPTXSTS_PTXQTOP_Msk  (0xff000000UL)            /*!< PTXQTOP (Bitfield-Mask: 0xff)                         */
/* =========================================================  HAINT  ========================================================= */
#define USB_OTG_HOST_HAINT_HAINT_Pos      (0UL)                     /*!< HAINT (Bit 0)                                         */
#define USB_OTG_HOST_HAINT_HAINT_Msk      (0xffffUL)                /*!< HAINT (Bitfield-Mask: 0xffff)                         */
/* =======================================================  HAINTMSK  ======================================================== */
#define USB_OTG_HOST_HAINTMSK_HAINTM_Pos  (0UL)                     /*!< HAINTM (Bit 0)                                        */
#define USB_OTG_HOST_HAINTMSK_HAINTM_Msk  (0xffffUL)                /*!< HAINTM (Bitfield-Mask: 0xffff)                        */
/* =========================================================  HPRT  ========================================================== */
#define USB_OTG_HOST_HPRT_PCSTS_Pos       (0UL)                     /*!< PCSTS (Bit 0)                                         */
#define USB_OTG_HOST_HPRT_PCSTS_Msk       (0x1UL)                   /*!< PCSTS (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HPRT_PCDET_Pos       (1UL)                     /*!< PCDET (Bit 1)                                         */
#define USB_OTG_HOST_HPRT_PCDET_Msk       (0x2UL)                   /*!< PCDET (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HPRT_PENA_Pos        (2UL)                     /*!< PENA (Bit 2)                                          */
#define USB_OTG_HOST_HPRT_PENA_Msk        (0x4UL)                   /*!< PENA (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PENCHNG_Pos     (3UL)                     /*!< PENCHNG (Bit 3)                                       */
#define USB_OTG_HOST_HPRT_PENCHNG_Msk     (0x8UL)                   /*!< PENCHNG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_HOST_HPRT_POCA_Pos        (4UL)                     /*!< POCA (Bit 4)                                          */
#define USB_OTG_HOST_HPRT_POCA_Msk        (0x10UL)                  /*!< POCA (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_POCCHNG_Pos     (5UL)                     /*!< POCCHNG (Bit 5)                                       */
#define USB_OTG_HOST_HPRT_POCCHNG_Msk     (0x20UL)                  /*!< POCCHNG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_HOST_HPRT_PRES_Pos        (6UL)                     /*!< PRES (Bit 6)                                          */
#define USB_OTG_HOST_HPRT_PRES_Msk        (0x40UL)                  /*!< PRES (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PSUSP_Pos       (7UL)                     /*!< PSUSP (Bit 7)                                         */
#define USB_OTG_HOST_HPRT_PSUSP_Msk       (0x80UL)                  /*!< PSUSP (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HPRT_PRST_Pos        (8UL)                     /*!< PRST (Bit 8)                                          */
#define USB_OTG_HOST_HPRT_PRST_Msk        (0x100UL)                 /*!< PRST (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PLSTS_Pos       (10UL)                    /*!< PLSTS (Bit 10)                                        */
#define USB_OTG_HOST_HPRT_PLSTS_Msk       (0xc00UL)                 /*!< PLSTS (Bitfield-Mask: 0x03)                           */
#define USB_OTG_HOST_HPRT_PPWR_Pos        (12UL)                    /*!< PPWR (Bit 12)                                         */
#define USB_OTG_HOST_HPRT_PPWR_Msk        (0x1000UL)                /*!< PPWR (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PTCTL_Pos       (13UL)                    /*!< PTCTL (Bit 13)                                        */
#define USB_OTG_HOST_HPRT_PTCTL_Msk       (0x1e000UL)               /*!< PTCTL (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_HOST_HPRT_PSPD_Pos        (17UL)                    /*!< PSPD (Bit 17)                                         */
#define USB_OTG_HOST_HPRT_PSPD_Msk        (0x60000UL)               /*!< PSPD (Bitfield-Mask: 0x03)                            */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
#define USB_OTG_DEVICE_DCFG_DSPD_Pos      (0UL)                     /*!< DSPD (Bit 0)                                          */
#define USB_OTG_DEVICE_DCFG_DSPD_Msk      (0x3UL)                   /*!< DSPD (Bitfield-Mask: 0x03)                            */
#define USB_OTG_DEVICE_DCFG_NZLSOHSK_Pos  (2UL)                     /*!< NZLSOHSK (Bit 2)                                      */
#define USB_OTG_DEVICE_DCFG_NZLSOHSK_Msk  (0x4UL)                   /*!< NZLSOHSK (Bitfield-Mask: 0x01)                        */
#define USB_OTG_DEVICE_DCFG_DAD_Pos       (4UL)                     /*!< DAD (Bit 4)                                           */
#define USB_OTG_DEVICE_DCFG_DAD_Msk       (0x7f0UL)                 /*!< DAD (Bitfield-Mask: 0x7f)                             */
#define USB_OTG_DEVICE_DCFG_PFIVL_Pos     (11UL)                    /*!< PFIVL (Bit 11)                                        */
#define USB_OTG_DEVICE_DCFG_PFIVL_Msk     (0x1800UL)                /*!< PFIVL (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_DCFG_PERSCHIVL_Pos (24UL)                    /*!< PERSCHIVL (Bit 24)                                    */
#define USB_OTG_DEVICE_DCFG_PERSCHIVL_Msk (0x3000000UL)             /*!< PERSCHIVL (Bitfield-Mask: 0x03)                       */
/* =========================================================  DCTL  ========================================================== */
#define USB_OTG_DEVICE_DCTL_RWUSIG_Pos    (0UL)                     /*!< RWUSIG (Bit 0)                                        */
#define USB_OTG_DEVICE_DCTL_RWUSIG_Msk    (0x1UL)                   /*!< RWUSIG (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_SDIS_Pos      (1UL)                     /*!< SDIS (Bit 1)                                          */
#define USB_OTG_DEVICE_DCTL_SDIS_Msk      (0x2UL)                   /*!< SDIS (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DCTL_GINSTS_Pos    (2UL)                     /*!< GINSTS (Bit 2)                                        */
#define USB_OTG_DEVICE_DCTL_GINSTS_Msk    (0x4UL)                   /*!< GINSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_GONSTS_Pos    (3UL)                     /*!< GONSTS (Bit 3)                                        */
#define USB_OTG_DEVICE_DCTL_GONSTS_Msk    (0x8UL)                   /*!< GONSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_TCTL_Pos      (4UL)                     /*!< TCTL (Bit 4)                                          */
#define USB_OTG_DEVICE_DCTL_TCTL_Msk      (0x70UL)                  /*!< TCTL (Bitfield-Mask: 0x07)                            */
#define USB_OTG_DEVICE_DCTL_SGINAK_Pos    (7UL)                     /*!< SGINAK (Bit 7)                                        */
#define USB_OTG_DEVICE_DCTL_SGINAK_Msk    (0x80UL)                  /*!< SGINAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_CGINAK_Pos    (8UL)                     /*!< CGINAK (Bit 8)                                        */
#define USB_OTG_DEVICE_DCTL_CGINAK_Msk    (0x100UL)                 /*!< CGINAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_SGONAK_Pos    (9UL)                     /*!< SGONAK (Bit 9)                                        */
#define USB_OTG_DEVICE_DCTL_SGONAK_Msk    (0x200UL)                 /*!< SGONAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_CGONAK_Pos    (10UL)                    /*!< CGONAK (Bit 10)                                       */
#define USB_OTG_DEVICE_DCTL_CGONAK_Msk    (0x400UL)                 /*!< CGONAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_POPRGDNE_Pos  (11UL)                    /*!< POPRGDNE (Bit 11)                                     */
#define USB_OTG_DEVICE_DCTL_POPRGDNE_Msk  (0x800UL)                 /*!< POPRGDNE (Bitfield-Mask: 0x01)                        */
/* =========================================================  DSTS  ========================================================== */
#define USB_OTG_DEVICE_DSTS_SUSPSTS_Pos   (0UL)                     /*!< SUSPSTS (Bit 0)                                       */
#define USB_OTG_DEVICE_DSTS_SUSPSTS_Msk   (0x1UL)                   /*!< SUSPSTS (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DSTS_ENUMSPD_Pos   (1UL)                     /*!< ENUMSPD (Bit 1)                                       */
#define USB_OTG_DEVICE_DSTS_ENUMSPD_Msk   (0x6UL)                   /*!< ENUMSPD (Bitfield-Mask: 0x03)                         */
#define USB_OTG_DEVICE_DSTS_EERR_Pos      (3UL)                     /*!< EERR (Bit 3)                                          */
#define USB_OTG_DEVICE_DSTS_EERR_Msk      (0x8UL)                   /*!< EERR (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DSTS_FNSOF_Pos     (8UL)                     /*!< FNSOF (Bit 8)                                         */
#define USB_OTG_DEVICE_DSTS_FNSOF_Msk     (0x3fff00UL)              /*!< FNSOF (Bitfield-Mask: 0x3fff)                         */
/* ========================================================  DIEPMSK  ======================================================== */
#define USB_OTG_DEVICE_DIEPMSK_XFRCM_Pos  (0UL)                     /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DIEPMSK_XFRCM_Msk  (0x1UL)                   /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DIEPMSK_EPDM_Pos   (1UL)                     /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DIEPMSK_EPDM_Msk   (0x2UL)                   /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DIEPMSK_TOM_Pos    (3UL)                     /*!< TOM (Bit 3)                                           */
#define USB_OTG_DEVICE_DIEPMSK_TOM_Msk    (0x8UL)                   /*!< TOM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DIEPMSK_ITTXFEMSK_Pos (4UL)                  /*!< ITTXFEMSK (Bit 4)                                     */
#define USB_OTG_DEVICE_DIEPMSK_ITTXFEMSK_Msk (0x10UL)               /*!< ITTXFEMSK (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_DIEPMSK_INEPNMM_Pos (5UL)                    /*!< INEPNMM (Bit 5)                                       */
#define USB_OTG_DEVICE_DIEPMSK_INEPNMM_Msk (0x20UL)                 /*!< INEPNMM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPMSK_INEPNEM_Pos (6UL)                    /*!< INEPNEM (Bit 6)                                       */
#define USB_OTG_DEVICE_DIEPMSK_INEPNEM_Msk (0x40UL)                 /*!< INEPNEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPMSK_TXFURM_Pos (8UL)                     /*!< TXFURM (Bit 8)                                        */
#define USB_OTG_DEVICE_DIEPMSK_TXFURM_Msk (0x100UL)                 /*!< TXFURM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DIEPMSK_BIM_Pos    (9UL)                     /*!< BIM (Bit 9)                                           */
#define USB_OTG_DEVICE_DIEPMSK_BIM_Msk    (0x200UL)                 /*!< BIM (Bitfield-Mask: 0x01)                             */
/* ========================================================  DOEPMSK  ======================================================== */
#define USB_OTG_DEVICE_DOEPMSK_XFRCM_Pos  (0UL)                     /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DOEPMSK_XFRCM_Msk  (0x1UL)                   /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPMSK_EPDM_Pos   (1UL)                     /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DOEPMSK_EPDM_Msk   (0x2UL)                   /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPMSK_STUPM_Pos  (3UL)                     /*!< STUPM (Bit 3)                                         */
#define USB_OTG_DEVICE_DOEPMSK_STUPM_Msk  (0x8UL)                   /*!< STUPM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPMSK_OTEPDM_Pos (4UL)                     /*!< OTEPDM (Bit 4)                                        */
#define USB_OTG_DEVICE_DOEPMSK_OTEPDM_Msk (0x10UL)                  /*!< OTEPDM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DOEPMSK_B2BSTUP_Pos (6UL)                    /*!< B2BSTUP (Bit 6)                                       */
#define USB_OTG_DEVICE_DOEPMSK_B2BSTUP_Msk (0x40UL)                 /*!< B2BSTUP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DOEPMSK_OPEM_Pos   (8UL)                     /*!< OPEM (Bit 8)                                          */
#define USB_OTG_DEVICE_DOEPMSK_OPEM_Msk   (0x100UL)                 /*!< OPEM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPMSK_BOIM_Pos   (9UL)                     /*!< BOIM (Bit 9)                                          */
#define USB_OTG_DEVICE_DOEPMSK_BOIM_Msk   (0x200UL)                 /*!< BOIM (Bitfield-Mask: 0x01)                            */
/* =========================================================  DAINT  ========================================================= */
#define USB_OTG_DEVICE_DAINT_IEPINT_Pos   (0UL)                     /*!< IEPINT (Bit 0)                                        */
#define USB_OTG_DEVICE_DAINT_IEPINT_Msk   (0xffffUL)                /*!< IEPINT (Bitfield-Mask: 0xffff)                        */
#define USB_OTG_DEVICE_DAINT_OEPINT_Pos   (16UL)                    /*!< OEPINT (Bit 16)                                       */
#define USB_OTG_DEVICE_DAINT_OEPINT_Msk   (0xffff0000UL)            /*!< OEPINT (Bitfield-Mask: 0xffff)                        */
/* =======================================================  DAINTMSK  ======================================================== */
#define USB_OTG_DEVICE_DAINTMSK_IEPM_Pos  (0UL)                     /*!< IEPM (Bit 0)                                          */
#define USB_OTG_DEVICE_DAINTMSK_IEPM_Msk  (0xffffUL)                /*!< IEPM (Bitfield-Mask: 0xffff)                          */
#define USB_OTG_DEVICE_DAINTMSK_OEPM_Pos  (16UL)                    /*!< OEPM (Bit 16)                                         */
#define USB_OTG_DEVICE_DAINTMSK_OEPM_Msk  (0xffff0000UL)            /*!< OEPM (Bitfield-Mask: 0xffff)                          */
/* =======================================================  DVBUSDIS  ======================================================== */
#define USB_OTG_DEVICE_DVBUSDIS_VBUSDT_Pos (0UL)                    /*!< VBUSDT (Bit 0)                                        */
#define USB_OTG_DEVICE_DVBUSDIS_VBUSDT_Msk (0xffffUL)               /*!< VBUSDT (Bitfield-Mask: 0xffff)                        */
/* ======================================================  DVBUSPULSE  ======================================================= */
#define USB_OTG_DEVICE_DVBUSPULSE_DVBUSP_Pos (0UL)                  /*!< DVBUSP (Bit 0)                                        */
#define USB_OTG_DEVICE_DVBUSPULSE_DVBUSP_Msk (0xfffUL)              /*!< DVBUSP (Bitfield-Mask: 0xfff)                         */
/* ========================================================  DTHRCTL  ======================================================== */
#define USB_OTG_DEVICE_DTHRCTL_NONISOTHREN_Pos (0UL)                /*!< NONISOTHREN (Bit 0)                                   */
#define USB_OTG_DEVICE_DTHRCTL_NONISOTHREN_Msk (0x1UL)              /*!< NONISOTHREN (Bitfield-Mask: 0x01)                     */
#define USB_OTG_DEVICE_DTHRCTL_ISOTHREN_Pos (1UL)                   /*!< ISOTHREN (Bit 1)                                      */
#define USB_OTG_DEVICE_DTHRCTL_ISOTHREN_Msk (0x2UL)                 /*!< ISOTHREN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_DEVICE_DTHRCTL_TXTHRLEN_Pos (2UL)                   /*!< TXTHRLEN (Bit 2)                                      */
#define USB_OTG_DEVICE_DTHRCTL_TXTHRLEN_Msk (0x7fcUL)               /*!< TXTHRLEN (Bitfield-Mask: 0x1ff)                       */
#define USB_OTG_DEVICE_DTHRCTL_RXTHREN_Pos (16UL)                   /*!< RXTHREN (Bit 16)                                      */
#define USB_OTG_DEVICE_DTHRCTL_RXTHREN_Msk (0x10000UL)              /*!< RXTHREN (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DTHRCTL_RXTHRLEN_Pos (17UL)                  /*!< RXTHRLEN (Bit 17)                                     */
#define USB_OTG_DEVICE_DTHRCTL_RXTHRLEN_Msk (0x3fe0000UL)           /*!< RXTHRLEN (Bitfield-Mask: 0x1ff)                       */
#define USB_OTG_DEVICE_DTHRCTL_ARPEN_Pos  (27UL)                    /*!< ARPEN (Bit 27)                                        */
#define USB_OTG_DEVICE_DTHRCTL_ARPEN_Msk  (0x8000000UL)             /*!< ARPEN (Bitfield-Mask: 0x01)                           */
/* ======================================================  DIEPEMPMSK  ======================================================= */
#define USB_OTG_DEVICE_DIEPEMPMSK_INEPTXFEM_Pos (0UL)               /*!< INEPTXFEM (Bit 0)                                     */
#define USB_OTG_DEVICE_DIEPEMPMSK_INEPTXFEM_Msk (0xffffUL)          /*!< INEPTXFEM (Bitfield-Mask: 0xffff)                     */
/* =======================================================  DEACHINT  ======================================================== */
#define USB_OTG_DEVICE_DEACHINT_IEP1INT_Pos (1UL)                   /*!< IEP1INT (Bit 1)                                       */
#define USB_OTG_DEVICE_DEACHINT_IEP1INT_Msk (0x2UL)                 /*!< IEP1INT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DEACHINT_OEP1INT_Pos (17UL)                  /*!< OEP1INT (Bit 17)                                      */
#define USB_OTG_DEVICE_DEACHINT_OEP1INT_Msk (0x20000UL)             /*!< OEP1INT (Bitfield-Mask: 0x01)                         */
/* ======================================================  DEACHINTMSK  ====================================================== */
#define USB_OTG_DEVICE_DEACHINTMSK_IEP1INTM_Pos (1UL)               /*!< IEP1INTM (Bit 1)                                      */
#define USB_OTG_DEVICE_DEACHINTMSK_IEP1INTM_Msk (0x2UL)             /*!< IEP1INTM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_DEVICE_DEACHINTMSK_OEP1INTM_Pos (17UL)              /*!< OEP1INTM (Bit 17)                                     */
#define USB_OTG_DEVICE_DEACHINTMSK_OEP1INTM_Msk (0x20000UL)         /*!< OEP1INTM (Bitfield-Mask: 0x01)                        */
/* =====================================================  DIEPEACHMSK1  ====================================================== */
#define USB_OTG_DEVICE_DIEPEACHMSK1_XFRCM_Pos (0UL)                 /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_XFRCM_Msk (0x1UL)               /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DIEPEACHMSK1_EPDM_Pos (1UL)                  /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DIEPEACHMSK1_EPDM_Msk (0x2UL)                /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TOM_Pos (3UL)                   /*!< TOM (Bit 3)                                           */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TOM_Msk (0x8UL)                 /*!< TOM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DIEPEACHMSK1_ITTXFEMSK_Pos (4UL)             /*!< ITTXFEMSK (Bit 4)                                     */
#define USB_OTG_DEVICE_DIEPEACHMSK1_ITTXFEMSK_Msk (0x10UL)          /*!< ITTXFEMSK (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNMM_Pos (5UL)               /*!< INEPNMM (Bit 5)                                       */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNMM_Msk (0x20UL)            /*!< INEPNMM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNEM_Pos (6UL)               /*!< INEPNEM (Bit 6)                                       */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNEM_Msk (0x40UL)            /*!< INEPNEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TXFURM_Pos (8UL)                /*!< TXFURM (Bit 8)                                        */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TXFURM_Msk (0x100UL)            /*!< TXFURM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DIEPEACHMSK1_BIM_Pos (9UL)                   /*!< BIM (Bit 9)                                           */
#define USB_OTG_DEVICE_DIEPEACHMSK1_BIM_Msk (0x200UL)               /*!< BIM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DIEPEACHMSK1_NAKM_Pos (13UL)                 /*!< NAKM (Bit 13)                                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_NAKM_Msk (0x2000UL)             /*!< NAKM (Bitfield-Mask: 0x01)                            */
/* =====================================================  DOEPEACHMSK1  ====================================================== */
#define USB_OTG_DEVICE_DOEPEACHMSK1_XFRCM_Pos (0UL)                 /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_XFRCM_Msk (0x1UL)               /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_EPDM_Pos (1UL)                  /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DOEPEACHMSK1_EPDM_Msk (0x2UL)                /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TOM_Pos (3UL)                   /*!< TOM (Bit 3)                                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TOM_Msk (0x8UL)                 /*!< TOM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DOEPEACHMSK1_ITTXFEMSK_Pos (4UL)             /*!< ITTXFEMSK (Bit 4)                                     */
#define USB_OTG_DEVICE_DOEPEACHMSK1_ITTXFEMSK_Msk (0x10UL)          /*!< ITTXFEMSK (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNMM_Pos (5UL)               /*!< INEPNMM (Bit 5)                                       */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNMM_Msk (0x20UL)            /*!< INEPNMM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNEM_Pos (6UL)               /*!< INEPNEM (Bit 6)                                       */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNEM_Msk (0x40UL)            /*!< INEPNEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TXFURM_Pos (8UL)                /*!< TXFURM (Bit 8)                                        */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TXFURM_Msk (0x100UL)            /*!< TXFURM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BIM_Pos (9UL)                   /*!< BIM (Bit 9)                                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BIM_Msk (0x200UL)               /*!< BIM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BERRM_Pos (12UL)                /*!< BERRM (Bit 12)                                        */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BERRM_Msk (0x1000UL)            /*!< BERRM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NAKM_Pos (13UL)                 /*!< NAKM (Bit 13)                                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NAKM_Msk (0x2000UL)             /*!< NAKM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NYETM_Pos (14UL)                /*!< NYETM (Bit 14)                                        */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NYETM_Msk (0x4000UL)            /*!< NYETM (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_PWRCLK                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  PCGCCTL  ======================================================== */
#define USB_OTG_PWRCLK_PCGCCTL_STPPCLK_Pos (0UL)                    /*!< STPPCLK (Bit 0)                                       */
#define USB_OTG_PWRCLK_PCGCCTL_STPPCLK_Msk (0x1UL)                  /*!< STPPCLK (Bitfield-Mask: 0x01)                         */
#define USB_OTG_PWRCLK_PCGCCTL_GATEHCLK_Pos (1UL)                   /*!< GATEHCLK (Bit 1)                                      */
#define USB_OTG_PWRCLK_PCGCCTL_GATEHCLK_Msk (0x2UL)                 /*!< GATEHCLK (Bitfield-Mask: 0x01)                        */
#define USB_OTG_PWRCLK_PCGCCTL_PWRCLMP_Pos (2UL)                    /*!< PWRCLMP (Bit 2)                                       */
#define USB_OTG_PWRCLK_PCGCCTL_PWRCLMP_Msk (0x4UL)                  /*!< PWRCLMP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_PWRCLK_PCGCCTL_RSTPDWNMODULE_Pos (3UL)              /*!< RSTPDWNMODULE (Bit 3)                                 */
#define USB_OTG_PWRCLK_PCGCCTL_RSTPDWNMODULE_Msk (0x8UL)            /*!< RSTPDWNMODULE (Bitfield-Mask: 0x01)                   */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSUSP_Pos (4UL)                    /*!< PHYSUSP (Bit 4)                                       */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSUSP_Msk (0x10UL)                 /*!< PHYSUSP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_PWRCLK_PCGCCTL_ENABLE_L1GATING_Pos (5UL)            /*!< ENABLE_L1GATING (Bit 5)                               */
#define USB_OTG_PWRCLK_PCGCCTL_ENABLE_L1GATING_Msk (0x20UL)         /*!< ENABLE_L1GATING (Bitfield-Mask: 0x01)                 */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSLEEP_Pos (6UL)                   /*!< PHYSLEEP (Bit 6)                                      */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSLEEP_Msk (0x40UL)                /*!< PHYSLEEP (Bitfield-Mask: 0x01)                        */
#define USB_OTG_PWRCLK_PCGCCTL_DEEPSLEEP_Pos (7UL)                  /*!< DEEPSLEEP (Bit 7)                                     */
#define USB_OTG_PWRCLK_PCGCCTL_DEEPSLEEP_Msk (0x80UL)               /*!< DEEPSLEEP (Bitfield-Mask: 0x01)                       */
#define USB_OTG_PWRCLK_PCGCCTL_RESETAFTERSUSP_Pos (8UL)             /*!< RESETAFTERSUSP (Bit 8)                                */
#define USB_OTG_PWRCLK_PCGCCTL_RESETAFTERSUSP_Msk (0x100UL)         /*!< RESETAFTERSUSP (Bitfield-Mask: 0x01)                  */
#define USB_OTG_PWRCLK_PCGCCTL_RESTOREMODE_Pos (9UL)                /*!< RESTOREMODE (Bit 9)                                   */
#define USB_OTG_PWRCLK_PCGCCTL_RESTOREMODE_Msk (0x200UL)            /*!< RESTOREMODE (Bitfield-Mask: 0x01)                     */
#define USB_OTG_PWRCLK_PCGCCTL_ENEXTNDEDHIBER_Pos (10UL)            /*!< ENEXTNDEDHIBER (Bit 10)                               */
#define USB_OTG_PWRCLK_PCGCCTL_ENEXTNDEDHIBER_Msk (0x400UL)         /*!< ENEXTNDEDHIBER (Bitfield-Mask: 0x01)                  */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONCLAMP_Pos (11UL)   /*!< EXTNDEDHIBERNATIONCLAMP (Bit 11)                      */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONCLAMP_Msk (0x800UL) /*!< EXTNDEDHIBERNATIONCLAMP (Bitfield-Mask: 0x01)        */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONSWITCH_Pos (12UL)  /*!< EXTNDEDHIBERNATIONSWITCH (Bit 12)                     */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONSWITCH_Msk (0x1000UL) /*!< EXTNDEDHIBERNATIONSWITCH (Bitfield-Mask: 0x01)     */
#define USB_OTG_PWRCLK_PCGCCTL_ESSREGRESTORED_Pos (13UL)            /*!< ESSREGRESTORED (Bit 13)                               */
#define USB_OTG_PWRCLK_PCGCCTL_ESSREGRESTORED_Msk (0x2000UL)        /*!< ESSREGRESTORED (Bitfield-Mask: 0x01)                  */
#define USB_OTG_PWRCLK_PCGCCTL_RESTORE_VALUE_Pos (14UL)             /*!< RESTORE_VALUE (Bit 14)                                */
#define USB_OTG_PWRCLK_PCGCCTL_RESTORE_VALUE_Msk (0xffffc000UL)     /*!< RESTORE_VALUE (Bitfield-Mask: 0x3ffff)                */


/* =========================================================================================================================== */
/* ================                                  Arasan_EMMC_Distributor                                  ================ */
/* =========================================================================================================================== */

/* =========================================================  ARG2  ========================================================== */
/* ======================================================  BLKSIZECNT  ======================================================= */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKCNT_Pos (16UL)        /*!< BLKCNT (Bit 16)                                       */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKCNT_Msk (0xffff0000UL) /*!< BLKCNT (Bitfield-Mask: 0xffff)                       */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKSIZE_Pos (0UL)        /*!< BLKSIZE (Bit 0)                                       */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKSIZE_Msk (0x3ffUL)    /*!< BLKSIZE (Bitfield-Mask: 0x3ff)                        */
/* =========================================================  ARG1  ========================================================== */
/* =========================================================  CMDTM  ========================================================= */
#define Arasan_EMMC_Distributor_CMDTM_CMD_INDEX_Pos (24UL)          /*!< CMD_INDEX (Bit 24)                                    */
#define Arasan_EMMC_Distributor_CMDTM_CMD_INDEX_Msk (0x3f000000UL)  /*!< CMD_INDEX (Bitfield-Mask: 0x3f)                       */
#define Arasan_EMMC_Distributor_CMDTM_CMD_TYPE_Pos (22UL)           /*!< CMD_TYPE (Bit 22)                                     */
#define Arasan_EMMC_Distributor_CMDTM_CMD_TYPE_Msk (0xc00000UL)     /*!< CMD_TYPE (Bitfield-Mask: 0x03)                        */
#define Arasan_EMMC_Distributor_CMDTM_CMD_ISDATA_Pos (21UL)         /*!< CMD_ISDATA (Bit 21)                                   */
#define Arasan_EMMC_Distributor_CMDTM_CMD_ISDATA_Msk (0x200000UL)   /*!< CMD_ISDATA (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CMDTM_CMD_IXCHK_EN_Pos (20UL)       /*!< CMD_IXCHK_EN (Bit 20)                                 */
#define Arasan_EMMC_Distributor_CMDTM_CMD_IXCHK_EN_Msk (0x100000UL) /*!< CMD_IXCHK_EN (Bitfield-Mask: 0x01)                    */
#define Arasan_EMMC_Distributor_CMDTM_CMD_CRCCHK_EN_Pos (19UL)      /*!< CMD_CRCCHK_EN (Bit 19)                                */
#define Arasan_EMMC_Distributor_CMDTM_CMD_CRCCHK_EN_Msk (0x80000UL) /*!< CMD_CRCCHK_EN (Bitfield-Mask: 0x01)                   */
#define Arasan_EMMC_Distributor_CMDTM_CMD_RSPNS_TYPE_Pos (16UL)     /*!< CMD_RSPNS_TYPE (Bit 16)                               */
#define Arasan_EMMC_Distributor_CMDTM_CMD_RSPNS_TYPE_Msk (0x30000UL) /*!< CMD_RSPNS_TYPE (Bitfield-Mask: 0x03)                 */
#define Arasan_EMMC_Distributor_CMDTM_TM_MULTI_BLOCK_Pos (5UL)      /*!< TM_MULTI_BLOCK (Bit 5)                                */
#define Arasan_EMMC_Distributor_CMDTM_TM_MULTI_BLOCK_Msk (0x20UL)   /*!< TM_MULTI_BLOCK (Bitfield-Mask: 0x01)                  */
#define Arasan_EMMC_Distributor_CMDTM_TM_DAT_DIR_Pos (4UL)          /*!< TM_DAT_DIR (Bit 4)                                    */
#define Arasan_EMMC_Distributor_CMDTM_TM_DAT_DIR_Msk (0x10UL)       /*!< TM_DAT_DIR (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CMDTM_TM_AUTO_CMD_EN_Pos (2UL)      /*!< TM_AUTO_CMD_EN (Bit 2)                                */
#define Arasan_EMMC_Distributor_CMDTM_TM_AUTO_CMD_EN_Msk (0xcUL)    /*!< TM_AUTO_CMD_EN (Bitfield-Mask: 0x03)                  */
#define Arasan_EMMC_Distributor_CMDTM_TM_BLKCNT_EN_Pos (1UL)        /*!< TM_BLKCNT_EN (Bit 1)                                  */
#define Arasan_EMMC_Distributor_CMDTM_TM_BLKCNT_EN_Msk (0x2UL)      /*!< TM_BLKCNT_EN (Bitfield-Mask: 0x01)                    */
/* =========================================================  RESP0  ========================================================= */
/* =========================================================  RESP1  ========================================================= */
/* =========================================================  RESP2  ========================================================= */
/* =========================================================  RESP3  ========================================================= */
/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL1_Pos (25UL)        /*!< DAT_LEVEL1 (Bit 25)                                   */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL1_Msk (0x1e000000UL) /*!< DAT_LEVEL1 (Bitfield-Mask: 0x0f)                     */
#define Arasan_EMMC_Distributor_STATUS_CMD_LEVEL_Pos (24UL)         /*!< CMD_LEVEL (Bit 24)                                    */
#define Arasan_EMMC_Distributor_STATUS_CMD_LEVEL_Msk (0x1000000UL)  /*!< CMD_LEVEL (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL0_Pos (20UL)        /*!< DAT_LEVEL0 (Bit 20)                                   */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL0_Msk (0xf00000UL)  /*!< DAT_LEVEL0 (Bitfield-Mask: 0x0f)                      */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_READ_ENABLE_Pos (11UL) /*!< BUFFER_READ_ENABLE (Bit 11)                          */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_READ_ENABLE_Msk (0x800UL) /*!< BUFFER_READ_ENABLE (Bitfield-Mask: 0x01)          */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_WRITE_ENABLE_Pos (10UL) /*!< BUFFER_WRITE_ENABLE (Bit 10)                        */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_WRITE_ENABLE_Msk (0x400UL) /*!< BUFFER_WRITE_ENABLE (Bitfield-Mask: 0x01)        */
#define Arasan_EMMC_Distributor_STATUS_READ_TRANSFER_Pos (9UL)      /*!< READ_TRANSFER (Bit 9)                                 */
#define Arasan_EMMC_Distributor_STATUS_READ_TRANSFER_Msk (0x200UL)  /*!< READ_TRANSFER (Bitfield-Mask: 0x01)                   */
#define Arasan_EMMC_Distributor_STATUS_WRITE_TRANSFER_Pos (8UL)     /*!< WRITE_TRANSFER (Bit 8)                                */
#define Arasan_EMMC_Distributor_STATUS_WRITE_TRANSFER_Msk (0x100UL) /*!< WRITE_TRANSFER (Bitfield-Mask: 0x01)                  */
#define Arasan_EMMC_Distributor_STATUS_DAT_ACTIVE_Pos (2UL)         /*!< DAT_ACTIVE (Bit 2)                                    */
#define Arasan_EMMC_Distributor_STATUS_DAT_ACTIVE_Msk (0x4UL)       /*!< DAT_ACTIVE (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_STATUS_DAT_INHIBIT_Pos (1UL)        /*!< DAT_INHIBIT (Bit 1)                                   */
#define Arasan_EMMC_Distributor_STATUS_DAT_INHIBIT_Msk (0x2UL)      /*!< DAT_INHIBIT (Bitfield-Mask: 0x01)                     */
#define Arasan_EMMC_Distributor_STATUS_CMD_INHIBIT_Pos (0UL)        /*!< CMD_INHIBIT (Bit 0)                                   */
#define Arasan_EMMC_Distributor_STATUS_CMD_INHIBIT_Msk (0x1UL)      /*!< CMD_INHIBIT (Bitfield-Mask: 0x01)                     */
/* =======================================================  CONTROL0  ======================================================== */
#define Arasan_EMMC_Distributor_CONTROL0_ALT_BOOT_EN_Pos (22UL)     /*!< ALT_BOOT_EN (Bit 22)                                  */
#define Arasan_EMMC_Distributor_CONTROL0_ALT_BOOT_EN_Msk (0x400000UL) /*!< ALT_BOOT_EN (Bitfield-Mask: 0x01)                   */
#define Arasan_EMMC_Distributor_CONTROL0_BOOT_EN_Pos (21UL)         /*!< BOOT_EN (Bit 21)                                      */
#define Arasan_EMMC_Distributor_CONTROL0_BOOT_EN_Msk (0x200000UL)   /*!< BOOT_EN (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_CONTROL0_SPI_MODE_Pos (20UL)        /*!< SPI_MODE (Bit 20)                                     */
#define Arasan_EMMC_Distributor_CONTROL0_SPI_MODE_Msk (0x100000UL)  /*!< SPI_MODE (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_IEN_Pos (19UL)         /*!< GAP_IEN (Bit 19)                                      */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_IEN_Msk (0x80000UL)    /*!< GAP_IEN (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_CONTROL0_READWAIT_EN_Pos (18UL)     /*!< READWAIT_EN (Bit 18)                                  */
#define Arasan_EMMC_Distributor_CONTROL0_READWAIT_EN_Msk (0x40000UL) /*!< READWAIT_EN (Bitfield-Mask: 0x01)                    */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_RESTART_Pos (17UL)     /*!< GAP_RESTART (Bit 17)                                  */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_RESTART_Msk (0x20000UL) /*!< GAP_RESTART (Bitfield-Mask: 0x01)                    */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_STOP_Pos (16UL)        /*!< GAP_STOP (Bit 16)                                     */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_STOP_Msk (0x10000UL)   /*!< GAP_STOP (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_8BIT_Pos (5UL)        /*!< HCTL_8BIT (Bit 5)                                     */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_8BIT_Msk (0x20UL)     /*!< HCTL_8BIT (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_HS_EN_Pos (2UL)       /*!< HCTL_HS_EN (Bit 2)                                    */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_HS_EN_Msk (0x4UL)     /*!< HCTL_HS_EN (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_DWIDTH_Pos (1UL)      /*!< HCTL_DWIDTH (Bit 1)                                   */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_DWIDTH_Msk (0x2UL)    /*!< HCTL_DWIDTH (Bitfield-Mask: 0x01)                     */
/* =======================================================  CONTROL1  ======================================================== */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_DATA_Pos (26UL)       /*!< SRST_DATA (Bit 26)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_DATA_Msk (0x4000000UL) /*!< SRST_DATA (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_CMD_Pos (25UL)        /*!< SRST_CMD (Bit 25)                                     */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_CMD_Msk (0x2000000UL) /*!< SRST_CMD (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_HC_Pos (24UL)         /*!< SRST_HC (Bit 24)                                      */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_HC_Msk (0x1000000UL)  /*!< SRST_HC (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_CONTROL1_DATA_TOUNIT_Pos (16UL)     /*!< DATA_TOUNIT (Bit 16)                                  */
#define Arasan_EMMC_Distributor_CONTROL1_DATA_TOUNIT_Msk (0xf0000UL) /*!< DATA_TOUNIT (Bitfield-Mask: 0x0f)                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ8_Pos (8UL)        /*!< CLK_FREQ8 (Bit 8)                                     */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ8_Msk (0xff00UL)   /*!< CLK_FREQ8 (Bitfield-Mask: 0xff)                       */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ_MS2_Pos (6UL)     /*!< CLK_FREQ_MS2 (Bit 6)                                  */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ_MS2_Msk (0xc0UL)  /*!< CLK_FREQ_MS2 (Bitfield-Mask: 0x03)                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_GENSEL_Pos (5UL)       /*!< CLK_GENSEL (Bit 5)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_GENSEL_Msk (0x20UL)    /*!< CLK_GENSEL (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_EN_Pos (2UL)           /*!< CLK_EN (Bit 2)                                        */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_EN_Msk (0x4UL)         /*!< CLK_EN (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_STABLE_Pos (1UL)       /*!< CLK_STABLE (Bit 1)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_STABLE_Msk (0x2UL)     /*!< CLK_STABLE (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_INTLEN_Pos (0UL)       /*!< CLK_INTLEN (Bit 0)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_INTLEN_Msk (0x1UL)     /*!< CLK_INTLEN (Bitfield-Mask: 0x01)                      */
/* =======================================================  INTERRUPT  ======================================================= */
#define Arasan_EMMC_Distributor_INTERRUPT_ACMD_ERR_Pos (24UL)       /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_ACMD_ERR_Msk (0x1000000UL) /*!< ACMD_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_DEND_ERR_Pos (22UL)       /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_DEND_ERR_Msk (0x400000UL) /*!< DEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_DCRC_ERR_Pos (21UL)       /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_DCRC_ERR_Msk (0x200000UL) /*!< DCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_DTO_ERR_Pos (20UL)        /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_DTO_ERR_Msk (0x100000UL)  /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_CBAD_ERR_Pos (19UL)       /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_CBAD_ERR_Msk (0x80000UL)  /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_CEND_ERR_Pos (18UL)       /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_CEND_ERR_Msk (0x40000UL)  /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_CCRC_ERR_Pos (17UL)       /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_CCRC_ERR_Msk (0x20000UL)  /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_CTO_ERR_Pos (16UL)        /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_CTO_ERR_Msk (0x10000UL)   /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_ERR_Pos (15UL)            /*!< ERR (Bit 15)                                          */
#define Arasan_EMMC_Distributor_INTERRUPT_ERR_Msk (0x8000UL)        /*!< ERR (Bitfield-Mask: 0x01)                             */
#define Arasan_EMMC_Distributor_INTERRUPT_ENDBOOT_Pos (14UL)        /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_ENDBOOT_Msk (0x4000UL)    /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_BOOTACK_Pos (13UL)        /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_BOOTACK_Msk (0x2000UL)    /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_RETUNE_Pos (12UL)         /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_INTERRUPT_RETUNE_Msk (0x1000UL)     /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_INTERRUPT_CARD_Pos (8UL)            /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_INTERRUPT_CARD_Msk (0x100UL)        /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_INTERRUPT_READ_RDY_Pos (5UL)        /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_READ_RDY_Msk (0x20UL)     /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_WRITE_RDY_Pos (4UL)       /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_WRITE_RDY_Msk (0x10UL)    /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_BLOCK_GAP_Pos (2UL)       /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_BLOCK_GAP_Msk (0x4UL)     /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_DATA_DONE_Pos (1UL)       /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_DATA_DONE_Msk (0x2UL)     /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_CMD_DONE_Pos (0UL)        /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_CMD_DONE_Msk (0x1UL)      /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* =======================================================  IRPT_MASK  ======================================================= */
#define Arasan_EMMC_Distributor_IRPT_MASK_ACMD_ERR_Pos (24UL)       /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_ACMD_ERR_Msk (0x1000000UL) /*!< ACMD_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_DEND_ERR_Pos (22UL)       /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_DEND_ERR_Msk (0x400000UL) /*!< DEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_DCRC_ERR_Pos (21UL)       /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_DCRC_ERR_Msk (0x200000UL) /*!< DCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_DTO_ERR_Pos (20UL)        /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_DTO_ERR_Msk (0x100000UL)  /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_CBAD_ERR_Pos (19UL)       /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_CBAD_ERR_Msk (0x80000UL)  /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_CEND_ERR_Pos (18UL)       /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_CEND_ERR_Msk (0x40000UL)  /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_CCRC_ERR_Pos (17UL)       /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_CCRC_ERR_Msk (0x20000UL)  /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_CTO_ERR_Pos (16UL)        /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_CTO_ERR_Msk (0x10000UL)   /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_ENDBOOT_Pos (14UL)        /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_ENDBOOT_Msk (0x4000UL)    /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_BOOTACK_Pos (13UL)        /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_BOOTACK_Msk (0x2000UL)    /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_RETUNE_Pos (12UL)         /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_RETUNE_Msk (0x1000UL)     /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_IRPT_MASK_CARD_Pos (8UL)            /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_IRPT_MASK_CARD_Msk (0x100UL)        /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_IRPT_MASK_READ_RDY_Pos (5UL)        /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_READ_RDY_Msk (0x20UL)     /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_WRITE_RDY_Pos (4UL)       /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_WRITE_RDY_Msk (0x10UL)    /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_BLOCK_GAP_Pos (2UL)       /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_BLOCK_GAP_Msk (0x4UL)     /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_DATA_DONE_Pos (1UL)       /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_DATA_DONE_Msk (0x2UL)     /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_CMD_DONE_Pos (0UL)        /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_CMD_DONE_Msk (0x1UL)      /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* ========================================================  IRPT_EN  ======================================================== */
#define Arasan_EMMC_Distributor_IRPT_EN_ACMD_ERR_Pos (24UL)         /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_ACMD_ERR_Msk (0x1000000UL)  /*!< ACMD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_DEND_ERR_Pos (22UL)         /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_DEND_ERR_Msk (0x400000UL)   /*!< DEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_DCRC_ERR_Pos (21UL)         /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_DCRC_ERR_Msk (0x200000UL)   /*!< DCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_DTO_ERR_Pos (20UL)          /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_DTO_ERR_Msk (0x100000UL)    /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_CBAD_ERR_Pos (19UL)         /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_CBAD_ERR_Msk (0x80000UL)    /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_CEND_ERR_Pos (18UL)         /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_CEND_ERR_Msk (0x40000UL)    /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_CCRC_ERR_Pos (17UL)         /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_CCRC_ERR_Msk (0x20000UL)    /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_CTO_ERR_Pos (16UL)          /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_CTO_ERR_Msk (0x10000UL)     /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_ENDBOOT_Pos (14UL)          /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_ENDBOOT_Msk (0x4000UL)      /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_BOOTACK_Pos (13UL)          /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_BOOTACK_Msk (0x2000UL)      /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_RETUNE_Pos (12UL)           /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_IRPT_EN_RETUNE_Msk (0x1000UL)       /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_IRPT_EN_CARD_Pos (8UL)              /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_IRPT_EN_CARD_Msk (0x100UL)          /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_IRPT_EN_READ_RDY_Pos (5UL)          /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_READ_RDY_Msk (0x20UL)       /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_WRITE_RDY_Pos (4UL)         /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_WRITE_RDY_Msk (0x10UL)      /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_EN_BLOCK_GAP_Pos (2UL)         /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_BLOCK_GAP_Msk (0x4UL)       /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_EN_DATA_DONE_Pos (1UL)         /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_DATA_DONE_Msk (0x2UL)       /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_EN_CMD_DONE_Pos (0UL)          /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_CMD_DONE_Msk (0x1UL)        /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* =======================================================  CONTROL2  ======================================================== */
#define Arasan_EMMC_Distributor_CONTROL2_TUNED_Pos (23UL)           /*!< TUNED (Bit 23)                                        */
#define Arasan_EMMC_Distributor_CONTROL2_TUNED_Msk (0x800000UL)     /*!< TUNED (Bitfield-Mask: 0x01)                           */
#define Arasan_EMMC_Distributor_CONTROL2_TUNEON_Pos (22UL)          /*!< TUNEON (Bit 22)                                       */
#define Arasan_EMMC_Distributor_CONTROL2_TUNEON_Msk (0x400000UL)    /*!< TUNEON (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_CONTROL2_UHSMODE_Pos (16UL)         /*!< UHSMODE (Bit 16)                                      */
#define Arasan_EMMC_Distributor_CONTROL2_UHSMODE_Msk (0x70000UL)    /*!< UHSMODE (Bitfield-Mask: 0x07)                         */
#define Arasan_EMMC_Distributor_CONTROL2_NOTC12_ERR_Pos (7UL)       /*!< NOTC12_ERR (Bit 7)                                    */
#define Arasan_EMMC_Distributor_CONTROL2_NOTC12_ERR_Msk (0x80UL)    /*!< NOTC12_ERR (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL2_ACBAD_ERR_Pos (4UL)        /*!< ACBAD_ERR (Bit 4)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACBAD_ERR_Msk (0x10UL)     /*!< ACBAD_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL2_ACEND_ERR_Pos (3UL)        /*!< ACEND_ERR (Bit 3)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACEND_ERR_Msk (0x8UL)      /*!< ACEND_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL2_ACCRC_ERR_Pos (2UL)        /*!< ACCRC_ERR (Bit 2)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACCRC_ERR_Msk (0x4UL)      /*!< ACCRC_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL2_ACTO_ERR_Pos (1UL)         /*!< ACTO_ERR (Bit 1)                                      */
#define Arasan_EMMC_Distributor_CONTROL2_ACTO_ERR_Msk (0x2UL)       /*!< ACTO_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL2_ACNOX_ERR_Pos (0UL)        /*!< ACNOX_ERR (Bit 0)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACNOX_ERR_Msk (0x1UL)      /*!< ACNOX_ERR (Bitfield-Mask: 0x01)                       */
/* ======================================================  FORCE_IRPT  ======================================================= */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ACMD_ERR_Pos (24UL)      /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ACMD_ERR_Msk (0x1000000UL) /*!< ACMD_ERR (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DEND_ERR_Pos (22UL)      /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DEND_ERR_Msk (0x400000UL) /*!< DEND_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DCRC_ERR_Pos (21UL)      /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DCRC_ERR_Msk (0x200000UL) /*!< DCRC_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DTO_ERR_Pos (20UL)       /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DTO_ERR_Msk (0x100000UL) /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CBAD_ERR_Pos (19UL)      /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CBAD_ERR_Msk (0x80000UL) /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CEND_ERR_Pos (18UL)      /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CEND_ERR_Msk (0x40000UL) /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CCRC_ERR_Pos (17UL)      /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CCRC_ERR_Msk (0x20000UL) /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CTO_ERR_Pos (16UL)       /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CTO_ERR_Msk (0x10000UL)  /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ENDBOOT_Pos (14UL)       /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ENDBOOT_Msk (0x4000UL)   /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BOOTACK_Pos (13UL)       /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BOOTACK_Msk (0x2000UL)   /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_RETUNE_Pos (12UL)        /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_RETUNE_Msk (0x1000UL)    /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CARD_Pos (8UL)           /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CARD_Msk (0x100UL)       /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_FORCE_IRPT_READ_RDY_Pos (5UL)       /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_READ_RDY_Msk (0x20UL)    /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_WRITE_RDY_Pos (4UL)      /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_WRITE_RDY_Msk (0x10UL)   /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BLOCK_GAP_Pos (2UL)      /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BLOCK_GAP_Msk (0x4UL)    /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DATA_DONE_Pos (1UL)      /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DATA_DONE_Msk (0x2UL)    /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CMD_DONE_Pos (0UL)       /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CMD_DONE_Msk (0x1UL)     /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* =====================================================  BOOT_TIMEOUT  ====================================================== */
/* ========================================================  DBG_SEL  ======================================================== */
#define Arasan_EMMC_Distributor_DBG_SEL_SELECT_Pos (0UL)            /*!< SELECT (Bit 0)                                        */
#define Arasan_EMMC_Distributor_DBG_SEL_SELECT_Msk (0x1UL)          /*!< SELECT (Bitfield-Mask: 0x01)                          */
/* =====================================================  EXRDFIFO_CFG  ====================================================== */
#define Arasan_EMMC_Distributor_EXRDFIFO_CFG_RD_THRSH_Pos (0UL)     /*!< RD_THRSH (Bit 0)                                      */
#define Arasan_EMMC_Distributor_EXRDFIFO_CFG_RD_THRSH_Msk (0x7UL)   /*!< RD_THRSH (Bitfield-Mask: 0x07)                        */
/* ======================================================  EXRDFIFO_EN  ====================================================== */
#define Arasan_EMMC_Distributor_EXRDFIFO_EN_ENABLE_Pos (0UL)        /*!< ENABLE (Bit 0)                                        */
#define Arasan_EMMC_Distributor_EXRDFIFO_EN_ENABLE_Msk (0x1UL)      /*!< ENABLE (Bitfield-Mask: 0x01)                          */
/* =======================================================  TUNE_STEP  ======================================================= */
#define Arasan_EMMC_Distributor_TUNE_STEP_DELAY_Pos (0UL)           /*!< DELAY (Bit 0)                                         */
#define Arasan_EMMC_Distributor_TUNE_STEP_DELAY_Msk (0x7UL)         /*!< DELAY (Bitfield-Mask: 0x07)                           */
/* ====================================================  TUNE_STEPS_STD  ===================================================== */
#define Arasan_EMMC_Distributor_TUNE_STEPS_STD_STEPS_Pos (0UL)      /*!< STEPS (Bit 0)                                         */
#define Arasan_EMMC_Distributor_TUNE_STEPS_STD_STEPS_Msk (0x3fUL)   /*!< STEPS (Bitfield-Mask: 0x3f)                           */
/* ====================================================  TUNE_STEPS_DDR  ===================================================== */
#define Arasan_EMMC_Distributor_TUNE_STEPS_DDR_STEPS_Pos (0UL)      /*!< STEPS (Bit 0)                                         */
#define Arasan_EMMC_Distributor_TUNE_STEPS_DDR_STEPS_Msk (0x3fUL)   /*!< STEPS (Bitfield-Mask: 0x3f)                           */
/* ======================================================  SPI_INT_SPT  ====================================================== */
#define Arasan_EMMC_Distributor_SPI_INT_SPT_SELECT_Pos (0UL)        /*!< SELECT (Bit 0)                                        */
#define Arasan_EMMC_Distributor_SPI_INT_SPT_SELECT_Msk (0xffUL)     /*!< SELECT (Bitfield-Mask: 0xff)                          */
/* ======================================================  SLOTISR_VER  ====================================================== */
#define Arasan_EMMC_Distributor_SLOTISR_VER_VENDOR_Pos (24UL)       /*!< VENDOR (Bit 24)                                       */
#define Arasan_EMMC_Distributor_SLOTISR_VER_VENDOR_Msk (0xff000000UL) /*!< VENDOR (Bitfield-Mask: 0xff)                        */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SDVERSION_Pos (16UL)    /*!< SDVERSION (Bit 16)                                    */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SDVERSION_Msk (0xff0000UL) /*!< SDVERSION (Bitfield-Mask: 0xff)                    */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SLOT_STATUS_Pos (0UL)   /*!< SLOT_STATUS (Bit 0)                                   */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SLOT_STATUS_Msk (0xffUL) /*!< SLOT_STATUS (Bitfield-Mask: 0xff)                    */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                             Enumerated Values Cluster Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       GICD_IGROUPR                                        ================ */
/* =========================================================================================================================== */

/* =====================================================  GICD_IGROUPR0  ===================================================== */
/* =====================================================  GICD_IGROUPR1  ===================================================== */
/* =====================================================  GICD_IGROUPR2  ===================================================== */
/* =====================================================  GICD_IGROUPR3  ===================================================== */
/* =====================================================  GICD_IGROUPR4  ===================================================== */
/* =====================================================  GICD_IGROUPR5  ===================================================== */
/* =====================================================  GICD_IGROUPR6  ===================================================== */


/* =========================================================================================================================== */
/* ================                                      GICD_ISENABLER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ISENABLER0  ==================================================== */
/* ====================================================  GICD_ISENABLER1  ==================================================== */
/* ====================================================  GICD_ISENABLER2  ==================================================== */
/* ====================================================  GICD_ISENABLER3  ==================================================== */
/* ====================================================  GICD_ISENABLER4  ==================================================== */
/* ====================================================  GICD_ISENABLER5  ==================================================== */
/* ====================================================  GICD_ISENABLER6  ==================================================== */


/* =========================================================================================================================== */
/* ================                                      GICD_ICENABLER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ICENABLER0  ==================================================== */
/* ====================================================  GICD_ICENABLER1  ==================================================== */
/* ====================================================  GICD_ICENABLER2  ==================================================== */
/* ====================================================  GICD_ICENABLER3  ==================================================== */
/* ====================================================  GICD_ICENABLER4  ==================================================== */
/* ====================================================  GICD_ICENABLER5  ==================================================== */
/* ====================================================  GICD_ICENABLER6  ==================================================== */


/* =========================================================================================================================== */
/* ================                                       GICD_ISPENDR                                        ================ */
/* =========================================================================================================================== */

/* =====================================================  GICD_ISPENDR0  ===================================================== */
/* =====================================================  GICD_ISPENDR1  ===================================================== */
/* =====================================================  GICD_ISPENDR2  ===================================================== */
/* =====================================================  GICD_ISPENDR3  ===================================================== */
/* =====================================================  GICD_ISPENDR4  ===================================================== */
/* =====================================================  GICD_ISPENDR5  ===================================================== */
/* =====================================================  GICD_ISPENDR6  ===================================================== */


/* =========================================================================================================================== */
/* ================                                       GICD_ICPENDR                                        ================ */
/* =========================================================================================================================== */

/* =====================================================  GICD_ICPENDR0  ===================================================== */
/* =====================================================  GICD_ICPENDR1  ===================================================== */
/* =====================================================  GICD_ICPENDR2  ===================================================== */
/* =====================================================  GICD_ICPENDR3  ===================================================== */
/* =====================================================  GICD_ICPENDR4  ===================================================== */
/* =====================================================  GICD_ICPENDR5  ===================================================== */
/* =====================================================  GICD_ICPENDR6  ===================================================== */


/* =========================================================================================================================== */
/* ================                                      GICD_ISACTIVER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ISACTIVER0  ==================================================== */
/* ====================================================  GICD_ISACTIVER1  ==================================================== */
/* ====================================================  GICD_ISACTIVER2  ==================================================== */
/* ====================================================  GICD_ISACTIVER3  ==================================================== */
/* ====================================================  GICD_ISACTIVER4  ==================================================== */
/* ====================================================  GICD_ISACTIVER5  ==================================================== */
/* ====================================================  GICD_ISACTIVER6  ==================================================== */


/* =========================================================================================================================== */
/* ================                                      GICD_ICACTIVER                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ICACTIVER0  ==================================================== */
/* ====================================================  GICD_ICACTIVER1  ==================================================== */
/* ====================================================  GICD_ICACTIVER2  ==================================================== */
/* ====================================================  GICD_ICACTIVER3  ==================================================== */
/* ====================================================  GICD_ICACTIVER4  ==================================================== */
/* ====================================================  GICD_ICACTIVER5  ==================================================== */
/* ====================================================  GICD_ICACTIVER6  ==================================================== */


/* =========================================================================================================================== */
/* ================                                      GICD_IPRIORITYR                                      ================ */
/* =========================================================================================================================== */

/* ===================================================  GICD_IPRIORITYR0  ==================================================== */
/* ===================================================  GICD_IPRIORITYR1  ==================================================== */
/* ===================================================  GICD_IPRIORITYR2  ==================================================== */
/* ===================================================  GICD_IPRIORITYR3  ==================================================== */
/* ===================================================  GICD_IPRIORITYR4  ==================================================== */
/* ===================================================  GICD_IPRIORITYR5  ==================================================== */
/* ===================================================  GICD_IPRIORITYR6  ==================================================== */
/* ===================================================  GICD_IPRIORITYR7  ==================================================== */
/* ===================================================  GICD_IPRIORITYR8  ==================================================== */
/* ===================================================  GICD_IPRIORITYR9  ==================================================== */
/* ===================================================  GICD_IPRIORITYR10  =================================================== */
/* ===================================================  GICD_IPRIORITYR11  =================================================== */
/* ===================================================  GICD_IPRIORITYR12  =================================================== */
/* ===================================================  GICD_IPRIORITYR13  =================================================== */
/* ===================================================  GICD_IPRIORITYR14  =================================================== */
/* ===================================================  GICD_IPRIORITYR15  =================================================== */
/* ===================================================  GICD_IPRIORITYR16  =================================================== */
/* ===================================================  GICD_IPRIORITYR17  =================================================== */
/* ===================================================  GICD_IPRIORITYR18  =================================================== */
/* ===================================================  GICD_IPRIORITYR19  =================================================== */
/* ===================================================  GICD_IPRIORITYR20  =================================================== */
/* ===================================================  GICD_IPRIORITYR21  =================================================== */
/* ===================================================  GICD_IPRIORITYR22  =================================================== */
/* ===================================================  GICD_IPRIORITYR23  =================================================== */
/* ===================================================  GICD_IPRIORITYR24  =================================================== */
/* ===================================================  GICD_IPRIORITYR25  =================================================== */
/* ===================================================  GICD_IPRIORITYR26  =================================================== */
/* ===================================================  GICD_IPRIORITYR27  =================================================== */
/* ===================================================  GICD_IPRIORITYR28  =================================================== */
/* ===================================================  GICD_IPRIORITYR29  =================================================== */
/* ===================================================  GICD_IPRIORITYR30  =================================================== */
/* ===================================================  GICD_IPRIORITYR31  =================================================== */
/* ===================================================  GICD_IPRIORITYR32  =================================================== */
/* ===================================================  GICD_IPRIORITYR33  =================================================== */
/* ===================================================  GICD_IPRIORITYR34  =================================================== */
/* ===================================================  GICD_IPRIORITYR35  =================================================== */
/* ===================================================  GICD_IPRIORITYR36  =================================================== */
/* ===================================================  GICD_IPRIORITYR37  =================================================== */
/* ===================================================  GICD_IPRIORITYR38  =================================================== */
/* ===================================================  GICD_IPRIORITYR39  =================================================== */
/* ===================================================  GICD_IPRIORITYR40  =================================================== */
/* ===================================================  GICD_IPRIORITYR41  =================================================== */
/* ===================================================  GICD_IPRIORITYR42  =================================================== */
/* ===================================================  GICD_IPRIORITYR43  =================================================== */
/* ===================================================  GICD_IPRIORITYR44  =================================================== */
/* ===================================================  GICD_IPRIORITYR45  =================================================== */
/* ===================================================  GICD_IPRIORITYR46  =================================================== */
/* ===================================================  GICD_IPRIORITYR47  =================================================== */
/* ===================================================  GICD_IPRIORITYR48  =================================================== */
/* ===================================================  GICD_IPRIORITYR49  =================================================== */
/* ===================================================  GICD_IPRIORITYR50  =================================================== */
/* ===================================================  GICD_IPRIORITYR51  =================================================== */
/* ===================================================  GICD_IPRIORITYR52  =================================================== */
/* ===================================================  GICD_IPRIORITYR53  =================================================== */
/* ===================================================  GICD_IPRIORITYR54  =================================================== */
/* ===================================================  GICD_IPRIORITYR55  =================================================== */


/* =========================================================================================================================== */
/* ================                                      GICD_ITARGETSR                                       ================ */
/* =========================================================================================================================== */

/* ====================================================  GICD_ITARGETSR0  ==================================================== */
/* ====================================================  GICD_ITARGETSR1  ==================================================== */
/* ====================================================  GICD_ITARGETSR2  ==================================================== */
/* ====================================================  GICD_ITARGETSR3  ==================================================== */
/* ====================================================  GICD_ITARGETSR4  ==================================================== */
/* ====================================================  GICD_ITARGETSR5  ==================================================== */
/* ====================================================  GICD_ITARGETSR6  ==================================================== */
/* ====================================================  GICD_ITARGETSR7  ==================================================== */
/* ====================================================  GICD_ITARGETSR8  ==================================================== */
/* ====================================================  GICD_ITARGETSR9  ==================================================== */
/* ===================================================  GICD_ITARGETSR10  ==================================================== */
/* ===================================================  GICD_ITARGETSR11  ==================================================== */
/* ===================================================  GICD_ITARGETSR12  ==================================================== */
/* ===================================================  GICD_ITARGETSR13  ==================================================== */
/* ===================================================  GICD_ITARGETSR14  ==================================================== */
/* ===================================================  GICD_ITARGETSR15  ==================================================== */
/* ===================================================  GICD_ITARGETSR16  ==================================================== */
/* ===================================================  GICD_ITARGETSR17  ==================================================== */
/* ===================================================  GICD_ITARGETSR18  ==================================================== */
/* ===================================================  GICD_ITARGETSR19  ==================================================== */
/* ===================================================  GICD_ITARGETSR20  ==================================================== */
/* ===================================================  GICD_ITARGETSR21  ==================================================== */
/* ===================================================  GICD_ITARGETSR22  ==================================================== */
/* ===================================================  GICD_ITARGETSR23  ==================================================== */
/* ===================================================  GICD_ITARGETSR24  ==================================================== */
/* ===================================================  GICD_ITARGETSR25  ==================================================== */
/* ===================================================  GICD_ITARGETSR26  ==================================================== */
/* ===================================================  GICD_ITARGETSR27  ==================================================== */
/* ===================================================  GICD_ITARGETSR28  ==================================================== */
/* ===================================================  GICD_ITARGETSR29  ==================================================== */
/* ===================================================  GICD_ITARGETSR30  ==================================================== */
/* ===================================================  GICD_ITARGETSR31  ==================================================== */
/* ===================================================  GICD_ITARGETSR32  ==================================================== */
/* ===================================================  GICD_ITARGETSR33  ==================================================== */
/* ===================================================  GICD_ITARGETSR34  ==================================================== */
/* ===================================================  GICD_ITARGETSR35  ==================================================== */
/* ===================================================  GICD_ITARGETSR36  ==================================================== */
/* ===================================================  GICD_ITARGETSR37  ==================================================== */
/* ===================================================  GICD_ITARGETSR38  ==================================================== */
/* ===================================================  GICD_ITARGETSR39  ==================================================== */
/* ===================================================  GICD_ITARGETSR40  ==================================================== */
/* ===================================================  GICD_ITARGETSR41  ==================================================== */
/* ===================================================  GICD_ITARGETSR42  ==================================================== */
/* ===================================================  GICD_ITARGETSR43  ==================================================== */
/* ===================================================  GICD_ITARGETSR44  ==================================================== */
/* ===================================================  GICD_ITARGETSR45  ==================================================== */
/* ===================================================  GICD_ITARGETSR46  ==================================================== */
/* ===================================================  GICD_ITARGETSR47  ==================================================== */
/* ===================================================  GICD_ITARGETSR48  ==================================================== */
/* ===================================================  GICD_ITARGETSR49  ==================================================== */
/* ===================================================  GICD_ITARGETSR50  ==================================================== */
/* ===================================================  GICD_ITARGETSR51  ==================================================== */
/* ===================================================  GICD_ITARGETSR52  ==================================================== */
/* ===================================================  GICD_ITARGETSR53  ==================================================== */
/* ===================================================  GICD_ITARGETSR54  ==================================================== */
/* ===================================================  GICD_ITARGETSR55  ==================================================== */


/* =========================================================================================================================== */
/* ================                                        GICD_ICFGR                                         ================ */
/* =========================================================================================================================== */

/* ======================================================  GICD_ICFGR0  ====================================================== */
/* ==========================================  GICD_ICFGR GICD_ICFGR0 INT0 [1..1]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT0                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT0_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT0_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT0_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR0 INT1 [3..3]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT1                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT1_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT1_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT1_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR0 INT2 [5..5]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT2                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT2_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT2_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT2_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR0 INT3 [7..7]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT3                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT3_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT3_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT3_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR0 INT4 [9..9]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT4                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT4_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT4_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT4_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT5 [11..11]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT5                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT5_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT5_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT5_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT6 [13..13]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT6                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT6_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT6_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT6_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT7 [15..15]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT7                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT7_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT7_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT7_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT8 [17..17]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT8                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT8_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT8_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT8_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT9 [19..19]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT9                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT9_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT9_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT9_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT10 [21..21]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT10                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT10_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT10_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT10_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT11 [23..23]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT11                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT11_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT11_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT11_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT12 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT12                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT12_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT12_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT12_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT13 [27..27]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT13                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT13_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT13_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT13_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT14 [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT14                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT14_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT14_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT14_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR0 INT15 [31..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT15                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT15_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT15_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR0_INT15_Enum;

/* ======================================================  GICD_ICFGR4  ====================================================== */
/* ==========================================  GICD_ICFGR GICD_ICFGR4 INT16 [1..1]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT16                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT16_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT16_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT16_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR4 INT17 [3..3]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT17                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT17_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT17_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT17_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR4 INT18 [5..5]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT18                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT18_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT18_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT18_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR4 INT19 [7..7]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT19                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT19_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT19_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT19_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR4 INT20 [9..9]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT20                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT20_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT20_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT20_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT21 [11..11]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT21                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT21_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT21_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT21_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT22 [13..13]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT22                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT22_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT22_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT22_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT23 [15..15]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT23                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT23_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT23_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT23_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT24 [17..17]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT24                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT24_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT24_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT24_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT25 [19..19]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT25                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT25_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT25_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT25_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT26 [21..21]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT26                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT26_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT26_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT26_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT27 [23..23]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT27                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT27_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT27_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT27_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT28 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT28                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT28_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT28_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT28_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT29 [27..27]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT29                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT29_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT29_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT29_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT30 [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT30                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT30_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT30_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT30_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR4 INT31 [31..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT31                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT31_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT31_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR4_INT31_Enum;

/* ======================================================  GICD_ICFGR8  ====================================================== */
/* ==========================================  GICD_ICFGR GICD_ICFGR8 INT32 [1..1]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT32                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT32_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT32_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT32_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR8 INT33 [3..3]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT33                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT33_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT33_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT33_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR8 INT34 [5..5]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT34                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT34_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT34_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT34_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR8 INT35 [7..7]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT35                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT35_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT35_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT35_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR8 INT36 [9..9]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT36                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT36_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT36_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT36_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT37 [11..11]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT37                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT37_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT37_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT37_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT38 [13..13]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT38                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT38_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT38_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT38_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT39 [15..15]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT39                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT39_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT39_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT39_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT40 [17..17]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT40                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT40_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT40_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT40_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT41 [19..19]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT41                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT41_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT41_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT41_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT42 [21..21]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT42                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT42_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT42_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT42_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT43 [23..23]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT43                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT43_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT43_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT43_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT44 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT44                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT44_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT44_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT44_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT45 [27..27]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT45                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT45_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT45_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT45_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT46 [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT46                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT46_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT46_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT46_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR8 INT47 [31..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT47                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT47_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT47_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR8_INT47_Enum;

/* =====================================================  GICD_ICFGR12  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR12 INT48 [1..1]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT48                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT48_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT48_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT48_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR12 INT49 [3..3]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT49                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT49_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT49_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT49_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR12 INT50 [5..5]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT50                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT50_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT50_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT50_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR12 INT51 [7..7]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT51                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT51_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT51_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT51_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR12 INT52 [9..9]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT52                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT52_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT52_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT52_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT53 [11..11]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT53                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT53_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT53_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT53_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT54 [13..13]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT54                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT54_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT54_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT54_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT55 [15..15]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT55                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT55_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT55_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT55_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT56 [17..17]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT56                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT56_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT56_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT56_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT57 [19..19]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT57                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT57_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT57_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT57_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT58 [21..21]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT58                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT58_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT58_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT58_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT59 [23..23]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT59                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT59_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT59_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT59_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT60 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT60                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT60_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT60_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT60_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT61 [27..27]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT61                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT61_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT61_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT61_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT62 [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT62                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT62_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT62_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT62_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR12 INT63 [31..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT63                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT63_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT63_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR12_INT63_Enum;

/* =====================================================  GICD_ICFGR16  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR16 TIMER [1..1]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_TIMER                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_TIMER_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_TIMER_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_TIMER_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR16 MAILBOX [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_MAILBOX                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_MAILBOX_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_MAILBOX_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_MAILBOX_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR16 DOORBELL0 [5..5]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL0                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL0_LEVEL = 0,/*!< LEVEL : Level sensitive                                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL0_EDGE = 1,/*!< EDGE : Edge triggered                                               */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL0_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR16 DOORBELL1 [7..7]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL1                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL1_LEVEL = 0,/*!< LEVEL : Level sensitive                                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL1_EDGE = 1,/*!< EDGE : Edge triggered                                               */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_DOORBELL1_Enum;

/* ======================================  GICD_ICFGR GICD_ICFGR16 VPU0_HALTED [9..9]  ======================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU0_HALTED                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU0_HALTED_LEVEL = 0,/*!< LEVEL : Level sensitive                                          */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU0_HALTED_EDGE = 1,/*!< EDGE : Edge triggered                                             */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU0_HALTED_Enum;

/* =====================================  GICD_ICFGR GICD_ICFGR16 VPU1_HALTED [11..11]  ====================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU1_HALTED                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU1_HALTED_LEVEL = 0,/*!< LEVEL : Level sensitive                                          */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU1_HALTED_EDGE = 1,/*!< EDGE : Edge triggered                                             */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_VPU1_HALTED_Enum;

/* ==================================  GICD_ICFGR GICD_ICFGR16 ARM_ADDRESS_ERROR [13..13]  =================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_ADDRESS_ERROR                        */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_ADDRESS_ERROR_LEVEL = 0,/*!< LEVEL : Level sensitive                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_ADDRESS_ERROR_EDGE = 1,/*!< EDGE : Edge triggered                                       */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_ADDRESS_ERROR_Enum;

/* ====================================  GICD_ICFGR GICD_ICFGR16 ARM_AXI_ERROR [15..15]  ===================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_AXI_ERROR                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_AXI_ERROR_LEVEL = 0,/*!< LEVEL : Level sensitive                                        */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_AXI_ERROR_EDGE = 1,/*!< EDGE : Edge triggered                                           */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_ARM_AXI_ERROR_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI0 [17..17]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI0                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI0_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI0_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI0_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI1 [19..19]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI1                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI1_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI1_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI1_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI2 [21..21]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI2                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI2_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI2_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI2_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI3 [23..23]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI3                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI3_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI3_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI3_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI4 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI4                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI4_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI4_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI4_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI5 [27..27]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI5                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI5_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI5_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI5_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI6 [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI6                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI6_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI6_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI6_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR16 SWI7 [31..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI7                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI7_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI7_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR16_SWI7_Enum;

/* =====================================================  GICD_ICFGR20  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR20 INT80 [1..1]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT80                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT80_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT80_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT80_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR20 INT81 [3..3]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT81                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT81_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT81_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT81_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR20 INT82 [5..5]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT82                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT82_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT82_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT82_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR20 INT83 [7..7]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT83                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT83_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT83_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT83_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR20 INT84 [9..9]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT84                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT84_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT84_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT84_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT85 [11..11]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT85                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT85_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT85_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT85_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT86 [13..13]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT86                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT86_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT86_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT86_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT87 [15..15]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT87                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT87_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT87_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT87_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT88 [17..17]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT88                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT88_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT88_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT88_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT89 [19..19]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT89                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT89_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT89_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT89_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT90 [21..21]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT90                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT90_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT90_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT90_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT91 [23..23]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT91                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT91_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT91_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT91_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT92 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT92                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT92_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT92_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT92_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT93 [27..27]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT93                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT93_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT93_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT93_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT94 [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT94                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT94_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT94_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT94_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR20 INT95 [31..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT95                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT95_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT95_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR20_INT95_Enum;

/* =====================================================  GICD_ICFGR24  ====================================================== */
/* ========================================  GICD_ICFGR GICD_ICFGR24 TIMER_0 [1..1]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_0                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_0_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_0_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR24 TIMER_1 [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_1                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_1_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_1_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR24 TIMER_2 [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_2                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_2_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_2_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR24 TIMER_3 [7..7]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_3                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_3_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_3_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TIMER_3_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR24 H264_0 [9..9]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_0                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_0_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_0_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR24 H264_1 [11..11]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_1                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_1_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_1_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR24 H264_2 [13..13]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_2                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_2_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_H264_2_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR24 JPEG [15..15]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_JPEG                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_JPEG_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_JPEG_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_JPEG_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR24 ISP [17..17]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_ISP                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_ISP_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_ISP_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_ISP_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR24 USB [19..19]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_USB                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_USB_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_USB_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_USB_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR24 V3D [21..21]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_V3D                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_V3D_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_V3D_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_V3D_Enum;

/* ======================================  GICD_ICFGR GICD_ICFGR24 TRANSPOSER [23..23]  ====================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TRANSPOSER                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TRANSPOSER_LEVEL = 0,/*!< LEVEL : Level sensitive                                           */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TRANSPOSER_EDGE = 1,/*!< EDGE : Edge triggered                                              */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_TRANSPOSER_Enum;

/* ===================================  GICD_ICFGR GICD_ICFGR24 MULTICORE_SYNC_0 [25..25]  =================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_0                         */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_0_EDGE = 1,/*!< EDGE : Edge triggered                                        */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_0_Enum;

/* ===================================  GICD_ICFGR GICD_ICFGR24 MULTICORE_SYNC_1 [27..27]  =================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_1                         */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_1_EDGE = 1,/*!< EDGE : Edge triggered                                        */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_1_Enum;

/* ===================================  GICD_ICFGR GICD_ICFGR24 MULTICORE_SYNC_2 [29..29]  =================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_2                         */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_2_EDGE = 1,/*!< EDGE : Edge triggered                                        */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_2_Enum;

/* ===================================  GICD_ICFGR GICD_ICFGR24 MULTICORE_SYNC_3 [31..31]  =================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_3                         */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_3_LEVEL = 0,/*!< LEVEL : Level sensitive                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_3_EDGE = 1,/*!< EDGE : Edge triggered                                        */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR24_MULTICORE_SYNC_3_Enum;

/* =====================================================  GICD_ICFGR28  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR28 DMA_0 [1..1]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_0                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_0_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_0_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR28 DMA_1 [3..3]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_1                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_1_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_1_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR28 DMA_2 [5..5]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_2                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_2_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_2_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR28 DMA_3 [7..7]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_3                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_3_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_3_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_3_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR28 DMA_4 [9..9]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_4                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_4_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_4_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_4_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_5 [11..11]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_5                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_5_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_5_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_5_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_6 [13..13]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_6                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_6_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_6_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_6_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR28 DMA_7_8 [15..15]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_7_8                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_7_8_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_7_8_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_7_8_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR28 DMA_9_10 [17..17]  ======================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_9_10                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_9_10_LEVEL = 0,/*!< LEVEL : Level sensitive                                             */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_9_10_EDGE = 1,/*!< EDGE : Edge triggered                                                */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_9_10_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_11 [19..19]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_11                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_11_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_11_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_11_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_12 [21..21]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_12                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_12_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_12_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_12_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_13 [23..23]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_13                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_13_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_13_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_13_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_14 [25..25]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_14                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_14_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_14_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_14_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR28 AUX [27..27]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_AUX                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_AUX_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_AUX_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_AUX_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR28 ARM [29..29]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_ARM                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_ARM_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_ARM_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_ARM_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR28 DMA_15 [31..31]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_15                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_15_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_15_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR28_DMA_15_Enum;

/* =====================================================  GICD_ICFGR32  ====================================================== */
/* ========================================  GICD_ICFGR GICD_ICFGR32 HDMI_CEC [1..1]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_CEC                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_CEC_LEVEL = 0,/*!< LEVEL : Level sensitive                                             */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_CEC_EDGE = 1,/*!< EDGE : Edge triggered                                                */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_CEC_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR32 HVS [3..3]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HVS                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HVS_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HVS_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HVS_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR32 RPIVID [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_RPIVID                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_RPIVID_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_RPIVID_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_RPIVID_Enum;

/* ==========================================  GICD_ICFGR GICD_ICFGR32 SDC [7..7]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SDC                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SDC_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SDC_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SDC_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR32 DSI_0 [9..9]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_0                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_0_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_0_Enum;

/* ====================================  GICD_ICFGR GICD_ICFGR32 PIXEL_VALVE_2 [11..11]  ===================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_2                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                        */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_2_EDGE = 1,/*!< EDGE : Edge triggered                                           */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_2_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR32 CAMERA_0 [13..13]  ======================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_0                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                             */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_0_EDGE = 1,/*!< EDGE : Edge triggered                                                */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_0_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR32 CAMERA_1 [15..15]  ======================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_1                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                             */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_1_EDGE = 1,/*!< EDGE : Edge triggered                                                */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CAMERA_1_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR32 HDMI_0 [17..17]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_0                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_0_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_0_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR32 HDMI_1 [19..19]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_1                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_1_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_HDMI_1_Enum;

/* ====================================  GICD_ICFGR GICD_ICFGR32 PIXEL_VALVE_3 [21..21]  ===================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_3                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_3_LEVEL = 0,/*!< LEVEL : Level sensitive                                        */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_3_EDGE = 1,/*!< EDGE : Edge triggered                                           */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_3_Enum;

/* ====================================  GICD_ICFGR GICD_ICFGR32 SPI_BSC_SLAVE [23..23]  ===================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SPI_BSC_SLAVE                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SPI_BSC_SLAVE_LEVEL = 0,/*!< LEVEL : Level sensitive                                        */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SPI_BSC_SLAVE_EDGE = 1,/*!< EDGE : Edge triggered                                           */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_SPI_BSC_SLAVE_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR32 DSI_1 [25..25]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_1                                    */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                                */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_1_EDGE = 1,/*!< EDGE : Edge triggered                                                   */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_DSI_1_Enum;

/* ====================================  GICD_ICFGR GICD_ICFGR32 PIXEL_VALVE_0 [27..27]  ===================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_0                            */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                        */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_0_EDGE = 1,/*!< EDGE : Edge triggered                                           */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_0_Enum;

/* ===================================  GICD_ICFGR GICD_ICFGR32 PIXEL_VALVE_1_2 [29..29]  ==================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_1_2                          */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_1_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_1_2_EDGE = 1,/*!< EDGE : Edge triggered                                         */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_PIXEL_VALVE_1_2_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR32 CPR [31..31]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CPR                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CPR_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CPR_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR32_CPR_Enum;

/* =====================================================  GICD_ICFGR36  ====================================================== */
/* ==========================================  GICD_ICFGR GICD_ICFGR36 SMI [1..1]  =========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SMI                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SMI_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SMI_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SMI_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 GPIO_0 [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_0                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_0_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_0_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_0_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 GPIO_1 [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_1                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_1_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_1_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_1_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 GPIO_2 [7..7]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_2                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_2_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_2_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_2_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 GPIO_3 [9..9]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_3                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_3_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_3_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_GPIO_3_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 I2C [11..11]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_I2C                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_I2C_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_I2C_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_I2C_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 SPI [13..13]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SPI                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SPI_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SPI_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SPI_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR36 PCM_I2S [15..15]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_PCM_I2S                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_PCM_I2S_LEVEL = 0,/*!< LEVEL : Level sensitive                                              */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_PCM_I2S_EDGE = 1,/*!< EDGE : Edge triggered                                                 */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_PCM_I2S_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR36 SDHOST [17..17]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SDHOST                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SDHOST_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SDHOST_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_SDHOST_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 UART [19..19]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_UART                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_UART_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_UART_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_UART_Enum;

/* =======================================  GICD_ICFGR GICD_ICFGR36 ETH_PCIE [21..21]  ======================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_LEVEL = 0,/*!< LEVEL : Level sensitive                                             */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_EDGE = 1,/*!< EDGE : Edge triggered                                                */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 VEC [23..23]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_VEC                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_VEC_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_VEC_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_VEC_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 CPG [25..25]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_CPG                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_CPG_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_CPG_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_CPG_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 RNG [27..27]  ========================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_RNG                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_RNG_LEVEL = 0,/*!< LEVEL : Level sensitive                                                  */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_RNG_EDGE = 1,/*!< EDGE : Edge triggered                                                     */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_RNG_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR36 EMMC [29..29]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_EMMC                                     */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_EMMC_LEVEL = 0,/*!< LEVEL : Level sensitive                                                 */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_EMMC_EDGE = 1,/*!< EDGE : Edge triggered                                                    */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_EMMC_Enum;

/* ===================================  GICD_ICFGR GICD_ICFGR36 ETH_PCIE_SECURE [31..31]  ==================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_SECURE                          */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_SECURE_LEVEL = 0,/*!< LEVEL : Level sensitive                                      */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_SECURE_EDGE = 1,/*!< EDGE : Edge triggered                                         */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR36_ETH_PCIE_SECURE_Enum;

/* =====================================================  GICD_ICFGR40  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR40 INT160 [1..1]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT160                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT160_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT160_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT160_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR40 INT161 [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT161                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT161_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT161_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT161_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR40 INT162 [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT162                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT162_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT162_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT162_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR40 INT163 [7..7]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT163                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT163_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT163_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT163_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR40 INT164 [9..9]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT164                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT164_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT164_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT164_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT165 [11..11]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT165                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT165_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT165_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT165_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT166 [13..13]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT166                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT166_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT166_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT166_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT167 [15..15]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT167                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT167_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT167_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT167_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT168 [17..17]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT168                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT168_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT168_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT168_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT169 [19..19]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT169                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT169_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT169_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT169_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT170 [21..21]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT170                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT170_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT170_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT170_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT171 [23..23]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT171                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT171_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT171_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT171_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT172 [25..25]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT172                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT172_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT172_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT172_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT173 [27..27]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT173                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT173_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT173_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT173_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT174 [29..29]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT174                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT174_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT174_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT174_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR40 INT175 [31..31]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT175                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT175_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT175_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR40_INT175_Enum;

/* =====================================================  GICD_ICFGR44  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR44 INT176 [1..1]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT176                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT176_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT176_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT176_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR44 INT177 [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT177                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT177_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT177_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT177_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR44 INT178 [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT178                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT178_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT178_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT178_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR44 INT179 [7..7]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT179                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT179_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT179_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT179_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR44 INT180 [9..9]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT180                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT180_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT180_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT180_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT181 [11..11]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT181                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT181_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT181_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT181_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT182 [13..13]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT182                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT182_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT182_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT182_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT183 [15..15]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT183                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT183_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT183_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT183_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT184 [17..17]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT184                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT184_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT184_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT184_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT185 [19..19]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT185                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT185_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT185_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT185_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT186 [21..21]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT186                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT186_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT186_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT186_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT187 [23..23]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT187                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT187_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT187_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT187_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT188 [25..25]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT188                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT188_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT188_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT188_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT189 [27..27]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT189                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT189_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT189_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT189_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT190 [29..29]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT190                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT190_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT190_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT190_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR44 INT191 [31..31]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT191                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT191_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT191_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR44_INT191_Enum;

/* =====================================================  GICD_ICFGR48  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR48 INT192 [1..1]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT192                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT192_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT192_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT192_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR48 INT193 [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT193                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT193_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT193_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT193_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR48 INT194 [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT194                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT194_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT194_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT194_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR48 INT195 [7..7]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT195                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT195_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT195_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT195_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR48 INT196 [9..9]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT196                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT196_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT196_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT196_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT197 [11..11]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT197                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT197_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT197_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT197_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT198 [13..13]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT198                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT198_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT198_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT198_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT199 [15..15]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT199                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT199_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT199_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT199_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT200 [17..17]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT200                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT200_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT200_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT200_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT201 [19..19]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT201                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT201_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT201_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT201_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT202 [21..21]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT202                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT202_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT202_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT202_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT203 [23..23]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT203                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT203_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT203_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT203_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT204 [25..25]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT204                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT204_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT204_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT204_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT205 [27..27]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT205                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT205_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT205_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT205_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT206 [29..29]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT206                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT206_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT206_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT206_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR48 INT207 [31..31]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT207                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT207_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT207_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR48_INT207_Enum;

/* =====================================================  GICD_ICFGR52  ====================================================== */
/* =========================================  GICD_ICFGR GICD_ICFGR52 INT208 [1..1]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT208                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT208_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT208_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT208_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR52 INT209 [3..3]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT209                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT209_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT209_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT209_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR52 INT210 [5..5]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT210                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT210_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT210_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT210_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR52 INT211 [7..7]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT211                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT211_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT211_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT211_Enum;

/* =========================================  GICD_ICFGR GICD_ICFGR52 INT212 [9..9]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT212                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT212_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT212_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT212_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT213 [11..11]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT213                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT213_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT213_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT213_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT214 [13..13]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT214                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT214_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT214_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT214_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT215 [15..15]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT215                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT215_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT215_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT215_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT216 [17..17]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT216                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT216_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT216_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT216_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT217 [19..19]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT217                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT217_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT217_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT217_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT218 [21..21]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT218                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT218_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT218_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT218_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT219 [23..23]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT219                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT219_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT219_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT219_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT220 [25..25]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT220                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT220_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT220_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT220_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT221 [27..27]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT221                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT221_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT221_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT221_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT222 [29..29]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT222                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT222_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT222_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT222_Enum;

/* ========================================  GICD_ICFGR GICD_ICFGR52 INT223 [31..31]  ======================================== */
typedef enum {                                  /*!< GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT223                                   */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT223_LEVEL = 0,/*!< LEVEL : Level sensitive                                               */
  GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT223_EDGE = 1,/*!< EDGE : Edge triggered                                                  */
} GIC_DIST_GICD_ICFGR_GICD_ICFGR52_INT223_Enum;



/* =========================================================================================================================== */
/* ================                                       HOST_CHANNEL                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  HCCHAR  ========================================================= */
/* ========================================================  HCSPLT  ========================================================= */
/* =========================================================  HCINT  ========================================================= */
/* =======================================================  HCINTMSK  ======================================================== */
/* ========================================================  HCTSIZ  ========================================================= */
/* =========================================================  HCDMA  ========================================================= */


/* =========================================================================================================================== */
/* ================                                        IN_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* =======================================================  DIEPCTL0  ======================================================== */
/* ========================================================  DIEPINT  ======================================================== */
/* =======================================================  DIEPTSIZ  ======================================================== */
/* ========================================================  DIEPDMA  ======================================================== */
/* ========================================================  DTXFSTS  ======================================================== */


/* =========================================================================================================================== */
/* ================                                       OUT_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  DOEPCTL  ======================================================== */
/* ========================================================  DOEPINT  ======================================================== */
/* =======================================================  DOEPTSIZ  ======================================================== */
/* ========================================================  DOEPDMA  ======================================================== */

/** @} */ /* End of group EnumValue_clusters */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         VCMAILBOX                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  READ  ========================================================== */
/* =========================================================  PEEK0  ========================================================= */
/* ========================================================  SENDER0  ======================================================== */
/* ========================================================  STATUS0  ======================================================== */
/* ========================================================  CONFIG0  ======================================================== */
/* =========================================================  WRITE  ========================================================= */
/* =========================================================  PEEK1  ========================================================= */
/* ========================================================  SENDER1  ======================================================== */
/* ========================================================  STATUS1  ======================================================== */
/* ========================================================  CONFIG1  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          CM_PCM                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
/* ===============================================  CM_PCM CS PASSWD [24..31]  =============================================== */
typedef enum {                                  /*!< CM_PCM_CS_PASSWD                                                          */
  CM_PCM_CS_PASSWD_PASSWD              = 90,    /*!< PASSWD : PASSWD                                                           */
} CM_PCM_CS_PASSWD_Enum;

/* =================================================  CM_PCM CS SRC [0..3]  ================================================== */
typedef enum {                                  /*!< CM_PCM_CS_SRC                                                             */
  CM_PCM_CS_SRC_XOSC                   = 1,     /*!< XOSC : XOSC                                                               */
  CM_PCM_CS_SRC_TEST0                  = 2,     /*!< TEST0 : TEST0                                                             */
  CM_PCM_CS_SRC_TEST1                  = 3,     /*!< TEST1 : TEST1                                                             */
  CM_PCM_CS_SRC_PLLA                   = 4,     /*!< PLLA : PLLA                                                               */
  CM_PCM_CS_SRC_PLLB                   = 5,     /*!< PLLB : PLLB                                                               */
  CM_PCM_CS_SRC_PLLC                   = 6,     /*!< PLLC : PLLC                                                               */
  CM_PCM_CS_SRC_HDMI                   = 7,     /*!< HDMI : HDMI                                                               */
} CM_PCM_CS_SRC_Enum;

/* ==========================================================  DIV  ========================================================== */
/* ==============================================  CM_PCM DIV PASSWD [24..31]  =============================================== */
typedef enum {                                  /*!< CM_PCM_DIV_PASSWD                                                         */
  CM_PCM_DIV_PASSWD_PASSWD             = 90,    /*!< PASSWD : PASSWD                                                           */
} CM_PCM_DIV_PASSWD_Enum;



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  GPFSEL0  ======================================================== */
/* ===============================================  GPIO GPFSEL0 FSEL0 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL0                                                        */
  GPIO_GPFSEL0_FSEL0_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL0_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL0_SDA0              = 4,     /*!< SDA0 : Pin is connected to SDA0                                           */
  GPIO_GPFSEL0_FSEL0_SA5               = 5,     /*!< SA5 : Pin is connected to SA5                                             */
  GPIO_GPFSEL0_FSEL0_PCLK              = 6,     /*!< PCLK : Pin is connected to PCLK                                           */
  GPIO_GPFSEL0_FSEL0_SPI3_CE0_N        = 7,     /*!< SPI3_CE0_N : Pin is connected to SPI3_CE0_N                               */
  GPIO_GPFSEL0_FSEL0_TXD2              = 3,     /*!< TXD2 : Pin is connected to TXD2                                           */
  GPIO_GPFSEL0_FSEL0_SDA6              = 2,     /*!< SDA6 : Pin is connected to SDA6                                           */
} GPIO_GPFSEL0_FSEL0_Enum;

/* ===============================================  GPIO GPFSEL0 FSEL1 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL1                                                        */
  GPIO_GPFSEL0_FSEL1_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL1_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL1_SCL0              = 4,     /*!< SCL0 : Pin is connected to SCL0                                           */
  GPIO_GPFSEL0_FSEL1_SA4               = 5,     /*!< SA4 : Pin is connected to SA4                                             */
  GPIO_GPFSEL0_FSEL1_DE                = 6,     /*!< DE : Pin is connected to DE                                               */
  GPIO_GPFSEL0_FSEL1_SPI3_MISO         = 7,     /*!< SPI3_MISO : Pin is connected to SPI3_MISO                                 */
  GPIO_GPFSEL0_FSEL1_RXD2              = 3,     /*!< RXD2 : Pin is connected to RXD2                                           */
  GPIO_GPFSEL0_FSEL1_SCL6              = 2,     /*!< SCL6 : Pin is connected to SCL6                                           */
} GPIO_GPFSEL0_FSEL1_Enum;

/* ===============================================  GPIO GPFSEL0 FSEL2 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL2                                                        */
  GPIO_GPFSEL0_FSEL2_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL2_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL2_SDA1              = 4,     /*!< SDA1 : Pin is connected to SDA1                                           */
  GPIO_GPFSEL0_FSEL2_SA3               = 5,     /*!< SA3 : Pin is connected to SA3                                             */
  GPIO_GPFSEL0_FSEL2_LCD_VSYNC         = 6,     /*!< LCD_VSYNC : Pin is connected to LCD_VSYNC                                 */
  GPIO_GPFSEL0_FSEL2_SPI3_MOSI         = 7,     /*!< SPI3_MOSI : Pin is connected to SPI3_MOSI                                 */
  GPIO_GPFSEL0_FSEL2_CTS2              = 3,     /*!< CTS2 : Pin is connected to CTS2                                           */
  GPIO_GPFSEL0_FSEL2_SDA3              = 2,     /*!< SDA3 : Pin is connected to SDA3                                           */
} GPIO_GPFSEL0_FSEL2_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL3 [9..11]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL3                                                        */
  GPIO_GPFSEL0_FSEL3_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL3_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL3_SCL1              = 4,     /*!< SCL1 : Pin is connected to SCL1                                           */
  GPIO_GPFSEL0_FSEL3_SA2               = 5,     /*!< SA2 : Pin is connected to SA2                                             */
  GPIO_GPFSEL0_FSEL3_LCD_HSYNC         = 6,     /*!< LCD_HSYNC : Pin is connected to LCD_HSYNC                                 */
  GPIO_GPFSEL0_FSEL3_SPI3_SCLK         = 7,     /*!< SPI3_SCLK : Pin is connected to SPI3_SCLK                                 */
  GPIO_GPFSEL0_FSEL3_RTS2              = 3,     /*!< RTS2 : Pin is connected to RTS2                                           */
  GPIO_GPFSEL0_FSEL3_SCL3              = 2,     /*!< SCL3 : Pin is connected to SCL3                                           */
} GPIO_GPFSEL0_FSEL3_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL4 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL4                                                        */
  GPIO_GPFSEL0_FSEL4_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL4_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL4_GPCLK0            = 4,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
  GPIO_GPFSEL0_FSEL4_SA1               = 5,     /*!< SA1 : Pin is connected to SA1                                             */
  GPIO_GPFSEL0_FSEL4_DPI_D0            = 6,     /*!< DPI_D0 : Pin is connected to DPI_D0                                       */
  GPIO_GPFSEL0_FSEL4_SPI4_CE0_N        = 7,     /*!< SPI4_CE0_N : Pin is connected to SPI4_CE0_N                               */
  GPIO_GPFSEL0_FSEL4_TXD3              = 3,     /*!< TXD3 : Pin is connected to TXD3                                           */
  GPIO_GPFSEL0_FSEL4_SDA3              = 2,     /*!< SDA3 : Pin is connected to SDA3                                           */
} GPIO_GPFSEL0_FSEL4_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL5 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL5                                                        */
  GPIO_GPFSEL0_FSEL5_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL5_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL5_GPCLK1            = 4,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
  GPIO_GPFSEL0_FSEL5_SA0               = 5,     /*!< SA0 : Pin is connected to SA0                                             */
  GPIO_GPFSEL0_FSEL5_DPI_D1            = 6,     /*!< DPI_D1 : Pin is connected to DPI_D1                                       */
  GPIO_GPFSEL0_FSEL5_SPI4_MISO         = 7,     /*!< SPI4_MISO : Pin is connected to SPI4_MISO                                 */
  GPIO_GPFSEL0_FSEL5_RXD3              = 3,     /*!< RXD3 : Pin is connected to RXD3                                           */
  GPIO_GPFSEL0_FSEL5_SCL3              = 2,     /*!< SCL3 : Pin is connected to SCL3                                           */
} GPIO_GPFSEL0_FSEL5_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL6 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL6                                                        */
  GPIO_GPFSEL0_FSEL6_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL6_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL6_GPCLK2            = 4,     /*!< GPCLK2 : Pin is connected to GPCLK2                                       */
  GPIO_GPFSEL0_FSEL6_SOE_N             = 5,     /*!< SOE_N : Pin is connected to SOE_N                                         */
  GPIO_GPFSEL0_FSEL6_DPI_D2            = 6,     /*!< DPI_D2 : Pin is connected to DPI_D2                                       */
  GPIO_GPFSEL0_FSEL6_SPI4_MOSI         = 7,     /*!< SPI4_MOSI : Pin is connected to SPI4_MOSI                                 */
  GPIO_GPFSEL0_FSEL6_CTS3              = 3,     /*!< CTS3 : Pin is connected to CTS3                                           */
  GPIO_GPFSEL0_FSEL6_SDA4              = 2,     /*!< SDA4 : Pin is connected to SDA4                                           */
} GPIO_GPFSEL0_FSEL6_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL7 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL7                                                        */
  GPIO_GPFSEL0_FSEL7_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL7_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL7_SPI0_CE1_N        = 4,     /*!< SPI0_CE1_N : Pin is connected to SPI0_CE1_N                               */
  GPIO_GPFSEL0_FSEL7_SWE_N             = 5,     /*!< SWE_N : Pin is connected to SWE_N                                         */
  GPIO_GPFSEL0_FSEL7_DPI_D3            = 6,     /*!< DPI_D3 : Pin is connected to DPI_D3                                       */
  GPIO_GPFSEL0_FSEL7_SPI4_SCLK         = 7,     /*!< SPI4_SCLK : Pin is connected to SPI4_SCLK                                 */
  GPIO_GPFSEL0_FSEL7_RTS3              = 3,     /*!< RTS3 : Pin is connected to RTS3                                           */
  GPIO_GPFSEL0_FSEL7_SCL4              = 2,     /*!< SCL4 : Pin is connected to SCL4                                           */
} GPIO_GPFSEL0_FSEL7_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL8 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL8                                                        */
  GPIO_GPFSEL0_FSEL8_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL8_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL8_SPI0_CE0_N        = 4,     /*!< SPI0_CE0_N : Pin is connected to SPI0_CE0_N                               */
  GPIO_GPFSEL0_FSEL8_SD0               = 5,     /*!< SD0 : Pin is connected to SD0                                             */
  GPIO_GPFSEL0_FSEL8_DPI_D4            = 6,     /*!< DPI_D4 : Pin is connected to DPI_D4                                       */
  GPIO_GPFSEL0_FSEL8_BSCSL_CE_N        = 7,     /*!< BSCSL_CE_N : Pin is connected to BSCSL_CE_N                               */
  GPIO_GPFSEL0_FSEL8_TXD4              = 3,     /*!< TXD4 : Pin is connected to TXD4                                           */
  GPIO_GPFSEL0_FSEL8_SDA4              = 2,     /*!< SDA4 : Pin is connected to SDA4                                           */
} GPIO_GPFSEL0_FSEL8_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL9 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL9                                                        */
  GPIO_GPFSEL0_FSEL9_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL9_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL9_SPI0_MISO         = 4,     /*!< SPI0_MISO : Pin is connected to SPI0_MISO                                 */
  GPIO_GPFSEL0_FSEL9_SD1               = 5,     /*!< SD1 : Pin is connected to SD1                                             */
  GPIO_GPFSEL0_FSEL9_DPI_D5            = 6,     /*!< DPI_D5 : Pin is connected to DPI_D5                                       */
  GPIO_GPFSEL0_FSEL9_BSCSL_MISO        = 7,     /*!< BSCSL_MISO : Pin is connected to BSCSL_MISO                               */
  GPIO_GPFSEL0_FSEL9_RXD4              = 3,     /*!< RXD4 : Pin is connected to RXD4                                           */
  GPIO_GPFSEL0_FSEL9_SCL4              = 2,     /*!< SCL4 : Pin is connected to SCL4                                           */
} GPIO_GPFSEL0_FSEL9_Enum;

/* ========================================================  GPFSEL1  ======================================================== */
/* ==============================================  GPIO GPFSEL1 FSEL10 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL10                                                       */
  GPIO_GPFSEL1_FSEL10_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL10_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL10_SPI0_MOSI        = 4,     /*!< SPI0_MOSI : Pin is connected to SPI0_MOSI                                 */
  GPIO_GPFSEL1_FSEL10_SD2              = 5,     /*!< SD2 : Pin is connected to SD2                                             */
  GPIO_GPFSEL1_FSEL10_DPI_D6           = 6,     /*!< DPI_D6 : Pin is connected to DPI_D6                                       */
  GPIO_GPFSEL1_FSEL10_BSCSL_MOSI       = 7,     /*!< BSCSL_MOSI : Pin is connected to BSCSL_MOSI                               */
  GPIO_GPFSEL1_FSEL10_CTS4             = 3,     /*!< CTS4 : Pin is connected to CTS4                                           */
  GPIO_GPFSEL1_FSEL10_SDA5             = 2,     /*!< SDA5 : Pin is connected to SDA5                                           */
} GPIO_GPFSEL1_FSEL10_Enum;

/* ==============================================  GPIO GPFSEL1 FSEL11 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL11                                                       */
  GPIO_GPFSEL1_FSEL11_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL11_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL11_SPI0_SCLK        = 4,     /*!< SPI0_SCLK : Pin is connected to SPI0_SCLK                                 */
  GPIO_GPFSEL1_FSEL11_SD3              = 5,     /*!< SD3 : Pin is connected to SD3                                             */
  GPIO_GPFSEL1_FSEL11_DPI_D7           = 6,     /*!< DPI_D7 : Pin is connected to DPI_D7                                       */
  GPIO_GPFSEL1_FSEL11_BSCSL_SCLK       = 7,     /*!< BSCSL_SCLK : Pin is connected to BSCSL_SCLK                               */
  GPIO_GPFSEL1_FSEL11_RTS4             = 3,     /*!< RTS4 : Pin is connected to RTS4                                           */
  GPIO_GPFSEL1_FSEL11_SCL5             = 2,     /*!< SCL5 : Pin is connected to SCL5                                           */
} GPIO_GPFSEL1_FSEL11_Enum;

/* ==============================================  GPIO GPFSEL1 FSEL12 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL12                                                       */
  GPIO_GPFSEL1_FSEL12_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL12_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL12_PWM0_0           = 4,     /*!< PWM0_0 : Pin is connected to PWM0_0                                       */
  GPIO_GPFSEL1_FSEL12_SD4              = 5,     /*!< SD4 : Pin is connected to SD4                                             */
  GPIO_GPFSEL1_FSEL12_DPI_D8           = 6,     /*!< DPI_D8 : Pin is connected to DPI_D8                                       */
  GPIO_GPFSEL1_FSEL12_SPI5_CE0_N       = 7,     /*!< SPI5_CE0_N : Pin is connected to SPI5_CE0_N                               */
  GPIO_GPFSEL1_FSEL12_TXD5             = 3,     /*!< TXD5 : Pin is connected to TXD5                                           */
  GPIO_GPFSEL1_FSEL12_SDA5             = 2,     /*!< SDA5 : Pin is connected to SDA5                                           */
} GPIO_GPFSEL1_FSEL12_Enum;

/* ==============================================  GPIO GPFSEL1 FSEL13 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL13                                                       */
  GPIO_GPFSEL1_FSEL13_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL13_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL13_PWM0_1           = 4,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
  GPIO_GPFSEL1_FSEL13_SD5              = 5,     /*!< SD5 : Pin is connected to SD5                                             */
  GPIO_GPFSEL1_FSEL13_DPI_D9           = 6,     /*!< DPI_D9 : Pin is connected to DPI_D9                                       */
  GPIO_GPFSEL1_FSEL13_SPI5_MISO        = 7,     /*!< SPI5_MISO : Pin is connected to SPI5_MISO                                 */
  GPIO_GPFSEL1_FSEL13_RXD5             = 3,     /*!< RXD5 : Pin is connected to RXD5                                           */
  GPIO_GPFSEL1_FSEL13_SCL5             = 2,     /*!< SCL5 : Pin is connected to SCL5                                           */
} GPIO_GPFSEL1_FSEL13_Enum;

/* =============================================  GPIO GPFSEL1 FSEL14 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL14                                                       */
  GPIO_GPFSEL1_FSEL14_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL14_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL14_TXD0             = 4,     /*!< TXD0 : Pin is connected to TXD0                                           */
  GPIO_GPFSEL1_FSEL14_SD6              = 5,     /*!< SD6 : Pin is connected to SD6                                             */
  GPIO_GPFSEL1_FSEL14_DPI_D10          = 6,     /*!< DPI_D10 : Pin is connected to DPI_D10                                     */
  GPIO_GPFSEL1_FSEL14_SPI5_MOSI        = 7,     /*!< SPI5_MOSI : Pin is connected to SPI5_MOSI                                 */
  GPIO_GPFSEL1_FSEL14_CTS5             = 3,     /*!< CTS5 : Pin is connected to CTS5                                           */
  GPIO_GPFSEL1_FSEL14_TXD1             = 2,     /*!< TXD1 : Pin is connected to TXD1                                           */
} GPIO_GPFSEL1_FSEL14_Enum;

/* =============================================  GPIO GPFSEL1 FSEL15 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL15                                                       */
  GPIO_GPFSEL1_FSEL15_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL15_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL15_RXD0             = 4,     /*!< RXD0 : Pin is connected to RXD0                                           */
  GPIO_GPFSEL1_FSEL15_SD7              = 5,     /*!< SD7 : Pin is connected to SD7                                             */
  GPIO_GPFSEL1_FSEL15_DPI_D11          = 6,     /*!< DPI_D11 : Pin is connected to DPI_D11                                     */
  GPIO_GPFSEL1_FSEL15_SPI5_SCLK        = 7,     /*!< SPI5_SCLK : Pin is connected to SPI5_SCLK                                 */
  GPIO_GPFSEL1_FSEL15_RTS5             = 3,     /*!< RTS5 : Pin is connected to RTS5                                           */
  GPIO_GPFSEL1_FSEL15_RXD1             = 2,     /*!< RXD1 : Pin is connected to RXD1                                           */
} GPIO_GPFSEL1_FSEL15_Enum;

/* =============================================  GPIO GPFSEL1 FSEL16 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL16                                                       */
  GPIO_GPFSEL1_FSEL16_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL16_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL16_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL1_FSEL16_SD8              = 5,     /*!< SD8 : Pin is connected to SD8                                             */
  GPIO_GPFSEL1_FSEL16_DPI_D12          = 6,     /*!< DPI_D12 : Pin is connected to DPI_D12                                     */
  GPIO_GPFSEL1_FSEL16_CTS0             = 7,     /*!< CTS0 : Pin is connected to CTS0                                           */
  GPIO_GPFSEL1_FSEL16_SPI1_CE2_N       = 3,     /*!< SPI1_CE2_N : Pin is connected to SPI1_CE2_N                               */
  GPIO_GPFSEL1_FSEL16_CTS1             = 2,     /*!< CTS1 : Pin is connected to CTS1                                           */
} GPIO_GPFSEL1_FSEL16_Enum;

/* =============================================  GPIO GPFSEL1 FSEL17 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL17                                                       */
  GPIO_GPFSEL1_FSEL17_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL17_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL17_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL1_FSEL17_SD9              = 5,     /*!< SD9 : Pin is connected to SD9                                             */
  GPIO_GPFSEL1_FSEL17_DPI_D13          = 6,     /*!< DPI_D13 : Pin is connected to DPI_D13                                     */
  GPIO_GPFSEL1_FSEL17_RTS0             = 7,     /*!< RTS0 : Pin is connected to RTS0                                           */
  GPIO_GPFSEL1_FSEL17_SPI1_CE1_N       = 3,     /*!< SPI1_CE1_N : Pin is connected to SPI1_CE1_N                               */
  GPIO_GPFSEL1_FSEL17_RTS1             = 2,     /*!< RTS1 : Pin is connected to RTS1                                           */
} GPIO_GPFSEL1_FSEL17_Enum;

/* =============================================  GPIO GPFSEL1 FSEL18 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL18                                                       */
  GPIO_GPFSEL1_FSEL18_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL18_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL18_PCM_CLK          = 4,     /*!< PCM_CLK : Pin is connected to PCM_CLK                                     */
  GPIO_GPFSEL1_FSEL18_SD10             = 5,     /*!< SD10 : Pin is connected to SD10                                           */
  GPIO_GPFSEL1_FSEL18_DPI_D14          = 6,     /*!< DPI_D14 : Pin is connected to DPI_D14                                     */
  GPIO_GPFSEL1_FSEL18_SPI6_CE0_N       = 7,     /*!< SPI6_CE0_N : Pin is connected to SPI6_CE0_N                               */
  GPIO_GPFSEL1_FSEL18_SPI1_CE0_N       = 3,     /*!< SPI1_CE0_N : Pin is connected to SPI1_CE0_N                               */
  GPIO_GPFSEL1_FSEL18_PWM0_0           = 2,     /*!< PWM0_0 : Pin is connected to PWM0_0                                       */
} GPIO_GPFSEL1_FSEL18_Enum;

/* =============================================  GPIO GPFSEL1 FSEL19 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL19                                                       */
  GPIO_GPFSEL1_FSEL19_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL19_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL19_PCM_FS           = 4,     /*!< PCM_FS : Pin is connected to PCM_FS                                       */
  GPIO_GPFSEL1_FSEL19_SD11             = 5,     /*!< SD11 : Pin is connected to SD11                                           */
  GPIO_GPFSEL1_FSEL19_DPI_D15          = 6,     /*!< DPI_D15 : Pin is connected to DPI_D15                                     */
  GPIO_GPFSEL1_FSEL19_SPI6_MISO        = 7,     /*!< SPI6_MISO : Pin is connected to SPI6_MISO                                 */
  GPIO_GPFSEL1_FSEL19_SPI1_MISO        = 3,     /*!< SPI1_MISO : Pin is connected to SPI1_MISO                                 */
  GPIO_GPFSEL1_FSEL19_PWM0_1           = 2,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
} GPIO_GPFSEL1_FSEL19_Enum;

/* ========================================================  GPFSEL2  ======================================================== */
/* ==============================================  GPIO GPFSEL2 FSEL20 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL20                                                       */
  GPIO_GPFSEL2_FSEL20_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL20_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL20_PCM_DIN          = 4,     /*!< PCM_DIN : Pin is connected to PCM_DIN                                     */
  GPIO_GPFSEL2_FSEL20_SD12             = 5,     /*!< SD12 : Pin is connected to SD12                                           */
  GPIO_GPFSEL2_FSEL20_DPI_D16          = 6,     /*!< DPI_D16 : Pin is connected to DPI_D16                                     */
  GPIO_GPFSEL2_FSEL20_SPI6_MOSI        = 7,     /*!< SPI6_MOSI : Pin is connected to SPI6_MOSI                                 */
  GPIO_GPFSEL2_FSEL20_SPI1_MOSI        = 3,     /*!< SPI1_MOSI : Pin is connected to SPI1_MOSI                                 */
  GPIO_GPFSEL2_FSEL20_GPCLK0           = 2,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
} GPIO_GPFSEL2_FSEL20_Enum;

/* ==============================================  GPIO GPFSEL2 FSEL21 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL21                                                       */
  GPIO_GPFSEL2_FSEL21_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL21_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL21_PCM_DOUT         = 4,     /*!< PCM_DOUT : Pin is connected to PCM_DOUT                                   */
  GPIO_GPFSEL2_FSEL21_SD13             = 5,     /*!< SD13 : Pin is connected to SD13                                           */
  GPIO_GPFSEL2_FSEL21_DPI_D17          = 6,     /*!< DPI_D17 : Pin is connected to DPI_D17                                     */
  GPIO_GPFSEL2_FSEL21_SPI6_SCLK        = 7,     /*!< SPI6_SCLK : Pin is connected to SPI6_SCLK                                 */
  GPIO_GPFSEL2_FSEL21_SPI1_SCLK        = 3,     /*!< SPI1_SCLK : Pin is connected to SPI1_SCLK                                 */
  GPIO_GPFSEL2_FSEL21_GPCLK1           = 2,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
} GPIO_GPFSEL2_FSEL21_Enum;

/* ==============================================  GPIO GPFSEL2 FSEL22 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL22                                                       */
  GPIO_GPFSEL2_FSEL22_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL22_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL22_SD0_CLK          = 4,     /*!< SD0_CLK : Pin is connected to SD0_CLK                                     */
  GPIO_GPFSEL2_FSEL22_SD14             = 5,     /*!< SD14 : Pin is connected to SD14                                           */
  GPIO_GPFSEL2_FSEL22_DPI_D18          = 6,     /*!< DPI_D18 : Pin is connected to DPI_D18                                     */
  GPIO_GPFSEL2_FSEL22_SD1_CLK          = 7,     /*!< SD1_CLK : Pin is connected to SD1_CLK                                     */
  GPIO_GPFSEL2_FSEL22_ARM_TRST         = 3,     /*!< ARM_TRST : Pin is connected to ARM_TRST                                   */
  GPIO_GPFSEL2_FSEL22_SDA6             = 2,     /*!< SDA6 : Pin is connected to SDA6                                           */
} GPIO_GPFSEL2_FSEL22_Enum;

/* ==============================================  GPIO GPFSEL2 FSEL23 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL23                                                       */
  GPIO_GPFSEL2_FSEL23_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL23_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL23_SD0_CMD          = 4,     /*!< SD0_CMD : Pin is connected to SD0_CMD                                     */
  GPIO_GPFSEL2_FSEL23_SD15             = 5,     /*!< SD15 : Pin is connected to SD15                                           */
  GPIO_GPFSEL2_FSEL23_DPI_D19          = 6,     /*!< DPI_D19 : Pin is connected to DPI_D19                                     */
  GPIO_GPFSEL2_FSEL23_SD1_CMD          = 7,     /*!< SD1_CMD : Pin is connected to SD1_CMD                                     */
  GPIO_GPFSEL2_FSEL23_ARM_RTCK         = 3,     /*!< ARM_RTCK : Pin is connected to ARM_RTCK                                   */
  GPIO_GPFSEL2_FSEL23_SCL6             = 2,     /*!< SCL6 : Pin is connected to SCL6                                           */
} GPIO_GPFSEL2_FSEL23_Enum;

/* =============================================  GPIO GPFSEL2 FSEL24 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL24                                                       */
  GPIO_GPFSEL2_FSEL24_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL24_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL24_SD0_DAT0         = 4,     /*!< SD0_DAT0 : Pin is connected to SD0_DAT0                                   */
  GPIO_GPFSEL2_FSEL24_SD16             = 5,     /*!< SD16 : Pin is connected to SD16                                           */
  GPIO_GPFSEL2_FSEL24_DPI_D20          = 6,     /*!< DPI_D20 : Pin is connected to DPI_D20                                     */
  GPIO_GPFSEL2_FSEL24_SD1_DAT0         = 7,     /*!< SD1_DAT0 : Pin is connected to SD1_DAT0                                   */
  GPIO_GPFSEL2_FSEL24_ARM_TDO          = 3,     /*!< ARM_TDO : Pin is connected to ARM_TDO                                     */
  GPIO_GPFSEL2_FSEL24_SPI3_CE1_N       = 2,     /*!< SPI3_CE1_N : Pin is connected to SPI3_CE1_N                               */
} GPIO_GPFSEL2_FSEL24_Enum;

/* =============================================  GPIO GPFSEL2 FSEL25 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL25                                                       */
  GPIO_GPFSEL2_FSEL25_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL25_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL25_SD0_DAT1         = 4,     /*!< SD0_DAT1 : Pin is connected to SD0_DAT1                                   */
  GPIO_GPFSEL2_FSEL25_SD17             = 5,     /*!< SD17 : Pin is connected to SD17                                           */
  GPIO_GPFSEL2_FSEL25_DPI_D21          = 6,     /*!< DPI_D21 : Pin is connected to DPI_D21                                     */
  GPIO_GPFSEL2_FSEL25_SD1_DAT1         = 7,     /*!< SD1_DAT1 : Pin is connected to SD1_DAT1                                   */
  GPIO_GPFSEL2_FSEL25_ARM_TCK          = 3,     /*!< ARM_TCK : Pin is connected to ARM_TCK                                     */
  GPIO_GPFSEL2_FSEL25_SPI4_CE1_N       = 2,     /*!< SPI4_CE1_N : Pin is connected to SPI4_CE1_N                               */
} GPIO_GPFSEL2_FSEL25_Enum;

/* =============================================  GPIO GPFSEL2 FSEL26 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL26                                                       */
  GPIO_GPFSEL2_FSEL26_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL26_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL26_SD0_DAT2         = 4,     /*!< SD0_DAT2 : Pin is connected to SD0_DAT2                                   */
  GPIO_GPFSEL2_FSEL26_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL2_FSEL26_DPI_D22          = 6,     /*!< DPI_D22 : Pin is connected to DPI_D22                                     */
  GPIO_GPFSEL2_FSEL26_SD1_DAT2         = 7,     /*!< SD1_DAT2 : Pin is connected to SD1_DAT2                                   */
  GPIO_GPFSEL2_FSEL26_ARM_TDI          = 3,     /*!< ARM_TDI : Pin is connected to ARM_TDI                                     */
  GPIO_GPFSEL2_FSEL26_SPI5_CE1_N       = 2,     /*!< SPI5_CE1_N : Pin is connected to SPI5_CE1_N                               */
} GPIO_GPFSEL2_FSEL26_Enum;

/* =============================================  GPIO GPFSEL2 FSEL27 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL27                                                       */
  GPIO_GPFSEL2_FSEL27_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL27_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL27_SD0_DAT3         = 4,     /*!< SD0_DAT3 : Pin is connected to SD0_DAT3                                   */
  GPIO_GPFSEL2_FSEL27_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL2_FSEL27_DPI_D23          = 6,     /*!< DPI_D23 : Pin is connected to DPI_D23                                     */
  GPIO_GPFSEL2_FSEL27_SD1_DAT3         = 7,     /*!< SD1_DAT3 : Pin is connected to SD1_DAT3                                   */
  GPIO_GPFSEL2_FSEL27_ARM_TMS          = 3,     /*!< ARM_TMS : Pin is connected to ARM_TMS                                     */
  GPIO_GPFSEL2_FSEL27_SPI6_CE1_N       = 2,     /*!< SPI6_CE1_N : Pin is connected to SPI6_CE1_N                               */
} GPIO_GPFSEL2_FSEL27_Enum;

/* =============================================  GPIO GPFSEL2 FSEL28 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL28                                                       */
  GPIO_GPFSEL2_FSEL28_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL28_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL28_SDA0             = 4,     /*!< SDA0 : Pin is connected to SDA0                                           */
  GPIO_GPFSEL2_FSEL28_SA5              = 5,     /*!< SA5 : Pin is connected to SA5                                             */
  GPIO_GPFSEL2_FSEL28_PCM_CLK          = 6,     /*!< PCM_CLK : Pin is connected to PCM_CLK                                     */
  GPIO_GPFSEL2_FSEL28_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL2_FSEL28_MII_A_RX_ERR     = 3,     /*!< MII_A_RX_ERR : Pin is connected to MII_A_RX_ERR                           */
  GPIO_GPFSEL2_FSEL28_RGMII_MDIO       = 2,     /*!< RGMII_MDIO : Pin is connected to RGMII_MDIO                               */
} GPIO_GPFSEL2_FSEL28_Enum;

/* =============================================  GPIO GPFSEL2 FSEL29 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL29                                                       */
  GPIO_GPFSEL2_FSEL29_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL29_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL29_SCL0             = 4,     /*!< SCL0 : Pin is connected to SCL0                                           */
  GPIO_GPFSEL2_FSEL29_SA4              = 5,     /*!< SA4 : Pin is connected to SA4                                             */
  GPIO_GPFSEL2_FSEL29_PCM_FS           = 6,     /*!< PCM_FS : Pin is connected to PCM_FS                                       */
  GPIO_GPFSEL2_FSEL29_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL2_FSEL29_MII_A_TX_ERR     = 3,     /*!< MII_A_TX_ERR : Pin is connected to MII_A_TX_ERR                           */
  GPIO_GPFSEL2_FSEL29_RGMII_MDC        = 2,     /*!< RGMII_MDC : Pin is connected to RGMII_MDC                                 */
} GPIO_GPFSEL2_FSEL29_Enum;

/* ========================================================  GPFSEL3  ======================================================== */
/* ==============================================  GPIO GPFSEL3 FSEL30 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL30                                                       */
  GPIO_GPFSEL3_FSEL30_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL30_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL30_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL3_FSEL30_SA3              = 5,     /*!< SA3 : Pin is connected to SA3                                             */
  GPIO_GPFSEL3_FSEL30_PCM_DIN          = 6,     /*!< PCM_DIN : Pin is connected to PCM_DIN                                     */
  GPIO_GPFSEL3_FSEL30_CTS0             = 7,     /*!< CTS0 : Pin is connected to CTS0                                           */
  GPIO_GPFSEL3_FSEL30_MII_A_CRS        = 3,     /*!< MII_A_CRS : Pin is connected to MII_A_CRS                                 */
  GPIO_GPFSEL3_FSEL30_CTS1             = 2,     /*!< CTS1 : Pin is connected to CTS1                                           */
} GPIO_GPFSEL3_FSEL30_Enum;

/* ==============================================  GPIO GPFSEL3 FSEL31 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL31                                                       */
  GPIO_GPFSEL3_FSEL31_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL31_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL31_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL3_FSEL31_SA2              = 5,     /*!< SA2 : Pin is connected to SA2                                             */
  GPIO_GPFSEL3_FSEL31_PCM_DOUT         = 6,     /*!< PCM_DOUT : Pin is connected to PCM_DOUT                                   */
  GPIO_GPFSEL3_FSEL31_RTS0             = 7,     /*!< RTS0 : Pin is connected to RTS0                                           */
  GPIO_GPFSEL3_FSEL31_MII_A_COL        = 3,     /*!< MII_A_COL : Pin is connected to MII_A_COL                                 */
  GPIO_GPFSEL3_FSEL31_RTS1             = 2,     /*!< RTS1 : Pin is connected to RTS1                                           */
} GPIO_GPFSEL3_FSEL31_Enum;

/* ==============================================  GPIO GPFSEL3 FSEL32 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL32                                                       */
  GPIO_GPFSEL3_FSEL32_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL32_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL32_GPCLK0           = 4,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
  GPIO_GPFSEL3_FSEL32_SA1              = 5,     /*!< SA1 : Pin is connected to SA1                                             */
  GPIO_GPFSEL3_FSEL32_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL32_TXD0             = 7,     /*!< TXD0 : Pin is connected to TXD0                                           */
  GPIO_GPFSEL3_FSEL32_SD_CARD_PRES     = 3,     /*!< SD_CARD_PRES : Pin is connected to SD_CARD_PRES                           */
  GPIO_GPFSEL3_FSEL32_TXD1             = 2,     /*!< TXD1 : Pin is connected to TXD1                                           */
} GPIO_GPFSEL3_FSEL32_Enum;

/* ==============================================  GPIO GPFSEL3 FSEL33 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL33                                                       */
  GPIO_GPFSEL3_FSEL33_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL33_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL33_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL3_FSEL33_SA0              = 5,     /*!< SA0 : Pin is connected to SA0                                             */
  GPIO_GPFSEL3_FSEL33_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL33_RXD0             = 7,     /*!< RXD0 : Pin is connected to RXD0                                           */
  GPIO_GPFSEL3_FSEL33_SD_CARD_WRPROT   = 3,     /*!< SD_CARD_WRPROT : Pin is connected to SD_CARD_WRPROT                       */
  GPIO_GPFSEL3_FSEL33_RXD1             = 2,     /*!< RXD1 : Pin is connected to RXD1                                           */
} GPIO_GPFSEL3_FSEL33_Enum;

/* =============================================  GPIO GPFSEL3 FSEL34 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL34                                                       */
  GPIO_GPFSEL3_FSEL34_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL34_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL34_GPCLK0           = 4,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
  GPIO_GPFSEL3_FSEL34_SOE_N            = 5,     /*!< SOE_N : Pin is connected to SOE_N                                         */
  GPIO_GPFSEL3_FSEL34_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL34_SD1_CLK          = 7,     /*!< SD1_CLK : Pin is connected to SD1_CLK                                     */
  GPIO_GPFSEL3_FSEL34_SD_CARD_LED      = 3,     /*!< SD_CARD_LED : Pin is connected to SD_CARD_LED                             */
  GPIO_GPFSEL3_FSEL34_RGMII_IRQ        = 2,     /*!< RGMII_IRQ : Pin is connected to RGMII_IRQ                                 */
} GPIO_GPFSEL3_FSEL34_Enum;

/* =============================================  GPIO GPFSEL3 FSEL35 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL35                                                       */
  GPIO_GPFSEL3_FSEL35_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL35_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL35_SPI0_CE1_N       = 4,     /*!< SPI0_CE1_N : Pin is connected to SPI0_CE1_N                               */
  GPIO_GPFSEL3_FSEL35_SWE_N            = 5,     /*!< SWE_N : Pin is connected to SWE_N                                         */
  GPIO_GPFSEL3_FSEL35_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL35_SD1_CMD          = 7,     /*!< SD1_CMD : Pin is connected to SD1_CMD                                     */
  GPIO_GPFSEL3_FSEL35_RGMII_START_STOP = 3,     /*!< RGMII_START_STOP : Pin is connected to RGMII_START_STOP                   */
  GPIO_GPFSEL3_FSEL35_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL35_Enum;

/* =============================================  GPIO GPFSEL3 FSEL36 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL36                                                       */
  GPIO_GPFSEL3_FSEL36_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL36_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL36_SPI0_CE0_N       = 4,     /*!< SPI0_CE0_N : Pin is connected to SPI0_CE0_N                               */
  GPIO_GPFSEL3_FSEL36_SD0              = 5,     /*!< SD0 : Pin is connected to SD0                                             */
  GPIO_GPFSEL3_FSEL36_TXD0             = 6,     /*!< TXD0 : Pin is connected to TXD0                                           */
  GPIO_GPFSEL3_FSEL36_SD1_DAT0         = 7,     /*!< SD1_DAT0 : Pin is connected to SD1_DAT0                                   */
  GPIO_GPFSEL3_FSEL36_RGMII_RX_OK      = 3,     /*!< RGMII_RX_OK : Pin is connected to RGMII_RX_OK                             */
  GPIO_GPFSEL3_FSEL36_MII_A_RX_ERR     = 2,     /*!< MII_A_RX_ERR : Pin is connected to MII_A_RX_ERR                           */
} GPIO_GPFSEL3_FSEL36_Enum;

/* =============================================  GPIO GPFSEL3 FSEL37 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL37                                                       */
  GPIO_GPFSEL3_FSEL37_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL37_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL37_SPI0_MISO        = 4,     /*!< SPI0_MISO : Pin is connected to SPI0_MISO                                 */
  GPIO_GPFSEL3_FSEL37_SD1              = 5,     /*!< SD1 : Pin is connected to SD1                                             */
  GPIO_GPFSEL3_FSEL37_RXD0             = 6,     /*!< RXD0 : Pin is connected to RXD0                                           */
  GPIO_GPFSEL3_FSEL37_SD1_DAT1         = 7,     /*!< SD1_DAT1 : Pin is connected to SD1_DAT1                                   */
  GPIO_GPFSEL3_FSEL37_RGMII_MDIO       = 3,     /*!< RGMII_MDIO : Pin is connected to RGMII_MDIO                               */
  GPIO_GPFSEL3_FSEL37_MII_A_TX_ERR     = 2,     /*!< MII_A_TX_ERR : Pin is connected to MII_A_TX_ERR                           */
} GPIO_GPFSEL3_FSEL37_Enum;

/* =============================================  GPIO GPFSEL3 FSEL38 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL38                                                       */
  GPIO_GPFSEL3_FSEL38_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL38_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL38_SPI0_MOSI        = 4,     /*!< SPI0_MOSI : Pin is connected to SPI0_MOSI                                 */
  GPIO_GPFSEL3_FSEL38_SD2              = 5,     /*!< SD2 : Pin is connected to SD2                                             */
  GPIO_GPFSEL3_FSEL38_CTS0             = 6,     /*!< CTS0 : Pin is connected to CTS0                                           */
  GPIO_GPFSEL3_FSEL38_SD1_DAT2         = 7,     /*!< SD1_DAT2 : Pin is connected to SD1_DAT2                                   */
  GPIO_GPFSEL3_FSEL38_RGMII_MDC        = 3,     /*!< RGMII_MDC : Pin is connected to RGMII_MDC                                 */
  GPIO_GPFSEL3_FSEL38_MII_A_CRS        = 2,     /*!< MII_A_CRS : Pin is connected to MII_A_CRS                                 */
} GPIO_GPFSEL3_FSEL38_Enum;

/* =============================================  GPIO GPFSEL3 FSEL39 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL39                                                       */
  GPIO_GPFSEL3_FSEL39_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL39_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL39_SPI0_SCLK        = 4,     /*!< SPI0_SCLK : Pin is connected to SPI0_SCLK                                 */
  GPIO_GPFSEL3_FSEL39_SD3              = 5,     /*!< SD3 : Pin is connected to SD3                                             */
  GPIO_GPFSEL3_FSEL39_RTS0             = 6,     /*!< RTS0 : Pin is connected to RTS0                                           */
  GPIO_GPFSEL3_FSEL39_SD1_DAT3         = 7,     /*!< SD1_DAT3 : Pin is connected to SD1_DAT3                                   */
  GPIO_GPFSEL3_FSEL39_RGMII_IRQ        = 3,     /*!< RGMII_IRQ : Pin is connected to RGMII_IRQ                                 */
  GPIO_GPFSEL3_FSEL39_MII_A_COL        = 2,     /*!< MII_A_COL : Pin is connected to MII_A_COL                                 */
} GPIO_GPFSEL3_FSEL39_Enum;

/* ========================================================  GPFSEL4  ======================================================== */
/* ==============================================  GPIO GPFSEL4 FSEL40 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL40                                                       */
  GPIO_GPFSEL4_FSEL40_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL40_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL40_PWM1_0           = 4,     /*!< PWM1_0 : Pin is connected to PWM1_0                                       */
  GPIO_GPFSEL4_FSEL40_SD4              = 5,     /*!< SD4 : Pin is connected to SD4                                             */
  GPIO_GPFSEL4_FSEL40_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL40_SD1_DAT4         = 7,     /*!< SD1_DAT4 : Pin is connected to SD1_DAT4                                   */
  GPIO_GPFSEL4_FSEL40_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL40_TXD1             = 2,     /*!< TXD1 : Pin is connected to TXD1                                           */
} GPIO_GPFSEL4_FSEL40_Enum;

/* ==============================================  GPIO GPFSEL4 FSEL41 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL41                                                       */
  GPIO_GPFSEL4_FSEL41_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL41_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL41_PWM1_1           = 4,     /*!< PWM1_1 : Pin is connected to PWM1_1                                       */
  GPIO_GPFSEL4_FSEL41_SD5              = 5,     /*!< SD5 : Pin is connected to SD5                                             */
  GPIO_GPFSEL4_FSEL41_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL41_SD1_DAT5         = 7,     /*!< SD1_DAT5 : Pin is connected to SD1_DAT5                                   */
  GPIO_GPFSEL4_FSEL41_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL41_RXD1             = 2,     /*!< RXD1 : Pin is connected to RXD1                                           */
} GPIO_GPFSEL4_FSEL41_Enum;

/* ==============================================  GPIO GPFSEL4 FSEL42 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL42                                                       */
  GPIO_GPFSEL4_FSEL42_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL42_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL42_GPCLK1           = 4,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
  GPIO_GPFSEL4_FSEL42_SD6              = 5,     /*!< SD6 : Pin is connected to SD6                                             */
  GPIO_GPFSEL4_FSEL42_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL42_SD1_DAT6         = 7,     /*!< SD1_DAT6 : Pin is connected to SD1_DAT6                                   */
  GPIO_GPFSEL4_FSEL42_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL42_CTS1             = 2,     /*!< CTS1 : Pin is connected to CTS1                                           */
} GPIO_GPFSEL4_FSEL42_Enum;

/* ==============================================  GPIO GPFSEL4 FSEL43 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL43                                                       */
  GPIO_GPFSEL4_FSEL43_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL43_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL43_GPCLK2           = 4,     /*!< GPCLK2 : Pin is connected to GPCLK2                                       */
  GPIO_GPFSEL4_FSEL43_SD7              = 5,     /*!< SD7 : Pin is connected to SD7                                             */
  GPIO_GPFSEL4_FSEL43_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL43_SD1_DAT7         = 7,     /*!< SD1_DAT7 : Pin is connected to SD1_DAT7                                   */
  GPIO_GPFSEL4_FSEL43_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL43_RTS1             = 2,     /*!< RTS1 : Pin is connected to RTS1                                           */
} GPIO_GPFSEL4_FSEL43_Enum;

/* =============================================  GPIO GPFSEL4 FSEL44 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL44                                                       */
  GPIO_GPFSEL4_FSEL44_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL44_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL44_GPCLK1           = 4,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
  GPIO_GPFSEL4_FSEL44_SDA0             = 5,     /*!< SDA0 : Pin is connected to SDA0                                           */
  GPIO_GPFSEL4_FSEL44_SDA1             = 6,     /*!< SDA1 : Pin is connected to SDA1                                           */
  GPIO_GPFSEL4_FSEL44_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL44_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL44_SD_CARD_VOLT     = 2,     /*!< SD_CARD_VOLT : Pin is connected to SD_CARD_VOLT                           */
} GPIO_GPFSEL4_FSEL44_Enum;

/* =============================================  GPIO GPFSEL4 FSEL45 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL45                                                       */
  GPIO_GPFSEL4_FSEL45_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL45_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL45_PWM0_1           = 4,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
  GPIO_GPFSEL4_FSEL45_SCL0             = 5,     /*!< SCL0 : Pin is connected to SCL0                                           */
  GPIO_GPFSEL4_FSEL45_SCL1             = 6,     /*!< SCL1 : Pin is connected to SCL1                                           */
  GPIO_GPFSEL4_FSEL45_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL45_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL45_SD_CARD_PWR0     = 2,     /*!< SD_CARD_PWR0 : Pin is connected to SD_CARD_PWR0                           */
} GPIO_GPFSEL4_FSEL45_Enum;

/* =============================================  GPIO GPFSEL4 FSEL46 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL46                                                       */
  GPIO_GPFSEL4_FSEL46_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL46_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL46_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL46_Enum;

/* =============================================  GPIO GPFSEL4 FSEL47 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL47                                                       */
  GPIO_GPFSEL4_FSEL47_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL47_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL47_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL47_Enum;

/* =============================================  GPIO GPFSEL4 FSEL48 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL48                                                       */
  GPIO_GPFSEL4_FSEL48_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL48_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL48_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL48_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL48_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL48_SD1_CLK          = 7,     /*!< SD1_CLK : Pin is connected to SD1_CLK                                     */
  GPIO_GPFSEL4_FSEL48_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL48_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL48_Enum;

/* =============================================  GPIO GPFSEL4 FSEL49 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL49                                                       */
  GPIO_GPFSEL4_FSEL49_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL49_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL49_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL49_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL49_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL49_SD1_CMD          = 7,     /*!< SD1_CMD : Pin is connected to SD1_CMD                                     */
  GPIO_GPFSEL4_FSEL49_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL49_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL49_Enum;

/* ========================================================  GPFSEL5  ======================================================== */
/* ==============================================  GPIO GPFSEL5 FSEL50 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL50                                                       */
  GPIO_GPFSEL5_FSEL50_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL50_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL50_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL50_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL50_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL50_SD1_DAT0         = 7,     /*!< SD1_DAT0 : Pin is connected to SD1_DAT0                                   */
  GPIO_GPFSEL5_FSEL50_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL50_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL50_Enum;

/* ==============================================  GPIO GPFSEL5 FSEL51 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL51                                                       */
  GPIO_GPFSEL5_FSEL51_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL51_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL51_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL51_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL51_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL51_SD1_DAT1         = 7,     /*!< SD1_DAT1 : Pin is connected to SD1_DAT1                                   */
  GPIO_GPFSEL5_FSEL51_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL51_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL51_Enum;

/* ==============================================  GPIO GPFSEL5 FSEL52 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL52                                                       */
  GPIO_GPFSEL5_FSEL52_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL52_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL52_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL52_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL52_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL52_SD1_DAT2         = 7,     /*!< SD1_DAT2 : Pin is connected to SD1_DAT2                                   */
  GPIO_GPFSEL5_FSEL52_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL52_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL52_Enum;

/* ==============================================  GPIO GPFSEL5 FSEL53 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL53                                                       */
  GPIO_GPFSEL5_FSEL53_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL53_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL53_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL53_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL53_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL53_SD1_DAT3         = 7,     /*!< SD1_DAT3 : Pin is connected to SD1_DAT3                                   */
  GPIO_GPFSEL5_FSEL53_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL53_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL53_Enum;

/* =============================================  GPIO GPFSEL5 FSEL54 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL54                                                       */
  GPIO_GPFSEL5_FSEL54_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL54_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL54_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL54_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL54_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL54_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL5_FSEL54_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL54_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL54_Enum;

/* =============================================  GPIO GPFSEL5 FSEL55 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL55                                                       */
  GPIO_GPFSEL5_FSEL55_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL55_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL55_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL55_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL55_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL55_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL5_FSEL55_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL55_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL55_Enum;

/* =============================================  GPIO GPFSEL5 FSEL56 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL56                                                       */
  GPIO_GPFSEL5_FSEL56_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL56_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL56_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL56_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL56_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL56_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL5_FSEL56_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL56_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL56_Enum;

/* =============================================  GPIO GPFSEL5 FSEL57 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL57                                                       */
  GPIO_GPFSEL5_FSEL57_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL57_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL57_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL57_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL57_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL57_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL5_FSEL57_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL57_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL57_Enum;

/* ========================================================  GPSET0  ========================================================= */
/* ========================================================  GPSET1  ========================================================= */
/* ========================================================  GPCLR0  ========================================================= */
/* ========================================================  GPCLR1  ========================================================= */
/* ========================================================  GPLEV0  ========================================================= */
/* ========================================================  GPLEV1  ========================================================= */
/* ========================================================  GPEDS0  ========================================================= */
/* ========================================================  GPEDS1  ========================================================= */
/* ========================================================  GPREN0  ========================================================= */
/* ========================================================  GPREN1  ========================================================= */
/* ========================================================  GPFEN0  ========================================================= */
/* ========================================================  GPFEN1  ========================================================= */
/* ========================================================  GPHEN0  ========================================================= */
/* ========================================================  GPHEN1  ========================================================= */
/* ========================================================  GPLEN0  ========================================================= */
/* ========================================================  GPLEN1  ========================================================= */
/* ========================================================  GPAREN0  ======================================================== */
/* ========================================================  GPAREN1  ======================================================== */
/* ========================================================  GPAFEN0  ======================================================== */
/* ========================================================  GPAFEN1  ======================================================== */
/* =======================================================  EXTRA_MUX  ======================================================= */
/* ==============================================  GPIO EXTRA_MUX SDIO [1..1]  =============================================== */
typedef enum {                                  /*!< GPIO_EXTRA_MUX_SDIO                                                       */
  GPIO_EXTRA_MUX_SDIO_SDHOST           = 0,     /*!< SDHOST : Connect the newer SD host                                        */
  GPIO_EXTRA_MUX_SDIO_ARASAN           = 1,     /*!< ARASAN : Connect Arasan SD/EMMC host                                      */
} GPIO_EXTRA_MUX_SDIO_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG0  ================================================ */
/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL0 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL0_BP_PULL                  */
  BP_PULL_NONE                         = 0,     /*!< NONE : No pull                                                            */
  BP_PULL_UP                           = 1,     /*!< UP : Pull up                                                              */
  BP_PULL_DOWN                         = 2,     /*!< DOWN : Pull down                                                          */
} BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL1 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL2 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL3 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL4 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL5 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL6 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL7 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL8 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL9 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL10 [20..21]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL11 [22..23]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL12 [24..25]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL13 [26..27]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL14 [28..29]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL15 [30..31]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG1  ================================================ */
/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL16 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL17 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL18 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL19 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL20 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL21 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL22 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL23 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL24 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL25 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL26 [20..21]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL27 [22..23]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL28 [24..25]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL29 [26..27]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL30 [28..29]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL31 [30..31]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG2  ================================================ */
/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL32 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL33 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL34 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL35 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL36 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL37 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL38 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL39 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL40 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL41 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL42 [20..21]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL43 [22..23]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL44 [24..25]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL45 [26..27]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL46 [28..29]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL47 [30..31]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG3  ================================================ */
/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL48 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL49 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL50 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL51 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL52 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL53 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL54 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL54_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL55 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL55_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL56 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL56_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL57 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL57_BP_PULL_Enum;



/* =========================================================================================================================== */
/* ================                                          SYSTMR                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
/* ==========================================================  CLO  ========================================================== */
/* ==========================================================  CHI  ========================================================== */
/* ==========================================================  C0  =========================================================== */
/* ==========================================================  C1  =========================================================== */
/* ==========================================================  C2  =========================================================== */
/* ==========================================================  C3  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  RSR  ========================================================== */
/* ==========================================================  ECR  ========================================================== */
/* ==========================================================  FR  =========================================================== */
/* =========================================================  IBRD  ========================================================== */
/* =========================================================  FBRD  ========================================================== */
/* =========================================================  LCR_H  ========================================================= */
/* ==========================================================  CR  =========================================================== */
/* =========================================================  IFLS  ========================================================== */
/* =========================================================  IMSC  ========================================================== */
/* ==========================================================  RIS  ========================================================== */
/* ==========================================================  MIS  ========================================================== */
/* ==========================================================  ICR  ========================================================== */
/* =========================================================  DMACR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
/* =================================================  SPI0 CS CLEAR [4..5]  ================================================== */
typedef enum {                                  /*!< SPI0_CS_CLEAR                                                             */
  SPI0_CS_CLEAR_TX                     = 1,     /*!< TX : TX                                                                   */
  SPI0_CS_CLEAR_RX                     = 2,     /*!< RX : RX                                                                   */
  SPI0_CS_CLEAR_BOTH                   = 3,     /*!< BOTH : BOTH                                                               */
} SPI0_CS_CLEAR_Enum;

/* =========================================================  FIFO  ========================================================== */
/* ==========================================================  CLK  ========================================================== */
/* =========================================================  DLEN  ========================================================== */
/* =========================================================  LTOH  ========================================================== */
/* ==========================================================  DC  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           PACTL                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           BSC0                                            ================ */
/* =========================================================================================================================== */

/* ===========================================================  C  =========================================================== */
/* ===========================================================  S  =========================================================== */
/* =========================================================  DLEN  ========================================================== */
/* ===========================================================  A  =========================================================== */
/* =========================================================  FIFO  ========================================================== */
/* ==========================================================  DIV  ========================================================== */
/* ==========================================================  DEL  ========================================================== */
/* =========================================================  CLKT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
/* =================================================  PWM0 CTL MODE2 [9..9]  ================================================= */
typedef enum {                                  /*!< PWM0_CTL_MODE2                                                            */
  PWM0_CTL_MODE2_PWM                   = 0,     /*!< PWM : PWM                                                                 */
  PWM0_CTL_MODE2_SERIAL                = 1,     /*!< SERIAL : SERIAL                                                           */
} PWM0_CTL_MODE2_Enum;

/* =================================================  PWM0 CTL MODE1 [1..1]  ================================================= */
typedef enum {                                  /*!< PWM0_CTL_MODE1                                                            */
  PWM0_CTL_MODE1_PWM                   = 0,     /*!< PWM : PWM                                                                 */
  PWM0_CTL_MODE1_SERIAL                = 1,     /*!< SERIAL : SERIAL                                                           */
} PWM0_CTL_MODE1_Enum;

/* ==========================================================  STA  ========================================================== */
/* =========================================================  DMAC  ========================================================== */
/* =========================================================  RNG1  ========================================================== */
/* =========================================================  DAT1  ========================================================== */
/* =========================================================  FIF1  ========================================================== */
/* =========================================================  RNG2  ========================================================== */
/* =========================================================  DAT2  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            AUX                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  IRQ  ========================================================== */
/* ========================================================  ENABLES  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  IO  =========================================================== */
/* =========================================================  BAUDL  ========================================================= */
/* ==========================================================  IER  ========================================================== */
/* =========================================================  BAUDH  ========================================================= */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==============================================  UART1 LCR DATA_SIZE [0..1]  =============================================== */
typedef enum {                                  /*!< UART1_LCR_DATA_SIZE_MODE                                                  */
  UART1_LCR_DATA_SIZE_MODE_7BIT        = 0,     /*!< 7BIT : 7 bit                                                              */
  UART1_LCR_DATA_SIZE_MODE_8BIT        = 3,     /*!< 8BIT : 8 bit                                                              */
} UART1_LCR_DATA_SIZE_MODE_Enum;

/* ==========================================================  MCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  MSR  ========================================================== */
/* ========================================================  SCRATCH  ======================================================== */
/* =========================================================  CNTL  ========================================================== */
/* =============================================  UART1 CNTL CTS_ASSERT [7..7]  ============================================== */
typedef enum {                                  /*!< UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL                                        */
  UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL_HIGH = 0,  /*!< HIGH : Assert high                                                        */
  UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL_LOW = 1,   /*!< LOW : Assert low                                                          */
} UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL_Enum;

/* =============================================  UART1 CNTL RTS_ASSERT [6..6]  ============================================== */
typedef enum {                                  /*!< UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL                                        */
  UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL_HIGH = 0,  /*!< HIGH : Assert high                                                        */
  UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL_LOW = 1,   /*!< LOW : Assert low                                                          */
} UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL_Enum;

/* ===========================================  UART1 CNTL RTS_FIFO_LEVEL [4..5]  ============================================ */
typedef enum {                                  /*!< UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL                                      */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_3EMPTY = 0,/*!< 3EMPTY : 3 empty spaces                                                 */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_2EMPTY = 1,/*!< 2EMPTY : 2 empty spaces                                                 */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_1EMPTY = 2,/*!< 1EMPTY : 1 empty spaces                                                 */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_4EMPTY = 3,/*!< 4EMPTY : 4 empty spaces                                                 */
} UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_Enum;

/* =========================================================  STAT  ========================================================== */
/* =========================================================  BAUD  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CNTL0  ========================================================= */
/* ==========================================  SPI1 CNTL0 DOUT_HOLD_TIME [12..13]  =========================================== */
typedef enum {                                  /*!< SPI1_CNTL0_DOUT_HOLD_TIME                                                 */
  SPI1_CNTL0_DOUT_HOLD_TIME_0          = 0,     /*!< 0 : 0                                                                     */
  SPI1_CNTL0_DOUT_HOLD_TIME_1          = 1,     /*!< 1 : 1                                                                     */
  SPI1_CNTL0_DOUT_HOLD_TIME_4          = 2,     /*!< 4 : 4                                                                     */
  SPI1_CNTL0_DOUT_HOLD_TIME_7          = 3,     /*!< 7 : 7                                                                     */
} SPI1_CNTL0_DOUT_HOLD_TIME_Enum;

/* =========================================================  CNTL1  ========================================================= */
/* =========================================================  STAT  ========================================================== */
/* =========================================================  PEEK  ========================================================== */
/* ==========================================================  IO0  ========================================================== */
/* ==========================================================  IO1  ========================================================== */
/* ==========================================================  IO2  ========================================================== */
/* ==========================================================  IO3  ========================================================== */
/* ========================================================  TXHOLD0  ======================================================== */
/* ========================================================  TXHOLD1  ======================================================== */
/* ========================================================  TXHOLD2  ======================================================== */
/* ========================================================  TXHOLD3  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            LIC                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  BASIC_PENDING  ===================================================== */
/* =======================================================  PENDING_1  ======================================================= */
/* =======================================================  PENDING_2  ======================================================= */
/* ======================================================  FIQ_CONTROL  ====================================================== */
/* =============================================  LIC FIQ_CONTROL SOURCE [0..6]  ============================================= */
typedef enum {                                  /*!< LIC_FIQ_CONTROL_SOURCE                                                    */
  LIC_FIQ_CONTROL_SOURCE_INT0          = 0,     /*!< INT0 : Interrupt 0                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT1          = 1,     /*!< INT1 : Interrupt 1                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT2          = 2,     /*!< INT2 : Interrupt 2                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT3          = 3,     /*!< INT3 : Interrupt 3                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT4          = 4,     /*!< INT4 : Interrupt 4                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT5          = 5,     /*!< INT5 : Interrupt 5                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT6          = 6,     /*!< INT6 : Interrupt 6                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT7          = 7,     /*!< INT7 : Interrupt 7                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT8          = 8,     /*!< INT8 : Interrupt 8                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT9          = 9,     /*!< INT9 : Interrupt 9                                                        */
  LIC_FIQ_CONTROL_SOURCE_INT10         = 10,    /*!< INT10 : Interrupt 10                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT11         = 11,    /*!< INT11 : Interrupt 11                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT12         = 12,    /*!< INT12 : Interrupt 12                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT13         = 13,    /*!< INT13 : Interrupt 13                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT14         = 14,    /*!< INT14 : Interrupt 14                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT15         = 15,    /*!< INT15 : Interrupt 15                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT16         = 16,    /*!< INT16 : Interrupt 16                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT17         = 17,    /*!< INT17 : Interrupt 17                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT18         = 18,    /*!< INT18 : Interrupt 18                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT19         = 19,    /*!< INT19 : Interrupt 19                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT20         = 20,    /*!< INT20 : Interrupt 20                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT21         = 21,    /*!< INT21 : Interrupt 21                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT22         = 22,    /*!< INT22 : Interrupt 22                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT23         = 23,    /*!< INT23 : Interrupt 23                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT24         = 24,    /*!< INT24 : Interrupt 24                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT25         = 25,    /*!< INT25 : Interrupt 25                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT26         = 26,    /*!< INT26 : Interrupt 26                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT27         = 27,    /*!< INT27 : Interrupt 27                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT28         = 28,    /*!< INT28 : Interrupt 28                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT29         = 29,    /*!< INT29 : Interrupt 29                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT30         = 30,    /*!< INT30 : Interrupt 30                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT31         = 31,    /*!< INT31 : Interrupt 31                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT32         = 32,    /*!< INT32 : Interrupt 32                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT33         = 33,    /*!< INT33 : Interrupt 33                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT34         = 34,    /*!< INT34 : Interrupt 34                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT35         = 35,    /*!< INT35 : Interrupt 35                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT36         = 36,    /*!< INT36 : Interrupt 36                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT37         = 37,    /*!< INT37 : Interrupt 37                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT38         = 38,    /*!< INT38 : Interrupt 38                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT39         = 39,    /*!< INT39 : Interrupt 39                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT40         = 40,    /*!< INT40 : Interrupt 40                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT41         = 41,    /*!< INT41 : Interrupt 41                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT42         = 42,    /*!< INT42 : Interrupt 42                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT43         = 43,    /*!< INT43 : Interrupt 43                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT44         = 44,    /*!< INT44 : Interrupt 44                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT45         = 45,    /*!< INT45 : Interrupt 45                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT46         = 46,    /*!< INT46 : Interrupt 46                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT47         = 47,    /*!< INT47 : Interrupt 47                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT48         = 48,    /*!< INT48 : Interrupt 48                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT49         = 49,    /*!< INT49 : Interrupt 49                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT50         = 50,    /*!< INT50 : Interrupt 50                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT51         = 51,    /*!< INT51 : Interrupt 51                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT52         = 52,    /*!< INT52 : Interrupt 52                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT53         = 53,    /*!< INT53 : Interrupt 53                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT54         = 54,    /*!< INT54 : Interrupt 54                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT55         = 55,    /*!< INT55 : Interrupt 55                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT56         = 56,    /*!< INT56 : Interrupt 56                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT57         = 57,    /*!< INT57 : Interrupt 57                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT58         = 58,    /*!< INT58 : Interrupt 58                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT59         = 59,    /*!< INT59 : Interrupt 59                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT60         = 60,    /*!< INT60 : Interrupt 60                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT61         = 61,    /*!< INT61 : Interrupt 61                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT62         = 62,    /*!< INT62 : Interrupt 62                                                      */
  LIC_FIQ_CONTROL_SOURCE_INT63         = 63,    /*!< INT63 : Interrupt 63                                                      */
  LIC_FIQ_CONTROL_SOURCE_TIMER         = 64,    /*!< TIMER : ARMC Timer                                                        */
  LIC_FIQ_CONTROL_SOURCE_MAILBOX       = 65,    /*!< MAILBOX : Mailbox                                                         */
  LIC_FIQ_CONTROL_SOURCE_DOORBELL0     = 66,    /*!< DOORBELL0 : Doorbell 0                                                    */
  LIC_FIQ_CONTROL_SOURCE_DOORBELL1     = 67,    /*!< DOORBELL1 : Doorbell 1                                                    */
  LIC_FIQ_CONTROL_SOURCE_VPU0_HALTED   = 68,    /*!< VPU0_HALTED : VPU0 halted                                                 */
  LIC_FIQ_CONTROL_SOURCE_VPU1_HALTED   = 69,    /*!< VPU1_HALTED : VPU1 halted                                                 */
  LIC_FIQ_CONTROL_SOURCE_ARM_ADDRESS_ERROR = 70,/*!< ARM_ADDRESS_ERROR : ARM address error                                     */
  LIC_FIQ_CONTROL_SOURCE_ARM_AXI_ERROR = 71,    /*!< ARM_AXI_ERROR : ARM AXI error                                             */
} LIC_FIQ_CONTROL_SOURCE_Enum;

/* =======================================================  ENABLE_1  ======================================================== */
/* =======================================================  ENABLE_2  ======================================================== */
/* =====================================================  ENABLE_BASIC  ====================================================== */
/* =======================================================  DISABLE_1  ======================================================= */
/* =======================================================  DISABLE_2  ======================================================= */
/* =====================================================  DISABLE_BASIC  ===================================================== */


/* =========================================================================================================================== */
/* ================                                         GIC_DIST                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  GICD_CTLR  ======================================================= */
/* ======================================================  GICD_TYPER  ======================================================= */
/* =======================================================  GICD_IIDR  ======================================================= */
/* ======================================================  GICD_PPISR  ======================================================= */
/* ======================================================  GICD_SPISR0  ====================================================== */
/* ======================================================  GICD_SPISR1  ====================================================== */
/* ======================================================  GICD_SPISR2  ====================================================== */
/* ======================================================  GICD_SPISR3  ====================================================== */
/* ======================================================  GICD_SPISR4  ====================================================== */
/* ======================================================  GICD_SPISR5  ====================================================== */
/* =======================================================  GICD_SGIR  ======================================================= */
/* ====================================================  GICD_CPENDSGIRn  ==================================================== */
/* ====================================================  GICD_SPENDSGIRn  ==================================================== */
/* ======================================================  GICD_PIDR4  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR4 GICD_PIDR4 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR4_GICD_PIDR4                                            */
  GIC_DIST_GICD_PIDR4_GICD_PIDR4_VALID = 4,     /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR4_GICD_PIDR4_Enum;

/* ======================================================  GICD_PIDR5  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR5 GICD_PIDR5 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR5_GICD_PIDR5                                            */
  GIC_DIST_GICD_PIDR5_GICD_PIDR5_VALID = 0,     /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR5_GICD_PIDR5_Enum;

/* ======================================================  GICD_PIDR6  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR6 GICD_PIDR6 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR6_GICD_PIDR6                                            */
  GIC_DIST_GICD_PIDR6_GICD_PIDR6_VALID = 0,     /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR6_GICD_PIDR6_Enum;

/* ======================================================  GICD_PIDR7  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR7 GICD_PIDR7 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR7_GICD_PIDR7                                            */
  GIC_DIST_GICD_PIDR7_GICD_PIDR7_VALID = 0,     /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR7_GICD_PIDR7_Enum;

/* ======================================================  GICD_PIDR0  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR0 GICD_PIDR0 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR0_GICD_PIDR0                                            */
  GIC_DIST_GICD_PIDR0_GICD_PIDR0_VALID = 144,   /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR0_GICD_PIDR0_Enum;

/* ======================================================  GICD_PIDR1  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR1 GICD_PIDR1 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR1_GICD_PIDR1                                            */
  GIC_DIST_GICD_PIDR1_GICD_PIDR1_VALID = 180,   /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR1_GICD_PIDR1_Enum;

/* ======================================================  GICD_PIDR2  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR2 GICD_PIDR2 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR2_GICD_PIDR2                                            */
  GIC_DIST_GICD_PIDR2_GICD_PIDR2_VALID = 43,    /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR2_GICD_PIDR2_Enum;

/* ======================================================  GICD_PIDR3  ======================================================= */
/* ========================================  GIC_DIST GICD_PIDR3 GICD_PIDR3 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_PIDR3_GICD_PIDR3                                            */
  GIC_DIST_GICD_PIDR3_GICD_PIDR3_VALID = 0,     /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_PIDR3_GICD_PIDR3_Enum;

/* ======================================================  GICD_CIDR0  ======================================================= */
/* ========================================  GIC_DIST GICD_CIDR0 GICD_CIDR0 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_CIDR0_GICD_CIDR0                                            */
  GIC_DIST_GICD_CIDR0_GICD_CIDR0_VALID = 13,    /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_CIDR0_GICD_CIDR0_Enum;

/* ======================================================  GICD_CIDR1  ======================================================= */
/* ========================================  GIC_DIST GICD_CIDR1 GICD_CIDR1 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_CIDR1_GICD_CIDR1                                            */
  GIC_DIST_GICD_CIDR1_GICD_CIDR1_VALID = 240,   /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_CIDR1_GICD_CIDR1_Enum;

/* ======================================================  GICD_CIDR2  ======================================================= */
/* ========================================  GIC_DIST GICD_CIDR2 GICD_CIDR2 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_CIDR2_GICD_CIDR2                                            */
  GIC_DIST_GICD_CIDR2_GICD_CIDR2_VALID = 5,     /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_CIDR2_GICD_CIDR2_Enum;

/* ======================================================  GICD_CIDR3  ======================================================= */
/* ========================================  GIC_DIST GICD_CIDR3 GICD_CIDR3 [0..31]  ========================================= */
typedef enum {                                  /*!< GIC_DIST_GICD_CIDR3_GICD_CIDR3                                            */
  GIC_DIST_GICD_CIDR3_GICD_CIDR3_VALID = 177,   /*!< VALID : Valid                                                             */
} GIC_DIST_GICD_CIDR3_GICD_CIDR3_Enum;



/* =========================================================================================================================== */
/* ================                                          GIC_CPU                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  GICC_CTLR  ======================================================= */
/* =======================================================  GICC_PMR  ======================================================== */
/* =======================================================  GICC_BPR  ======================================================== */
/* =======================================================  GICC_IAR  ======================================================== */
/* =======================================================  GICC_EOIR  ======================================================= */
/* =======================================================  GICC_RPR  ======================================================== */
/* ======================================================  GICC_HPPIR  ======================================================= */
/* =======================================================  GICC_ABPR  ======================================================= */
/* =======================================================  GICC_AIAR  ======================================================= */
/* ======================================================  GICC_AEOIR  ======================================================= */
/* ======================================================  GICC_AHPPIR  ====================================================== */
/* =======================================================  GICC_APR0  ======================================================= */
/* ======================================================  GICC_NSAPR0  ====================================================== */
/* =======================================================  GICC_IIDR  ======================================================= */
/* =============================================  GIC_CPU GICC_IIDR ID [0..31]  ============================================== */
typedef enum {                                  /*!< GIC_CPU_GICC_IIDR_ID                                                      */
  GIC_CPU_GICC_IIDR_ID_VALID           = 33690683,/*!< VALID : ID is valid                                                     */
} GIC_CPU_GICC_IIDR_ID_Enum;

/* =======================================================  GICC_DIR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_GLOBAL                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCTL  ======================================================== */
/* ========================================================  GOTGINT  ======================================================== */
/* ========================================================  GAHBCFG  ======================================================== */
/* ========================================  USB_OTG_GLOBAL GAHBCFG AXI_BURST [1..2]  ======================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST                                    */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_4 = 0, /*!< 4 : 4                                                                     */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_3 = 1, /*!< 3 : 3                                                                     */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_2 = 2, /*!< 2 : 2                                                                     */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_1 = 3, /*!< 1 : 1                                                                     */
} USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_Enum;

/* ========================================================  GUSBCFG  ======================================================== */
/* ==========================================  USB_OTG_GLOBAL GUSBCFG PHYIF [3..3]  ========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_PHYIF                                              */
  USB_OTG_GLOBAL_GUSBCFG_PHYIF_8BIT    = 0,     /*!< 8BIT : 8BIT                                                               */
  USB_OTG_GLOBAL_GUSBCFG_PHYIF_16BIT   = 1,     /*!< 16BIT : 16BIT                                                             */
} USB_OTG_GLOBAL_GUSBCFG_PHYIF_Enum;

/* =========================================  USB_OTG_GLOBAL GUSBCFG PHYTYPE [4..4]  ========================================= */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_PHYTYPE                                            */
  USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_UTMI  = 0,     /*!< UTMI : UTMI                                                               */
  USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_ULPI  = 1,     /*!< ULPI : ULPI                                                               */
} USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_Enum;

/* ==========================================  USB_OTG_GLOBAL GUSBCFG FSIF [5..5]  =========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_FSIF                                               */
  USB_OTG_GLOBAL_GUSBCFG_FSIF_6PIN     = 0,     /*!< 6PIN : 6PIN                                                               */
  USB_OTG_GLOBAL_GUSBCFG_FSIF_3PIN     = 1,     /*!< 3PIN : 3PIN                                                               */
} USB_OTG_GLOBAL_GUSBCFG_FSIF_Enum;

/* =========================================  USB_OTG_GLOBAL GUSBCFG PHYSEL [6..6]  ========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_PHYSEL                                             */
  USB_OTG_GLOBAL_GUSBCFG_PHYSEL_USB20  = 0,     /*!< USB20 : USB20                                                             */
  USB_OTG_GLOBAL_GUSBCFG_PHYSEL_USB11  = 1,     /*!< USB11 : USB11                                                             */
} USB_OTG_GLOBAL_GUSBCFG_PHYSEL_Enum;

/* =========================================  USB_OTG_GLOBAL GUSBCFG DDRSEL [7..7]  ========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_DDRSEL                                             */
  USB_OTG_GLOBAL_GUSBCFG_DDRSEL_SINGLE = 0,     /*!< SINGLE : SINGLE                                                           */
  USB_OTG_GLOBAL_GUSBCFG_DDRSEL_DOUBLE = 1,     /*!< DOUBLE : DOUBLE                                                           */
} USB_OTG_GLOBAL_GUSBCFG_DDRSEL_Enum;

/* ========================================================  GRSTCTL  ======================================================== */
/* ========================================================  GINTSTS  ======================================================== */
/* ========================================================  GINTMSK  ======================================================== */
/* =====================================================  GRXSTSR_Host  ====================================================== */
/* =====================================================  GRXSTSP_Host  ====================================================== */
/* ========================================================  GRXFSIZ  ======================================================== */
/* ====================================================  GNPTXFSIZ_Host  ===================================================== */
/* ==================================================  TX0FSIZ_Peripheral  =================================================== */
/* =======================================================  GNPTXSTS  ======================================================== */
/* =========================================================  GCCFG  ========================================================= */
/* ==========================================================  CID  ========================================================== */
/* ==========================================================  VID  ========================================================== */
/* =====================================================  HW_DIRECTION  ====================================================== */
/* =====================================  USB_OTG_GLOBAL HW_DIRECTION DIRECTION [0..1]  ====================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION                                     */
  USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_BIDIR = 0,/*!< BIDIR : BIDIR                                                           */
  USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_IN = 1, /*!< IN : IN                                                                   */
  USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_OUT = 2,/*!< OUT : OUT                                                                 */
} USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_Enum;

/* ======================================================  HW_CONFIG0  ======================================================= */
/* ====================================  USB_OTG_GLOBAL HW_CONFIG0 OPERATING_MODE [0..2]  ==================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE                                  */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_HNP_SRP_CAPABLE = 0,/*!< HNP_SRP_CAPABLE : HNP_SRP_CAPABLE                          */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_SRP_ONLY_CAPABLE = 1,/*!< SRP_ONLY_CAPABLE : SRP_ONLY_CAPABLE                       */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_NO_HNP_SRP_CAPABLE = 2,/*!< NO_HNP_SRP_CAPABLE : NO_HNP_SRP_CAPABLE                 */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_SRP_CAPABLE_DEVICE = 3,/*!< SRP_CAPABLE_DEVICE : SRP_CAPABLE_DEVICE                 */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_NO_SRP_CAPABLE_DEVICE = 4,/*!< NO_SRP_CAPABLE_DEVICE : NO_SRP_CAPABLE_DEVICE        */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_SRP_CAPABLE_HOST = 5,/*!< SRP_CAPABLE_HOST : SRP_CAPABLE_HOST                       */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_NO_SRP_CAPABLE_HOST = 6,/*!< NO_SRP_CAPABLE_HOST : NO_SRP_CAPABLE_HOST              */
} USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_Enum;

/* =====================================  USB_OTG_GLOBAL HW_CONFIG0 ARCHITECTURE [3..4]  ===================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE                                    */
  USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_SLAVE_ONLY = 0,/*!< SLAVE_ONLY : SLAVE_ONLY                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_EXTERNAL_DMA = 1,/*!< EXTERNAL_DMA : EXTERNAL_DMA                                     */
  USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_INTERNAL_DMA = 2,/*!< INTERNAL_DMA : INTERNAL_DMA                                     */
} USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_Enum;

/* ====================================  USB_OTG_GLOBAL HW_CONFIG0 HIGH_SPEED_PHY [6..7]  ==================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY                                  */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_NOT_SUPPORTED = 0,/*!< NOT_SUPPORTED : NOT_SUPPORTED                                */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_UTMI = 1,/*!< UTMI : UTMI                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_ULPI = 2,/*!< ULPI : ULPI                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_UTMI_ULPI = 3,/*!< UTMI_ULPI : UTMI_ULPI                                            */
} USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_Enum;

/* ====================================  USB_OTG_GLOBAL HW_CONFIG0 FULL_SPEED_PHY [8..9]  ==================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY                                  */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_PHY0 = 0,/*!< PHY0 : PHY0                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_DEDICATED = 1,/*!< DEDICATED : DEDICATED                                            */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_PHY2 = 2,/*!< PHY2 : PHY2                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_PHY3 = 3,/*!< PHY3 : PHY3                                                           */
} USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_Enum;

/* =======================================================  HPTXFSIZ  ======================================================== */
/* =======================================================  DIEPTXF1  ======================================================== */
/* =======================================================  DIEPTXF2  ======================================================== */
/* =======================================================  DIEPTXF3  ======================================================== */
/* =======================================================  DIEPTXF4  ======================================================== */
/* =======================================================  DIEPTXF5  ======================================================== */
/* =======================================================  DIEPTXF6  ======================================================== */
/* =======================================================  DIEPTXF7  ======================================================== */
/* ==================================================  GRXSTSR_Peripheral  =================================================== */
/* ==================================================  GRXSTSP_Peripheral  =================================================== */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */

/* =========================================================  HCFG  ========================================================== */
/* =========================================================  HFIR  ========================================================== */
/* =========================================================  HFNUM  ========================================================= */
/* ========================================================  HPTXSTS  ======================================================== */
/* =========================================================  HAINT  ========================================================= */
/* =======================================================  HAINTMSK  ======================================================== */
/* =========================================================  HPRT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
/* =========================================================  DCTL  ========================================================== */
/* =========================================================  DSTS  ========================================================== */
/* ========================================================  DIEPMSK  ======================================================== */
/* ========================================================  DOEPMSK  ======================================================== */
/* =========================================================  DAINT  ========================================================= */
/* =======================================================  DAINTMSK  ======================================================== */
/* =======================================================  DVBUSDIS  ======================================================== */
/* ======================================================  DVBUSPULSE  ======================================================= */
/* ========================================================  DTHRCTL  ======================================================== */
/* ======================================================  DIEPEMPMSK  ======================================================= */
/* =======================================================  DEACHINT  ======================================================== */
/* ======================================================  DEACHINTMSK  ====================================================== */
/* =====================================================  DIEPEACHMSK1  ====================================================== */
/* =====================================================  DOEPEACHMSK1  ====================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_PWRCLK                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  PCGCCTL  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           EMMC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  ARG2  ========================================================== */
/* ======================================================  BLKSIZECNT  ======================================================= */
/* =========================================================  ARG1  ========================================================== */
/* =========================================================  CMDTM  ========================================================= */
/* =============================================  EMMC CMDTM CMD_TYPE [22..23]  ============================================== */
typedef enum {                                  /*!< EMMC_CMDTM_CMD_TYPE                                                       */
  EMMC_CMDTM_CMD_TYPE_NORMAL           = 0,     /*!< NORMAL : NORMAL                                                           */
  EMMC_CMDTM_CMD_TYPE_SUSPEND          = 1,     /*!< SUSPEND : SUSPEND                                                         */
  EMMC_CMDTM_CMD_TYPE_RESUME           = 2,     /*!< RESUME : RESUME                                                           */
  EMMC_CMDTM_CMD_TYPE_ABORT            = 3,     /*!< ABORT : ABORT                                                             */
} EMMC_CMDTM_CMD_TYPE_Enum;

/* ==========================================  EMMC CMDTM CMD_RSPNS_TYPE [16..17]  =========================================== */
typedef enum {                                  /*!< EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE                                        */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_NONE = 0,  /*!< NONE : NONE                                                               */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_136BITS = 1,/*!< 136BITS : 136BITS                                                        */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_48BITS = 2,/*!< 48BITS : 48BITS                                                           */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_48BITS_USING_BUSY = 3,/*!< 48BITS_USING_BUSY : 48BITS_USING_BUSY                          */
} EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_Enum;

/* ===========================================  EMMC CMDTM TM_MULTI_BLOCK [5..5]  ============================================ */
typedef enum {                                  /*!< EMMC_CMDTM_TM_MULTI_BLOCK                                                 */
  EMMC_CMDTM_TM_MULTI_BLOCK_SINGLE     = 0,     /*!< SINGLE : SINGLE                                                           */
  EMMC_CMDTM_TM_MULTI_BLOCK_MULTIPLE   = 1,     /*!< MULTIPLE : MULTIPLE                                                       */
} EMMC_CMDTM_TM_MULTI_BLOCK_Enum;

/* =============================================  EMMC CMDTM TM_DAT_DIR [4..4]  ============================================== */
typedef enum {                                  /*!< EMMC_CMDTM_TM_DAT_DIR                                                     */
  EMMC_CMDTM_TM_DAT_DIR_HOST_TO_CARD   = 0,     /*!< HOST_TO_CARD : HOST_TO_CARD                                               */
  EMMC_CMDTM_TM_DAT_DIR_CARD_TO_HOST   = 1,     /*!< CARD_TO_HOST : CARD_TO_HOST                                               */
} EMMC_CMDTM_TM_DAT_DIR_Enum;

/* ===========================================  EMMC CMDTM TM_AUTO_CMD_EN [2..3]  ============================================ */
typedef enum {                                  /*!< EMMC_CMDTM_TM_AUTO_CMD_EN                                                 */
  EMMC_CMDTM_TM_AUTO_CMD_EN_NONE       = 0,     /*!< NONE : NONE                                                               */
  EMMC_CMDTM_TM_AUTO_CMD_EN_CMD12      = 1,     /*!< CMD12 : CMD12                                                             */
  EMMC_CMDTM_TM_AUTO_CMD_EN_CMD23      = 2,     /*!< CMD23 : CMD23                                                             */
} EMMC_CMDTM_TM_AUTO_CMD_EN_Enum;

/* =========================================================  RESP0  ========================================================= */
/* =========================================================  RESP1  ========================================================= */
/* =========================================================  RESP2  ========================================================= */
/* =========================================================  RESP3  ========================================================= */
/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =======================================================  CONTROL0  ======================================================== */
/* =======================================================  CONTROL1  ======================================================== */
/* ============================================  EMMC CONTROL1 CLK_GENSEL [5..5]  ============================================ */
typedef enum {                                  /*!< EMMC_CONTROL1_CLK_GENSEL                                                  */
  EMMC_CONTROL1_CLK_GENSEL_DIVIDED     = 0,     /*!< DIVIDED : DIVIDED                                                         */
  EMMC_CONTROL1_CLK_GENSEL_PROGRAMMABLE = 1,    /*!< PROGRAMMABLE : PROGRAMMABLE                                               */
} EMMC_CONTROL1_CLK_GENSEL_Enum;

/* =======================================================  INTERRUPT  ======================================================= */
/* =======================================================  IRPT_MASK  ======================================================= */
/* ========================================================  IRPT_EN  ======================================================== */
/* =======================================================  CONTROL2  ======================================================== */
/* ============================================  EMMC CONTROL2 UHSMODE [16..18]  ============================================= */
typedef enum {                                  /*!< EMMC_CONTROL2_UHSMODE                                                     */
  EMMC_CONTROL2_UHSMODE_SDR12          = 0,     /*!< SDR12 : SDR12                                                             */
  EMMC_CONTROL2_UHSMODE_SDR25          = 1,     /*!< SDR25 : SDR25                                                             */
  EMMC_CONTROL2_UHSMODE_SDR50          = 2,     /*!< SDR50 : SDR50                                                             */
  EMMC_CONTROL2_UHSMODE_SDR104         = 3,     /*!< SDR104 : SDR104                                                           */
  EMMC_CONTROL2_UHSMODE_DDR50          = 4,     /*!< DDR50 : DDR50                                                             */
} EMMC_CONTROL2_UHSMODE_Enum;

/* ======================================================  FORCE_IRPT  ======================================================= */
/* =====================================================  BOOT_TIMEOUT  ====================================================== */
/* ========================================================  DBG_SEL  ======================================================== */
/* ==============================================  EMMC DBG_SEL SELECT [0..0]  =============================================== */
typedef enum {                                  /*!< EMMC_DBG_SEL_SELECT                                                       */
  EMMC_DBG_SEL_SELECT_RECEIVER_FIFO    = 0,     /*!< RECEIVER_FIFO : RECEIVER_FIFO                                             */
  EMMC_DBG_SEL_SELECT_OTHERS           = 1,     /*!< OTHERS : OTHERS                                                           */
} EMMC_DBG_SEL_SELECT_Enum;

/* =====================================================  EXRDFIFO_CFG  ====================================================== */
/* ======================================================  EXRDFIFO_EN  ====================================================== */
/* =======================================================  TUNE_STEP  ======================================================= */
/* ====================================================  TUNE_STEPS_STD  ===================================================== */
/* ====================================================  TUNE_STEPS_DDR  ===================================================== */
/* ======================================================  SPI_INT_SPT  ====================================================== */
/* ======================================================  SLOTISR_VER  ====================================================== */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* BCM2711_LPA_H */


/** @} */ /* End of group bcm2711_lpa */

/** @} */ /* End of group BROADCOM */
