/*
 * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     /home/runner/work/broadcom-peripherals/broadcom-peripherals/broadcom/gen//bcm2835_lpa.h
 * @brief    CMSIS HeaderFile
 * @version  A
 * @date     Thu Aug 24 22:15:10 2023
 * @note     Generated by SVDConv V3.3.44
 *           from File '/home/runner/work/broadcom-peripherals/broadcom-peripherals/svd/gen/bcm2835_lpa.svd',
 *           last modified on Thu Aug 24 22:15:10 2023
 */


/** @addtogroup BROADCOM
  * @{
  */


/** @addtogroup bcm2835_lpa
  * @{
  */


#ifndef BCM2835_LPA_H
#define BCM2835_LPA_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-A72 Specific Interrupt Numbers  ======================================= */
/* ========================================  bcm2835_lpa Specific Interrupt Numbers  ========================================= */
  TIMER_0_IRQn              =   0,              /*!< 0  Timer 0 matched                                                        */
  TIMER_1_IRQn              =   1,              /*!< 1  Timer 1 matched                                                        */
  TIMER_2_IRQn              =   2,              /*!< 2  Timer 2 matched                                                        */
  TIMER_3_IRQn              =   3,              /*!< 3  Timer 3 matched                                                        */
  USB_IRQn                  =   9,              /*!< 9  USB interrupt                                                          */
  AUX_IRQn                  =  29,              /*!< 29 Interrupt from AUX                                                     */
  GPIO0_IRQn                =  49,              /*!< 49 Interrupt from bank 0                                                  */
  GPIO1_IRQn                =  50,              /*!< 50 Interrupt from bank 1                                                  */
  GPIO2_IRQn                =  51,              /*!< 51 Interrupt from bank 2                                                  */
  GPIO_IRQn                 =  52,              /*!< 52 OR of all GPIO interrupts                                              */
  I2C_IRQn                  =  53,              /*!< 53 OR of all I2C interrupts                                               */
  SPI_IRQn                  =  54,              /*!< 54 OR of all SPI interrupts except 1 and 2                                */
  UART_IRQn                 =  57,              /*!< 57 OR of all UART interrupts except 1                                     */
  EMMC_IRQn                 =  62               /*!< 62 OR of EMMC and EMMC2                                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-A72 Processor and Core Peripherals  =========================== */
#define __CA72_REV                 0x0000U      /*!< CA72 Core Revision                                                        */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_ca72.h"                          /*!< ARM Cortex-A72 processor and core peripherals                             */
#include "system_bcm2835_lpa.h"                 /*!< bcm2835_lpa System                                                        */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief USB_OTG_HOST_HOST_CHANNEL [HOST_CHANNEL] (Host channel [0..11])
  */
typedef struct {
  union {
    __IOM uint32_t HCCHAR;                      /*!< (@ 0x00000000) Characteristics register                                   */
    
    struct {
      __IOM uint32_t MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32_t EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32_t EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32_t            : 1;
      __IOM uint32_t LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32_t EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32_t MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32_t DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32_t ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32_t CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32_t CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } HCCHAR_b;
  } ;
  
  union {
    __IOM uint32_t HCSPLT;                      /*!< (@ 0x00000004) Split control register                                     */
    
    struct {
      __IOM uint32_t PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32_t HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32_t XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32_t COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32_t            : 14;
      __IOM uint32_t SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } HCSPLT_b;
  } ;
  
  union {
    __IOM uint32_t HCINT;                       /*!< (@ 0x00000008) Interrupt register                                         */
    
    struct {
      __IOM uint32_t XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32_t CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32_t AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32_t STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32_t NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32_t ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32_t TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32_t BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32_t FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32_t DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32_t            : 21;
    } HCINT_b;
  } ;
  
  union {
    __IOM uint32_t HCINTMSK;                    /*!< (@ 0x0000000C) Interrupt mask                                             */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32_t CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32_t AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32_t STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32_t NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32_t ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32_t NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32_t TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32_t BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32_t FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32_t DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32_t            : 21;
    } HCINTMSK_b;
  } ;
  
  union {
    __IOM uint32_t HCTSIZ;                      /*!< (@ 0x00000010) Transfer size                                              */
    
    struct {
      __IOM uint32_t XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32_t PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32_t DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32_t            : 1;
    } HCTSIZ_b;
  } ;
  
  union {
    __IOM uint32_t HCDMA;                       /*!< (@ 0x00000014) DMA address                                                */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } HCDMA_b;
  } ;
  __IM  uint32_t  RESERVED[2];
} USB_OTG_HOST_HOST_CHANNEL_Type;               /*!< Size = 32 (0x20)                                                          */


/**
  * @brief USB_OTG_DEVICE_IN_ENDPOINT [IN_ENDPOINT] (IN Endpoint [0..11])
  */
typedef struct {
  union {
    __IOM uint32_t DIEPCTL0;                    /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IOM uint32_t MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32_t            : 4;
      __IOM uint32_t USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32_t EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32_t NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32_t EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32_t            : 1;
      __IOM uint32_t Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32_t TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32_t SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32_t SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32_t EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32_t EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } DIEPCTL0_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIEPINT;                     /*!< (@ 0x00000008) Interrupt                                                  */
    
    struct {
      __IOM uint32_t XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32_t EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32_t            : 1;
      __IOM uint32_t TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32_t ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32_t            : 1;
      __IOM uint32_t INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32_t TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32_t BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32_t            : 1;
      __IOM uint32_t PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32_t BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32_t NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32_t            : 18;
    } DIEPINT_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t DIEPTSIZ;                    /*!< (@ 0x00000010) Transfer size                                              */
    
    struct {
      __IOM uint32_t XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32_t            : 12;
      __IOM uint32_t PKTCNT     : 2;            /*!< [20..19] Packet count                                                     */
            uint32_t            : 11;
    } DIEPTSIZ_b;
  } ;
  
  union {
    __IOM uint32_t DIEPDMA;                     /*!< (@ 0x00000014) DMA address                                                */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } DIEPDMA_b;
  } ;
  
  union {
    __IM  uint32_t DTXFSTS;                     /*!< (@ 0x00000018) Transmit FIFO status                                       */
    
    struct {
      __IM  uint32_t INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32_t            : 16;
    } DTXFSTS_b;
  } ;
  __IM  uint32_t  RESERVED2;
} USB_OTG_DEVICE_IN_ENDPOINT_Type;              /*!< Size = 32 (0x20)                                                          */


/**
  * @brief USB_OTG_DEVICE_OUT_ENDPOINT [OUT_ENDPOINT] (OUT Endpoint [0..11])
  */
typedef struct {
  union {
    __IOM uint32_t DOEPCTL;                     /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IM  uint32_t MPSIZ      : 2;            /*!< [1..0] Maximum packet size                                                */
            uint32_t            : 13;
      __IM  uint32_t USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
            uint32_t            : 1;
      __IM  uint32_t NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IM  uint32_t EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32_t SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32_t Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32_t            : 4;
      __OM  uint32_t CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32_t SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
            uint32_t            : 2;
      __IM  uint32_t EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __OM  uint32_t EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } DOEPCTL_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DOEPINT;                     /*!< (@ 0x00000008) Interrupt                                                  */
    
    struct {
      __IOM uint32_t XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32_t EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32_t            : 1;
      __IOM uint32_t STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32_t OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32_t            : 1;
      __IOM uint32_t B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32_t            : 7;
      __IOM uint32_t NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32_t            : 17;
    } DOEPINT_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t DOEPTSIZ;                    /*!< (@ 0x00000010) Transfer size                                              */
    
    struct {
      __IOM uint32_t XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32_t            : 12;
      __IOM uint32_t PKTCNT     : 1;            /*!< [19..19] Packet count                                                     */
            uint32_t            : 9;
      __IOM uint32_t STUPCNT    : 2;            /*!< [30..29] SETUP packet count                                               */
            uint32_t            : 1;
    } DOEPTSIZ_b;
  } ;
  
  union {
    __IOM uint32_t DOEPDMA;                     /*!< (@ 0x00000014) DMA address                                                */
    
    struct {
      __IOM uint32_t DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } DOEPDMA_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
} USB_OTG_DEVICE_OUT_ENDPOINT_Type;             /*!< Size = 32 (0x20)                                                          */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         VCMAILBOX                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Mailboxes for talking to/from VideoCore (VCMAILBOX)
  */

typedef struct {                                /*!< (@ 0x2000B880) VCMAILBOX Structure                                        */
  __IM  uint32_t  READ;                         /*!< (@ 0x00000000) Read messages from the VideoCore                           */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  PEEK0;                        /*!< (@ 0x00000010) PEEK0                                                      */
  __IOM uint32_t  SENDER0;                      /*!< (@ 0x00000014) SENDER0                                                    */
  
  union {
    __IOM uint32_t STATUS0;                     /*!< (@ 0x00000018) STATUS0                                                    */
    
    struct {
            uint32_t            : 30;
      __IM  uint32_t EMPTY      : 1;            /*!< [30..30] EMPTY                                                            */
      __IM  uint32_t FULL       : 1;            /*!< [31..31] FULL                                                             */
    } STATUS0_b;
  } ;
  
  union {
    __IOM uint32_t CONFIG0;                     /*!< (@ 0x0000001C) CONFIG0                                                    */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Enable the interrupt when data is available                        */
            uint32_t            : 31;
    } CONFIG0_b;
  } ;
  __OM  uint32_t  WRITE;                        /*!< (@ 0x00000020) Write messages to the VideoCore                            */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  PEEK1;                        /*!< (@ 0x00000030) PEEK1                                                      */
  __IOM uint32_t  SENDER1;                      /*!< (@ 0x00000034) SENDER1                                                    */
  __IOM uint32_t  STATUS1;                      /*!< (@ 0x00000038) STATUS1                                                    */
  __IOM uint32_t  CONFIG1;                      /*!< (@ 0x0000003C) CONFIG1                                                    */
} VCMAILBOX_Type;                               /*!< Size = 64 (0x40)                                                          */



/* =========================================================================================================================== */
/* ================                                            PM                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Power Manager (PM)
  */

typedef struct {                                /*!< (@ 0x20100000) PM Structure                                               */
  __IM  uint32_t  RESERVED[7];
  
  union {
    __IOM uint32_t RSTC;                        /*!< (@ 0x0000001C) Reset Control                                              */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t WRCFG      : 2;            /*!< [5..4] Watchdog reset config                                              */
            uint32_t            : 18;
      __OM  uint32_t PASSWD     : 8;            /*!< [31..24] Password. Always 0x5a                                            */
    } RSTC_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t WDOG;                        /*!< (@ 0x00000024) Watchdog control                                           */
    
    struct {
      __IOM uint32_t TIME       : 20;           /*!< [19..0] Time until watchdog alarm                                         */
            uint32_t            : 4;
      __OM  uint32_t PASSWD     : 8;            /*!< [31..24] Password. Always 0x5a                                            */
    } WDOG_b;
  } ;
} PM_Type;                                      /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                          CM_PCM                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Clock Manager (CM_PCM)
  */

typedef struct {                                /*!< (@ 0x20101098) CM_PCM Structure                                           */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Control / Status                                           */
    
    struct {
      __IOM uint32_t SRC        : 4;            /*!< [3..0] Clock source                                                       */
      __IOM uint32_t ENAB       : 1;            /*!< [4..4] Enable the clock generator. (Switch SRC first.)                    */
      __IOM uint32_t KILL       : 1;            /*!< [5..5] Stop and reset the generator                                       */
            uint32_t            : 1;
      __IM  uint32_t BUSY       : 1;            /*!< [7..7] Indicates the clock generator is running                           */
      __IOM uint32_t FLIP       : 1;            /*!< [8..8] Generate an edge on output. (For testing)                          */
      __IOM uint32_t MASH       : 2;            /*!< [10..9] MASH control, stage count                                         */
            uint32_t            : 13;
      __OM  uint32_t PASSWD     : 8;            /*!< [31..24] Password. Always 0x5a                                            */
    } CS_b;
  } ;
  
  union {
    __IOM uint32_t DIV;                         /*!< (@ 0x00000004) Clock divisor                                              */
    
    struct {
      __IOM uint32_t DIVF       : 12;           /*!< [11..0] Fractional part of divisor                                        */
      __IOM uint32_t DIVI       : 12;           /*!< [23..12] Integer part of divisor                                          */
      __OM  uint32_t PASSWD     : 8;            /*!< [31..24] Password. Always 0x5a                                            */
    } DIV_b;
  } ;
} CM_PCM_Type;                                  /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Pin level and mux control (GPIO)
  */

typedef struct {                                /*!< (@ 0x20200000) GPIO Structure                                             */
  
  union {
    __IOM uint32_t GPFSEL0;                     /*!< (@ 0x00000000) GPIO Function Select 0                                     */
    
    struct {
      __IOM uint32_t FSEL0      : 3;            /*!< [2..0] Function Select 0                                                  */
      __IOM uint32_t FSEL1      : 3;            /*!< [5..3] Function Select 1                                                  */
      __IOM uint32_t FSEL2      : 3;            /*!< [8..6] Function Select 2                                                  */
      __IOM uint32_t FSEL3      : 3;            /*!< [11..9] Function Select 3                                                 */
      __IOM uint32_t FSEL4      : 3;            /*!< [14..12] Function Select 4                                                */
      __IOM uint32_t FSEL5      : 3;            /*!< [17..15] Function Select 5                                                */
      __IOM uint32_t FSEL6      : 3;            /*!< [20..18] Function Select 6                                                */
      __IOM uint32_t FSEL7      : 3;            /*!< [23..21] Function Select 7                                                */
      __IOM uint32_t FSEL8      : 3;            /*!< [26..24] Function Select 8                                                */
      __IOM uint32_t FSEL9      : 3;            /*!< [29..27] Function Select 9                                                */
            uint32_t            : 2;
    } GPFSEL0_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL1;                     /*!< (@ 0x00000004) GPIO Function Select 1                                     */
    
    struct {
      __IOM uint32_t FSEL10     : 3;            /*!< [2..0] Function Select 10                                                 */
      __IOM uint32_t FSEL11     : 3;            /*!< [5..3] Function Select 11                                                 */
      __IOM uint32_t FSEL12     : 3;            /*!< [8..6] Function Select 12                                                 */
      __IOM uint32_t FSEL13     : 3;            /*!< [11..9] Function Select 13                                                */
      __IOM uint32_t FSEL14     : 3;            /*!< [14..12] Function Select 14                                               */
      __IOM uint32_t FSEL15     : 3;            /*!< [17..15] Function Select 15                                               */
      __IOM uint32_t FSEL16     : 3;            /*!< [20..18] Function Select 16                                               */
      __IOM uint32_t FSEL17     : 3;            /*!< [23..21] Function Select 17                                               */
      __IOM uint32_t FSEL18     : 3;            /*!< [26..24] Function Select 18                                               */
      __IOM uint32_t FSEL19     : 3;            /*!< [29..27] Function Select 19                                               */
            uint32_t            : 2;
    } GPFSEL1_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL2;                     /*!< (@ 0x00000008) GPIO Function Select 2                                     */
    
    struct {
      __IOM uint32_t FSEL20     : 3;            /*!< [2..0] Function Select 20                                                 */
      __IOM uint32_t FSEL21     : 3;            /*!< [5..3] Function Select 21                                                 */
      __IOM uint32_t FSEL22     : 3;            /*!< [8..6] Function Select 22                                                 */
      __IOM uint32_t FSEL23     : 3;            /*!< [11..9] Function Select 23                                                */
      __IOM uint32_t FSEL24     : 3;            /*!< [14..12] Function Select 24                                               */
      __IOM uint32_t FSEL25     : 3;            /*!< [17..15] Function Select 25                                               */
      __IOM uint32_t FSEL26     : 3;            /*!< [20..18] Function Select 26                                               */
      __IOM uint32_t FSEL27     : 3;            /*!< [23..21] Function Select 27                                               */
      __IOM uint32_t FSEL28     : 3;            /*!< [26..24] Function Select 28                                               */
      __IOM uint32_t FSEL29     : 3;            /*!< [29..27] Function Select 29                                               */
            uint32_t            : 2;
    } GPFSEL2_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL3;                     /*!< (@ 0x0000000C) GPIO Function Select 3                                     */
    
    struct {
      __IOM uint32_t FSEL30     : 3;            /*!< [2..0] Function Select 30                                                 */
      __IOM uint32_t FSEL31     : 3;            /*!< [5..3] Function Select 31                                                 */
      __IOM uint32_t FSEL32     : 3;            /*!< [8..6] Function Select 32                                                 */
      __IOM uint32_t FSEL33     : 3;            /*!< [11..9] Function Select 33                                                */
      __IOM uint32_t FSEL34     : 3;            /*!< [14..12] Function Select 34                                               */
      __IOM uint32_t FSEL35     : 3;            /*!< [17..15] Function Select 35                                               */
      __IOM uint32_t FSEL36     : 3;            /*!< [20..18] Function Select 36                                               */
      __IOM uint32_t FSEL37     : 3;            /*!< [23..21] Function Select 37                                               */
      __IOM uint32_t FSEL38     : 3;            /*!< [26..24] Function Select 38                                               */
      __IOM uint32_t FSEL39     : 3;            /*!< [29..27] Function Select 39                                               */
            uint32_t            : 2;
    } GPFSEL3_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL4;                     /*!< (@ 0x00000010) GPIO Function Select 4                                     */
    
    struct {
      __IOM uint32_t FSEL40     : 3;            /*!< [2..0] Function Select 40                                                 */
      __IOM uint32_t FSEL41     : 3;            /*!< [5..3] Function Select 41                                                 */
      __IOM uint32_t FSEL42     : 3;            /*!< [8..6] Function Select 42                                                 */
      __IOM uint32_t FSEL43     : 3;            /*!< [11..9] Function Select 43                                                */
      __IOM uint32_t FSEL44     : 3;            /*!< [14..12] Function Select 44                                               */
      __IOM uint32_t FSEL45     : 3;            /*!< [17..15] Function Select 45                                               */
      __IOM uint32_t FSEL46     : 3;            /*!< [20..18] Function Select 46                                               */
      __IOM uint32_t FSEL47     : 3;            /*!< [23..21] Function Select 47                                               */
      __IOM uint32_t FSEL48     : 3;            /*!< [26..24] Function Select 48                                               */
      __IOM uint32_t FSEL49     : 3;            /*!< [29..27] Function Select 49                                               */
            uint32_t            : 2;
    } GPFSEL4_b;
  } ;
  
  union {
    __IOM uint32_t GPFSEL5;                     /*!< (@ 0x00000014) GPIO Function Select 5                                     */
    
    struct {
      __IOM uint32_t FSEL50     : 3;            /*!< [2..0] Function Select 50                                                 */
      __IOM uint32_t FSEL51     : 3;            /*!< [5..3] Function Select 51                                                 */
      __IOM uint32_t FSEL52     : 3;            /*!< [8..6] Function Select 52                                                 */
      __IOM uint32_t FSEL53     : 3;            /*!< [11..9] Function Select 53                                                */
            uint32_t            : 20;
    } GPFSEL5_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __OM  uint32_t GPSET0;                      /*!< (@ 0x0000001C) GPIO Pin Output Set 0                                      */
    
    struct {
      __OM  uint32_t SET0       : 1;            /*!< [0..0] Set 0                                                              */
      __OM  uint32_t SET1       : 1;            /*!< [1..1] Set 1                                                              */
      __OM  uint32_t SET2       : 1;            /*!< [2..2] Set 2                                                              */
      __OM  uint32_t SET3       : 1;            /*!< [3..3] Set 3                                                              */
      __OM  uint32_t SET4       : 1;            /*!< [4..4] Set 4                                                              */
      __OM  uint32_t SET5       : 1;            /*!< [5..5] Set 5                                                              */
      __OM  uint32_t SET6       : 1;            /*!< [6..6] Set 6                                                              */
      __OM  uint32_t SET7       : 1;            /*!< [7..7] Set 7                                                              */
      __OM  uint32_t SET8       : 1;            /*!< [8..8] Set 8                                                              */
      __OM  uint32_t SET9       : 1;            /*!< [9..9] Set 9                                                              */
      __OM  uint32_t SET10      : 1;            /*!< [10..10] Set 10                                                           */
      __OM  uint32_t SET11      : 1;            /*!< [11..11] Set 11                                                           */
      __OM  uint32_t SET12      : 1;            /*!< [12..12] Set 12                                                           */
      __OM  uint32_t SET13      : 1;            /*!< [13..13] Set 13                                                           */
      __OM  uint32_t SET14      : 1;            /*!< [14..14] Set 14                                                           */
      __OM  uint32_t SET15      : 1;            /*!< [15..15] Set 15                                                           */
      __OM  uint32_t SET16      : 1;            /*!< [16..16] Set 16                                                           */
      __OM  uint32_t SET17      : 1;            /*!< [17..17] Set 17                                                           */
      __OM  uint32_t SET18      : 1;            /*!< [18..18] Set 18                                                           */
      __OM  uint32_t SET19      : 1;            /*!< [19..19] Set 19                                                           */
      __OM  uint32_t SET20      : 1;            /*!< [20..20] Set 20                                                           */
      __OM  uint32_t SET21      : 1;            /*!< [21..21] Set 21                                                           */
      __OM  uint32_t SET22      : 1;            /*!< [22..22] Set 22                                                           */
      __OM  uint32_t SET23      : 1;            /*!< [23..23] Set 23                                                           */
      __OM  uint32_t SET24      : 1;            /*!< [24..24] Set 24                                                           */
      __OM  uint32_t SET25      : 1;            /*!< [25..25] Set 25                                                           */
      __OM  uint32_t SET26      : 1;            /*!< [26..26] Set 26                                                           */
      __OM  uint32_t SET27      : 1;            /*!< [27..27] Set 27                                                           */
      __OM  uint32_t SET28      : 1;            /*!< [28..28] Set 28                                                           */
      __OM  uint32_t SET29      : 1;            /*!< [29..29] Set 29                                                           */
      __OM  uint32_t SET30      : 1;            /*!< [30..30] Set 30                                                           */
      __OM  uint32_t SET31      : 1;            /*!< [31..31] Set 31                                                           */
    } GPSET0_b;
  } ;
  
  union {
    __OM  uint32_t GPSET1;                      /*!< (@ 0x00000020) GPIO Pin Output Set 1                                      */
    
    struct {
      __OM  uint32_t SET32      : 1;            /*!< [0..0] Set 32                                                             */
      __OM  uint32_t SET33      : 1;            /*!< [1..1] Set 33                                                             */
      __OM  uint32_t SET34      : 1;            /*!< [2..2] Set 34                                                             */
      __OM  uint32_t SET35      : 1;            /*!< [3..3] Set 35                                                             */
      __OM  uint32_t SET36      : 1;            /*!< [4..4] Set 36                                                             */
      __OM  uint32_t SET37      : 1;            /*!< [5..5] Set 37                                                             */
      __OM  uint32_t SET38      : 1;            /*!< [6..6] Set 38                                                             */
      __OM  uint32_t SET39      : 1;            /*!< [7..7] Set 39                                                             */
      __OM  uint32_t SET40      : 1;            /*!< [8..8] Set 40                                                             */
      __OM  uint32_t SET41      : 1;            /*!< [9..9] Set 41                                                             */
      __OM  uint32_t SET42      : 1;            /*!< [10..10] Set 42                                                           */
      __OM  uint32_t SET43      : 1;            /*!< [11..11] Set 43                                                           */
      __OM  uint32_t SET44      : 1;            /*!< [12..12] Set 44                                                           */
      __OM  uint32_t SET45      : 1;            /*!< [13..13] Set 45                                                           */
      __OM  uint32_t SET46      : 1;            /*!< [14..14] Set 46                                                           */
      __OM  uint32_t SET47      : 1;            /*!< [15..15] Set 47                                                           */
      __OM  uint32_t SET48      : 1;            /*!< [16..16] Set 48                                                           */
      __OM  uint32_t SET49      : 1;            /*!< [17..17] Set 49                                                           */
      __OM  uint32_t SET50      : 1;            /*!< [18..18] Set 50                                                           */
      __OM  uint32_t SET51      : 1;            /*!< [19..19] Set 51                                                           */
      __OM  uint32_t SET52      : 1;            /*!< [20..20] Set 52                                                           */
      __OM  uint32_t SET53      : 1;            /*!< [21..21] Set 53                                                           */
            uint32_t            : 10;
    } GPSET1_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __OM  uint32_t GPCLR0;                      /*!< (@ 0x00000028) GPIO Pin Output Clear 0                                    */
    
    struct {
      __OM  uint32_t CLR0       : 1;            /*!< [0..0] Clear 0                                                            */
      __OM  uint32_t CLR1       : 1;            /*!< [1..1] Clear 1                                                            */
      __OM  uint32_t CLR2       : 1;            /*!< [2..2] Clear 2                                                            */
      __OM  uint32_t CLR3       : 1;            /*!< [3..3] Clear 3                                                            */
      __OM  uint32_t CLR4       : 1;            /*!< [4..4] Clear 4                                                            */
      __OM  uint32_t CLR5       : 1;            /*!< [5..5] Clear 5                                                            */
      __OM  uint32_t CLR6       : 1;            /*!< [6..6] Clear 6                                                            */
      __OM  uint32_t CLR7       : 1;            /*!< [7..7] Clear 7                                                            */
      __OM  uint32_t CLR8       : 1;            /*!< [8..8] Clear 8                                                            */
      __OM  uint32_t CLR9       : 1;            /*!< [9..9] Clear 9                                                            */
      __OM  uint32_t CLR10      : 1;            /*!< [10..10] Clear 10                                                         */
      __OM  uint32_t CLR11      : 1;            /*!< [11..11] Clear 11                                                         */
      __OM  uint32_t CLR12      : 1;            /*!< [12..12] Clear 12                                                         */
      __OM  uint32_t CLR13      : 1;            /*!< [13..13] Clear 13                                                         */
      __OM  uint32_t CLR14      : 1;            /*!< [14..14] Clear 14                                                         */
      __OM  uint32_t CLR15      : 1;            /*!< [15..15] Clear 15                                                         */
      __OM  uint32_t CLR16      : 1;            /*!< [16..16] Clear 16                                                         */
      __OM  uint32_t CLR17      : 1;            /*!< [17..17] Clear 17                                                         */
      __OM  uint32_t CLR18      : 1;            /*!< [18..18] Clear 18                                                         */
      __OM  uint32_t CLR19      : 1;            /*!< [19..19] Clear 19                                                         */
      __OM  uint32_t CLR20      : 1;            /*!< [20..20] Clear 20                                                         */
      __OM  uint32_t CLR21      : 1;            /*!< [21..21] Clear 21                                                         */
      __OM  uint32_t CLR22      : 1;            /*!< [22..22] Clear 22                                                         */
      __OM  uint32_t CLR23      : 1;            /*!< [23..23] Clear 23                                                         */
      __OM  uint32_t CLR24      : 1;            /*!< [24..24] Clear 24                                                         */
      __OM  uint32_t CLR25      : 1;            /*!< [25..25] Clear 25                                                         */
      __OM  uint32_t CLR26      : 1;            /*!< [26..26] Clear 26                                                         */
      __OM  uint32_t CLR27      : 1;            /*!< [27..27] Clear 27                                                         */
      __OM  uint32_t CLR28      : 1;            /*!< [28..28] Clear 28                                                         */
      __OM  uint32_t CLR29      : 1;            /*!< [29..29] Clear 29                                                         */
      __OM  uint32_t CLR30      : 1;            /*!< [30..30] Clear 30                                                         */
      __OM  uint32_t CLR31      : 1;            /*!< [31..31] Clear 31                                                         */
    } GPCLR0_b;
  } ;
  
  union {
    __OM  uint32_t GPCLR1;                      /*!< (@ 0x0000002C) GPIO Pin Output Clear 1                                    */
    
    struct {
      __OM  uint32_t CLR32      : 1;            /*!< [0..0] Clear 32                                                           */
      __OM  uint32_t CLR33      : 1;            /*!< [1..1] Clear 33                                                           */
      __OM  uint32_t CLR34      : 1;            /*!< [2..2] Clear 34                                                           */
      __OM  uint32_t CLR35      : 1;            /*!< [3..3] Clear 35                                                           */
      __OM  uint32_t CLR36      : 1;            /*!< [4..4] Clear 36                                                           */
      __OM  uint32_t CLR37      : 1;            /*!< [5..5] Clear 37                                                           */
      __OM  uint32_t CLR38      : 1;            /*!< [6..6] Clear 38                                                           */
      __OM  uint32_t CLR39      : 1;            /*!< [7..7] Clear 39                                                           */
      __OM  uint32_t CLR40      : 1;            /*!< [8..8] Clear 40                                                           */
      __OM  uint32_t CLR41      : 1;            /*!< [9..9] Clear 41                                                           */
      __OM  uint32_t CLR42      : 1;            /*!< [10..10] Clear 42                                                         */
      __OM  uint32_t CLR43      : 1;            /*!< [11..11] Clear 43                                                         */
      __OM  uint32_t CLR44      : 1;            /*!< [12..12] Clear 44                                                         */
      __OM  uint32_t CLR45      : 1;            /*!< [13..13] Clear 45                                                         */
      __OM  uint32_t CLR46      : 1;            /*!< [14..14] Clear 46                                                         */
      __OM  uint32_t CLR47      : 1;            /*!< [15..15] Clear 47                                                         */
      __OM  uint32_t CLR48      : 1;            /*!< [16..16] Clear 48                                                         */
      __OM  uint32_t CLR49      : 1;            /*!< [17..17] Clear 49                                                         */
      __OM  uint32_t CLR50      : 1;            /*!< [18..18] Clear 50                                                         */
      __OM  uint32_t CLR51      : 1;            /*!< [19..19] Clear 51                                                         */
      __OM  uint32_t CLR52      : 1;            /*!< [20..20] Clear 52                                                         */
      __OM  uint32_t CLR53      : 1;            /*!< [21..21] Clear 53                                                         */
            uint32_t            : 10;
    } GPCLR1_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IM  uint32_t GPLEV0;                      /*!< (@ 0x00000034) GPIO Pin Level 0                                           */
    
    struct {
      __IM  uint32_t LEV0       : 1;            /*!< [0..0] Level 0                                                            */
      __IM  uint32_t LEV1       : 1;            /*!< [1..1] Level 1                                                            */
      __IM  uint32_t LEV2       : 1;            /*!< [2..2] Level 2                                                            */
      __IM  uint32_t LEV3       : 1;            /*!< [3..3] Level 3                                                            */
      __IM  uint32_t LEV4       : 1;            /*!< [4..4] Level 4                                                            */
      __IM  uint32_t LEV5       : 1;            /*!< [5..5] Level 5                                                            */
      __IM  uint32_t LEV6       : 1;            /*!< [6..6] Level 6                                                            */
      __IM  uint32_t LEV7       : 1;            /*!< [7..7] Level 7                                                            */
      __IM  uint32_t LEV8       : 1;            /*!< [8..8] Level 8                                                            */
      __IM  uint32_t LEV9       : 1;            /*!< [9..9] Level 9                                                            */
      __IM  uint32_t LEV10      : 1;            /*!< [10..10] Level 10                                                         */
      __IM  uint32_t LEV11      : 1;            /*!< [11..11] Level 11                                                         */
      __IM  uint32_t LEV12      : 1;            /*!< [12..12] Level 12                                                         */
      __IM  uint32_t LEV13      : 1;            /*!< [13..13] Level 13                                                         */
      __IM  uint32_t LEV14      : 1;            /*!< [14..14] Level 14                                                         */
      __IM  uint32_t LEV15      : 1;            /*!< [15..15] Level 15                                                         */
      __IM  uint32_t LEV16      : 1;            /*!< [16..16] Level 16                                                         */
      __IM  uint32_t LEV17      : 1;            /*!< [17..17] Level 17                                                         */
      __IM  uint32_t LEV18      : 1;            /*!< [18..18] Level 18                                                         */
      __IM  uint32_t LEV19      : 1;            /*!< [19..19] Level 19                                                         */
      __IM  uint32_t LEV20      : 1;            /*!< [20..20] Level 20                                                         */
      __IM  uint32_t LEV21      : 1;            /*!< [21..21] Level 21                                                         */
      __IM  uint32_t LEV22      : 1;            /*!< [22..22] Level 22                                                         */
      __IM  uint32_t LEV23      : 1;            /*!< [23..23] Level 23                                                         */
      __IM  uint32_t LEV24      : 1;            /*!< [24..24] Level 24                                                         */
      __IM  uint32_t LEV25      : 1;            /*!< [25..25] Level 25                                                         */
      __IM  uint32_t LEV26      : 1;            /*!< [26..26] Level 26                                                         */
      __IM  uint32_t LEV27      : 1;            /*!< [27..27] Level 27                                                         */
      __IM  uint32_t LEV28      : 1;            /*!< [28..28] Level 28                                                         */
      __IM  uint32_t LEV29      : 1;            /*!< [29..29] Level 29                                                         */
      __IM  uint32_t LEV30      : 1;            /*!< [30..30] Level 30                                                         */
      __IM  uint32_t LEV31      : 1;            /*!< [31..31] Level 31                                                         */
    } GPLEV0_b;
  } ;
  
  union {
    __IM  uint32_t GPLEV1;                      /*!< (@ 0x00000038) GPIO Pin Level 1                                           */
    
    struct {
      __IM  uint32_t LEV32      : 1;            /*!< [0..0] Level 32                                                           */
      __IM  uint32_t LEV33      : 1;            /*!< [1..1] Level 33                                                           */
      __IM  uint32_t LEV34      : 1;            /*!< [2..2] Level 34                                                           */
      __IM  uint32_t LEV35      : 1;            /*!< [3..3] Level 35                                                           */
      __IM  uint32_t LEV36      : 1;            /*!< [4..4] Level 36                                                           */
      __IM  uint32_t LEV37      : 1;            /*!< [5..5] Level 37                                                           */
      __IM  uint32_t LEV38      : 1;            /*!< [6..6] Level 38                                                           */
      __IM  uint32_t LEV39      : 1;            /*!< [7..7] Level 39                                                           */
      __IM  uint32_t LEV40      : 1;            /*!< [8..8] Level 40                                                           */
      __IM  uint32_t LEV41      : 1;            /*!< [9..9] Level 41                                                           */
      __IM  uint32_t LEV42      : 1;            /*!< [10..10] Level 42                                                         */
      __IM  uint32_t LEV43      : 1;            /*!< [11..11] Level 43                                                         */
      __IM  uint32_t LEV44      : 1;            /*!< [12..12] Level 44                                                         */
      __IM  uint32_t LEV45      : 1;            /*!< [13..13] Level 45                                                         */
      __IM  uint32_t LEV46      : 1;            /*!< [14..14] Level 46                                                         */
      __IM  uint32_t LEV47      : 1;            /*!< [15..15] Level 47                                                         */
      __IM  uint32_t LEV48      : 1;            /*!< [16..16] Level 48                                                         */
      __IM  uint32_t LEV49      : 1;            /*!< [17..17] Level 49                                                         */
      __IM  uint32_t LEV50      : 1;            /*!< [18..18] Level 50                                                         */
      __IM  uint32_t LEV51      : 1;            /*!< [19..19] Level 51                                                         */
      __IM  uint32_t LEV52      : 1;            /*!< [20..20] Level 52                                                         */
      __IM  uint32_t LEV53      : 1;            /*!< [21..21] Level 53                                                         */
            uint32_t            : 10;
    } GPLEV1_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t GPEDS0;                      /*!< (@ 0x00000040) GPIO Pin Event Detect Status 0                             */
    
    struct {
      __IOM uint32_t EDS0       : 1;            /*!< [0..0] Event detected 0                                                   */
      __IOM uint32_t EDS1       : 1;            /*!< [1..1] Event detected 1                                                   */
      __IOM uint32_t EDS2       : 1;            /*!< [2..2] Event detected 2                                                   */
      __IOM uint32_t EDS3       : 1;            /*!< [3..3] Event detected 3                                                   */
      __IOM uint32_t EDS4       : 1;            /*!< [4..4] Event detected 4                                                   */
      __IOM uint32_t EDS5       : 1;            /*!< [5..5] Event detected 5                                                   */
      __IOM uint32_t EDS6       : 1;            /*!< [6..6] Event detected 6                                                   */
      __IOM uint32_t EDS7       : 1;            /*!< [7..7] Event detected 7                                                   */
      __IOM uint32_t EDS8       : 1;            /*!< [8..8] Event detected 8                                                   */
      __IOM uint32_t EDS9       : 1;            /*!< [9..9] Event detected 9                                                   */
      __IOM uint32_t EDS10      : 1;            /*!< [10..10] Event detected 10                                                */
      __IOM uint32_t EDS11      : 1;            /*!< [11..11] Event detected 11                                                */
      __IOM uint32_t EDS12      : 1;            /*!< [12..12] Event detected 12                                                */
      __IOM uint32_t EDS13      : 1;            /*!< [13..13] Event detected 13                                                */
      __IOM uint32_t EDS14      : 1;            /*!< [14..14] Event detected 14                                                */
      __IOM uint32_t EDS15      : 1;            /*!< [15..15] Event detected 15                                                */
      __IOM uint32_t EDS16      : 1;            /*!< [16..16] Event detected 16                                                */
      __IOM uint32_t EDS17      : 1;            /*!< [17..17] Event detected 17                                                */
      __IOM uint32_t EDS18      : 1;            /*!< [18..18] Event detected 18                                                */
      __IOM uint32_t EDS19      : 1;            /*!< [19..19] Event detected 19                                                */
      __IOM uint32_t EDS20      : 1;            /*!< [20..20] Event detected 20                                                */
      __IOM uint32_t EDS21      : 1;            /*!< [21..21] Event detected 21                                                */
      __IOM uint32_t EDS22      : 1;            /*!< [22..22] Event detected 22                                                */
      __IOM uint32_t EDS23      : 1;            /*!< [23..23] Event detected 23                                                */
      __IOM uint32_t EDS24      : 1;            /*!< [24..24] Event detected 24                                                */
      __IOM uint32_t EDS25      : 1;            /*!< [25..25] Event detected 25                                                */
      __IOM uint32_t EDS26      : 1;            /*!< [26..26] Event detected 26                                                */
      __IOM uint32_t EDS27      : 1;            /*!< [27..27] Event detected 27                                                */
      __IOM uint32_t EDS28      : 1;            /*!< [28..28] Event detected 28                                                */
      __IOM uint32_t EDS29      : 1;            /*!< [29..29] Event detected 29                                                */
      __IOM uint32_t EDS30      : 1;            /*!< [30..30] Event detected 30                                                */
      __IOM uint32_t EDS31      : 1;            /*!< [31..31] Event detected 31                                                */
    } GPEDS0_b;
  } ;
  
  union {
    __IOM uint32_t GPEDS1;                      /*!< (@ 0x00000044) GPIO Pin Event Detect Status 1                             */
    
    struct {
      __IOM uint32_t EDS32      : 1;            /*!< [0..0] Event detected 32                                                  */
      __IOM uint32_t EDS33      : 1;            /*!< [1..1] Event detected 33                                                  */
      __IOM uint32_t EDS34      : 1;            /*!< [2..2] Event detected 34                                                  */
      __IOM uint32_t EDS35      : 1;            /*!< [3..3] Event detected 35                                                  */
      __IOM uint32_t EDS36      : 1;            /*!< [4..4] Event detected 36                                                  */
      __IOM uint32_t EDS37      : 1;            /*!< [5..5] Event detected 37                                                  */
      __IOM uint32_t EDS38      : 1;            /*!< [6..6] Event detected 38                                                  */
      __IOM uint32_t EDS39      : 1;            /*!< [7..7] Event detected 39                                                  */
      __IOM uint32_t EDS40      : 1;            /*!< [8..8] Event detected 40                                                  */
      __IOM uint32_t EDS41      : 1;            /*!< [9..9] Event detected 41                                                  */
      __IOM uint32_t EDS42      : 1;            /*!< [10..10] Event detected 42                                                */
      __IOM uint32_t EDS43      : 1;            /*!< [11..11] Event detected 43                                                */
      __IOM uint32_t EDS44      : 1;            /*!< [12..12] Event detected 44                                                */
      __IOM uint32_t EDS45      : 1;            /*!< [13..13] Event detected 45                                                */
      __IOM uint32_t EDS46      : 1;            /*!< [14..14] Event detected 46                                                */
      __IOM uint32_t EDS47      : 1;            /*!< [15..15] Event detected 47                                                */
      __IOM uint32_t EDS48      : 1;            /*!< [16..16] Event detected 48                                                */
      __IOM uint32_t EDS49      : 1;            /*!< [17..17] Event detected 49                                                */
      __IOM uint32_t EDS50      : 1;            /*!< [18..18] Event detected 50                                                */
      __IOM uint32_t EDS51      : 1;            /*!< [19..19] Event detected 51                                                */
      __IOM uint32_t EDS52      : 1;            /*!< [20..20] Event detected 52                                                */
      __IOM uint32_t EDS53      : 1;            /*!< [21..21] Event detected 53                                                */
            uint32_t            : 10;
    } GPEDS1_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t GPREN0;                      /*!< (@ 0x0000004C) GPIO Pin Rising Edge Detect Enable 0                       */
    
    struct {
      __IOM uint32_t REN0       : 1;            /*!< [0..0] Rising edge enabled 0                                              */
      __IOM uint32_t REN1       : 1;            /*!< [1..1] Rising edge enabled 1                                              */
      __IOM uint32_t REN2       : 1;            /*!< [2..2] Rising edge enabled 2                                              */
      __IOM uint32_t REN3       : 1;            /*!< [3..3] Rising edge enabled 3                                              */
      __IOM uint32_t REN4       : 1;            /*!< [4..4] Rising edge enabled 4                                              */
      __IOM uint32_t REN5       : 1;            /*!< [5..5] Rising edge enabled 5                                              */
      __IOM uint32_t REN6       : 1;            /*!< [6..6] Rising edge enabled 6                                              */
      __IOM uint32_t REN7       : 1;            /*!< [7..7] Rising edge enabled 7                                              */
      __IOM uint32_t REN8       : 1;            /*!< [8..8] Rising edge enabled 8                                              */
      __IOM uint32_t REN9       : 1;            /*!< [9..9] Rising edge enabled 9                                              */
      __IOM uint32_t REN10      : 1;            /*!< [10..10] Rising edge enabled 10                                           */
      __IOM uint32_t REN11      : 1;            /*!< [11..11] Rising edge enabled 11                                           */
      __IOM uint32_t REN12      : 1;            /*!< [12..12] Rising edge enabled 12                                           */
      __IOM uint32_t REN13      : 1;            /*!< [13..13] Rising edge enabled 13                                           */
      __IOM uint32_t REN14      : 1;            /*!< [14..14] Rising edge enabled 14                                           */
      __IOM uint32_t REN15      : 1;            /*!< [15..15] Rising edge enabled 15                                           */
      __IOM uint32_t REN16      : 1;            /*!< [16..16] Rising edge enabled 16                                           */
      __IOM uint32_t REN17      : 1;            /*!< [17..17] Rising edge enabled 17                                           */
      __IOM uint32_t REN18      : 1;            /*!< [18..18] Rising edge enabled 18                                           */
      __IOM uint32_t REN19      : 1;            /*!< [19..19] Rising edge enabled 19                                           */
      __IOM uint32_t REN20      : 1;            /*!< [20..20] Rising edge enabled 20                                           */
      __IOM uint32_t REN21      : 1;            /*!< [21..21] Rising edge enabled 21                                           */
      __IOM uint32_t REN22      : 1;            /*!< [22..22] Rising edge enabled 22                                           */
      __IOM uint32_t REN23      : 1;            /*!< [23..23] Rising edge enabled 23                                           */
      __IOM uint32_t REN24      : 1;            /*!< [24..24] Rising edge enabled 24                                           */
      __IOM uint32_t REN25      : 1;            /*!< [25..25] Rising edge enabled 25                                           */
      __IOM uint32_t REN26      : 1;            /*!< [26..26] Rising edge enabled 26                                           */
      __IOM uint32_t REN27      : 1;            /*!< [27..27] Rising edge enabled 27                                           */
      __IOM uint32_t REN28      : 1;            /*!< [28..28] Rising edge enabled 28                                           */
      __IOM uint32_t REN29      : 1;            /*!< [29..29] Rising edge enabled 29                                           */
      __IOM uint32_t REN30      : 1;            /*!< [30..30] Rising edge enabled 30                                           */
      __IOM uint32_t REN31      : 1;            /*!< [31..31] Rising edge enabled 31                                           */
    } GPREN0_b;
  } ;
  
  union {
    __IOM uint32_t GPREN1;                      /*!< (@ 0x00000050) GPIO Pin Rising Edge Detect Enable 1                       */
    
    struct {
      __IOM uint32_t REN32      : 1;            /*!< [0..0] Rising edge enabled 32                                             */
      __IOM uint32_t REN33      : 1;            /*!< [1..1] Rising edge enabled 33                                             */
      __IOM uint32_t REN34      : 1;            /*!< [2..2] Rising edge enabled 34                                             */
      __IOM uint32_t REN35      : 1;            /*!< [3..3] Rising edge enabled 35                                             */
      __IOM uint32_t REN36      : 1;            /*!< [4..4] Rising edge enabled 36                                             */
      __IOM uint32_t REN37      : 1;            /*!< [5..5] Rising edge enabled 37                                             */
      __IOM uint32_t REN38      : 1;            /*!< [6..6] Rising edge enabled 38                                             */
      __IOM uint32_t REN39      : 1;            /*!< [7..7] Rising edge enabled 39                                             */
      __IOM uint32_t REN40      : 1;            /*!< [8..8] Rising edge enabled 40                                             */
      __IOM uint32_t REN41      : 1;            /*!< [9..9] Rising edge enabled 41                                             */
      __IOM uint32_t REN42      : 1;            /*!< [10..10] Rising edge enabled 42                                           */
      __IOM uint32_t REN43      : 1;            /*!< [11..11] Rising edge enabled 43                                           */
      __IOM uint32_t REN44      : 1;            /*!< [12..12] Rising edge enabled 44                                           */
      __IOM uint32_t REN45      : 1;            /*!< [13..13] Rising edge enabled 45                                           */
      __IOM uint32_t REN46      : 1;            /*!< [14..14] Rising edge enabled 46                                           */
      __IOM uint32_t REN47      : 1;            /*!< [15..15] Rising edge enabled 47                                           */
      __IOM uint32_t REN48      : 1;            /*!< [16..16] Rising edge enabled 48                                           */
      __IOM uint32_t REN49      : 1;            /*!< [17..17] Rising edge enabled 49                                           */
      __IOM uint32_t REN50      : 1;            /*!< [18..18] Rising edge enabled 50                                           */
      __IOM uint32_t REN51      : 1;            /*!< [19..19] Rising edge enabled 51                                           */
      __IOM uint32_t REN52      : 1;            /*!< [20..20] Rising edge enabled 52                                           */
      __IOM uint32_t REN53      : 1;            /*!< [21..21] Rising edge enabled 53                                           */
            uint32_t            : 10;
    } GPREN1_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t GPFEN0;                      /*!< (@ 0x00000058) GPIO Pin Falling Edge Detect Enable 0                      */
    
    struct {
      __IOM uint32_t FEN0       : 1;            /*!< [0..0] Falling edge enabled 0                                             */
      __IOM uint32_t FEN1       : 1;            /*!< [1..1] Falling edge enabled 1                                             */
      __IOM uint32_t FEN2       : 1;            /*!< [2..2] Falling edge enabled 2                                             */
      __IOM uint32_t FEN3       : 1;            /*!< [3..3] Falling edge enabled 3                                             */
      __IOM uint32_t FEN4       : 1;            /*!< [4..4] Falling edge enabled 4                                             */
      __IOM uint32_t FEN5       : 1;            /*!< [5..5] Falling edge enabled 5                                             */
      __IOM uint32_t FEN6       : 1;            /*!< [6..6] Falling edge enabled 6                                             */
      __IOM uint32_t FEN7       : 1;            /*!< [7..7] Falling edge enabled 7                                             */
      __IOM uint32_t FEN8       : 1;            /*!< [8..8] Falling edge enabled 8                                             */
      __IOM uint32_t FEN9       : 1;            /*!< [9..9] Falling edge enabled 9                                             */
      __IOM uint32_t FEN10      : 1;            /*!< [10..10] Falling edge enabled 10                                          */
      __IOM uint32_t FEN11      : 1;            /*!< [11..11] Falling edge enabled 11                                          */
      __IOM uint32_t FEN12      : 1;            /*!< [12..12] Falling edge enabled 12                                          */
      __IOM uint32_t FEN13      : 1;            /*!< [13..13] Falling edge enabled 13                                          */
      __IOM uint32_t FEN14      : 1;            /*!< [14..14] Falling edge enabled 14                                          */
      __IOM uint32_t FEN15      : 1;            /*!< [15..15] Falling edge enabled 15                                          */
      __IOM uint32_t FEN16      : 1;            /*!< [16..16] Falling edge enabled 16                                          */
      __IOM uint32_t FEN17      : 1;            /*!< [17..17] Falling edge enabled 17                                          */
      __IOM uint32_t FEN18      : 1;            /*!< [18..18] Falling edge enabled 18                                          */
      __IOM uint32_t FEN19      : 1;            /*!< [19..19] Falling edge enabled 19                                          */
      __IOM uint32_t FEN20      : 1;            /*!< [20..20] Falling edge enabled 20                                          */
      __IOM uint32_t FEN21      : 1;            /*!< [21..21] Falling edge enabled 21                                          */
      __IOM uint32_t FEN22      : 1;            /*!< [22..22] Falling edge enabled 22                                          */
      __IOM uint32_t FEN23      : 1;            /*!< [23..23] Falling edge enabled 23                                          */
      __IOM uint32_t FEN24      : 1;            /*!< [24..24] Falling edge enabled 24                                          */
      __IOM uint32_t FEN25      : 1;            /*!< [25..25] Falling edge enabled 25                                          */
      __IOM uint32_t FEN26      : 1;            /*!< [26..26] Falling edge enabled 26                                          */
      __IOM uint32_t FEN27      : 1;            /*!< [27..27] Falling edge enabled 27                                          */
      __IOM uint32_t FEN28      : 1;            /*!< [28..28] Falling edge enabled 28                                          */
      __IOM uint32_t FEN29      : 1;            /*!< [29..29] Falling edge enabled 29                                          */
      __IOM uint32_t FEN30      : 1;            /*!< [30..30] Falling edge enabled 30                                          */
      __IOM uint32_t FEN31      : 1;            /*!< [31..31] Falling edge enabled 31                                          */
    } GPFEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPFEN1;                      /*!< (@ 0x0000005C) GPIO Pin Falling Edge Detect Enable 1                      */
    
    struct {
      __IOM uint32_t FEN32      : 1;            /*!< [0..0] Falling edge enabled 32                                            */
      __IOM uint32_t FEN33      : 1;            /*!< [1..1] Falling edge enabled 33                                            */
      __IOM uint32_t FEN34      : 1;            /*!< [2..2] Falling edge enabled 34                                            */
      __IOM uint32_t FEN35      : 1;            /*!< [3..3] Falling edge enabled 35                                            */
      __IOM uint32_t FEN36      : 1;            /*!< [4..4] Falling edge enabled 36                                            */
      __IOM uint32_t FEN37      : 1;            /*!< [5..5] Falling edge enabled 37                                            */
      __IOM uint32_t FEN38      : 1;            /*!< [6..6] Falling edge enabled 38                                            */
      __IOM uint32_t FEN39      : 1;            /*!< [7..7] Falling edge enabled 39                                            */
      __IOM uint32_t FEN40      : 1;            /*!< [8..8] Falling edge enabled 40                                            */
      __IOM uint32_t FEN41      : 1;            /*!< [9..9] Falling edge enabled 41                                            */
      __IOM uint32_t FEN42      : 1;            /*!< [10..10] Falling edge enabled 42                                          */
      __IOM uint32_t FEN43      : 1;            /*!< [11..11] Falling edge enabled 43                                          */
      __IOM uint32_t FEN44      : 1;            /*!< [12..12] Falling edge enabled 44                                          */
      __IOM uint32_t FEN45      : 1;            /*!< [13..13] Falling edge enabled 45                                          */
      __IOM uint32_t FEN46      : 1;            /*!< [14..14] Falling edge enabled 46                                          */
      __IOM uint32_t FEN47      : 1;            /*!< [15..15] Falling edge enabled 47                                          */
      __IOM uint32_t FEN48      : 1;            /*!< [16..16] Falling edge enabled 48                                          */
      __IOM uint32_t FEN49      : 1;            /*!< [17..17] Falling edge enabled 49                                          */
      __IOM uint32_t FEN50      : 1;            /*!< [18..18] Falling edge enabled 50                                          */
      __IOM uint32_t FEN51      : 1;            /*!< [19..19] Falling edge enabled 51                                          */
      __IOM uint32_t FEN52      : 1;            /*!< [20..20] Falling edge enabled 52                                          */
      __IOM uint32_t FEN53      : 1;            /*!< [21..21] Falling edge enabled 53                                          */
            uint32_t            : 10;
    } GPFEN1_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t GPHEN0;                      /*!< (@ 0x00000064) GPIO Pin High Detect Enable 0                              */
    
    struct {
      __IOM uint32_t HEN0       : 1;            /*!< [0..0] High detect enabled 0                                              */
      __IOM uint32_t HEN1       : 1;            /*!< [1..1] High detect enabled 1                                              */
      __IOM uint32_t HEN2       : 1;            /*!< [2..2] High detect enabled 2                                              */
      __IOM uint32_t HEN3       : 1;            /*!< [3..3] High detect enabled 3                                              */
      __IOM uint32_t HEN4       : 1;            /*!< [4..4] High detect enabled 4                                              */
      __IOM uint32_t HEN5       : 1;            /*!< [5..5] High detect enabled 5                                              */
      __IOM uint32_t HEN6       : 1;            /*!< [6..6] High detect enabled 6                                              */
      __IOM uint32_t HEN7       : 1;            /*!< [7..7] High detect enabled 7                                              */
      __IOM uint32_t HEN8       : 1;            /*!< [8..8] High detect enabled 8                                              */
      __IOM uint32_t HEN9       : 1;            /*!< [9..9] High detect enabled 9                                              */
      __IOM uint32_t HEN10      : 1;            /*!< [10..10] High detect enabled 10                                           */
      __IOM uint32_t HEN11      : 1;            /*!< [11..11] High detect enabled 11                                           */
      __IOM uint32_t HEN12      : 1;            /*!< [12..12] High detect enabled 12                                           */
      __IOM uint32_t HEN13      : 1;            /*!< [13..13] High detect enabled 13                                           */
      __IOM uint32_t HEN14      : 1;            /*!< [14..14] High detect enabled 14                                           */
      __IOM uint32_t HEN15      : 1;            /*!< [15..15] High detect enabled 15                                           */
      __IOM uint32_t HEN16      : 1;            /*!< [16..16] High detect enabled 16                                           */
      __IOM uint32_t HEN17      : 1;            /*!< [17..17] High detect enabled 17                                           */
      __IOM uint32_t HEN18      : 1;            /*!< [18..18] High detect enabled 18                                           */
      __IOM uint32_t HEN19      : 1;            /*!< [19..19] High detect enabled 19                                           */
      __IOM uint32_t HEN20      : 1;            /*!< [20..20] High detect enabled 20                                           */
      __IOM uint32_t HEN21      : 1;            /*!< [21..21] High detect enabled 21                                           */
      __IOM uint32_t HEN22      : 1;            /*!< [22..22] High detect enabled 22                                           */
      __IOM uint32_t HEN23      : 1;            /*!< [23..23] High detect enabled 23                                           */
      __IOM uint32_t HEN24      : 1;            /*!< [24..24] High detect enabled 24                                           */
      __IOM uint32_t HEN25      : 1;            /*!< [25..25] High detect enabled 25                                           */
      __IOM uint32_t HEN26      : 1;            /*!< [26..26] High detect enabled 26                                           */
      __IOM uint32_t HEN27      : 1;            /*!< [27..27] High detect enabled 27                                           */
      __IOM uint32_t HEN28      : 1;            /*!< [28..28] High detect enabled 28                                           */
      __IOM uint32_t HEN29      : 1;            /*!< [29..29] High detect enabled 29                                           */
      __IOM uint32_t HEN30      : 1;            /*!< [30..30] High detect enabled 30                                           */
      __IOM uint32_t HEN31      : 1;            /*!< [31..31] High detect enabled 31                                           */
    } GPHEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPHEN1;                      /*!< (@ 0x00000068) GPIO Pin High Detect Enable 1                              */
    
    struct {
      __IOM uint32_t HEN32      : 1;            /*!< [0..0] High detect enabled 32                                             */
      __IOM uint32_t HEN33      : 1;            /*!< [1..1] High detect enabled 33                                             */
      __IOM uint32_t HEN34      : 1;            /*!< [2..2] High detect enabled 34                                             */
      __IOM uint32_t HEN35      : 1;            /*!< [3..3] High detect enabled 35                                             */
      __IOM uint32_t HEN36      : 1;            /*!< [4..4] High detect enabled 36                                             */
      __IOM uint32_t HEN37      : 1;            /*!< [5..5] High detect enabled 37                                             */
      __IOM uint32_t HEN38      : 1;            /*!< [6..6] High detect enabled 38                                             */
      __IOM uint32_t HEN39      : 1;            /*!< [7..7] High detect enabled 39                                             */
      __IOM uint32_t HEN40      : 1;            /*!< [8..8] High detect enabled 40                                             */
      __IOM uint32_t HEN41      : 1;            /*!< [9..9] High detect enabled 41                                             */
      __IOM uint32_t HEN42      : 1;            /*!< [10..10] High detect enabled 42                                           */
      __IOM uint32_t HEN43      : 1;            /*!< [11..11] High detect enabled 43                                           */
      __IOM uint32_t HEN44      : 1;            /*!< [12..12] High detect enabled 44                                           */
      __IOM uint32_t HEN45      : 1;            /*!< [13..13] High detect enabled 45                                           */
      __IOM uint32_t HEN46      : 1;            /*!< [14..14] High detect enabled 46                                           */
      __IOM uint32_t HEN47      : 1;            /*!< [15..15] High detect enabled 47                                           */
      __IOM uint32_t HEN48      : 1;            /*!< [16..16] High detect enabled 48                                           */
      __IOM uint32_t HEN49      : 1;            /*!< [17..17] High detect enabled 49                                           */
      __IOM uint32_t HEN50      : 1;            /*!< [18..18] High detect enabled 50                                           */
      __IOM uint32_t HEN51      : 1;            /*!< [19..19] High detect enabled 51                                           */
      __IOM uint32_t HEN52      : 1;            /*!< [20..20] High detect enabled 52                                           */
      __IOM uint32_t HEN53      : 1;            /*!< [21..21] High detect enabled 53                                           */
            uint32_t            : 10;
    } GPHEN1_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t GPLEN0;                      /*!< (@ 0x00000070) GPIO Pin Low Detect Enable 0                               */
    
    struct {
      __IOM uint32_t LEN0       : 1;            /*!< [0..0] Low detect enabled 0                                               */
      __IOM uint32_t LEN1       : 1;            /*!< [1..1] Low detect enabled 1                                               */
      __IOM uint32_t LEN2       : 1;            /*!< [2..2] Low detect enabled 2                                               */
      __IOM uint32_t LEN3       : 1;            /*!< [3..3] Low detect enabled 3                                               */
      __IOM uint32_t LEN4       : 1;            /*!< [4..4] Low detect enabled 4                                               */
      __IOM uint32_t LEN5       : 1;            /*!< [5..5] Low detect enabled 5                                               */
      __IOM uint32_t LEN6       : 1;            /*!< [6..6] Low detect enabled 6                                               */
      __IOM uint32_t LEN7       : 1;            /*!< [7..7] Low detect enabled 7                                               */
      __IOM uint32_t LEN8       : 1;            /*!< [8..8] Low detect enabled 8                                               */
      __IOM uint32_t LEN9       : 1;            /*!< [9..9] Low detect enabled 9                                               */
      __IOM uint32_t LEN10      : 1;            /*!< [10..10] Low detect enabled 10                                            */
      __IOM uint32_t LEN11      : 1;            /*!< [11..11] Low detect enabled 11                                            */
      __IOM uint32_t LEN12      : 1;            /*!< [12..12] Low detect enabled 12                                            */
      __IOM uint32_t LEN13      : 1;            /*!< [13..13] Low detect enabled 13                                            */
      __IOM uint32_t LEN14      : 1;            /*!< [14..14] Low detect enabled 14                                            */
      __IOM uint32_t LEN15      : 1;            /*!< [15..15] Low detect enabled 15                                            */
      __IOM uint32_t LEN16      : 1;            /*!< [16..16] Low detect enabled 16                                            */
      __IOM uint32_t LEN17      : 1;            /*!< [17..17] Low detect enabled 17                                            */
      __IOM uint32_t LEN18      : 1;            /*!< [18..18] Low detect enabled 18                                            */
      __IOM uint32_t LEN19      : 1;            /*!< [19..19] Low detect enabled 19                                            */
      __IOM uint32_t LEN20      : 1;            /*!< [20..20] Low detect enabled 20                                            */
      __IOM uint32_t LEN21      : 1;            /*!< [21..21] Low detect enabled 21                                            */
      __IOM uint32_t LEN22      : 1;            /*!< [22..22] Low detect enabled 22                                            */
      __IOM uint32_t LEN23      : 1;            /*!< [23..23] Low detect enabled 23                                            */
      __IOM uint32_t LEN24      : 1;            /*!< [24..24] Low detect enabled 24                                            */
      __IOM uint32_t LEN25      : 1;            /*!< [25..25] Low detect enabled 25                                            */
      __IOM uint32_t LEN26      : 1;            /*!< [26..26] Low detect enabled 26                                            */
      __IOM uint32_t LEN27      : 1;            /*!< [27..27] Low detect enabled 27                                            */
      __IOM uint32_t LEN28      : 1;            /*!< [28..28] Low detect enabled 28                                            */
      __IOM uint32_t LEN29      : 1;            /*!< [29..29] Low detect enabled 29                                            */
      __IOM uint32_t LEN30      : 1;            /*!< [30..30] Low detect enabled 30                                            */
      __IOM uint32_t LEN31      : 1;            /*!< [31..31] Low detect enabled 31                                            */
    } GPLEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPLEN1;                      /*!< (@ 0x00000074) GPIO Pin Low Detect Enable 1                               */
    
    struct {
      __IOM uint32_t LEN32      : 1;            /*!< [0..0] Low detect enabled 32                                              */
      __IOM uint32_t LEN33      : 1;            /*!< [1..1] Low detect enabled 33                                              */
      __IOM uint32_t LEN34      : 1;            /*!< [2..2] Low detect enabled 34                                              */
      __IOM uint32_t LEN35      : 1;            /*!< [3..3] Low detect enabled 35                                              */
      __IOM uint32_t LEN36      : 1;            /*!< [4..4] Low detect enabled 36                                              */
      __IOM uint32_t LEN37      : 1;            /*!< [5..5] Low detect enabled 37                                              */
      __IOM uint32_t LEN38      : 1;            /*!< [6..6] Low detect enabled 38                                              */
      __IOM uint32_t LEN39      : 1;            /*!< [7..7] Low detect enabled 39                                              */
      __IOM uint32_t LEN40      : 1;            /*!< [8..8] Low detect enabled 40                                              */
      __IOM uint32_t LEN41      : 1;            /*!< [9..9] Low detect enabled 41                                              */
      __IOM uint32_t LEN42      : 1;            /*!< [10..10] Low detect enabled 42                                            */
      __IOM uint32_t LEN43      : 1;            /*!< [11..11] Low detect enabled 43                                            */
      __IOM uint32_t LEN44      : 1;            /*!< [12..12] Low detect enabled 44                                            */
      __IOM uint32_t LEN45      : 1;            /*!< [13..13] Low detect enabled 45                                            */
      __IOM uint32_t LEN46      : 1;            /*!< [14..14] Low detect enabled 46                                            */
      __IOM uint32_t LEN47      : 1;            /*!< [15..15] Low detect enabled 47                                            */
      __IOM uint32_t LEN48      : 1;            /*!< [16..16] Low detect enabled 48                                            */
      __IOM uint32_t LEN49      : 1;            /*!< [17..17] Low detect enabled 49                                            */
      __IOM uint32_t LEN50      : 1;            /*!< [18..18] Low detect enabled 50                                            */
      __IOM uint32_t LEN51      : 1;            /*!< [19..19] Low detect enabled 51                                            */
      __IOM uint32_t LEN52      : 1;            /*!< [20..20] Low detect enabled 52                                            */
      __IOM uint32_t LEN53      : 1;            /*!< [21..21] Low detect enabled 53                                            */
            uint32_t            : 10;
    } GPLEN1_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t GPAREN0;                     /*!< (@ 0x0000007C) GPIO Pin Async. Rising Edge Detect 0                       */
    
    struct {
      __IOM uint32_t AREN0      : 1;            /*!< [0..0] Async rising enabled 0                                             */
      __IOM uint32_t AREN1      : 1;            /*!< [1..1] Async rising enabled 1                                             */
      __IOM uint32_t AREN2      : 1;            /*!< [2..2] Async rising enabled 2                                             */
      __IOM uint32_t AREN3      : 1;            /*!< [3..3] Async rising enabled 3                                             */
      __IOM uint32_t AREN4      : 1;            /*!< [4..4] Async rising enabled 4                                             */
      __IOM uint32_t AREN5      : 1;            /*!< [5..5] Async rising enabled 5                                             */
      __IOM uint32_t AREN6      : 1;            /*!< [6..6] Async rising enabled 6                                             */
      __IOM uint32_t AREN7      : 1;            /*!< [7..7] Async rising enabled 7                                             */
      __IOM uint32_t AREN8      : 1;            /*!< [8..8] Async rising enabled 8                                             */
      __IOM uint32_t AREN9      : 1;            /*!< [9..9] Async rising enabled 9                                             */
      __IOM uint32_t AREN10     : 1;            /*!< [10..10] Async rising enabled 10                                          */
      __IOM uint32_t AREN11     : 1;            /*!< [11..11] Async rising enabled 11                                          */
      __IOM uint32_t AREN12     : 1;            /*!< [12..12] Async rising enabled 12                                          */
      __IOM uint32_t AREN13     : 1;            /*!< [13..13] Async rising enabled 13                                          */
      __IOM uint32_t AREN14     : 1;            /*!< [14..14] Async rising enabled 14                                          */
      __IOM uint32_t AREN15     : 1;            /*!< [15..15] Async rising enabled 15                                          */
      __IOM uint32_t AREN16     : 1;            /*!< [16..16] Async rising enabled 16                                          */
      __IOM uint32_t AREN17     : 1;            /*!< [17..17] Async rising enabled 17                                          */
      __IOM uint32_t AREN18     : 1;            /*!< [18..18] Async rising enabled 18                                          */
      __IOM uint32_t AREN19     : 1;            /*!< [19..19] Async rising enabled 19                                          */
      __IOM uint32_t AREN20     : 1;            /*!< [20..20] Async rising enabled 20                                          */
      __IOM uint32_t AREN21     : 1;            /*!< [21..21] Async rising enabled 21                                          */
      __IOM uint32_t AREN22     : 1;            /*!< [22..22] Async rising enabled 22                                          */
      __IOM uint32_t AREN23     : 1;            /*!< [23..23] Async rising enabled 23                                          */
      __IOM uint32_t AREN24     : 1;            /*!< [24..24] Async rising enabled 24                                          */
      __IOM uint32_t AREN25     : 1;            /*!< [25..25] Async rising enabled 25                                          */
      __IOM uint32_t AREN26     : 1;            /*!< [26..26] Async rising enabled 26                                          */
      __IOM uint32_t AREN27     : 1;            /*!< [27..27] Async rising enabled 27                                          */
      __IOM uint32_t AREN28     : 1;            /*!< [28..28] Async rising enabled 28                                          */
      __IOM uint32_t AREN29     : 1;            /*!< [29..29] Async rising enabled 29                                          */
      __IOM uint32_t AREN30     : 1;            /*!< [30..30] Async rising enabled 30                                          */
      __IOM uint32_t AREN31     : 1;            /*!< [31..31] Async rising enabled 31                                          */
    } GPAREN0_b;
  } ;
  
  union {
    __IOM uint32_t GPAREN1;                     /*!< (@ 0x00000080) GPIO Pin Async. Rising Edge Detect 1                       */
    
    struct {
      __IOM uint32_t AREN32     : 1;            /*!< [0..0] Async rising enabled 32                                            */
      __IOM uint32_t AREN33     : 1;            /*!< [1..1] Async rising enabled 33                                            */
      __IOM uint32_t AREN34     : 1;            /*!< [2..2] Async rising enabled 34                                            */
      __IOM uint32_t AREN35     : 1;            /*!< [3..3] Async rising enabled 35                                            */
      __IOM uint32_t AREN36     : 1;            /*!< [4..4] Async rising enabled 36                                            */
      __IOM uint32_t AREN37     : 1;            /*!< [5..5] Async rising enabled 37                                            */
      __IOM uint32_t AREN38     : 1;            /*!< [6..6] Async rising enabled 38                                            */
      __IOM uint32_t AREN39     : 1;            /*!< [7..7] Async rising enabled 39                                            */
      __IOM uint32_t AREN40     : 1;            /*!< [8..8] Async rising enabled 40                                            */
      __IOM uint32_t AREN41     : 1;            /*!< [9..9] Async rising enabled 41                                            */
      __IOM uint32_t AREN42     : 1;            /*!< [10..10] Async rising enabled 42                                          */
      __IOM uint32_t AREN43     : 1;            /*!< [11..11] Async rising enabled 43                                          */
      __IOM uint32_t AREN44     : 1;            /*!< [12..12] Async rising enabled 44                                          */
      __IOM uint32_t AREN45     : 1;            /*!< [13..13] Async rising enabled 45                                          */
      __IOM uint32_t AREN46     : 1;            /*!< [14..14] Async rising enabled 46                                          */
      __IOM uint32_t AREN47     : 1;            /*!< [15..15] Async rising enabled 47                                          */
      __IOM uint32_t AREN48     : 1;            /*!< [16..16] Async rising enabled 48                                          */
      __IOM uint32_t AREN49     : 1;            /*!< [17..17] Async rising enabled 49                                          */
      __IOM uint32_t AREN50     : 1;            /*!< [18..18] Async rising enabled 50                                          */
      __IOM uint32_t AREN51     : 1;            /*!< [19..19] Async rising enabled 51                                          */
      __IOM uint32_t AREN52     : 1;            /*!< [20..20] Async rising enabled 52                                          */
      __IOM uint32_t AREN53     : 1;            /*!< [21..21] Async rising enabled 53                                          */
            uint32_t            : 10;
    } GPAREN1_b;
  } ;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t GPAFEN0;                     /*!< (@ 0x00000088) GPIO Pin Async. Falling Edge Detect 0                      */
    
    struct {
      __IOM uint32_t AFEN0      : 1;            /*!< [0..0] Async falling enabled 0                                            */
      __IOM uint32_t AFEN1      : 1;            /*!< [1..1] Async falling enabled 1                                            */
      __IOM uint32_t AFEN2      : 1;            /*!< [2..2] Async falling enabled 2                                            */
      __IOM uint32_t AFEN3      : 1;            /*!< [3..3] Async falling enabled 3                                            */
      __IOM uint32_t AFEN4      : 1;            /*!< [4..4] Async falling enabled 4                                            */
      __IOM uint32_t AFEN5      : 1;            /*!< [5..5] Async falling enabled 5                                            */
      __IOM uint32_t AFEN6      : 1;            /*!< [6..6] Async falling enabled 6                                            */
      __IOM uint32_t AFEN7      : 1;            /*!< [7..7] Async falling enabled 7                                            */
      __IOM uint32_t AFEN8      : 1;            /*!< [8..8] Async falling enabled 8                                            */
      __IOM uint32_t AFEN9      : 1;            /*!< [9..9] Async falling enabled 9                                            */
      __IOM uint32_t AFEN10     : 1;            /*!< [10..10] Async falling enabled 10                                         */
      __IOM uint32_t AFEN11     : 1;            /*!< [11..11] Async falling enabled 11                                         */
      __IOM uint32_t AFEN12     : 1;            /*!< [12..12] Async falling enabled 12                                         */
      __IOM uint32_t AFEN13     : 1;            /*!< [13..13] Async falling enabled 13                                         */
      __IOM uint32_t AFEN14     : 1;            /*!< [14..14] Async falling enabled 14                                         */
      __IOM uint32_t AFEN15     : 1;            /*!< [15..15] Async falling enabled 15                                         */
      __IOM uint32_t AFEN16     : 1;            /*!< [16..16] Async falling enabled 16                                         */
      __IOM uint32_t AFEN17     : 1;            /*!< [17..17] Async falling enabled 17                                         */
      __IOM uint32_t AFEN18     : 1;            /*!< [18..18] Async falling enabled 18                                         */
      __IOM uint32_t AFEN19     : 1;            /*!< [19..19] Async falling enabled 19                                         */
      __IOM uint32_t AFEN20     : 1;            /*!< [20..20] Async falling enabled 20                                         */
      __IOM uint32_t AFEN21     : 1;            /*!< [21..21] Async falling enabled 21                                         */
      __IOM uint32_t AFEN22     : 1;            /*!< [22..22] Async falling enabled 22                                         */
      __IOM uint32_t AFEN23     : 1;            /*!< [23..23] Async falling enabled 23                                         */
      __IOM uint32_t AFEN24     : 1;            /*!< [24..24] Async falling enabled 24                                         */
      __IOM uint32_t AFEN25     : 1;            /*!< [25..25] Async falling enabled 25                                         */
      __IOM uint32_t AFEN26     : 1;            /*!< [26..26] Async falling enabled 26                                         */
      __IOM uint32_t AFEN27     : 1;            /*!< [27..27] Async falling enabled 27                                         */
      __IOM uint32_t AFEN28     : 1;            /*!< [28..28] Async falling enabled 28                                         */
      __IOM uint32_t AFEN29     : 1;            /*!< [29..29] Async falling enabled 29                                         */
      __IOM uint32_t AFEN30     : 1;            /*!< [30..30] Async falling enabled 30                                         */
      __IOM uint32_t AFEN31     : 1;            /*!< [31..31] Async falling enabled 31                                         */
    } GPAFEN0_b;
  } ;
  
  union {
    __IOM uint32_t GPAFEN1;                     /*!< (@ 0x0000008C) GPIO Pin Async. Falling Edge Detect 1                      */
    
    struct {
      __IOM uint32_t AFEN32     : 1;            /*!< [0..0] Async falling enabled 32                                           */
      __IOM uint32_t AFEN33     : 1;            /*!< [1..1] Async falling enabled 33                                           */
      __IOM uint32_t AFEN34     : 1;            /*!< [2..2] Async falling enabled 34                                           */
      __IOM uint32_t AFEN35     : 1;            /*!< [3..3] Async falling enabled 35                                           */
      __IOM uint32_t AFEN36     : 1;            /*!< [4..4] Async falling enabled 36                                           */
      __IOM uint32_t AFEN37     : 1;            /*!< [5..5] Async falling enabled 37                                           */
      __IOM uint32_t AFEN38     : 1;            /*!< [6..6] Async falling enabled 38                                           */
      __IOM uint32_t AFEN39     : 1;            /*!< [7..7] Async falling enabled 39                                           */
      __IOM uint32_t AFEN40     : 1;            /*!< [8..8] Async falling enabled 40                                           */
      __IOM uint32_t AFEN41     : 1;            /*!< [9..9] Async falling enabled 41                                           */
      __IOM uint32_t AFEN42     : 1;            /*!< [10..10] Async falling enabled 42                                         */
      __IOM uint32_t AFEN43     : 1;            /*!< [11..11] Async falling enabled 43                                         */
      __IOM uint32_t AFEN44     : 1;            /*!< [12..12] Async falling enabled 44                                         */
      __IOM uint32_t AFEN45     : 1;            /*!< [13..13] Async falling enabled 45                                         */
      __IOM uint32_t AFEN46     : 1;            /*!< [14..14] Async falling enabled 46                                         */
      __IOM uint32_t AFEN47     : 1;            /*!< [15..15] Async falling enabled 47                                         */
      __IOM uint32_t AFEN48     : 1;            /*!< [16..16] Async falling enabled 48                                         */
      __IOM uint32_t AFEN49     : 1;            /*!< [17..17] Async falling enabled 49                                         */
      __IOM uint32_t AFEN50     : 1;            /*!< [18..18] Async falling enabled 50                                         */
      __IOM uint32_t AFEN51     : 1;            /*!< [19..19] Async falling enabled 51                                         */
      __IOM uint32_t AFEN52     : 1;            /*!< [20..20] Async falling enabled 52                                         */
      __IOM uint32_t AFEN53     : 1;            /*!< [21..21] Async falling enabled 53                                         */
            uint32_t            : 10;
    } GPAFEN1_b;
  } ;
  __IM  uint32_t  RESERVED10[16];
  
  union {
    __IOM uint32_t EXTRA_MUX;                   /*!< (@ 0x000000D0) Undocumented multiplexing bits                             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t SDIO       : 1;            /*!< [1..1] Switch peripheral connection to undocumented SDIO pins
                                                     used on Pi 4                                                              */
            uint32_t            : 30;
    } EXTRA_MUX_b;
  } ;
  __IM  uint32_t  RESERVED11[4];
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG0;     /*!< (@ 0x000000E4) GPIO Pull-up / Pull-down Register 0                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL0 : 2;   /*!< [1..0] Resistor select for 0                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL1 : 2;   /*!< [3..2] Resistor select for 1                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL2 : 2;   /*!< [5..4] Resistor select for 2                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL3 : 2;   /*!< [7..6] Resistor select for 3                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL4 : 2;   /*!< [9..8] Resistor select for 4                                              */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL5 : 2;   /*!< [11..10] Resistor select for 5                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL6 : 2;   /*!< [13..12] Resistor select for 6                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL7 : 2;   /*!< [15..14] Resistor select for 7                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL8 : 2;   /*!< [17..16] Resistor select for 8                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL9 : 2;   /*!< [19..18] Resistor select for 9                                            */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL10 : 2;  /*!< [21..20] Resistor select for 10                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL11 : 2;  /*!< [23..22] Resistor select for 11                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL12 : 2;  /*!< [25..24] Resistor select for 12                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL13 : 2;  /*!< [27..26] Resistor select for 13                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL14 : 2;  /*!< [29..28] Resistor select for 14                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL15 : 2;  /*!< [31..30] Resistor select for 15                                           */
    } GPIO_PUP_PDN_CNTRL_REG0_b;
  } ;
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG1;     /*!< (@ 0x000000E8) GPIO Pull-up / Pull-down Register 1                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL16 : 2;  /*!< [1..0] Resistor select for 16                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL17 : 2;  /*!< [3..2] Resistor select for 17                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL18 : 2;  /*!< [5..4] Resistor select for 18                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL19 : 2;  /*!< [7..6] Resistor select for 19                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL20 : 2;  /*!< [9..8] Resistor select for 20                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL21 : 2;  /*!< [11..10] Resistor select for 21                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL22 : 2;  /*!< [13..12] Resistor select for 22                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL23 : 2;  /*!< [15..14] Resistor select for 23                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL24 : 2;  /*!< [17..16] Resistor select for 24                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL25 : 2;  /*!< [19..18] Resistor select for 25                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL26 : 2;  /*!< [21..20] Resistor select for 26                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL27 : 2;  /*!< [23..22] Resistor select for 27                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL28 : 2;  /*!< [25..24] Resistor select for 28                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL29 : 2;  /*!< [27..26] Resistor select for 29                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL30 : 2;  /*!< [29..28] Resistor select for 30                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL31 : 2;  /*!< [31..30] Resistor select for 31                                           */
    } GPIO_PUP_PDN_CNTRL_REG1_b;
  } ;
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG2;     /*!< (@ 0x000000EC) GPIO Pull-up / Pull-down Register 2                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL32 : 2;  /*!< [1..0] Resistor select for 32                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL33 : 2;  /*!< [3..2] Resistor select for 33                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL34 : 2;  /*!< [5..4] Resistor select for 34                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL35 : 2;  /*!< [7..6] Resistor select for 35                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL36 : 2;  /*!< [9..8] Resistor select for 36                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL37 : 2;  /*!< [11..10] Resistor select for 37                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL38 : 2;  /*!< [13..12] Resistor select for 38                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL39 : 2;  /*!< [15..14] Resistor select for 39                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL40 : 2;  /*!< [17..16] Resistor select for 40                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL41 : 2;  /*!< [19..18] Resistor select for 41                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL42 : 2;  /*!< [21..20] Resistor select for 42                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL43 : 2;  /*!< [23..22] Resistor select for 43                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL44 : 2;  /*!< [25..24] Resistor select for 44                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL45 : 2;  /*!< [27..26] Resistor select for 45                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL46 : 2;  /*!< [29..28] Resistor select for 46                                           */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL47 : 2;  /*!< [31..30] Resistor select for 47                                           */
    } GPIO_PUP_PDN_CNTRL_REG2_b;
  } ;
  
  union {
    __IOM uint32_t GPIO_PUP_PDN_CNTRL_REG3;     /*!< (@ 0x000000F0) GPIO Pull-up / Pull-down Register 3                        */
    
    struct {
      __IOM uint32_t GPIO_PUP_PDN_CNTRL48 : 2;  /*!< [1..0] Resistor select for 48                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL49 : 2;  /*!< [3..2] Resistor select for 49                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL50 : 2;  /*!< [5..4] Resistor select for 50                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL51 : 2;  /*!< [7..6] Resistor select for 51                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL52 : 2;  /*!< [9..8] Resistor select for 52                                             */
      __IOM uint32_t GPIO_PUP_PDN_CNTRL53 : 2;  /*!< [11..10] Resistor select for 53                                           */
            uint32_t            : 20;
    } GPIO_PUP_PDN_CNTRL_REG3_b;
  } ;
} GPIO_Type;                                    /*!< Size = 244 (0xf4)                                                         */



/* =========================================================================================================================== */
/* ================                                          SYSTMR                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom System Timer (SYSTMR)
  */

typedef struct {                                /*!< (@ 0x20003000) SYSTMR Structure                                           */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Control / Status                                           */
    
    struct {
      __IOM uint32_t M0         : 1;            /*!< [0..0] System timer match 0                                               */
      __IOM uint32_t M1         : 1;            /*!< [1..1] System timer match 1                                               */
      __IOM uint32_t M2         : 1;            /*!< [2..2] System timer match 2                                               */
      __IOM uint32_t M3         : 1;            /*!< [3..3] System timer match 3                                               */
            uint32_t            : 28;
    } CS_b;
  } ;
  __IM  uint32_t  CLO;                          /*!< (@ 0x00000004) Lower 32 bits for the free running counter                 */
  __IM  uint32_t  CHI;                          /*!< (@ 0x00000008) Higher 32 bits for the free running counter                */
  __IOM uint32_t  C0;                           /*!< (@ 0x0000000C) Compare channel 0                                          */
  __IOM uint32_t  C1;                           /*!< (@ 0x00000010) Compare channel 1                                          */
  __IOM uint32_t  C2;                           /*!< (@ 0x00000014) Compare channel 2                                          */
  __IOM uint32_t  C3;                           /*!< (@ 0x00000018) Compare channel 3                                          */
} SYSTMR_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief ARM Prime Cell PL011 (UART0)
  */

typedef struct {                                /*!< (@ 0x20201000) UART0 Structure                                            */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data Register                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] DATA                                                               */
      __IOM uint32_t FE         : 1;            /*!< [8..8] FE                                                                 */
      __IOM uint32_t PE         : 1;            /*!< [9..9] PE                                                                 */
      __IOM uint32_t BE         : 1;            /*!< [10..10] BE                                                               */
      __IOM uint32_t OE         : 1;            /*!< [11..11] OE                                                               */
            uint32_t            : 20;
    } DR_b;
  } ;
  
  union {
    union {
      __IM  uint32_t RSR;                       /*!< (@ 0x00000004) Receive Status Register                                    */
      
      struct {
        __IM  uint32_t FE       : 1;            /*!< [0..0] FE                                                                 */
        __IM  uint32_t PE       : 1;            /*!< [1..1] PE                                                                 */
        __IM  uint32_t BE       : 1;            /*!< [2..2] BE                                                                 */
        __IM  uint32_t OE       : 1;            /*!< [3..3] OE                                                                 */
              uint32_t          : 28;
      } RSR_b;
    } ;
    
    union {
      __OM  uint32_t ECR;                       /*!< (@ 0x00000004) Error Clear Register                                       */
      
      struct {
        __OM  uint32_t FE       : 1;            /*!< [0..0] FE                                                                 */
        __OM  uint32_t PE       : 1;            /*!< [1..1] PE                                                                 */
        __OM  uint32_t BE       : 1;            /*!< [2..2] BE                                                                 */
        __OM  uint32_t OE       : 1;            /*!< [3..3] OE                                                                 */
              uint32_t          : 28;
      } ECR_b;
    } ;
  };
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IOM uint32_t FR;                          /*!< (@ 0x00000018) Flag Register                                              */
    
    struct {
      __IOM uint32_t CTS        : 1;            /*!< [0..0] CTS                                                                */
      __IOM uint32_t DSR        : 1;            /*!< [1..1] DSR                                                                */
      __IOM uint32_t DCD        : 1;            /*!< [2..2] DCD                                                                */
      __IOM uint32_t BUSY       : 1;            /*!< [3..3] BUSY                                                               */
      __IOM uint32_t RXFE       : 1;            /*!< [4..4] RXFE                                                               */
      __IOM uint32_t TXFF       : 1;            /*!< [5..5] TXFF                                                               */
      __IOM uint32_t RXFF       : 1;            /*!< [6..6] RXFF                                                               */
      __IOM uint32_t TXFE       : 1;            /*!< [7..7] TXFE                                                               */
      __IOM uint32_t RI         : 1;            /*!< [8..8] RI                                                                 */
            uint32_t            : 23;
    } FR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IBRD;                        /*!< (@ 0x00000024) Integer Baud Rate Register                                 */
    
    struct {
      __IOM uint32_t BAUDDIVINT : 16;           /*!< [15..0] BAUDDIVINT                                                        */
            uint32_t            : 16;
    } IBRD_b;
  } ;
  
  union {
    __IOM uint32_t FBRD;                        /*!< (@ 0x00000028) Fractional Baud Rate Register                              */
    
    struct {
      __IOM uint32_t BAUDDIVFRAC : 6;           /*!< [5..0] BAUDDIVFRAC                                                        */
            uint32_t            : 26;
    } FBRD_b;
  } ;
  
  union {
    __IOM uint32_t LCR_H;                       /*!< (@ 0x0000002C) Line Control Register                                      */
    
    struct {
      __IOM uint32_t BRK        : 1;            /*!< [0..0] BRK                                                                */
      __IOM uint32_t PEN        : 1;            /*!< [1..1] PEN                                                                */
      __IOM uint32_t EPS        : 1;            /*!< [2..2] EPS                                                                */
      __IOM uint32_t STP2       : 1;            /*!< [3..3] STP2                                                               */
      __IOM uint32_t FEN        : 1;            /*!< [4..4] FEN                                                                */
      __IOM uint32_t WLEN       : 2;            /*!< [6..5] WLEN                                                               */
      __IOM uint32_t SPS        : 1;            /*!< [7..7] SPS                                                                */
            uint32_t            : 24;
    } LCR_H_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000030) Control Register                                           */
    
    struct {
      __IOM uint32_t UARTEN     : 1;            /*!< [0..0] UARTEN                                                             */
      __IOM uint32_t SIREN      : 1;            /*!< [1..1] SIREN                                                              */
      __IOM uint32_t SIRLP      : 1;            /*!< [2..2] SIRLP                                                              */
            uint32_t            : 5;
      __IOM uint32_t TXE        : 1;            /*!< [8..8] TXE                                                                */
      __IOM uint32_t RXE        : 1;            /*!< [9..9] RXE                                                                */
      __IOM uint32_t DTR        : 1;            /*!< [10..10] DTR                                                              */
      __IOM uint32_t RTS        : 1;            /*!< [11..11] RTS                                                              */
            uint32_t            : 2;
      __IOM uint32_t RTSEN      : 1;            /*!< [14..14] RTSEN                                                            */
      __IOM uint32_t CTSEN      : 1;            /*!< [15..15] CTSEN                                                            */
            uint32_t            : 16;
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IFLS;                        /*!< (@ 0x00000034) Interrupt FIFO Level Select Register                       */
    
    struct {
      __IOM uint32_t TXIFLSEL   : 3;            /*!< [2..0] TXIFLSEL                                                           */
      __IOM uint32_t RXIFLSEL   : 3;            /*!< [5..3] RXIFLSEL                                                           */
            uint32_t            : 26;
    } IFLS_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000038) Interrupt Mask set_Clear Register                          */
    
    struct {
      __IOM uint32_t RIMIM      : 1;            /*!< [0..0] RIMIM                                                              */
      __IOM uint32_t CTSMIM     : 1;            /*!< [1..1] CTSMIM                                                             */
      __IOM uint32_t DCDMIM     : 1;            /*!< [2..2] DCDMIM                                                             */
      __IOM uint32_t DSRMIM     : 1;            /*!< [3..3] DSRMIM                                                             */
      __IOM uint32_t RXIM       : 1;            /*!< [4..4] RXIM                                                               */
      __IOM uint32_t TXIM       : 1;            /*!< [5..5] TXIM                                                               */
      __IOM uint32_t RTIM       : 1;            /*!< [6..6] RTIM                                                               */
      __IOM uint32_t FEIM       : 1;            /*!< [7..7] FEIM                                                               */
      __IOM uint32_t PEIM       : 1;            /*!< [8..8] PEIM                                                               */
      __IOM uint32_t BEIM       : 1;            /*!< [9..9] BEIM                                                               */
      __IOM uint32_t OEIM       : 1;            /*!< [10..10] OEIM                                                             */
            uint32_t            : 21;
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x0000003C) Raw Interrupt Status Register                              */
    
    struct {
      __IM  uint32_t RIRMIS     : 1;            /*!< [0..0] RIRMIS                                                             */
      __IM  uint32_t CTSRMIS    : 1;            /*!< [1..1] CTSRMIS                                                            */
      __IM  uint32_t DCDRMIS    : 1;            /*!< [2..2] DCDRMIS                                                            */
      __IM  uint32_t DSRRMIS    : 1;            /*!< [3..3] DSRRMIS                                                            */
      __IM  uint32_t RXRIS      : 1;            /*!< [4..4] RXRIS                                                              */
      __IM  uint32_t TXRIS      : 1;            /*!< [5..5] TXRIS                                                              */
      __IM  uint32_t RTRIS      : 1;            /*!< [6..6] RTRIS                                                              */
      __IM  uint32_t FERIS      : 1;            /*!< [7..7] FERIS                                                              */
      __IM  uint32_t PERIS      : 1;            /*!< [8..8] PERIS                                                              */
      __IM  uint32_t BERIS      : 1;            /*!< [9..9] BERIS                                                              */
      __IM  uint32_t OERIS      : 1;            /*!< [10..10] OERIS                                                            */
            uint32_t            : 21;
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000040) Masked Interrupt Status Register                           */
    
    struct {
      __IM  uint32_t RIMMIS     : 1;            /*!< [0..0] RIMMIS                                                             */
      __IM  uint32_t CTSMMIS    : 1;            /*!< [1..1] CTSMMIS                                                            */
      __IM  uint32_t DCDMMIS    : 1;            /*!< [2..2] DCDMMIS                                                            */
      __IM  uint32_t DSRMMIS    : 1;            /*!< [3..3] DSRMMIS                                                            */
      __IM  uint32_t RXMIS      : 1;            /*!< [4..4] RXMIS                                                              */
      __IM  uint32_t TXMIS      : 1;            /*!< [5..5] TXMIS                                                              */
      __IM  uint32_t RTMIS      : 1;            /*!< [6..6] RTMIS                                                              */
      __IM  uint32_t FEMIS      : 1;            /*!< [7..7] FEMIS                                                              */
      __IM  uint32_t PEMIS      : 1;            /*!< [8..8] PEMIS                                                              */
      __IM  uint32_t BEMIS      : 1;            /*!< [9..9] BEMIS                                                              */
      __IM  uint32_t OEMIS      : 1;            /*!< [10..10] OEMIS                                                            */
            uint32_t            : 21;
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000044) Interrupt Clear Register                                   */
    
    struct {
      __OM  uint32_t RIMIC      : 1;            /*!< [0..0] RIMIC                                                              */
      __OM  uint32_t CTSMIC     : 1;            /*!< [1..1] CTSMIC                                                             */
      __OM  uint32_t DCDMIC     : 1;            /*!< [2..2] DCDMIC                                                             */
      __OM  uint32_t DSRMIC     : 1;            /*!< [3..3] DSRMIC                                                             */
      __OM  uint32_t RXIC       : 1;            /*!< [4..4] RXIC                                                               */
      __OM  uint32_t TXIC       : 1;            /*!< [5..5] TXIC                                                               */
      __OM  uint32_t RTIC       : 1;            /*!< [6..6] RTIC                                                               */
      __OM  uint32_t FEIC       : 1;            /*!< [7..7] FEIC                                                               */
      __OM  uint32_t PEIC       : 1;            /*!< [8..8] PEIC                                                               */
      __OM  uint32_t BEIC       : 1;            /*!< [9..9] BEIC                                                               */
      __OM  uint32_t OEIC       : 1;            /*!< [10..10] OEIC                                                             */
            uint32_t            : 21;
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000048) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] RXDMAE                                                             */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] TXDMAE                                                             */
      __IOM uint32_t DMAONERR   : 1;            /*!< [2..2] DMAONERR                                                           */
            uint32_t            : 29;
    } DMACR_b;
  } ;
} ARM_UART_PL011_Type;                          /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom SPI Controller (SPI0)
  */

typedef struct {                                /*!< (@ 0x20204000) SPI0 Structure                                             */
  
  union {
    __IOM uint32_t CS;                          /*!< (@ 0x00000000) Control and Status                                         */
    
    struct {
      __IOM uint32_t CS         : 2;            /*!< [1..0] Chip select                                                        */
      __IOM uint32_t CPHA       : 1;            /*!< [2..2] Clock phase                                                        */
      __IOM uint32_t CPOL       : 1;            /*!< [3..3] Clock polarity                                                     */
      __IOM uint32_t CLEAR      : 2;            /*!< [5..4] Clear the FIFO(s)                                                  */
      __IOM uint32_t CSPOL      : 1;            /*!< [6..6] Chip select polarity                                               */
      __IOM uint32_t TA         : 1;            /*!< [7..7] Transfer active                                                    */
      __IOM uint32_t DMAEN      : 1;            /*!< [8..8] Enable DMA                                                         */
      __IOM uint32_t INTD       : 1;            /*!< [9..9] Interrupt on done                                                  */
      __IOM uint32_t INTR       : 1;            /*!< [10..10] Interrupt on RX                                                  */
      __IOM uint32_t ADCS       : 1;            /*!< [11..11] Automatically deassert chip select                               */
      __IOM uint32_t REN        : 1;            /*!< [12..12] Read enable                                                      */
      __IOM uint32_t LEN        : 1;            /*!< [13..13] LoSSI enable                                                     */
      __IOM uint32_t LMONO      : 1;            /*!< [14..14] LMONO                                                            */
      __IOM uint32_t TE_EN      : 1;            /*!< [15..15] TE_EN                                                            */
      __IM  uint32_t DONE       : 1;            /*!< [16..16] Transfer is done                                                 */
      __IM  uint32_t RXD        : 1;            /*!< [17..17] RX FIFO contains data                                            */
      __IM  uint32_t TXD        : 1;            /*!< [18..18] TX FIFO can accept data                                          */
      __IM  uint32_t RXR        : 1;            /*!< [19..19] RX FIFO has data to be read                                      */
      __IM  uint32_t RXF        : 1;            /*!< [20..20] RX FIFO full                                                     */
      __IOM uint32_t CSPOL0     : 1;            /*!< [21..21] Chip select 0 polarity                                           */
      __IOM uint32_t CSPOL1     : 1;            /*!< [22..22] Chip select 1 polarity                                           */
      __IOM uint32_t CSPOL2     : 1;            /*!< [23..23] Chip select 2 polarity                                           */
      __IOM uint32_t DMA_LEN    : 1;            /*!< [24..24] Enable DMA in LoSSI mode                                         */
      __IOM uint32_t LEN_LONG   : 1;            /*!< [25..25] Enable long data word in LoSSI mode                              */
            uint32_t            : 6;
    } CS_b;
  } ;
  
  union {
    __IOM uint32_t FIFO;                        /*!< (@ 0x00000004) FIFO access                                                */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data                                                              */
    } FIFO_b;
  } ;
  
  union {
    __IOM uint32_t CLK;                         /*!< (@ 0x00000008) Clock divider                                              */
    
    struct {
      __IOM uint32_t CDIV       : 16;           /*!< [15..0] Clock divider                                                     */
            uint32_t            : 16;
    } CLK_b;
  } ;
  
  union {
    __IOM uint32_t DLEN;                        /*!< (@ 0x0000000C) Data length                                                */
    
    struct {
      __IOM uint32_t DLEN       : 16;           /*!< [15..0] Data length                                                       */
            uint32_t            : 16;
    } DLEN_b;
  } ;
  
  union {
    __IOM uint32_t LTOH;                        /*!< (@ 0x00000010) LoSSI output hold delay                                    */
    
    struct {
      __IOM uint32_t TOH        : 4;            /*!< [3..0] Output hold delay                                                  */
            uint32_t            : 28;
    } LTOH_b;
  } ;
  
  union {
    __IOM uint32_t DC;                          /*!< (@ 0x00000014) DC                                                         */
    
    struct {
      __IOM uint32_t TDREQ      : 8;            /*!< [7..0] DMA Write request threshold                                        */
      __IOM uint32_t TPANIC     : 8;            /*!< [15..8] DMA write panic threshold                                         */
      __IOM uint32_t RDREQ      : 8;            /*!< [23..16] DMA read request threshold                                       */
      __IOM uint32_t RPANIC     : 8;            /*!< [31..24] DMA read panic threshold                                         */
    } DC_b;
  } ;
} SPI0_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           BSC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Serial Controller (I2C compatible) (BSC0)
  */

typedef struct {                                /*!< (@ 0x20205000) BSC0 Structure                                             */
  
  union {
    __IOM uint32_t C;                           /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IOM uint32_t READ       : 1;            /*!< [0..0] Transfer is read                                                   */
            uint32_t            : 3;
      __IOM uint32_t CLEAR      : 2;            /*!< [5..4] Clear the FIFO                                                     */
            uint32_t            : 1;
      __IOM uint32_t ST         : 1;            /*!< [7..7] Start transfer                                                     */
      __IOM uint32_t INTD       : 1;            /*!< [8..8] Interrupt on done                                                  */
      __IOM uint32_t INTT       : 1;            /*!< [9..9] Interrupt on TX                                                    */
      __IOM uint32_t INTR       : 1;            /*!< [10..10] Interrupt on RX                                                  */
            uint32_t            : 4;
      __IOM uint32_t I2CEN      : 1;            /*!< [15..15] I2C Enable                                                       */
            uint32_t            : 16;
    } C_b;
  } ;
  
  union {
    __IOM uint32_t S;                           /*!< (@ 0x00000004) Status                                                     */
    
    struct {
      __IM  uint32_t TA         : 1;            /*!< [0..0] Transfer active                                                    */
      __IOM uint32_t DONE       : 1;            /*!< [1..1] Transfer done                                                      */
      __IM  uint32_t TXW        : 1;            /*!< [2..2] FIFO needs to be written                                           */
      __IM  uint32_t RXR        : 1;            /*!< [3..3] FIFO needs to be read                                              */
      __IM  uint32_t TXD        : 1;            /*!< [4..4] FIFO has space for at least one byte                               */
      __IM  uint32_t RXD        : 1;            /*!< [5..5] FIFO contains at least one byte                                    */
      __IM  uint32_t TXE        : 1;            /*!< [6..6] FIFO is empty. Nothing to transmit                                 */
      __IM  uint32_t RXF        : 1;            /*!< [7..7] FIFO is full. Can't receive anything else                          */
      __IOM uint32_t ERR        : 1;            /*!< [8..8] Error: No ack                                                      */
      __IOM uint32_t CLKT       : 1;            /*!< [9..9] Clock stretch timeout                                              */
            uint32_t            : 22;
    } S_b;
  } ;
  
  union {
    __IOM uint32_t DLEN;                        /*!< (@ 0x00000008) Data length                                                */
    
    struct {
      __IOM uint32_t DLEN       : 16;           /*!< [15..0] Data length                                                       */
            uint32_t            : 16;
    } DLEN_b;
  } ;
  
  union {
    __IOM uint32_t A;                           /*!< (@ 0x0000000C) Slave address                                              */
    
    struct {
      __IOM uint32_t ADDR       : 7;            /*!< [6..0] Slave address                                                      */
            uint32_t            : 25;
    } A_b;
  } ;
  
  union {
    __IOM uint32_t FIFO;                        /*!< (@ 0x00000010) Data FIFO                                                  */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Access the FIFO                                                    */
            uint32_t            : 24;
    } FIFO_b;
  } ;
  
  union {
    __IOM uint32_t DIV;                         /*!< (@ 0x00000014) Clock divider                                              */
    
    struct {
      __IOM uint32_t CDIV       : 16;           /*!< [15..0] Divide the source clock                                           */
            uint32_t            : 16;
    } DIV_b;
  } ;
  
  union {
    __IOM uint32_t DEL;                         /*!< (@ 0x00000018) Data delay (Values must be under CDIV / 2)                 */
    
    struct {
      __IOM uint32_t REDL       : 16;           /*!< [15..0] Delay before reading after a rising edge                          */
      __IOM uint32_t FEDL       : 16;           /*!< [31..16] Delay before reading after a falling edge                        */
    } DEL_b;
  } ;
  
  union {
    __IOM uint32_t CLKT;                        /*!< (@ 0x0000001C) Clock stretch timeout (broken on 283x)                     */
    
    struct {
      __IOM uint32_t TOUT       : 16;           /*!< [15..0] Number of SCL clock cycles to wait                                */
            uint32_t            : 16;
    } CLKT_b;
  } ;
} BSC0_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom PWM (PWM0)
  */

typedef struct {                                /*!< (@ 0x2020C000) PWM0 Structure                                             */
  
  union {
    __IOM uint32_t CTL;                         /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IOM uint32_t PWEN1      : 1;            /*!< [0..0] Enable channel 1                                                   */
      __IOM uint32_t MODE1      : 1;            /*!< [1..1] Channel 1 mode                                                     */
      __IOM uint32_t RPTL1      : 1;            /*!< [2..2] Repeat last value from FIFO for channel 1                          */
      __IOM uint32_t SBIT1      : 1;            /*!< [3..3] State when not transmitting on channel 1                           */
      __IOM uint32_t POLA1      : 1;            /*!< [4..4] Channel 1 polarity inverted                                        */
      __IOM uint32_t USEF1      : 1;            /*!< [5..5] Use FIFO for channel 1                                             */
      __IOM uint32_t CLRF1      : 1;            /*!< [6..6] Clear FIFO                                                         */
      __IOM uint32_t MSEN1      : 1;            /*!< [7..7] M/S mode for channel 1                                             */
      __IOM uint32_t PWEN2      : 1;            /*!< [8..8] Enable channel 2                                                   */
      __IOM uint32_t MODE2      : 1;            /*!< [9..9] Channel 2 mode                                                     */
      __IOM uint32_t RPTL2      : 1;            /*!< [10..10] Repeat last value from FIFO for channel 2                        */
      __IOM uint32_t SBIT2      : 1;            /*!< [11..11] State when not transmitting on channel 2                         */
      __IOM uint32_t POLA2      : 1;            /*!< [12..12] Channel 2 polarity inverted                                      */
      __IOM uint32_t USEF2      : 1;            /*!< [13..13] Use FIFO for channel 2                                           */
            uint32_t            : 1;
      __IOM uint32_t MSEN2      : 1;            /*!< [15..15] M/S mode for channel 2                                           */
            uint32_t            : 16;
    } CTL_b;
  } ;
  
  union {
    __IOM uint32_t STA;                         /*!< (@ 0x00000004) Status                                                     */
    
    struct {
      __IOM uint32_t FULL1      : 1;            /*!< [0..0] FIFO full                                                          */
      __IOM uint32_t EMPT1      : 1;            /*!< [1..1] FIFO empty                                                         */
      __IOM uint32_t WERR1      : 1;            /*!< [2..2] FIFO write error                                                   */
      __IOM uint32_t RERR1      : 1;            /*!< [3..3] FIFO read error                                                    */
      __IOM uint32_t GAPO1      : 1;            /*!< [4..4] Channel 1 gap occurred                                             */
      __IOM uint32_t GAPO2      : 1;            /*!< [5..5] Channel 2 gap occurred                                             */
      __IOM uint32_t GAPO3      : 1;            /*!< [6..6] Channel 3 gap occurred                                             */
      __IOM uint32_t GAPO4      : 1;            /*!< [7..7] Channel 4 gap occurred                                             */
      __IOM uint32_t BERR       : 1;            /*!< [8..8] Bus error                                                          */
      __IOM uint32_t STA1       : 1;            /*!< [9..9] Channel 1 state                                                    */
      __IOM uint32_t STA2       : 1;            /*!< [10..10] Channel 2 state                                                  */
      __IOM uint32_t STA3       : 1;            /*!< [11..11] Channel 3 state                                                  */
      __IOM uint32_t STA4       : 1;            /*!< [12..12] Channel 4 state                                                  */
            uint32_t            : 19;
    } STA_b;
  } ;
  
  union {
    __IOM uint32_t DMAC;                        /*!< (@ 0x00000008) DMA control                                                */
    
    struct {
      __IOM uint32_t DREQ       : 8;            /*!< [7..0] DMA threshold for DREQ signal                                      */
      __IOM uint32_t PANIC      : 8;            /*!< [15..8] DMA threshold for panic signal                                    */
            uint32_t            : 15;
      __IOM uint32_t ENAB       : 1;            /*!< [31..31] DMA enabled                                                      */
    } DMAC_b;
  } ;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  RNG1;                         /*!< (@ 0x00000010) Range for channel 1                                        */
  __IOM uint32_t  DAT1;                         /*!< (@ 0x00000014) Channel 1 data                                             */
  __OM  uint32_t  FIF1;                         /*!< (@ 0x00000018) FIFO input                                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  RNG2;                         /*!< (@ 0x00000020) Range for channel 2                                        */
  __IOM uint32_t  DAT2;                         /*!< (@ 0x00000024) Channel 2 data                                             */
} PWM0_Type;                                    /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                            AUX                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Three auxiliary peripherals (AUX)
  */

typedef struct {                                /*!< (@ 0x20215000) AUX Structure                                              */
  
  union {
    __IOM uint32_t IRQ;                         /*!< (@ 0x00000000) Interrupt status                                           */
    
    struct {
      __IOM uint32_t UART_1     : 1;            /*!< [0..0] UART1 interrupt active                                             */
      __IOM uint32_t SPI_1      : 1;            /*!< [1..1] SPI1 interrupt active                                              */
      __IOM uint32_t SPI_2      : 1;            /*!< [2..2] SPI2 interrupt active                                              */
            uint32_t            : 29;
    } IRQ_b;
  } ;
  
  union {
    __IOM uint32_t ENABLES;                     /*!< (@ 0x00000004) Enable sub-peripherals                                     */
    
    struct {
      __IOM uint32_t UART_1     : 1;            /*!< [0..0] UART1 enabled                                                      */
      __IOM uint32_t SPI_1      : 1;            /*!< [1..1] SPI1 enabled                                                       */
      __IOM uint32_t SPI_2      : 1;            /*!< [2..2] SPI2 enabled                                                       */
            uint32_t            : 29;
    } ENABLES_b;
  } ;
} AUX_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Mini UART (UART1)
  */

typedef struct {                                /*!< (@ 0x20215040) UART1 Structure                                            */
  
  union {
    union {
      __IOM uint32_t IO;                        /*!< (@ 0x00000000) I/O Data                                                   */
      
      struct {
        __IOM uint32_t DATA     : 8;            /*!< [7..0] FIFO access                                                        */
              uint32_t          : 24;
      } IO_b;
    } ;
    __IOM uint8_t BAUDL;                        /*!< (@ 0x00000000) Lower bits of baudrate when DLAB is set                    */
  };
  
  union {
    union {
      __IOM uint32_t IER;                       /*!< (@ 0x00000004) Interrupt Enable                                           */
      
      struct {
        __IOM uint32_t DATA_READY : 1;          /*!< [0..0] Receive FIFO has at least 1 byte                                   */
        __IOM uint32_t TX_READY : 1;            /*!< [1..1] Transmit FIFO is empty                                             */
              uint32_t          : 30;
      } IER_b;
    } ;
    __IOM uint8_t BAUDH;                        /*!< (@ 0x00000004) High bits of baudrate when DLAB is set                     */
  };
  
  union {
    __IOM uint32_t IIR;                         /*!< (@ 0x00000008) Interrupt Identify                                         */
    
    struct {
      __IOM uint32_t nPENDING   : 1;            /*!< [0..0] No pending interrupt                                               */
      __IOM uint32_t DATA_READY : 1;            /*!< [1..1] Receive FIFO has at least 1 byte                                   */
      __IOM uint32_t TX_READY   : 1;            /*!< [2..2] Transmit FIFO is empty                                             */
            uint32_t            : 29;
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) Line control                                               */
    
    struct {
      __IOM uint32_t DATA_SIZE  : 2;            /*!< [1..0] UART word size                                                     */
            uint32_t            : 4;
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Pull TX low continuously to send break                             */
      __IOM uint32_t DLAB       : 1;            /*!< [7..7] First two registers are baudrate                                   */
            uint32_t            : 24;
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t MCR;                         /*!< (@ 0x00000010) Modem Control                                              */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t RTS        : 1;            /*!< [1..1] RTS is low                                                         */
            uint32_t            : 30;
    } MCR_b;
  } ;
  
  union {
    __IOM uint32_t LSR;                         /*!< (@ 0x00000014) Line Status                                                */
    
    struct {
      __IOM uint32_t DATA_READY : 1;            /*!< [0..0] Receive FIFO has at least one byte                                 */
      __IOM uint32_t RX_OVERRUN : 1;            /*!< [1..1] Receive FIFO overrun                                               */
            uint32_t            : 3;
      __IOM uint32_t TX_EMPTY   : 1;            /*!< [5..5] Transmit FIFO has room for at least one byte                       */
      __IOM uint32_t TX_IDLE    : 1;            /*!< [6..6] Transmit FIFO empty and all bits shifted out                       */
            uint32_t            : 25;
    } LSR_b;
  } ;
  
  union {
    __IOM uint32_t MSR;                         /*!< (@ 0x00000018) Modem Status                                               */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t CTS        : 1;            /*!< [4..4] CTS is low                                                         */
            uint32_t            : 27;
    } MSR_b;
  } ;
  __IOM uint8_t   SCRATCH;                      /*!< (@ 0x0000001C) Scratch                                                    */
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint32_t CNTL;                        /*!< (@ 0x00000020) Control                                                    */
    
    struct {
      __IOM uint32_t RX_ENABLE  : 1;            /*!< [0..0] Enable receive                                                     */
      __IOM uint32_t TX_ENABLE  : 1;            /*!< [1..1] Enable transmit                                                    */
      __IOM uint32_t RTS_ENABLE : 1;            /*!< [2..2] Enable auto receive flow control with RTS                          */
      __IOM uint32_t CTS_ENABLE : 1;            /*!< [3..3] Enable auto transmit flow control with CTS                         */
      __IOM uint32_t RTS_FIFO_LEVEL : 2;        /*!< [5..4] FIFO level to de-assert RTS                                        */
      __IOM uint32_t RTS_ASSERT : 1;            /*!< [6..6] RTS assert level                                                   */
      __IOM uint32_t CTS_ASSERT : 1;            /*!< [7..7] CTS assert level                                                   */
            uint32_t            : 24;
    } CNTL_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000024) Status                                                     */
    
    struct {
      __IOM uint32_t DATA_READY : 1;            /*!< [0..0] Receive FIFO has at least one symbol                               */
      __IOM uint32_t TX_READY   : 1;            /*!< [1..1] Transmit FIFO has space for at least one symbol                    */
      __IOM uint32_t RX_IDLE    : 1;            /*!< [2..2] Receiver is idle                                                   */
      __IOM uint32_t TX_IDLE    : 1;            /*!< [3..3] Transmitter is idle                                                */
      __IOM uint32_t RX_OVERRUN : 1;            /*!< [4..4] Receive FIFO overrun                                               */
      __IOM uint32_t TX_FULL    : 1;            /*!< [5..5] Transmit FIFO is full                                              */
      __IOM uint32_t RTS_STATUS : 1;            /*!< [6..6] RTS state                                                          */
      __IOM uint32_t CTS_STATUS : 1;            /*!< [7..7] CTS state                                                          */
      __IOM uint32_t TX_EMPTY   : 1;            /*!< [8..8] Transmit FIFO is completely empty                                  */
      __IOM uint32_t TX_DONE    : 1;            /*!< [9..9] Transmit FIFO is empty and transmitter is idle                     */
            uint32_t            : 6;
      __IOM uint32_t RX_FIFO_LEVEL : 4;         /*!< [19..16] How many entries are filled in the RX FIFO                       */
            uint32_t            : 4;
      __IOM uint32_t TX_FIFO_LEVEL : 4;         /*!< [27..24] How many entries are filled in the TX FIFO                       */
            uint32_t            : 4;
    } STAT_b;
  } ;
  __IOM uint16_t  BAUD;                         /*!< (@ 0x00000028) Baudrate                                                   */
  __IM  uint16_t  RESERVED2;
} UART1_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Aux SPI (SPI1)
  */

typedef struct {                                /*!< (@ 0x20215080) SPI1 Structure                                             */
  
  union {
    __IOM uint32_t CNTL0;                       /*!< (@ 0x00000000) Control 0                                                  */
    
    struct {
      __IOM uint32_t SHIFT_LENGTH : 6;          /*!< [5..0] Number of bits to shift                                            */
      __IOM uint32_t MSB_FIRST  : 1;            /*!< [6..6] Shift out the most significant bit (MSB) first                     */
      __IOM uint32_t INVERT_CLK : 1;            /*!< [7..7] Idle clock high                                                    */
      __IOM uint32_t OUT_RISING : 1;            /*!< [8..8] Data is clocked out on rising edge of CLK                          */
      __IOM uint32_t CLEAR_FIFOS : 1;           /*!< [9..9] Clear FIFOs                                                        */
      __IOM uint32_t IN_RISING  : 1;            /*!< [10..10] Data is clocked in on rising edge of CLK                         */
      __IOM uint32_t ENABLE     : 1;            /*!< [11..11] Enable the interface                                             */
      __IOM uint32_t DOUT_HOLD_TIME : 2;        /*!< [13..12] Controls extra DOUT hold time in system clock cycles             */
      __IOM uint32_t VARIABLE_WIDTH : 1;        /*!< [14..14] Take shift length and data from FIFO                             */
      __IOM uint32_t VARIABLE_CS : 1;           /*!< [15..15] Take CS pattern and data from TX FIFO (along with VARIABLE_WIDTH) */
      __IOM uint32_t POST_INPUT : 1;            /*!< [16..16] Post input mode                                                  */
      __IOM uint32_t CHIP_SELECTS : 3;          /*!< [19..17] The CS pattern when active                                       */
      __IOM uint32_t SPEED      : 12;           /*!< [31..20] SPI clock speed. clk = sys / 2 * (SPEED + 1)                     */
    } CNTL0_b;
  } ;
  
  union {
    __IOM uint32_t CNTL1;                       /*!< (@ 0x00000004) Control 1                                                  */
    
    struct {
      __IOM uint32_t KEEP_INPUT : 1;            /*!< [0..0] Don't clear the RX shift register before a new transaction         */
      __IOM uint32_t MSB_FIRST  : 1;            /*!< [1..1] Shift the most significant bit first (MSB)                         */
            uint32_t            : 4;
      __IOM uint32_t DONE_ENABLE : 1;           /*!< [6..6] Enable DONE interrupt                                              */
      __IOM uint32_t TXE_ENABLE : 1;            /*!< [7..7] Enable TX empty interrupt                                          */
      __IOM uint32_t CS_HIGH_TIME : 3;          /*!< [10..8] Additional SPI clock cycles where CS is high                      */
            uint32_t            : 21;
    } CNTL1_b;
  } ;
  
  union {
    __IOM uint32_t STAT;                        /*!< (@ 0x00000008) Status                                                     */
    
    struct {
      __IOM uint32_t BIT_COUNT  : 6;            /*!< [5..0] Number of bits left to be processed.                               */
      __IOM uint32_t BUSY       : 1;            /*!< [6..6] Indicates a transfer is ongoing                                    */
      __IOM uint32_t RX_EMPTY   : 1;            /*!< [7..7] RX FIFO is empty                                                   */
      __IOM uint32_t RX_FULL    : 1;            /*!< [8..8] RX FIFO is full                                                    */
      __IOM uint32_t TX_EMPTY   : 1;            /*!< [9..9] TX FIFO is empty                                                   */
      __IOM uint32_t TX_FULL    : 1;            /*!< [10..10] TX FIFO is full                                                  */
            uint32_t            : 5;
      __IOM uint32_t RX_LEVEL   : 4;            /*!< [19..16] Number of entries in RX FIFO                                     */
            uint32_t            : 4;
      __IOM uint32_t TX_LEVEL   : 4;            /*!< [27..24] Number of entries in TX FIFO                                     */
            uint32_t            : 4;
    } STAT_b;
  } ;
  
  union {
    __IM  uint32_t PEEK;                        /*!< (@ 0x0000000C) Read the RXFIFO without removing an entry                  */
    
    struct {
      __IM  uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } PEEK_b;
  } ;
  
  union {
    __IOM uint32_t IO0;                         /*!< (@ 0x00000010) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO0_b;
  } ;
  
  union {
    __IOM uint32_t IO1;                         /*!< (@ 0x00000014) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO1_b;
  } ;
  
  union {
    __IOM uint32_t IO2;                         /*!< (@ 0x00000018) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO2_b;
  } ;
  
  union {
    __IOM uint32_t IO3;                         /*!< (@ 0x0000001C) Writing to the FIFO will deassert CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } IO3_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD0;                     /*!< (@ 0x00000020) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD0_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD1;                     /*!< (@ 0x00000024) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD1_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD2;                     /*!< (@ 0x00000028) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD2_b;
  } ;
  
  union {
    __IOM uint32_t TXHOLD3;                     /*!< (@ 0x0000002C) Writing to the FIFO will maintain CS at the end
                                                                         of the access                                         */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] FIFO data access                                                  */
            uint32_t            : 16;
    } TXHOLD3_b;
  } ;
} SPI1_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                            LIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Broadcom Legacy Interrupt Controller (LIC)
  */

typedef struct {                                /*!< (@ 0x2000B000) LIC Structure                                              */
  __IM  uint32_t  RESERVED[128];
  
  union {
    __IM  uint32_t BASIC_PENDING;               /*!< (@ 0x00000200) Basic pending info                                         */
    
    struct {
      __IM  uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IM  uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IM  uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IM  uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IM  uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IM  uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IM  uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IM  uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
      __IM  uint32_t PENDING_1  : 1;            /*!< [8..8] One or more bits are set in PENDING_1 (ignores 7, 9,
                                                     10, 18, 19)                                                               */
      __IM  uint32_t PENDING_2  : 1;            /*!< [9..9] One or more bits are set in PENDING_2 (ignores 53 - 57,
                                                     62)                                                                       */
      __IM  uint32_t JPEG       : 1;            /*!< [10..10] JPEG                                                             */
      __IM  uint32_t USB        : 1;            /*!< [11..11] USB                                                              */
      __IM  uint32_t V3D        : 1;            /*!< [12..12] V3D                                                              */
      __IM  uint32_t DMA_2      : 1;            /*!< [13..13] DMA 2                                                            */
      __IM  uint32_t DMA_3      : 1;            /*!< [14..14] DMA 3                                                            */
      __IM  uint32_t I2C        : 1;            /*!< [15..15] OR of all I2C                                                    */
      __IM  uint32_t SPI        : 1;            /*!< [16..16] OR of all SPI                                                    */
      __IM  uint32_t PCM_I2S    : 1;            /*!< [17..17] PCM/I2S                                                          */
      __IM  uint32_t SDHOST     : 1;            /*!< [18..18] SDHOST                                                           */
      __IM  uint32_t UART       : 1;            /*!< [19..19] OR of all PL011 UARTs                                            */
      __IM  uint32_t EMMC       : 1;            /*!< [20..20] OR of EMMC and EMMC2                                             */
            uint32_t            : 11;
    } BASIC_PENDING_b;
  } ;
  
  union {
    __IM  uint32_t PENDING_1;                   /*!< (@ 0x00000204) Pending state for interrupts 1 - 31                        */
    
    struct {
      __IM  uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IM  uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IM  uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IM  uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IM  uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IM  uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IM  uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IM  uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IM  uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IM  uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IM  uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IM  uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IM  uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IM  uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IM  uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IM  uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IM  uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IM  uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IM  uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IM  uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IM  uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IM  uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IM  uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IM  uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IM  uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IM  uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IM  uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IM  uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IM  uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IM  uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IM  uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IM  uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } PENDING_1_b;
  } ;
  
  union {
    __IM  uint32_t PENDING_2;                   /*!< (@ 0x00000208) Pending state for interrupts 32 - 63                       */
    
    struct {
      __IM  uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IM  uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IM  uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IM  uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IM  uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IM  uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IM  uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IM  uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IM  uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IM  uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IM  uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IM  uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IM  uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IM  uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IM  uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IM  uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IM  uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IM  uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IM  uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IM  uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IM  uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IM  uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IM  uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IM  uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IM  uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IM  uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IM  uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IM  uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IM  uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IM  uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IM  uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IM  uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } PENDING_2_b;
  } ;
  
  union {
    __IOM uint32_t FIQ_CONTROL;                 /*!< (@ 0x0000020C) FIQ control                                                */
    
    struct {
      __IOM uint32_t SOURCE     : 7;            /*!< [6..0] FIQ Source                                                         */
      __IOM uint32_t ENABLE     : 1;            /*!< [7..7] FIQ Enable                                                         */
            uint32_t            : 24;
    } FIQ_CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t ENABLE_1;                    /*!< (@ 0x00000210) Enable interrupts 1 - 31                                   */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } ENABLE_1_b;
  } ;
  
  union {
    __IOM uint32_t ENABLE_2;                    /*!< (@ 0x00000214) Enable interrupts 32 - 63                                  */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } ENABLE_2_b;
  } ;
  
  union {
    __IOM uint32_t ENABLE_BASIC;                /*!< (@ 0x00000218) Enable basic interrupts                                    */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
            uint32_t            : 24;
    } ENABLE_BASIC_b;
  } ;
  
  union {
    __IOM uint32_t DISABLE_1;                   /*!< (@ 0x0000021C) Disable interrupts 1 - 31                                  */
    
    struct {
      __IOM uint32_t TIMER_0    : 1;            /*!< [0..0] Timer 0                                                            */
      __IOM uint32_t TIMER_1    : 1;            /*!< [1..1] Timer 1                                                            */
      __IOM uint32_t TIMER_2    : 1;            /*!< [2..2] Timer 2                                                            */
      __IOM uint32_t TIMER_3    : 1;            /*!< [3..3] Timer 3                                                            */
      __IOM uint32_t H264_0     : 1;            /*!< [4..4] H264 0                                                             */
      __IOM uint32_t H264_1     : 1;            /*!< [5..5] H264 1                                                             */
      __IOM uint32_t H264_2     : 1;            /*!< [6..6] H264 2                                                             */
      __IOM uint32_t JPEG       : 1;            /*!< [7..7] JPEG                                                               */
      __IOM uint32_t ISP        : 1;            /*!< [8..8] ISP                                                                */
      __IOM uint32_t USB        : 1;            /*!< [9..9] USB                                                                */
      __IOM uint32_t V3D        : 1;            /*!< [10..10] V3D                                                              */
      __IOM uint32_t TRANSPOSER : 1;            /*!< [11..11] Transposer                                                       */
      __IOM uint32_t MULTICORE_SYNC_0 : 1;      /*!< [12..12] Multicore Sync 0                                                 */
      __IOM uint32_t MULTICORE_SYNC_1 : 1;      /*!< [13..13] Multicore Sync 1                                                 */
      __IOM uint32_t MULTICORE_SYNC_2 : 1;      /*!< [14..14] Multicore Sync 2                                                 */
      __IOM uint32_t MULTICORE_SYNC_3 : 1;      /*!< [15..15] Multicore Sync 3                                                 */
      __IOM uint32_t DMA_0      : 1;            /*!< [16..16] DMA 0                                                            */
      __IOM uint32_t DMA_1      : 1;            /*!< [17..17] DMA 1                                                            */
      __IOM uint32_t DMA_2      : 1;            /*!< [18..18] DMA 2                                                            */
      __IOM uint32_t DMA_3      : 1;            /*!< [19..19] DMA 3                                                            */
      __IOM uint32_t DMA_4      : 1;            /*!< [20..20] DMA 4                                                            */
      __IOM uint32_t DMA_5      : 1;            /*!< [21..21] DMA 5                                                            */
      __IOM uint32_t DMA_6      : 1;            /*!< [22..22] DMA 6                                                            */
      __IOM uint32_t DMA_7_8    : 1;            /*!< [23..23] OR of DMA 7 and 8                                                */
      __IOM uint32_t DMA_9_10   : 1;            /*!< [24..24] OR of DMA 9 and 10                                               */
      __IOM uint32_t DMA_11     : 1;            /*!< [25..25] DMA 11                                                           */
      __IOM uint32_t DMA_12     : 1;            /*!< [26..26] DMA 12                                                           */
      __IOM uint32_t DMA_13     : 1;            /*!< [27..27] DMA 13                                                           */
      __IOM uint32_t DMA_14     : 1;            /*!< [28..28] DMA 14                                                           */
      __IOM uint32_t AUX        : 1;            /*!< [29..29] OR of UART1, SPI1 and SPI2                                       */
      __IOM uint32_t ARM        : 1;            /*!< [30..30] ARM                                                              */
      __IOM uint32_t DMA_15     : 1;            /*!< [31..31] DMA 15                                                           */
    } DISABLE_1_b;
  } ;
  
  union {
    __IOM uint32_t DISABLE_2;                   /*!< (@ 0x00000220) Disable interrupts 32 - 63                                 */
    
    struct {
      __IOM uint32_t HDMI_CEC   : 1;            /*!< [0..0] HDMI CEC                                                           */
      __IOM uint32_t HVS        : 1;            /*!< [1..1] HVS                                                                */
      __IOM uint32_t RPIVID     : 1;            /*!< [2..2] RPIVID                                                             */
      __IOM uint32_t SDC        : 1;            /*!< [3..3] SDC                                                                */
      __IOM uint32_t DSI_0      : 1;            /*!< [4..4] DSI 0                                                              */
      __IOM uint32_t PIXEL_VALVE_2 : 1;         /*!< [5..5] Pixel Valve 2                                                      */
      __IOM uint32_t CAMERA_0   : 1;            /*!< [6..6] Camera 0                                                           */
      __IOM uint32_t CAMERA_1   : 1;            /*!< [7..7] Camera 1                                                           */
      __IOM uint32_t HDMI_0     : 1;            /*!< [8..8] HDMI 0                                                             */
      __IOM uint32_t HDMI_1     : 1;            /*!< [9..9] HDMI 1                                                             */
      __IOM uint32_t PIXEL_VALVE_3 : 1;         /*!< [10..10] Pixel Valve 3                                                    */
      __IOM uint32_t SPI_BSC_SLAVE : 1;         /*!< [11..11] SPI/BSC Slave                                                    */
      __IOM uint32_t DSI_1      : 1;            /*!< [12..12] DSI 1                                                            */
      __IOM uint32_t PIXEL_VALVE_0 : 1;         /*!< [13..13] Pixel Valve 0                                                    */
      __IOM uint32_t PIXEL_VALVE_1_2 : 1;       /*!< [14..14] OR of Pixel Valve 1 and 2                                        */
      __IOM uint32_t CPR        : 1;            /*!< [15..15] CPR                                                              */
      __IOM uint32_t SMI        : 1;            /*!< [16..16] SMI                                                              */
      __IOM uint32_t GPIO_0     : 1;            /*!< [17..17] GPIO 0                                                           */
      __IOM uint32_t GPIO_1     : 1;            /*!< [18..18] GPIO 1                                                           */
      __IOM uint32_t GPIO_2     : 1;            /*!< [19..19] GPIO 2                                                           */
      __IOM uint32_t GPIO_3     : 1;            /*!< [20..20] GPIO 3                                                           */
      __IOM uint32_t I2C        : 1;            /*!< [21..21] OR of all I2C                                                    */
      __IOM uint32_t SPI        : 1;            /*!< [22..22] OR of all SPI                                                    */
      __IOM uint32_t PCM_I2S    : 1;            /*!< [23..23] PCM/I2S                                                          */
      __IOM uint32_t SDHOST     : 1;            /*!< [24..24] SDHOST                                                           */
      __IOM uint32_t UART       : 1;            /*!< [25..25] OR of all PL011 UARTs                                            */
      __IOM uint32_t ETH_PCIE   : 1;            /*!< [26..26] OR of all ETH_PCIe L2                                            */
      __IOM uint32_t VEC        : 1;            /*!< [27..27] VEC                                                              */
      __IOM uint32_t CPG        : 1;            /*!< [28..28] CPG                                                              */
      __IOM uint32_t RNG        : 1;            /*!< [29..29] RNG                                                              */
      __IOM uint32_t EMMC       : 1;            /*!< [30..30] OR of EMMC and EMMC2                                             */
      __IOM uint32_t ETH_PCIE_SECURE : 1;       /*!< [31..31] ETH_PCIe secure                                                  */
    } DISABLE_2_b;
  } ;
  
  union {
    __IOM uint32_t DISABLE_BASIC;               /*!< (@ 0x00000224) Disable basic interrupts                                   */
    
    struct {
      __IOM uint32_t TIMER      : 1;            /*!< [0..0] ARMC Timer                                                         */
      __IOM uint32_t MAILBOX    : 1;            /*!< [1..1] Mailbox                                                            */
      __IOM uint32_t DOORBELL0  : 1;            /*!< [2..2] Doorbell 0                                                         */
      __IOM uint32_t DOORBELL1  : 1;            /*!< [3..3] Doorbell 1                                                         */
      __IOM uint32_t VPU0_HALTED : 1;           /*!< [4..4] VPU0 halted                                                        */
      __IOM uint32_t VPU1_HALTED : 1;           /*!< [5..5] VPU1 halted                                                        */
      __IOM uint32_t ARM_ADDRESS_ERROR : 1;     /*!< [6..6] ARM address error                                                  */
      __IOM uint32_t ARM_AXI_ERROR : 1;         /*!< [7..7] ARM AXI error                                                      */
            uint32_t            : 24;
    } DISABLE_BASIC_b;
  } ;
} BCM_LIC_Type;                                 /*!< Size = 552 (0x228)                                                        */



/* =========================================================================================================================== */
/* ================                                      USB_OTG_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (USB_OTG_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x20980000) USB_OTG_GLOBAL Structure                                   */
  
  union {
    __IOM uint32_t GOTGCTL;                     /*!< (@ 0x00000000) OTG_HS control and status register                         */
    
    struct {
      __IM  uint32_t SRQSCS     : 1;            /*!< [0..0] Session request success                                            */
      __IOM uint32_t SRQ        : 1;            /*!< [1..1] Session request                                                    */
            uint32_t            : 6;
      __IM  uint32_t HNGSCS     : 1;            /*!< [8..8] Host negotiation success                                           */
      __IOM uint32_t HNPRQ      : 1;            /*!< [9..9] HNP request                                                        */
      __IOM uint32_t HSHNPEN    : 1;            /*!< [10..10] Host set HNP enable                                              */
      __IOM uint32_t DHNPEN     : 1;            /*!< [11..11] Device HNP enabled                                               */
            uint32_t            : 4;
      __IM  uint32_t CIDSTS     : 1;            /*!< [16..16] Connector ID status                                              */
      __IM  uint32_t DBCT       : 1;            /*!< [17..17] Long/short debounce time                                         */
      __IM  uint32_t ASVLD      : 1;            /*!< [18..18] A-session valid                                                  */
      __IM  uint32_t BSVLD      : 1;            /*!< [19..19] B-session valid                                                  */
            uint32_t            : 12;
    } GOTGCTL_b;
  } ;
  
  union {
    __IOM uint32_t GOTGINT;                     /*!< (@ 0x00000004) OTG_HS interrupt register                                  */
    
    struct {
            uint32_t            : 2;
      __IOM uint32_t SEDET      : 1;            /*!< [2..2] Session end detected                                               */
            uint32_t            : 5;
      __IOM uint32_t SRSSCHG    : 1;            /*!< [8..8] Session request success status change                              */
      __IOM uint32_t HNSSCHG    : 1;            /*!< [9..9] Host negotiation success status change                             */
            uint32_t            : 7;
      __IOM uint32_t HNGDET     : 1;            /*!< [17..17] Host negotiation detected                                        */
      __IOM uint32_t ADTOCHG    : 1;            /*!< [18..18] A-device timeout change                                          */
      __IOM uint32_t DBCDNE     : 1;            /*!< [19..19] Debounce done                                                    */
            uint32_t            : 12;
    } GOTGINT_b;
  } ;
  
  union {
    __IOM uint32_t GAHBCFG;                     /*!< (@ 0x00000008) OTG_HS AHB configuration register                          */
    
    struct {
      __IOM uint32_t GINT       : 1;            /*!< [0..0] Global interrupt mask                                              */
      __IOM uint32_t AXI_BURST  : 2;            /*!< [2..1] Maximum AXI burst length                                           */
            uint32_t            : 1;
      __IOM uint32_t AXI_WAIT   : 1;            /*!< [4..4] Wait for all AXI writes before signaling DMA                       */
      __IOM uint32_t DMAEN      : 1;            /*!< [5..5] DMA enable                                                         */
            uint32_t            : 1;
      __IOM uint32_t TXFELVL    : 1;            /*!< [7..7] TxFIFO empty level                                                 */
      __IOM uint32_t PTXFELVL   : 1;            /*!< [8..8] Periodic TxFIFO empty level                                        */
            uint32_t            : 23;
    } GAHBCFG_b;
  } ;
  
  union {
    __IOM uint32_t GUSBCFG;                     /*!< (@ 0x0000000C) OTG_HS USB configuration register                          */
    
    struct {
      __IOM uint32_t TOCAL      : 3;            /*!< [2..0] FS timeout calibration                                             */
      __IOM uint32_t PHYIF      : 1;            /*!< [3..3] PHY Interface width                                                */
      __IOM uint32_t PHYTYPE    : 1;            /*!< [4..4] PHY Type                                                           */
      __IOM uint32_t FSIF       : 1;            /*!< [5..5] Full speed interface                                               */
      __IOM uint32_t PHYSEL     : 1;            /*!< [6..6] Transceiver select                                                 */
      __IOM uint32_t DDRSEL     : 1;            /*!< [7..7] ULPI data rate                                                     */
      __IOM uint32_t SRPCAP     : 1;            /*!< [8..8] SRP-capable                                                        */
      __IOM uint32_t HNPCAP     : 1;            /*!< [9..9] HNP-capable                                                        */
      __IOM uint32_t TRDT       : 4;            /*!< [13..10] USB turnaround time                                              */
            uint32_t            : 1;
      __IOM uint32_t PHYLPCS    : 1;            /*!< [15..15] PHY Low-power clock select                                       */
            uint32_t            : 1;
      __IOM uint32_t ULPIFSLS   : 1;            /*!< [17..17] ULPI FS/LS select                                                */
      __IOM uint32_t ULPIAR     : 1;            /*!< [18..18] ULPI Auto-resume                                                 */
      __IOM uint32_t ULPICSM    : 1;            /*!< [19..19] ULPI Clock SuspendM                                              */
      __IOM uint32_t ULPIEVBUSD : 1;            /*!< [20..20] ULPI External VBUS Drive                                         */
      __IOM uint32_t ULPIEVBUSI : 1;            /*!< [21..21] ULPI external VBUS indicator                                     */
      __IOM uint32_t TSDPS      : 1;            /*!< [22..22] TermSel DLine pulsing selection                                  */
      __IOM uint32_t PCCI       : 1;            /*!< [23..23] Indicator complement                                             */
      __IOM uint32_t PTCI       : 1;            /*!< [24..24] Indicator pass through                                           */
      __IOM uint32_t ULPIIPD    : 1;            /*!< [25..25] ULPI interface protect disable                                   */
            uint32_t            : 3;
      __IOM uint32_t FHMOD      : 1;            /*!< [29..29] Forced host mode                                                 */
      __IOM uint32_t FDMOD      : 1;            /*!< [30..30] Forced peripheral mode                                           */
      __IOM uint32_t CTXPKT     : 1;            /*!< [31..31] Corrupt Tx packet                                                */
    } GUSBCFG_b;
  } ;
  
  union {
    __IOM uint32_t GRSTCTL;                     /*!< (@ 0x00000010) OTG_HS reset register                                      */
    
    struct {
      __IOM uint32_t CSRST      : 1;            /*!< [0..0] Core soft reset                                                    */
      __IOM uint32_t HSRST      : 1;            /*!< [1..1] HCLK soft reset                                                    */
      __IOM uint32_t FCRST      : 1;            /*!< [2..2] Host frame counter reset                                           */
            uint32_t            : 1;
      __IOM uint32_t RXFFLSH    : 1;            /*!< [4..4] RxFIFO flush                                                       */
      __IOM uint32_t TXFFLSH    : 1;            /*!< [5..5] TxFIFO flush                                                       */
      __IOM uint32_t TXFNUM     : 5;            /*!< [10..6] TxFIFO number                                                     */
            uint32_t            : 19;
      __IM  uint32_t DMAREQ     : 1;            /*!< [30..30] DMA request signal                                               */
      __IM  uint32_t AHBIDL     : 1;            /*!< [31..31] AHB master idle                                                  */
    } GRSTCTL_b;
  } ;
  
  union {
    __IOM uint32_t GINTSTS;                     /*!< (@ 0x00000014) OTG_HS core interrupt register                             */
    
    struct {
      __IM  uint32_t CMOD       : 1;            /*!< [0..0] Current mode of operation                                          */
      __IOM uint32_t MMIS       : 1;            /*!< [1..1] Mode mismatch interrupt                                            */
      __IM  uint32_t OTGINT     : 1;            /*!< [2..2] OTG interrupt                                                      */
      __IOM uint32_t SOF        : 1;            /*!< [3..3] Start of frame                                                     */
      __IM  uint32_t RXFLVL     : 1;            /*!< [4..4] RxFIFO nonempty                                                    */
      __IM  uint32_t NPTXFE     : 1;            /*!< [5..5] Nonperiodic TxFIFO empty                                           */
      __IM  uint32_t GINAKEFF   : 1;            /*!< [6..6] Global IN nonperiodic NAK effective                                */
      __IM  uint32_t BOUTNAKEFF : 1;            /*!< [7..7] Global OUT NAK effective                                           */
            uint32_t            : 2;
      __IOM uint32_t ESUSP      : 1;            /*!< [10..10] Early suspend                                                    */
      __IOM uint32_t USBSUSP    : 1;            /*!< [11..11] USB suspend                                                      */
      __IOM uint32_t USBRST     : 1;            /*!< [12..12] USB reset                                                        */
      __IOM uint32_t ENUMDNE    : 1;            /*!< [13..13] Enumeration done                                                 */
      __IOM uint32_t ISOODRP    : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt                         */
      __IOM uint32_t EOPF       : 1;            /*!< [15..15] End of periodic frame interrupt                                  */
            uint32_t            : 2;
      __IM  uint32_t IEPINT     : 1;            /*!< [18..18] IN endpoint interrupt                                            */
      __IM  uint32_t OEPINT     : 1;            /*!< [19..19] OUT endpoint interrupt                                           */
      __IOM uint32_t IISOIXFR   : 1;            /*!< [20..20] Incomplete isochronous IN transfer                               */
      __IOM uint32_t PXFR_INCOMPISOOUT : 1;     /*!< [21..21] Incomplete periodic transfer                                     */
      __IOM uint32_t DATAFSUSP  : 1;            /*!< [22..22] Data fetch suspended                                             */
            uint32_t            : 1;
      __IM  uint32_t HPRTINT    : 1;            /*!< [24..24] Host port interrupt                                              */
      __IM  uint32_t HCINT      : 1;            /*!< [25..25] Host channels interrupt                                          */
      __IM  uint32_t PTXFE      : 1;            /*!< [26..26] Periodic TxFIFO empty                                            */
            uint32_t            : 1;
      __IOM uint32_t CIDSCHG    : 1;            /*!< [28..28] Connector ID status change                                       */
      __IOM uint32_t DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt                                    */
      __IOM uint32_t SRQINT     : 1;            /*!< [30..30] Session request/new session detected interrupt                   */
      __IOM uint32_t WKUINT     : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt                          */
    } GINTSTS_b;
  } ;
  
  union {
    __IOM uint32_t GINTMSK;                     /*!< (@ 0x00000018) OTG_HS interrupt mask register                             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t MMISM      : 1;            /*!< [1..1] Mode mismatch interrupt mask                                       */
      __IOM uint32_t OTGINT     : 1;            /*!< [2..2] OTG interrupt mask                                                 */
      __IOM uint32_t SOFM       : 1;            /*!< [3..3] Start of frame mask                                                */
      __IOM uint32_t RXFLVLM    : 1;            /*!< [4..4] Receive FIFO nonempty mask                                         */
      __IOM uint32_t NPTXFEM    : 1;            /*!< [5..5] Nonperiodic TxFIFO empty mask                                      */
      __IOM uint32_t GINAKEFFM  : 1;            /*!< [6..6] Global nonperiodic IN NAK effective mask                           */
      __IOM uint32_t GONAKEFFM  : 1;            /*!< [7..7] Global OUT NAK effective mask                                      */
            uint32_t            : 2;
      __IOM uint32_t ESUSPM     : 1;            /*!< [10..10] Early suspend mask                                               */
      __IOM uint32_t USBSUSPM   : 1;            /*!< [11..11] USB suspend mask                                                 */
      __IOM uint32_t USBRST     : 1;            /*!< [12..12] USB reset mask                                                   */
      __IOM uint32_t ENUMDNEM   : 1;            /*!< [13..13] Enumeration done mask                                            */
      __IOM uint32_t ISOODRPM   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt mask                    */
      __IOM uint32_t EOPFM      : 1;            /*!< [15..15] End of periodic frame interrupt mask                             */
            uint32_t            : 1;
      __IOM uint32_t EPMISM     : 1;            /*!< [17..17] Endpoint mismatch interrupt mask                                 */
      __IOM uint32_t IEPINT     : 1;            /*!< [18..18] IN endpoints interrupt mask                                      */
      __IOM uint32_t OEPINT     : 1;            /*!< [19..19] OUT endpoints interrupt mask                                     */
      __IOM uint32_t IISOIXFRM  : 1;            /*!< [20..20] Incomplete isochronous IN transfer mask                          */
      __IOM uint32_t PXFRM_IISOOXFRM : 1;       /*!< [21..21] Incomplete periodic transfer mask                                */
      __IOM uint32_t FSUSPM     : 1;            /*!< [22..22] Data fetch suspended mask                                        */
            uint32_t            : 1;
      __IM  uint32_t PRTIM      : 1;            /*!< [24..24] Host port interrupt mask                                         */
      __IOM uint32_t HCIM       : 1;            /*!< [25..25] Host channels interrupt mask                                     */
      __IOM uint32_t PTXFEM     : 1;            /*!< [26..26] Periodic TxFIFO empty mask                                       */
            uint32_t            : 1;
      __IOM uint32_t CIDSCHGM   : 1;            /*!< [28..28] Connector ID status change mask                                  */
      __IOM uint32_t DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt mask                               */
      __IOM uint32_t SRQIM      : 1;            /*!< [30..30] Session request/new session detected interrupt mask              */
      __IOM uint32_t WUIM       : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt mask                     */
    } GINTMSK_b;
  } ;
  
  union {
    union {
      __IM  uint32_t GRXSTSR_Host;              /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (host
                                                                         mode)                                                 */
      
      struct {
        __IM  uint32_t CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32_t          : 11;
      } GRXSTSR_Host_b;
    } ;
    
    union {
      __IM  uint32_t GRXSTSR_Peripheral;        /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (peripheral
                                                                         mode mode)                                            */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32_t FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32_t          : 7;
      } GRXSTSR_Peripheral_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t GRXSTSP_Host;              /*!< (@ 0x00000020) OTG_HS status read and pop register (host mode)            */
      
      struct {
        __IM  uint32_t CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32_t          : 11;
      } GRXSTSP_Host_b;
    } ;
    
    union {
      __IM  uint32_t GRXSTSP_Peripheral;        /*!< (@ 0x00000020) OTG_HS status read and pop register (peripheral
                                                                         mode)                                                 */
      
      struct {
        __IM  uint32_t EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32_t BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32_t DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32_t PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32_t FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32_t          : 7;
      } GRXSTSP_Peripheral_b;
    } ;
  };
  
  union {
    __IOM uint32_t GRXFSIZ;                     /*!< (@ 0x00000024) OTG_HS Receive FIFO size register                          */
    
    struct {
      __IOM uint32_t RXFD       : 16;           /*!< [15..0] RxFIFO depth                                                      */
            uint32_t            : 16;
    } GRXFSIZ_b;
  } ;
  
  union {
    union {
      __IOM uint32_t GNPTXFSIZ_Host;            /*!< (@ 0x00000028) OTG_HS nonperiodic transmit FIFO size register
                                                                         (host mode)                                           */
      
      struct {
        __IOM uint32_t NPTXFSA  : 16;           /*!< [15..0] Nonperiodic transmit RAM start address                            */
        __IOM uint32_t NPTXFD   : 16;           /*!< [31..16] Nonperiodic TxFIFO depth                                         */
      } GNPTXFSIZ_Host_b;
    } ;
    
    union {
      __IOM uint32_t TX0FSIZ_Peripheral;        /*!< (@ 0x00000028) Endpoint 0 transmit FIFO size (peripheral mode)            */
      
      struct {
        __IOM uint32_t TX0FSA   : 16;           /*!< [15..0] Endpoint 0 transmit RAM start address                             */
        __IOM uint32_t TX0FD    : 16;           /*!< [31..16] Endpoint 0 TxFIFO depth                                          */
      } TX0FSIZ_Peripheral_b;
    } ;
  };
  
  union {
    __IM  uint32_t GNPTXSTS;                    /*!< (@ 0x0000002C) OTG_HS nonperiodic transmit FIFO/queue status
                                                                         register                                              */
    
    struct {
      __IM  uint32_t NPTXFSAV   : 16;           /*!< [15..0] Nonperiodic TxFIFO space available                                */
      __IM  uint32_t NPTQXSAV   : 8;            /*!< [23..16] Nonperiodic transmit request queue space available               */
      __IM  uint32_t NPTXQTOP   : 7;            /*!< [30..24] Top of the nonperiodic transmit request queue                    */
            uint32_t            : 1;
    } GNPTXSTS_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t GCCFG;                       /*!< (@ 0x00000038) OTG_HS general core configuration register                 */
    
    struct {
            uint32_t            : 16;
      __IOM uint32_t PWRDWN     : 1;            /*!< [16..16] Power down                                                       */
      __IOM uint32_t I2CPADEN   : 1;            /*!< [17..17] Enable I2C bus connection for the external I2C PHY
                                                     interface                                                                 */
      __IOM uint32_t VBUSASEN   : 1;            /*!< [18..18] Enable the VBUS sensing device                                   */
      __IOM uint32_t VBUSBSEN   : 1;            /*!< [19..19] Enable the VBUS sensing device                                   */
      __IOM uint32_t SOFOUTEN   : 1;            /*!< [20..20] SOF output enable                                                */
      __IOM uint32_t NOVBUSSENS : 1;            /*!< [21..21] VBUS sensing disable option                                      */
            uint32_t            : 10;
    } GCCFG_b;
  } ;
  
  union {
    __IOM uint32_t CID;                         /*!< (@ 0x0000003C) OTG_HS core ID register                                    */
    
    struct {
      __IOM uint32_t PRODUCT_ID : 32;           /*!< [31..0] Product ID field                                                  */
    } CID_b;
  } ;
  __IM  uint32_t  VID;                          /*!< (@ 0x00000040) OTG_HS vendor ID register                                  */
  
  union {
    __IM  uint32_t HW_DIRECTION;                /*!< (@ 0x00000044) Direction                                                  */
    
    struct {
      __IM  uint32_t DIRECTION0 : 2;            /*!< [1..0] Direction 0                                                        */
      __IM  uint32_t DIRECTION1 : 2;            /*!< [3..2] Direction 1                                                        */
      __IM  uint32_t DIRECTION2 : 2;            /*!< [5..4] Direction 2                                                        */
      __IM  uint32_t DIRECTION3 : 2;            /*!< [7..6] Direction 3                                                        */
      __IM  uint32_t DIRECTION4 : 2;            /*!< [9..8] Direction 4                                                        */
      __IM  uint32_t DIRECTION5 : 2;            /*!< [11..10] Direction 5                                                      */
      __IM  uint32_t DIRECTION6 : 2;            /*!< [13..12] Direction 6                                                      */
      __IM  uint32_t DIRECTION7 : 2;            /*!< [15..14] Direction 7                                                      */
      __IM  uint32_t DIRECTION8 : 2;            /*!< [17..16] Direction 8                                                      */
      __IM  uint32_t DIRECTION9 : 2;            /*!< [19..18] Direction 9                                                      */
      __IM  uint32_t DIRECTION10 : 2;           /*!< [21..20] Direction 10                                                     */
      __IM  uint32_t DIRECTION11 : 2;           /*!< [23..22] Direction 11                                                     */
      __IM  uint32_t DIRECTION12 : 2;           /*!< [25..24] Direction 12                                                     */
      __IM  uint32_t DIRECTION13 : 2;           /*!< [27..26] Direction 13                                                     */
      __IM  uint32_t DIRECTION14 : 2;           /*!< [29..28] Direction 14                                                     */
      __IM  uint32_t DIRECTION15 : 2;           /*!< [31..30] Direction 15                                                     */
    } HW_DIRECTION_b;
  } ;
  
  union {
    __IM  uint32_t HW_CONFIG0;                  /*!< (@ 0x00000048) Hardware Config 0                                          */
    
    struct {
      __IM  uint32_t OPERATING_MODE : 3;        /*!< [2..0] Operating Mode                                                     */
      __IM  uint32_t ARCHITECTURE : 2;          /*!< [4..3] Architecture                                                       */
      __IM  uint32_t POINT_TO_POINT : 1;        /*!< [5..5] Point to Point                                                     */
      __IM  uint32_t HIGH_SPEED_PHY : 2;        /*!< [7..6] High Speed Physical                                                */
      __IM  uint32_t FULL_SPEED_PHY : 2;        /*!< [9..8] Full Speed Physical                                                */
      __IM  uint32_t DEVICE_END_POINT_COUNT : 4;/*!< [13..10] Device end point count                                           */
      __IM  uint32_t HOST_CHANNEL_COUNT : 4;    /*!< [17..14] Host channel count                                               */
      __IM  uint32_t SUPPORTS_PERIODIC_ENDPOINTS : 1;/*!< [18..18] Supports periodic endpoints                                 */
      __IM  uint32_t DYNAMIC_FIFO : 1;          /*!< [19..19] Dynamic FIFO                                                     */
      __IM  uint32_t MULTI_PROC_INT : 1;        /*!< [20..20] Multi proc int                                                   */
            uint32_t            : 1;
      __IM  uint32_t NON_PERIODIC_QUEUE_DEPTH : 2;/*!< [23..22] Non periodic queue depth                                       */
      __IM  uint32_t HOST_PERIODIC_QUEUE_DEPTH : 2;/*!< [25..24] Host periodic queue depth                                     */
      __IM  uint32_t DEVICE_TOKEN_QUEUE_DEPTH : 5;/*!< [30..26] Device token queue depth                                       */
      __IM  uint32_t ENABLE_IC_USB : 1;         /*!< [31..31] Enable IC USB                                                    */
    } HW_CONFIG0_b;
  } ;
  __IM  uint32_t  RESERVED1[45];
  
  union {
    __IOM uint32_t HPTXFSIZ;                    /*!< (@ 0x00000100) OTG_HS Host periodic transmit FIFO size register           */
    
    struct {
      __IOM uint32_t PTXSA      : 16;           /*!< [15..0] Host periodic TxFIFO start address                                */
      __IOM uint32_t PTXFD      : 16;           /*!< [31..16] Host periodic TxFIFO depth                                       */
    } HPTXFSIZ_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF1;                    /*!< (@ 0x00000104) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF1_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF2;                    /*!< (@ 0x00000108) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF2_b;
  } ;
  __IM  uint32_t  RESERVED2[4];
  
  union {
    __IOM uint32_t DIEPTXF3;                    /*!< (@ 0x0000011C) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF3_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF4;                    /*!< (@ 0x00000120) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF4_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF5;                    /*!< (@ 0x00000124) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF5_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF6;                    /*!< (@ 0x00000128) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF6_b;
  } ;
  
  union {
    __IOM uint32_t DIEPTXF7;                    /*!< (@ 0x0000012C) OTG_HS device IN endpoint transmit FIFO size
                                                                         register                                              */
    
    struct {
      __IOM uint32_t INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32_t INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } DIEPTXF7_b;
  } ;
} USB_OTG_GLOBAL_Type;                          /*!< Size = 304 (0x130)                                                        */



/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (USB_OTG_HOST)
  */

typedef struct {                                /*!< (@ 0x20980400) USB_OTG_HOST Structure                                     */
  
  union {
    __IOM uint32_t HCFG;                        /*!< (@ 0x00000000) OTG_HS host configuration register                         */
    
    struct {
      __IOM uint32_t FSLSPCS    : 2;            /*!< [1..0] FS/LS PHY clock select                                             */
      __IM  uint32_t FSLSS      : 1;            /*!< [2..2] FS- and LS-only support                                            */
            uint32_t            : 29;
    } HCFG_b;
  } ;
  
  union {
    __IOM uint32_t HFIR;                        /*!< (@ 0x00000004) OTG_HS Host frame interval register                        */
    
    struct {
      __IOM uint32_t FRIVL      : 16;           /*!< [15..0] Frame interval                                                    */
            uint32_t            : 16;
    } HFIR_b;
  } ;
  
  union {
    __IM  uint32_t HFNUM;                       /*!< (@ 0x00000008) OTG_HS host frame number/frame time remaining
                                                                         register                                              */
    
    struct {
      __IM  uint32_t FRNUM      : 16;           /*!< [15..0] Frame number                                                      */
      __IM  uint32_t FTREM      : 16;           /*!< [31..16] Frame time remaining                                             */
    } HFNUM_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t HPTXSTS;                     /*!< (@ 0x00000010) Host periodic transmit FIFO/queue status register          */
    
    struct {
      __IOM uint32_t PTXFSAVL   : 16;           /*!< [15..0] Periodic transmit data FIFO space available                       */
      __IM  uint32_t PTXQSAV    : 8;            /*!< [23..16] Periodic transmit request queue space available                  */
      __IM  uint32_t PTXQTOP    : 8;            /*!< [31..24] Top of the periodic transmit request queue                       */
    } HPTXSTS_b;
  } ;
  
  union {
    __IM  uint32_t HAINT;                       /*!< (@ 0x00000014) OTG_HS Host all channels interrupt register                */
    
    struct {
      __IM  uint32_t HAINT      : 16;           /*!< [15..0] Channel interrupts                                                */
            uint32_t            : 16;
    } HAINT_b;
  } ;
  
  union {
    __IOM uint32_t HAINTMSK;                    /*!< (@ 0x00000018) OTG_HS host all channels interrupt mask register           */
    
    struct {
      __IOM uint32_t HAINTM     : 16;           /*!< [15..0] Channel interrupt mask                                            */
            uint32_t            : 16;
    } HAINTMSK_b;
  } ;
  __IM  uint32_t  RESERVED1[9];
  
  union {
    __IOM uint32_t HPRT;                        /*!< (@ 0x00000040) OTG_HS host port control and status register               */
    
    struct {
      __IM  uint32_t PCSTS      : 1;            /*!< [0..0] Port connect status                                                */
      __IOM uint32_t PCDET      : 1;            /*!< [1..1] Port connect detected                                              */
      __IOM uint32_t PENA       : 1;            /*!< [2..2] Port enable                                                        */
      __IOM uint32_t PENCHNG    : 1;            /*!< [3..3] Port enable/disable change                                         */
      __IM  uint32_t POCA       : 1;            /*!< [4..4] Port overcurrent active                                            */
      __IOM uint32_t POCCHNG    : 1;            /*!< [5..5] Port overcurrent change                                            */
      __IOM uint32_t PRES       : 1;            /*!< [6..6] Port resume                                                        */
      __IOM uint32_t PSUSP      : 1;            /*!< [7..7] Port suspend                                                       */
      __IOM uint32_t PRST       : 1;            /*!< [8..8] Port reset                                                         */
            uint32_t            : 1;
      __IM  uint32_t PLSTS      : 2;            /*!< [11..10] Port line status                                                 */
      __IOM uint32_t PPWR       : 1;            /*!< [12..12] Port power                                                       */
      __IOM uint32_t PTCTL      : 4;            /*!< [16..13] Port test control                                                */
      __IM  uint32_t PSPD       : 2;            /*!< [18..17] Port speed                                                       */
            uint32_t            : 13;
    } HPRT_b;
  } ;
  __IM  uint32_t  RESERVED2[47];
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL0;/*!< (@ 0x00000100) Host channel 0                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL1;/*!< (@ 0x00000120) Host channel 1                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL2;/*!< (@ 0x00000140) Host channel 2                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL3;/*!< (@ 0x00000160) Host channel 3                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL4;/*!< (@ 0x00000180) Host channel 4                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL5;/*!< (@ 0x000001A0) Host channel 5                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL6;/*!< (@ 0x000001C0) Host channel 6                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL7;/*!< (@ 0x000001E0) Host channel 7                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL8;/*!< (@ 0x00000200) Host channel 8                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL9;/*!< (@ 0x00000220) Host channel 9                                        */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL10;/*!< (@ 0x00000240) Host channel 10                                      */
  __IOM USB_OTG_HOST_HOST_CHANNEL_Type HOST_CHANNEL11;/*!< (@ 0x00000260) Host channel 11                                      */
} USB_OTG_HOST_Type;                            /*!< Size = 640 (0x280)                                                        */



/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (USB_OTG_DEVICE)
  */

typedef struct {                                /*!< (@ 0x20980800) USB_OTG_DEVICE Structure                                   */
  
  union {
    __IOM uint32_t DCFG;                        /*!< (@ 0x00000000) OTG_HS device configuration register                       */
    
    struct {
      __IOM uint32_t DSPD       : 2;            /*!< [1..0] Device speed                                                       */
      __IOM uint32_t NZLSOHSK   : 1;            /*!< [2..2] Nonzero-length status OUT handshake                                */
            uint32_t            : 1;
      __IOM uint32_t DAD        : 7;            /*!< [10..4] Device address                                                    */
      __IOM uint32_t PFIVL      : 2;            /*!< [12..11] Periodic (micro)frame interval                                   */
            uint32_t            : 11;
      __IOM uint32_t PERSCHIVL  : 2;            /*!< [25..24] Periodic scheduling interval                                     */
            uint32_t            : 6;
    } DCFG_b;
  } ;
  
  union {
    __IOM uint32_t DCTL;                        /*!< (@ 0x00000004) OTG_HS device control register                             */
    
    struct {
      __IOM uint32_t RWUSIG     : 1;            /*!< [0..0] Remote wakeup signaling                                            */
      __IOM uint32_t SDIS       : 1;            /*!< [1..1] Soft disconnect                                                    */
      __IM  uint32_t GINSTS     : 1;            /*!< [2..2] Global IN NAK status                                               */
      __IM  uint32_t GONSTS     : 1;            /*!< [3..3] Global OUT NAK status                                              */
      __IOM uint32_t TCTL       : 3;            /*!< [6..4] Test control                                                       */
      __OM  uint32_t SGINAK     : 1;            /*!< [7..7] Set global IN NAK                                                  */
      __OM  uint32_t CGINAK     : 1;            /*!< [8..8] Clear global IN NAK                                                */
      __OM  uint32_t SGONAK     : 1;            /*!< [9..9] Set global OUT NAK                                                 */
      __OM  uint32_t CGONAK     : 1;            /*!< [10..10] Clear global OUT NAK                                             */
      __IOM uint32_t POPRGDNE   : 1;            /*!< [11..11] Power-on programming done                                        */
            uint32_t            : 20;
    } DCTL_b;
  } ;
  
  union {
    __IM  uint32_t DSTS;                        /*!< (@ 0x00000008) OTG_HS device status register                              */
    
    struct {
      __IM  uint32_t SUSPSTS    : 1;            /*!< [0..0] Suspend status                                                     */
      __IM  uint32_t ENUMSPD    : 2;            /*!< [2..1] Enumerated speed                                                   */
      __IM  uint32_t EERR       : 1;            /*!< [3..3] Erratic error                                                      */
            uint32_t            : 4;
      __IM  uint32_t FNSOF      : 14;           /*!< [21..8] Frame number of the received SOF                                  */
            uint32_t            : 10;
    } DSTS_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIEPMSK;                     /*!< (@ 0x00000010) OTG_HS device IN endpoint common interrupt mask
                                                                         register                                              */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t TOM        : 1;            /*!< [3..3] Timeout condition mask (nonisochronous endpoints)                  */
      __IOM uint32_t ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32_t INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32_t INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32_t            : 1;
      __IOM uint32_t TXFURM     : 1;            /*!< [8..8] FIFO underrun mask                                                 */
      __IOM uint32_t BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 22;
    } DIEPMSK_b;
  } ;
  
  union {
    __IOM uint32_t DOEPMSK;                     /*!< (@ 0x00000014) OTG_HS device OUT endpoint common interrupt mask
                                                                         register                                              */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t STUPM      : 1;            /*!< [3..3] SETUP phase done mask                                              */
      __IOM uint32_t OTEPDM     : 1;            /*!< [4..4] OUT token received when endpoint disabled mask                     */
            uint32_t            : 1;
      __IOM uint32_t B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received mask                           */
            uint32_t            : 1;
      __IOM uint32_t OPEM       : 1;            /*!< [8..8] OUT packet error mask                                              */
      __IOM uint32_t BOIM       : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 22;
    } DOEPMSK_b;
  } ;
  
  union {
    __IM  uint32_t DAINT;                       /*!< (@ 0x00000018) OTG_HS device all endpoints interrupt register             */
    
    struct {
      __IM  uint32_t IEPINT     : 16;           /*!< [15..0] IN endpoint interrupt bits                                        */
      __IM  uint32_t OEPINT     : 16;           /*!< [31..16] OUT endpoint interrupt bits                                      */
    } DAINT_b;
  } ;
  
  union {
    __IOM uint32_t DAINTMSK;                    /*!< (@ 0x0000001C) OTG_HS all endpoints interrupt mask register               */
    
    struct {
      __IOM uint32_t IEPM       : 16;           /*!< [15..0] IN EP interrupt mask bits                                         */
      __IOM uint32_t OEPM       : 16;           /*!< [31..16] OUT EP interrupt mask bits                                       */
    } DAINTMSK_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t DVBUSDIS;                    /*!< (@ 0x00000028) OTG_HS device VBUS discharge time register                 */
    
    struct {
      __IOM uint32_t VBUSDT     : 16;           /*!< [15..0] Device VBUS discharge time                                        */
            uint32_t            : 16;
    } DVBUSDIS_b;
  } ;
  
  union {
    __IOM uint32_t DVBUSPULSE;                  /*!< (@ 0x0000002C) OTG_HS device VBUS pulsing time register                   */
    
    struct {
      __IOM uint32_t DVBUSP     : 12;           /*!< [11..0] Device VBUS pulsing time                                          */
            uint32_t            : 20;
    } DVBUSPULSE_b;
  } ;
  
  union {
    __IOM uint32_t DTHRCTL;                     /*!< (@ 0x00000030) OTG_HS Device threshold control register                   */
    
    struct {
      __IOM uint32_t NONISOTHREN : 1;           /*!< [0..0] Nonisochronous IN endpoints threshold enable                       */
      __IOM uint32_t ISOTHREN   : 1;            /*!< [1..1] ISO IN endpoint threshold enable                                   */
      __IOM uint32_t TXTHRLEN   : 9;            /*!< [10..2] Transmit threshold length                                         */
            uint32_t            : 5;
      __IOM uint32_t RXTHREN    : 1;            /*!< [16..16] Receive threshold enable                                         */
      __IOM uint32_t RXTHRLEN   : 9;            /*!< [25..17] Receive threshold length                                         */
            uint32_t            : 1;
      __IOM uint32_t ARPEN      : 1;            /*!< [27..27] Arbiter parking enable                                           */
            uint32_t            : 4;
    } DTHRCTL_b;
  } ;
  
  union {
    __IOM uint32_t DIEPEMPMSK;                  /*!< (@ 0x00000034) OTG_HS device IN endpoint FIFO empty interrupt
                                                                         mask register                                         */
    
    struct {
      __IOM uint32_t INEPTXFEM  : 16;           /*!< [15..0] IN EP Tx FIFO empty interrupt mask bits                           */
            uint32_t            : 16;
    } DIEPEMPMSK_b;
  } ;
  
  union {
    __IOM uint32_t DEACHINT;                    /*!< (@ 0x00000038) OTG_HS device each endpoint interrupt register             */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t IEP1INT    : 1;            /*!< [1..1] IN endpoint 1interrupt bit                                         */
            uint32_t            : 15;
      __IOM uint32_t OEP1INT    : 1;            /*!< [17..17] OUT endpoint 1 interrupt bit                                     */
            uint32_t            : 14;
    } DEACHINT_b;
  } ;
  
  union {
    __IOM uint32_t DEACHINTMSK;                 /*!< (@ 0x0000003C) OTG_HS device each endpoint interrupt register
                                                                         mask                                                  */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t IEP1INTM   : 1;            /*!< [1..1] IN Endpoint 1 interrupt mask bit                                   */
            uint32_t            : 15;
      __IOM uint32_t OEP1INTM   : 1;            /*!< [17..17] OUT Endpoint 1 interrupt mask bit                                */
            uint32_t            : 14;
    } DEACHINTMSK_b;
  } ;
  
  union {
    __IOM uint32_t DIEPEACHMSK1;                /*!< (@ 0x00000040) OTG_HS device each in endpoint-1 interrupt register        */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t TOM        : 1;            /*!< [3..3] Timeout condition mask (nonisochronous endpoints)                  */
      __IOM uint32_t ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32_t INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32_t INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32_t            : 1;
      __IOM uint32_t TXFURM     : 1;            /*!< [8..8] FIFO underrun mask                                                 */
      __IOM uint32_t BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 3;
      __IOM uint32_t NAKM       : 1;            /*!< [13..13] NAK interrupt mask                                               */
            uint32_t            : 18;
    } DIEPEACHMSK1_b;
  } ;
  __IM  uint32_t  RESERVED2[15];
  
  union {
    __IOM uint32_t DOEPEACHMSK1;                /*!< (@ 0x00000080) OTG_HS device each OUT endpoint-1 interrupt register       */
    
    struct {
      __IOM uint32_t XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32_t EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32_t            : 1;
      __IOM uint32_t TOM        : 1;            /*!< [3..3] Timeout condition mask                                             */
      __IOM uint32_t ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32_t INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32_t INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32_t            : 1;
      __IOM uint32_t TXFURM     : 1;            /*!< [8..8] OUT packet error mask                                              */
      __IOM uint32_t BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32_t            : 2;
      __IOM uint32_t BERRM      : 1;            /*!< [12..12] Bubble error interrupt mask                                      */
      __IOM uint32_t NAKM       : 1;            /*!< [13..13] NAK interrupt mask                                               */
      __IOM uint32_t NYETM      : 1;            /*!< [14..14] NYET interrupt mask                                              */
            uint32_t            : 17;
    } DOEPEACHMSK1_b;
  } ;
  __IM  uint32_t  RESERVED3[31];
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT0;/*!< (@ 0x00000100) IN Endpoint 0                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT1;/*!< (@ 0x00000120) IN Endpoint 1                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT2;/*!< (@ 0x00000140) IN Endpoint 2                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT3;/*!< (@ 0x00000160) IN Endpoint 3                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT4;/*!< (@ 0x00000180) IN Endpoint 4                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT5;/*!< (@ 0x000001A0) IN Endpoint 5                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT6;/*!< (@ 0x000001C0) IN Endpoint 6                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT7;/*!< (@ 0x000001E0) IN Endpoint 7                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT8;/*!< (@ 0x00000200) IN Endpoint 8                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT9;/*!< (@ 0x00000220) IN Endpoint 9                                         */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT10;/*!< (@ 0x00000240) IN Endpoint 10                                       */
  __IOM USB_OTG_DEVICE_IN_ENDPOINT_Type IN_ENDPOINT11;/*!< (@ 0x00000260) IN Endpoint 11                                       */
  __IM  uint32_t  RESERVED4[32];
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT0;/*!< (@ 0x00000300) OUT Endpoint 0                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT1;/*!< (@ 0x00000320) OUT Endpoint 1                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT2;/*!< (@ 0x00000340) OUT Endpoint 2                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT3;/*!< (@ 0x00000360) OUT Endpoint 3                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT4;/*!< (@ 0x00000380) OUT Endpoint 4                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT5;/*!< (@ 0x000003A0) OUT Endpoint 5                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT6;/*!< (@ 0x000003C0) OUT Endpoint 6                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT7;/*!< (@ 0x000003E0) OUT Endpoint 7                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT8;/*!< (@ 0x00000400) OUT Endpoint 8                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT9;/*!< (@ 0x00000420) OUT Endpoint 9                                      */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT10;/*!< (@ 0x00000440) OUT Endpoint 10                                    */
  __IOM USB_OTG_DEVICE_OUT_ENDPOINT_Type OUT_ENDPOINT11;/*!< (@ 0x00000460) OUT Endpoint 11                                    */
} USB_OTG_DEVICE_Type;                          /*!< Size = 1152 (0x480)                                                       */



/* =========================================================================================================================== */
/* ================                                      USB_OTG_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed power control (USB_OTG_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x20980E00) USB_OTG_PWRCLK Structure                                   */
  
  union {
    __IOM uint32_t PCGCCTL;                     /*!< (@ 0x00000000) power and clock gating control                             */
    
    struct {
      __IOM uint32_t STPPCLK    : 1;            /*!< [0..0] Stop PHY clock                                                     */
      __IOM uint32_t GATEHCLK   : 1;            /*!< [1..1] Gate HCLK                                                          */
      __IOM uint32_t PWRCLMP    : 1;            /*!< [2..2] Power clamp                                                        */
      __IOM uint32_t RSTPDWNMODULE : 1;         /*!< [3..3] Power down modules                                                 */
      __IOM uint32_t PHYSUSP    : 1;            /*!< [4..4] PHY Suspended                                                      */
      __IOM uint32_t ENABLE_L1GATING : 1;       /*!< [5..5] Enable sleep clock gating                                          */
      __IOM uint32_t PHYSLEEP   : 1;            /*!< [6..6] PHY is in sleep mode                                               */
      __IOM uint32_t DEEPSLEEP  : 1;            /*!< [7..7] PHY is in deep sleep                                               */
      __IOM uint32_t RESETAFTERSUSP : 1;        /*!< [8..8] Reset after suspend                                                */
      __IOM uint32_t RESTOREMODE : 1;           /*!< [9..9] Restore mode                                                       */
      __IOM uint32_t ENEXTNDEDHIBER : 1;        /*!< [10..10] Enable extended hibernation                                      */
      __IOM uint32_t EXTNDEDHIBERNATIONCLAMP : 1;/*!< [11..11] Extended hibernation clamp                                      */
      __IOM uint32_t EXTNDEDHIBERNATIONSWITCH : 1;/*!< [12..12] Extended hibernation switch                                    */
      __IOM uint32_t ESSREGRESTORED : 1;        /*!< [13..13] Essential register values restored                               */
      __IOM uint32_t RESTORE_VALUE : 18;        /*!< [31..14] Restore value                                                    */
    } PCGCCTL_b;
  } ;
} USB_OTG_PWRCLK_Type;                          /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           EMMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Arasan SD3.0 Host AHB eMMC 4.4 (EMMC)
  */

typedef struct {                                /*!< (@ 0x20300000) EMMC Structure                                             */
  __IOM uint32_t  ARG2;                         /*!< (@ 0x00000000) Argument for ACMD23 command                                */
  
  union {
    __IOM uint32_t BLKSIZECNT;                  /*!< (@ 0x00000004) Numer and size in bytes for data block to be
                                                                         transferred                                           */
    
    struct {
      __IOM uint32_t BLKSIZE    : 10;           /*!< [9..0] Block size in bytes                                                */
            uint32_t            : 6;
      __IOM uint32_t BLKCNT     : 16;           /*!< [31..16] Number of blocks to be transferred                               */
    } BLKSIZECNT_b;
  } ;
  __IOM uint32_t  ARG1;                         /*!< (@ 0x00000008) Argument for everything but ACMD23                         */
  
  union {
    __IOM uint32_t CMDTM;                       /*!< (@ 0x0000000C) Issue commands to the card                                 */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t TM_BLKCNT_EN : 1;          /*!< [1..1] Enable block counter                                               */
      __IOM uint32_t TM_AUTO_CMD_EN : 2;        /*!< [3..2] Command after completion                                           */
      __IOM uint32_t TM_DAT_DIR : 1;            /*!< [4..4] Direction of data transfer                                         */
      __IOM uint32_t TM_MULTI_BLOCK : 1;        /*!< [5..5] Type of data transfer                                              */
            uint32_t            : 10;
      __IOM uint32_t CMD_RSPNS_TYPE : 2;        /*!< [17..16] Type of expected response                                        */
            uint32_t            : 1;
      __IOM uint32_t CMD_CRCCHK_EN : 1;         /*!< [19..19] Check the responses CRC                                          */
      __IOM uint32_t CMD_IXCHK_EN : 1;          /*!< [20..20] Check that the response has the same command index               */
      __IOM uint32_t CMD_ISDATA : 1;            /*!< [21..21] Command involves data                                            */
      __IOM uint32_t CMD_TYPE   : 2;            /*!< [23..22] Type of command to be issued                                     */
      __IOM uint32_t CMD_INDEX  : 6;            /*!< [29..24] Command index to be issued                                       */
            uint32_t            : 2;
    } CMDTM_b;
  } ;
  __IOM uint32_t  RESP0;                        /*!< (@ 0x00000010) Status bits of the response                                */
  __IOM uint32_t  RESP1;                        /*!< (@ 0x00000014) Bits 63:32 of CMD2 and CMD10 responses                     */
  __IOM uint32_t  RESP2;                        /*!< (@ 0x00000018) Bits 95:64 of CMD2 and CMD10 responses                     */
  __IOM uint32_t  RESP3;                        /*!< (@ 0x0000001C) Bits 127:96 of CMD2 and CMD10 responses                    */
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000020) Data to/from the card                                      */
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000024) Status info for debugging                                  */
    
    struct {
      __IOM uint32_t CMD_INHIBIT : 1;           /*!< [0..0] Command line still in use                                          */
      __IOM uint32_t DAT_INHIBIT : 1;           /*!< [1..1] Data lines still in use                                            */
      __IOM uint32_t DAT_ACTIVE : 1;            /*!< [2..2] At least one data line is active                                   */
            uint32_t            : 5;
      __IOM uint32_t WRITE_TRANSFER : 1;        /*!< [8..8] Write transfer is active                                           */
      __IOM uint32_t READ_TRANSFER : 1;         /*!< [9..9] Read transfer is active                                            */
      __IOM uint32_t BUFFER_WRITE_ENABLE : 1;   /*!< [10..10] The buffer has space for new data                                */
      __IOM uint32_t BUFFER_READ_ENABLE : 1;    /*!< [11..11] New data is available to read                                    */
            uint32_t            : 8;
      __IOM uint32_t DAT_LEVEL0 : 4;            /*!< [23..20] Value of DAT[3:0]                                                */
      __IOM uint32_t CMD_LEVEL  : 1;            /*!< [24..24] Value of CMD                                                     */
      __IOM uint32_t DAT_LEVEL1 : 4;            /*!< [28..25] Value of DAT[7:4]                                                */
            uint32_t            : 3;
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t CONTROL0;                    /*!< (@ 0x00000028) Control                                                    */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t HCTL_DWIDTH : 1;           /*!< [1..1] Use 4 data lines                                                   */
      __IOM uint32_t HCTL_HS_EN : 1;            /*!< [2..2] Enable high speed mode                                             */
            uint32_t            : 2;
      __IOM uint32_t HCTL_8BIT  : 1;            /*!< [5..5] Use 8 data lines                                                   */
            uint32_t            : 10;
      __IOM uint32_t GAP_STOP   : 1;            /*!< [16..16] Stop the current transaction at the next block gap               */
      __IOM uint32_t GAP_RESTART : 1;           /*!< [17..17] Restart a transaction stopped by GAP_STOP                        */
      __IOM uint32_t READWAIT_EN : 1;           /*!< [18..18] Use DAT2 read/wait protocol                                      */
      __IOM uint32_t GAP_IEN    : 1;            /*!< [19..19] Enable interrupt on block gap                                    */
      __IOM uint32_t SPI_MODE   : 1;            /*!< [20..20] Enable SPI mode                                                  */
      __IOM uint32_t BOOT_EN    : 1;            /*!< [21..21] Boot mode enabled                                                */
      __IOM uint32_t ALT_BOOT_EN : 1;           /*!< [22..22] Enable alternate boot mode                                       */
            uint32_t            : 9;
    } CONTROL0_b;
  } ;
  
  union {
    __IOM uint32_t CONTROL1;                    /*!< (@ 0x0000002C) Configure                                                  */
    
    struct {
      __IOM uint32_t CLK_INTLEN : 1;            /*!< [0..0] Enable internal clock                                              */
      __IM  uint32_t CLK_STABLE : 1;            /*!< [1..1] SD Clock stable                                                    */
      __IOM uint32_t CLK_EN     : 1;            /*!< [2..2] SD Clock enable                                                    */
            uint32_t            : 2;
      __IOM uint32_t CLK_GENSEL : 1;            /*!< [5..5] Mode of clock generation                                           */
      __IOM uint32_t CLK_FREQ_MS2 : 2;          /*!< [7..6] Clock base divider MSBs                                            */
      __IOM uint32_t CLK_FREQ8  : 8;            /*!< [15..8] Clock base divider LSB                                            */
      __IOM uint32_t DATA_TOUNIT : 4;           /*!< [19..16] Data timeout exponent (TMCLK * 2 ** (x + 13)) 1111
                                                     disabled                                                                  */
            uint32_t            : 4;
      __IOM uint32_t SRST_HC    : 1;            /*!< [24..24] Reset the complete host circuit                                  */
      __IOM uint32_t SRST_CMD   : 1;            /*!< [25..25] Reset the command handling circuit                               */
      __IOM uint32_t SRST_DATA  : 1;            /*!< [26..26] Reset the data handling circuit                                  */
            uint32_t            : 5;
    } CONTROL1_b;
  } ;
  
  union {
    __IOM uint32_t INTERRUPT;                   /*!< (@ 0x00000030) Interrupt flags                                            */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
      __IM  uint32_t ERR        : 1;            /*!< [15..15] An error has occured                                             */
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } INTERRUPT_b;
  } ;
  
  union {
    __IOM uint32_t IRPT_MASK;                   /*!< (@ 0x00000034) Mask interrupts that change in INTERRUPT                   */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
            uint32_t            : 1;
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } IRPT_MASK_b;
  } ;
  
  union {
    __IOM uint32_t IRPT_EN;                     /*!< (@ 0x00000038) Enable interrupt to core                                   */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
            uint32_t            : 1;
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } IRPT_EN_b;
  } ;
  
  union {
    __IOM uint32_t CONTROL2;                    /*!< (@ 0x0000003C) Control 2                                                  */
    
    struct {
      __IM  uint32_t ACNOX_ERR  : 1;            /*!< [0..0] Auto command not executed due to an error                          */
      __IM  uint32_t ACTO_ERR   : 1;            /*!< [1..1] Auto command timeout                                               */
      __IM  uint32_t ACCRC_ERR  : 1;            /*!< [2..2] Command CRC error during auto command                              */
      __IM  uint32_t ACEND_ERR  : 1;            /*!< [3..3] End bit is not 1 during auto command                               */
      __IM  uint32_t ACBAD_ERR  : 1;            /*!< [4..4] Command index error during auto command                            */
            uint32_t            : 2;
      __IM  uint32_t NOTC12_ERR : 1;            /*!< [7..7] Error during auto CMD12                                            */
            uint32_t            : 8;
      __IOM uint32_t UHSMODE    : 3;            /*!< [18..16] Select the speed of the SD card                                  */
            uint32_t            : 3;
      __IOM uint32_t TUNEON     : 1;            /*!< [22..22] SD Clock tune in progress                                        */
      __IOM uint32_t TUNED      : 1;            /*!< [23..23] Tuned clock is used for sampling data                            */
            uint32_t            : 8;
    } CONTROL2_b;
  } ;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IOM uint32_t FORCE_IRPT;                  /*!< (@ 0x00000050) Force an interrupt                                         */
    
    struct {
      __IOM uint32_t CMD_DONE   : 1;            /*!< [0..0] Command has finished                                               */
      __IOM uint32_t DATA_DONE  : 1;            /*!< [1..1] Data transfer has finished                                         */
      __IOM uint32_t BLOCK_GAP  : 1;            /*!< [2..2] Data transfer has stopped at block gap                             */
            uint32_t            : 1;
      __IOM uint32_t WRITE_RDY  : 1;            /*!< [4..4] DATA can be written to                                             */
      __IOM uint32_t READ_RDY   : 1;            /*!< [5..5] DATA contains data to be read                                      */
            uint32_t            : 2;
      __IOM uint32_t CARD       : 1;            /*!< [8..8] Card made interrupt request                                        */
            uint32_t            : 3;
      __IOM uint32_t RETUNE     : 1;            /*!< [12..12] Clock retune request                                             */
      __IOM uint32_t BOOTACK    : 1;            /*!< [13..13] Boot has been acknowledged                                       */
      __IOM uint32_t ENDBOOT    : 1;            /*!< [14..14] Boot operation has terminated                                    */
            uint32_t            : 1;
      __IOM uint32_t CTO_ERR    : 1;            /*!< [16..16] Command timeout                                                  */
      __IOM uint32_t CCRC_ERR   : 1;            /*!< [17..17] Command CRC error                                                */
      __IOM uint32_t CEND_ERR   : 1;            /*!< [18..18] Command end bit error (not 1)                                    */
      __IOM uint32_t CBAD_ERR   : 1;            /*!< [19..19] Incorrect response command index                                 */
      __IOM uint32_t DTO_ERR    : 1;            /*!< [20..20] Data timeout                                                     */
      __IOM uint32_t DCRC_ERR   : 1;            /*!< [21..21] Data CRC error                                                   */
      __IOM uint32_t DEND_ERR   : 1;            /*!< [22..22] Data end bit error (not 1)                                       */
            uint32_t            : 1;
      __IOM uint32_t ACMD_ERR   : 1;            /*!< [24..24] Auto command error                                               */
            uint32_t            : 7;
    } FORCE_IRPT_b;
  } ;
  __IM  uint32_t  RESERVED1[7];
  __IOM uint32_t  BOOT_TIMEOUT;                 /*!< (@ 0x00000070) Number of SD clock cycles to wait for boot                 */
  
  union {
    __IOM uint32_t DBG_SEL;                     /*!< (@ 0x00000074) What submodules are accessed by the debug bus              */
    
    struct {
      __IOM uint32_t SELECT     : 1;            /*!< [0..0] SELECT                                                             */
            uint32_t            : 31;
    } DBG_SEL_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  
  union {
    __IOM uint32_t EXRDFIFO_CFG;                /*!< (@ 0x00000080) Fine tune DMA request generation                           */
    
    struct {
      __IOM uint32_t RD_THRSH   : 3;            /*!< [2..0] Read threshold in 32 bit words                                     */
            uint32_t            : 29;
    } EXRDFIFO_CFG_b;
  } ;
  
  union {
    __IOM uint32_t EXRDFIFO_EN;                 /*!< (@ 0x00000084) Enable the extension data register                         */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] Enable the extension FIFO                                          */
            uint32_t            : 31;
    } EXRDFIFO_EN_b;
  } ;
  
  union {
    __IOM uint32_t TUNE_STEP;                   /*!< (@ 0x00000088) Sample clock delay step duration                           */
    
    struct {
      __IOM uint32_t DELAY      : 3;            /*!< [2..0] DELAY                                                              */
            uint32_t            : 29;
    } TUNE_STEP_b;
  } ;
  
  union {
    __IOM uint32_t TUNE_STEPS_STD;              /*!< (@ 0x0000008C) Sample clock delay step count for SDR                      */
    
    struct {
      __IOM uint32_t STEPS      : 6;            /*!< [5..0] STEPS                                                              */
            uint32_t            : 26;
    } TUNE_STEPS_STD_b;
  } ;
  
  union {
    __IOM uint32_t TUNE_STEPS_DDR;              /*!< (@ 0x00000090) Sample clock delay step count for DDR                      */
    
    struct {
      __IOM uint32_t STEPS      : 6;            /*!< [5..0] STEPS                                                              */
            uint32_t            : 26;
    } TUNE_STEPS_DDR_b;
  } ;
  __IM  uint32_t  RESERVED3[23];
  
  union {
    __IOM uint32_t SPI_INT_SPT;                 /*!< (@ 0x000000F0) Interrupts in SPI mode depend on CS                        */
    
    struct {
      __IOM uint32_t SELECT     : 8;            /*!< [7..0] SELECT                                                             */
            uint32_t            : 24;
    } SPI_INT_SPT_b;
  } ;
  __IM  uint32_t  RESERVED4[2];
  
  union {
    __IOM uint32_t SLOTISR_VER;                 /*!< (@ 0x000000FC) Version information and slot interrupt status              */
    
    struct {
      __IOM uint32_t SLOT_STATUS : 8;           /*!< [7..0] OR of interrupt and wakeup signals for each slot                   */
            uint32_t            : 8;
      __IOM uint32_t SDVERSION  : 8;            /*!< [23..16] Host controller specification version                            */
      __IOM uint32_t VENDOR     : 8;            /*!< [31..24] Vendor version number                                            */
    } SLOTISR_VER_b;
  } ;
} Arasan_EMMC_Distributor_Type;                 /*!< Size = 256 (0x100)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define VCMAILBOX_BASE              0x2000B880UL
#define PM_BASE                     0x20100000UL
#define CM_PCM_BASE                 0x20101098UL
#define CM_PWM_BASE                 0x201010A0UL
#define GPIO_BASE                   0x20200000UL
#define SYSTMR_BASE                 0x20003000UL
#define UART0_BASE                  0x20201000UL
#define SPI0_BASE                   0x20204000UL
#define BSC0_BASE                   0x20205000UL
#define PWM0_BASE                   0x2020C000UL
#define BSC1_BASE                   0x20804000UL
#define BSC2_BASE                   0x20805000UL
#define AUX_BASE                    0x20215000UL
#define UART1_BASE                  0x20215040UL
#define SPI1_BASE                   0x20215080UL
#define SPI2_BASE                   0x202150C0UL
#define LIC_BASE                    0x2000B000UL
#define USB_OTG_GLOBAL_BASE         0x20980000UL
#define USB_OTG_HOST_BASE           0x20980400UL
#define USB_OTG_DEVICE_BASE         0x20980800UL
#define USB_OTG_PWRCLK_BASE         0x20980E00UL
#define EMMC_BASE                   0x20300000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define VCMAILBOX                   ((VCMAILBOX_Type*)         VCMAILBOX_BASE)
#define PM                          ((PM_Type*)                PM_BASE)
#define CM_PCM                      ((CM_PCM_Type*)            CM_PCM_BASE)
#define CM_PWM                      ((CM_PCM_Type*)            CM_PWM_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define SYSTMR                      ((SYSTMR_Type*)            SYSTMR_BASE)
#define UART0                       ((ARM_UART_PL011_Type*)    UART0_BASE)
#define SPI0                        ((SPI0_Type*)              SPI0_BASE)
#define BSC0                        ((BSC0_Type*)              BSC0_BASE)
#define PWM0                        ((PWM0_Type*)              PWM0_BASE)
#define BSC1                        ((BSC0_Type*)              BSC1_BASE)
#define BSC2                        ((BSC0_Type*)              BSC2_BASE)
#define AUX                         ((AUX_Type*)               AUX_BASE)
#define UART1                       ((UART1_Type*)             UART1_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define LIC                         ((BCM_LIC_Type*)           LIC_BASE)
#define USB_OTG_GLOBAL              ((USB_OTG_GLOBAL_Type*)    USB_OTG_GLOBAL_BASE)
#define USB_OTG_HOST                ((USB_OTG_HOST_Type*)      USB_OTG_HOST_BASE)
#define USB_OTG_DEVICE              ((USB_OTG_DEVICE_Type*)    USB_OTG_DEVICE_BASE)
#define USB_OTG_PWRCLK              ((USB_OTG_PWRCLK_Type*)    USB_OTG_PWRCLK_BASE)
#define EMMC                        ((Arasan_EMMC_Distributor_Type*)  EMMC_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                 Pos/Mask Cluster Section                                  ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       HOST_CHANNEL                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  HCCHAR  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MPSIZ_Pos (0UL)            /*!< MPSIZ (Bit 0)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MPSIZ_Msk (0x7ffUL)        /*!< MPSIZ (Bitfield-Mask: 0x7ff)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPNUM_Pos (11UL)           /*!< EPNUM (Bit 11)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPNUM_Msk (0x7800UL)       /*!< EPNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPDIR_Pos (15UL)           /*!< EPDIR (Bit 15)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPDIR_Msk (0x8000UL)       /*!< EPDIR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_LSDEV_Pos (17UL)           /*!< LSDEV (Bit 17)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_LSDEV_Msk (0x20000UL)      /*!< LSDEV (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPTYP_Pos (18UL)           /*!< EPTYP (Bit 18)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_EPTYP_Msk (0xc0000UL)      /*!< EPTYP (Bitfield-Mask: 0x03)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MC_Pos (20UL)              /*!< MC (Bit 20)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_MC_Msk (0x300000UL)        /*!< MC (Bitfield-Mask: 0x03)                              */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_DAD_Pos (22UL)             /*!< DAD (Bit 22)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_DAD_Msk (0x1fc00000UL)     /*!< DAD (Bitfield-Mask: 0x7f)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_ODDFRM_Pos (29UL)          /*!< ODDFRM (Bit 29)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_ODDFRM_Msk (0x20000000UL)  /*!< ODDFRM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHDIS_Pos (30UL)           /*!< CHDIS (Bit 30)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHDIS_Msk (0x40000000UL)   /*!< CHDIS (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHENA_Pos (31UL)           /*!< CHENA (Bit 31)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCCHAR_CHENA_Msk (0x80000000UL)   /*!< CHENA (Bitfield-Mask: 0x01)                           */
/* ========================================================  HCSPLT  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_PRTADDR_Pos (0UL)          /*!< PRTADDR (Bit 0)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_PRTADDR_Msk (0x7fUL)       /*!< PRTADDR (Bitfield-Mask: 0x7f)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_HUBADDR_Pos (7UL)          /*!< HUBADDR (Bit 7)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_HUBADDR_Msk (0x3f80UL)     /*!< HUBADDR (Bitfield-Mask: 0x7f)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_XACTPOS_Pos (14UL)         /*!< XACTPOS (Bit 14)                                      */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_XACTPOS_Msk (0xc000UL)     /*!< XACTPOS (Bitfield-Mask: 0x03)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_COMPLSPLT_Pos (16UL)       /*!< COMPLSPLT (Bit 16)                                    */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_COMPLSPLT_Msk (0x10000UL)  /*!< COMPLSPLT (Bitfield-Mask: 0x01)                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_SPLITEN_Pos (31UL)         /*!< SPLITEN (Bit 31)                                      */
#define USB_OTG_HOST_HOST_CHANNEL_HCSPLT_SPLITEN_Msk (0x80000000UL) /*!< SPLITEN (Bitfield-Mask: 0x01)                         */
/* =========================================================  HCINT  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_XFRC_Pos (0UL)              /*!< XFRC (Bit 0)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_XFRC_Msk (0x1UL)            /*!< XFRC (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_CHH_Pos (1UL)               /*!< CHH (Bit 1)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_CHH_Msk (0x2UL)             /*!< CHH (Bitfield-Mask: 0x01)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_AHBERR_Pos (2UL)            /*!< AHBERR (Bit 2)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_AHBERR_Msk (0x4UL)          /*!< AHBERR (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_STALL_Pos (3UL)             /*!< STALL (Bit 3)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_STALL_Msk (0x8UL)           /*!< STALL (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NAK_Pos (4UL)               /*!< NAK (Bit 4)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NAK_Msk (0x10UL)            /*!< NAK (Bitfield-Mask: 0x01)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_ACK_Pos (5UL)               /*!< ACK (Bit 5)                                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_ACK_Msk (0x20UL)            /*!< ACK (Bitfield-Mask: 0x01)                             */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NYET_Pos (6UL)              /*!< NYET (Bit 6)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_NYET_Msk (0x40UL)           /*!< NYET (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_TXERR_Pos (7UL)             /*!< TXERR (Bit 7)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_TXERR_Msk (0x80UL)          /*!< TXERR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_BBERR_Pos (8UL)             /*!< BBERR (Bit 8)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_BBERR_Msk (0x100UL)         /*!< BBERR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_FRMOR_Pos (9UL)             /*!< FRMOR (Bit 9)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_FRMOR_Msk (0x200UL)         /*!< FRMOR (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_DTERR_Pos (10UL)            /*!< DTERR (Bit 10)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINT_DTERR_Msk (0x400UL)         /*!< DTERR (Bitfield-Mask: 0x01)                           */
/* =======================================================  HCINTMSK  ======================================================== */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_XFRCM_Pos (0UL)          /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_XFRCM_Msk (0x1UL)        /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_CHHM_Pos (1UL)           /*!< CHHM (Bit 1)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_CHHM_Msk (0x2UL)         /*!< CHHM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_AHBERR_Pos (2UL)         /*!< AHBERR (Bit 2)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_AHBERR_Msk (0x4UL)       /*!< AHBERR (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_STALLM_Pos (3UL)         /*!< STALLM (Bit 3)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_STALLM_Msk (0x8UL)       /*!< STALLM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NAKM_Pos (4UL)           /*!< NAKM (Bit 4)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NAKM_Msk (0x10UL)        /*!< NAKM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_ACKM_Pos (5UL)           /*!< ACKM (Bit 5)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_ACKM_Msk (0x20UL)        /*!< ACKM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NYET_Pos (6UL)           /*!< NYET (Bit 6)                                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_NYET_Msk (0x40UL)        /*!< NYET (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_TXERRM_Pos (7UL)         /*!< TXERRM (Bit 7)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_TXERRM_Msk (0x80UL)      /*!< TXERRM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_BBERRM_Pos (8UL)         /*!< BBERRM (Bit 8)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_BBERRM_Msk (0x100UL)     /*!< BBERRM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_FRMORM_Pos (9UL)         /*!< FRMORM (Bit 9)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_FRMORM_Msk (0x200UL)     /*!< FRMORM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_DTERRM_Pos (10UL)        /*!< DTERRM (Bit 10)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCINTMSK_DTERRM_Msk (0x400UL)     /*!< DTERRM (Bitfield-Mask: 0x01)                          */
/* ========================================================  HCTSIZ  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_XFRSIZ_Pos (0UL)           /*!< XFRSIZ (Bit 0)                                        */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_XFRSIZ_Msk (0x7ffffUL)     /*!< XFRSIZ (Bitfield-Mask: 0x7ffff)                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_PKTCNT_Pos (19UL)          /*!< PKTCNT (Bit 19)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_PKTCNT_Msk (0x1ff80000UL)  /*!< PKTCNT (Bitfield-Mask: 0x3ff)                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_DPID_Pos (29UL)            /*!< DPID (Bit 29)                                         */
#define USB_OTG_HOST_HOST_CHANNEL_HCTSIZ_DPID_Msk (0x60000000UL)    /*!< DPID (Bitfield-Mask: 0x03)                            */
/* =========================================================  HCDMA  ========================================================= */
#define USB_OTG_HOST_HOST_CHANNEL_HCDMA_DMAADDR_Pos (0UL)           /*!< DMAADDR (Bit 0)                                       */
#define USB_OTG_HOST_HOST_CHANNEL_HCDMA_DMAADDR_Msk (0xffffffffUL)  /*!< DMAADDR (Bitfield-Mask: 0xffffffff)                   */


/* =========================================================================================================================== */
/* ================                                        IN_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* =======================================================  DIEPCTL0  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_MPSIZ_Pos (0UL)         /*!< MPSIZ (Bit 0)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_MPSIZ_Msk (0x7ffUL)     /*!< MPSIZ (Bitfield-Mask: 0x7ff)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_USBAEP_Pos (15UL)       /*!< USBAEP (Bit 15)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_USBAEP_Msk (0x8000UL)   /*!< USBAEP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EONUM_DPID_Pos (16UL)   /*!< EONUM_DPID (Bit 16)                                   */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EONUM_DPID_Msk (0x10000UL) /*!< EONUM_DPID (Bitfield-Mask: 0x01)                   */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_NAKSTS_Pos (17UL)       /*!< NAKSTS (Bit 17)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_NAKSTS_Msk (0x20000UL)  /*!< NAKSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPTYP_Pos (18UL)        /*!< EPTYP (Bit 18)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPTYP_Msk (0xc0000UL)   /*!< EPTYP (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_Stall_Pos (21UL)        /*!< Stall (Bit 21)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_Stall_Msk (0x200000UL)  /*!< Stall (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_TXFNUM_Pos (22UL)       /*!< TXFNUM (Bit 22)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_TXFNUM_Msk (0x3c00000UL) /*!< TXFNUM (Bitfield-Mask: 0x0f)                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_CNAK_Pos (26UL)         /*!< CNAK (Bit 26)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_CNAK_Msk (0x4000000UL)  /*!< CNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SNAK_Pos (27UL)         /*!< SNAK (Bit 27)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SNAK_Msk (0x8000000UL)  /*!< SNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SD0PID_SEVNFRM_Pos (28UL) /*!< SD0PID_SEVNFRM (Bit 28)                             */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SD0PID_SEVNFRM_Msk (0x10000000UL) /*!< SD0PID_SEVNFRM (Bitfield-Mask: 0x01)        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SODDFRM_Pos (29UL)      /*!< SODDFRM (Bit 29)                                      */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_SODDFRM_Msk (0x20000000UL) /*!< SODDFRM (Bitfield-Mask: 0x01)                      */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPDIS_Pos (30UL)        /*!< EPDIS (Bit 30)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPDIS_Msk (0x40000000UL) /*!< EPDIS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPENA_Pos (31UL)        /*!< EPENA (Bit 31)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPCTL0_EPENA_Msk (0x80000000UL) /*!< EPENA (Bitfield-Mask: 0x01)                          */
/* ========================================================  DIEPINT  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_XFRC_Pos (0UL)           /*!< XFRC (Bit 0)                                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_XFRC_Msk (0x1UL)         /*!< XFRC (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_EPDISD_Pos (1UL)         /*!< EPDISD (Bit 1)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_EPDISD_Msk (0x2UL)       /*!< EPDISD (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TOC_Pos (3UL)            /*!< TOC (Bit 3)                                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TOC_Msk (0x8UL)          /*!< TOC (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_ITTXFE_Pos (4UL)         /*!< ITTXFE (Bit 4)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_ITTXFE_Msk (0x10UL)      /*!< ITTXFE (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_INEPNE_Pos (6UL)         /*!< INEPNE (Bit 6)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_INEPNE_Msk (0x40UL)      /*!< INEPNE (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFE_Pos (7UL)           /*!< TXFE (Bit 7)                                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFE_Msk (0x80UL)        /*!< TXFE (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFIFOUDRN_Pos (8UL)     /*!< TXFIFOUDRN (Bit 8)                                    */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_TXFIFOUDRN_Msk (0x100UL) /*!< TXFIFOUDRN (Bitfield-Mask: 0x01)                      */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BNA_Pos (9UL)            /*!< BNA (Bit 9)                                           */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BNA_Msk (0x200UL)        /*!< BNA (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_PKTDRPSTS_Pos (11UL)     /*!< PKTDRPSTS (Bit 11)                                    */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_PKTDRPSTS_Msk (0x800UL)  /*!< PKTDRPSTS (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BERR_Pos (12UL)          /*!< BERR (Bit 12)                                         */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_BERR_Msk (0x1000UL)      /*!< BERR (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_NAK_Pos (13UL)           /*!< NAK (Bit 13)                                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPINT_NAK_Msk (0x2000UL)       /*!< NAK (Bitfield-Mask: 0x01)                             */
/* =======================================================  DIEPTSIZ  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_XFRSIZ_Pos (0UL)        /*!< XFRSIZ (Bit 0)                                        */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_XFRSIZ_Msk (0x7fUL)     /*!< XFRSIZ (Bitfield-Mask: 0x7f)                          */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_PKTCNT_Pos (19UL)       /*!< PKTCNT (Bit 19)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPTSIZ_PKTCNT_Msk (0x180000UL) /*!< PKTCNT (Bitfield-Mask: 0x03)                          */
/* ========================================================  DIEPDMA  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPDMA_DMAADDR_Pos (0UL)        /*!< DMAADDR (Bit 0)                                       */
#define USB_OTG_DEVICE_IN_ENDPOINT_DIEPDMA_DMAADDR_Msk (0xffffffffUL) /*!< DMAADDR (Bitfield-Mask: 0xffffffff)                 */
/* ========================================================  DTXFSTS  ======================================================== */
#define USB_OTG_DEVICE_IN_ENDPOINT_DTXFSTS_INEPTFSAV_Pos (0UL)      /*!< INEPTFSAV (Bit 0)                                     */
#define USB_OTG_DEVICE_IN_ENDPOINT_DTXFSTS_INEPTFSAV_Msk (0xffffUL) /*!< INEPTFSAV (Bitfield-Mask: 0xffff)                     */


/* =========================================================================================================================== */
/* ================                                       OUT_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  DOEPCTL  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_MPSIZ_Pos (0UL)         /*!< MPSIZ (Bit 0)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_MPSIZ_Msk (0x3UL)       /*!< MPSIZ (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_USBAEP_Pos (15UL)       /*!< USBAEP (Bit 15)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_USBAEP_Msk (0x8000UL)   /*!< USBAEP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_NAKSTS_Pos (17UL)       /*!< NAKSTS (Bit 17)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_NAKSTS_Msk (0x20000UL)  /*!< NAKSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPTYP_Pos (18UL)        /*!< EPTYP (Bit 18)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPTYP_Msk (0xc0000UL)   /*!< EPTYP (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNPM_Pos (20UL)         /*!< SNPM (Bit 20)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNPM_Msk (0x100000UL)   /*!< SNPM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_Stall_Pos (21UL)        /*!< Stall (Bit 21)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_Stall_Msk (0x200000UL)  /*!< Stall (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_CNAK_Pos (26UL)         /*!< CNAK (Bit 26)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_CNAK_Msk (0x4000000UL)  /*!< CNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNAK_Pos (27UL)         /*!< SNAK (Bit 27)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_SNAK_Msk (0x8000000UL)  /*!< SNAK (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPDIS_Pos (30UL)        /*!< EPDIS (Bit 30)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPDIS_Msk (0x40000000UL) /*!< EPDIS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPENA_Pos (31UL)        /*!< EPENA (Bit 31)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPCTL_EPENA_Msk (0x80000000UL) /*!< EPENA (Bitfield-Mask: 0x01)                          */
/* ========================================================  DOEPINT  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_XFRC_Pos (0UL)          /*!< XFRC (Bit 0)                                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_XFRC_Msk (0x1UL)        /*!< XFRC (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_EPDISD_Pos (1UL)        /*!< EPDISD (Bit 1)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_EPDISD_Msk (0x2UL)      /*!< EPDISD (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_STUP_Pos (3UL)          /*!< STUP (Bit 3)                                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_STUP_Msk (0x8UL)        /*!< STUP (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_OTEPDIS_Pos (4UL)       /*!< OTEPDIS (Bit 4)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_OTEPDIS_Msk (0x10UL)    /*!< OTEPDIS (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_B2BSTUP_Pos (6UL)       /*!< B2BSTUP (Bit 6)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_B2BSTUP_Msk (0x40UL)    /*!< B2BSTUP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_NYET_Pos (14UL)         /*!< NYET (Bit 14)                                         */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPINT_NYET_Msk (0x4000UL)     /*!< NYET (Bitfield-Mask: 0x01)                            */
/* =======================================================  DOEPTSIZ  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_XFRSIZ_Pos (0UL)       /*!< XFRSIZ (Bit 0)                                        */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_XFRSIZ_Msk (0x7fUL)    /*!< XFRSIZ (Bitfield-Mask: 0x7f)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_PKTCNT_Pos (19UL)      /*!< PKTCNT (Bit 19)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_PKTCNT_Msk (0x80000UL) /*!< PKTCNT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_STUPCNT_Pos (29UL)     /*!< STUPCNT (Bit 29)                                      */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPTSIZ_STUPCNT_Msk (0x60000000UL) /*!< STUPCNT (Bitfield-Mask: 0x03)                     */
/* ========================================================  DOEPDMA  ======================================================== */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPDMA_DMAADDR_Pos (0UL)       /*!< DMAADDR (Bit 0)                                       */
#define USB_OTG_DEVICE_OUT_ENDPOINT_DOEPDMA_DMAADDR_Msk (0xffffffffUL) /*!< DMAADDR (Bitfield-Mask: 0xffffffff)                */

/** @} */ /* End of group PosMask_clusters */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         VCMAILBOX                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  READ  ========================================================== */
/* =========================================================  PEEK0  ========================================================= */
/* ========================================================  SENDER0  ======================================================== */
/* ========================================================  STATUS0  ======================================================== */
#define VCMAILBOX_STATUS0_FULL_Pos        (31UL)                    /*!< FULL (Bit 31)                                         */
#define VCMAILBOX_STATUS0_FULL_Msk        (0x80000000UL)            /*!< FULL (Bitfield-Mask: 0x01)                            */
#define VCMAILBOX_STATUS0_EMPTY_Pos       (30UL)                    /*!< EMPTY (Bit 30)                                        */
#define VCMAILBOX_STATUS0_EMPTY_Msk       (0x40000000UL)            /*!< EMPTY (Bitfield-Mask: 0x01)                           */
/* ========================================================  CONFIG0  ======================================================== */
#define VCMAILBOX_CONFIG0_IRQEN_Pos       (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define VCMAILBOX_CONFIG0_IRQEN_Msk       (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  WRITE  ========================================================= */
/* =========================================================  PEEK1  ========================================================= */
/* ========================================================  SENDER1  ======================================================== */
/* ========================================================  STATUS1  ======================================================== */
/* ========================================================  CONFIG1  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PM                                             ================ */
/* =========================================================================================================================== */

/* =========================================================  RSTC  ========================================================== */
#define PM_RSTC_PASSWD_Pos                (24UL)                    /*!< PASSWD (Bit 24)                                       */
#define PM_RSTC_PASSWD_Msk                (0xff000000UL)            /*!< PASSWD (Bitfield-Mask: 0xff)                          */
#define PM_RSTC_WRCFG_Pos                 (4UL)                     /*!< WRCFG (Bit 4)                                         */
#define PM_RSTC_WRCFG_Msk                 (0x30UL)                  /*!< WRCFG (Bitfield-Mask: 0x03)                           */
/* =========================================================  WDOG  ========================================================== */
#define PM_WDOG_PASSWD_Pos                (24UL)                    /*!< PASSWD (Bit 24)                                       */
#define PM_WDOG_PASSWD_Msk                (0xff000000UL)            /*!< PASSWD (Bitfield-Mask: 0xff)                          */
#define PM_WDOG_TIME_Pos                  (0UL)                     /*!< TIME (Bit 0)                                          */
#define PM_WDOG_TIME_Msk                  (0xfffffUL)               /*!< TIME (Bitfield-Mask: 0xfffff)                         */


/* =========================================================================================================================== */
/* ================                                          CM_PCM                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define CM_PCM_CS_PASSWD_Pos              (24UL)                    /*!< PASSWD (Bit 24)                                       */
#define CM_PCM_CS_PASSWD_Msk              (0xff000000UL)            /*!< PASSWD (Bitfield-Mask: 0xff)                          */
#define CM_PCM_CS_MASH_Pos                (9UL)                     /*!< MASH (Bit 9)                                          */
#define CM_PCM_CS_MASH_Msk                (0x600UL)                 /*!< MASH (Bitfield-Mask: 0x03)                            */
#define CM_PCM_CS_FLIP_Pos                (8UL)                     /*!< FLIP (Bit 8)                                          */
#define CM_PCM_CS_FLIP_Msk                (0x100UL)                 /*!< FLIP (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_BUSY_Pos                (7UL)                     /*!< BUSY (Bit 7)                                          */
#define CM_PCM_CS_BUSY_Msk                (0x80UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_KILL_Pos                (5UL)                     /*!< KILL (Bit 5)                                          */
#define CM_PCM_CS_KILL_Msk                (0x20UL)                  /*!< KILL (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_ENAB_Pos                (4UL)                     /*!< ENAB (Bit 4)                                          */
#define CM_PCM_CS_ENAB_Msk                (0x10UL)                  /*!< ENAB (Bitfield-Mask: 0x01)                            */
#define CM_PCM_CS_SRC_Pos                 (0UL)                     /*!< SRC (Bit 0)                                           */
#define CM_PCM_CS_SRC_Msk                 (0xfUL)                   /*!< SRC (Bitfield-Mask: 0x0f)                             */
/* ==========================================================  DIV  ========================================================== */
#define CM_PCM_DIV_PASSWD_Pos             (24UL)                    /*!< PASSWD (Bit 24)                                       */
#define CM_PCM_DIV_PASSWD_Msk             (0xff000000UL)            /*!< PASSWD (Bitfield-Mask: 0xff)                          */
#define CM_PCM_DIV_DIVI_Pos               (12UL)                    /*!< DIVI (Bit 12)                                         */
#define CM_PCM_DIV_DIVI_Msk               (0xfff000UL)              /*!< DIVI (Bitfield-Mask: 0xfff)                           */
#define CM_PCM_DIV_DIVF_Pos               (0UL)                     /*!< DIVF (Bit 0)                                          */
#define CM_PCM_DIV_DIVF_Msk               (0xfffUL)                 /*!< DIVF (Bitfield-Mask: 0xfff)                           */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  GPFSEL0  ======================================================== */
#define GPIO_GPFSEL0_FSEL0_Pos            (0UL)                     /*!< FSEL0 (Bit 0)                                         */
#define GPIO_GPFSEL0_FSEL0_Msk            (0x7UL)                   /*!< FSEL0 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL1_Pos            (3UL)                     /*!< FSEL1 (Bit 3)                                         */
#define GPIO_GPFSEL0_FSEL1_Msk            (0x38UL)                  /*!< FSEL1 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL2_Pos            (6UL)                     /*!< FSEL2 (Bit 6)                                         */
#define GPIO_GPFSEL0_FSEL2_Msk            (0x1c0UL)                 /*!< FSEL2 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL3_Pos            (9UL)                     /*!< FSEL3 (Bit 9)                                         */
#define GPIO_GPFSEL0_FSEL3_Msk            (0xe00UL)                 /*!< FSEL3 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL4_Pos            (12UL)                    /*!< FSEL4 (Bit 12)                                        */
#define GPIO_GPFSEL0_FSEL4_Msk            (0x7000UL)                /*!< FSEL4 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL5_Pos            (15UL)                    /*!< FSEL5 (Bit 15)                                        */
#define GPIO_GPFSEL0_FSEL5_Msk            (0x38000UL)               /*!< FSEL5 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL6_Pos            (18UL)                    /*!< FSEL6 (Bit 18)                                        */
#define GPIO_GPFSEL0_FSEL6_Msk            (0x1c0000UL)              /*!< FSEL6 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL7_Pos            (21UL)                    /*!< FSEL7 (Bit 21)                                        */
#define GPIO_GPFSEL0_FSEL7_Msk            (0xe00000UL)              /*!< FSEL7 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL8_Pos            (24UL)                    /*!< FSEL8 (Bit 24)                                        */
#define GPIO_GPFSEL0_FSEL8_Msk            (0x7000000UL)             /*!< FSEL8 (Bitfield-Mask: 0x07)                           */
#define GPIO_GPFSEL0_FSEL9_Pos            (27UL)                    /*!< FSEL9 (Bit 27)                                        */
#define GPIO_GPFSEL0_FSEL9_Msk            (0x38000000UL)            /*!< FSEL9 (Bitfield-Mask: 0x07)                           */
/* ========================================================  GPFSEL1  ======================================================== */
#define GPIO_GPFSEL1_FSEL10_Pos           (0UL)                     /*!< FSEL10 (Bit 0)                                        */
#define GPIO_GPFSEL1_FSEL10_Msk           (0x7UL)                   /*!< FSEL10 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL11_Pos           (3UL)                     /*!< FSEL11 (Bit 3)                                        */
#define GPIO_GPFSEL1_FSEL11_Msk           (0x38UL)                  /*!< FSEL11 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL12_Pos           (6UL)                     /*!< FSEL12 (Bit 6)                                        */
#define GPIO_GPFSEL1_FSEL12_Msk           (0x1c0UL)                 /*!< FSEL12 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL13_Pos           (9UL)                     /*!< FSEL13 (Bit 9)                                        */
#define GPIO_GPFSEL1_FSEL13_Msk           (0xe00UL)                 /*!< FSEL13 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL14_Pos           (12UL)                    /*!< FSEL14 (Bit 12)                                       */
#define GPIO_GPFSEL1_FSEL14_Msk           (0x7000UL)                /*!< FSEL14 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL15_Pos           (15UL)                    /*!< FSEL15 (Bit 15)                                       */
#define GPIO_GPFSEL1_FSEL15_Msk           (0x38000UL)               /*!< FSEL15 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL16_Pos           (18UL)                    /*!< FSEL16 (Bit 18)                                       */
#define GPIO_GPFSEL1_FSEL16_Msk           (0x1c0000UL)              /*!< FSEL16 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL17_Pos           (21UL)                    /*!< FSEL17 (Bit 21)                                       */
#define GPIO_GPFSEL1_FSEL17_Msk           (0xe00000UL)              /*!< FSEL17 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL18_Pos           (24UL)                    /*!< FSEL18 (Bit 24)                                       */
#define GPIO_GPFSEL1_FSEL18_Msk           (0x7000000UL)             /*!< FSEL18 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL1_FSEL19_Pos           (27UL)                    /*!< FSEL19 (Bit 27)                                       */
#define GPIO_GPFSEL1_FSEL19_Msk           (0x38000000UL)            /*!< FSEL19 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL2  ======================================================== */
#define GPIO_GPFSEL2_FSEL20_Pos           (0UL)                     /*!< FSEL20 (Bit 0)                                        */
#define GPIO_GPFSEL2_FSEL20_Msk           (0x7UL)                   /*!< FSEL20 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL21_Pos           (3UL)                     /*!< FSEL21 (Bit 3)                                        */
#define GPIO_GPFSEL2_FSEL21_Msk           (0x38UL)                  /*!< FSEL21 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL22_Pos           (6UL)                     /*!< FSEL22 (Bit 6)                                        */
#define GPIO_GPFSEL2_FSEL22_Msk           (0x1c0UL)                 /*!< FSEL22 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL23_Pos           (9UL)                     /*!< FSEL23 (Bit 9)                                        */
#define GPIO_GPFSEL2_FSEL23_Msk           (0xe00UL)                 /*!< FSEL23 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL24_Pos           (12UL)                    /*!< FSEL24 (Bit 12)                                       */
#define GPIO_GPFSEL2_FSEL24_Msk           (0x7000UL)                /*!< FSEL24 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL25_Pos           (15UL)                    /*!< FSEL25 (Bit 15)                                       */
#define GPIO_GPFSEL2_FSEL25_Msk           (0x38000UL)               /*!< FSEL25 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL26_Pos           (18UL)                    /*!< FSEL26 (Bit 18)                                       */
#define GPIO_GPFSEL2_FSEL26_Msk           (0x1c0000UL)              /*!< FSEL26 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL27_Pos           (21UL)                    /*!< FSEL27 (Bit 21)                                       */
#define GPIO_GPFSEL2_FSEL27_Msk           (0xe00000UL)              /*!< FSEL27 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL28_Pos           (24UL)                    /*!< FSEL28 (Bit 24)                                       */
#define GPIO_GPFSEL2_FSEL28_Msk           (0x7000000UL)             /*!< FSEL28 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL2_FSEL29_Pos           (27UL)                    /*!< FSEL29 (Bit 27)                                       */
#define GPIO_GPFSEL2_FSEL29_Msk           (0x38000000UL)            /*!< FSEL29 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL3  ======================================================== */
#define GPIO_GPFSEL3_FSEL30_Pos           (0UL)                     /*!< FSEL30 (Bit 0)                                        */
#define GPIO_GPFSEL3_FSEL30_Msk           (0x7UL)                   /*!< FSEL30 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL31_Pos           (3UL)                     /*!< FSEL31 (Bit 3)                                        */
#define GPIO_GPFSEL3_FSEL31_Msk           (0x38UL)                  /*!< FSEL31 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL32_Pos           (6UL)                     /*!< FSEL32 (Bit 6)                                        */
#define GPIO_GPFSEL3_FSEL32_Msk           (0x1c0UL)                 /*!< FSEL32 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL33_Pos           (9UL)                     /*!< FSEL33 (Bit 9)                                        */
#define GPIO_GPFSEL3_FSEL33_Msk           (0xe00UL)                 /*!< FSEL33 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL34_Pos           (12UL)                    /*!< FSEL34 (Bit 12)                                       */
#define GPIO_GPFSEL3_FSEL34_Msk           (0x7000UL)                /*!< FSEL34 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL35_Pos           (15UL)                    /*!< FSEL35 (Bit 15)                                       */
#define GPIO_GPFSEL3_FSEL35_Msk           (0x38000UL)               /*!< FSEL35 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL36_Pos           (18UL)                    /*!< FSEL36 (Bit 18)                                       */
#define GPIO_GPFSEL3_FSEL36_Msk           (0x1c0000UL)              /*!< FSEL36 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL37_Pos           (21UL)                    /*!< FSEL37 (Bit 21)                                       */
#define GPIO_GPFSEL3_FSEL37_Msk           (0xe00000UL)              /*!< FSEL37 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL38_Pos           (24UL)                    /*!< FSEL38 (Bit 24)                                       */
#define GPIO_GPFSEL3_FSEL38_Msk           (0x7000000UL)             /*!< FSEL38 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL3_FSEL39_Pos           (27UL)                    /*!< FSEL39 (Bit 27)                                       */
#define GPIO_GPFSEL3_FSEL39_Msk           (0x38000000UL)            /*!< FSEL39 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL4  ======================================================== */
#define GPIO_GPFSEL4_FSEL40_Pos           (0UL)                     /*!< FSEL40 (Bit 0)                                        */
#define GPIO_GPFSEL4_FSEL40_Msk           (0x7UL)                   /*!< FSEL40 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL41_Pos           (3UL)                     /*!< FSEL41 (Bit 3)                                        */
#define GPIO_GPFSEL4_FSEL41_Msk           (0x38UL)                  /*!< FSEL41 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL42_Pos           (6UL)                     /*!< FSEL42 (Bit 6)                                        */
#define GPIO_GPFSEL4_FSEL42_Msk           (0x1c0UL)                 /*!< FSEL42 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL43_Pos           (9UL)                     /*!< FSEL43 (Bit 9)                                        */
#define GPIO_GPFSEL4_FSEL43_Msk           (0xe00UL)                 /*!< FSEL43 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL44_Pos           (12UL)                    /*!< FSEL44 (Bit 12)                                       */
#define GPIO_GPFSEL4_FSEL44_Msk           (0x7000UL)                /*!< FSEL44 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL45_Pos           (15UL)                    /*!< FSEL45 (Bit 15)                                       */
#define GPIO_GPFSEL4_FSEL45_Msk           (0x38000UL)               /*!< FSEL45 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL46_Pos           (18UL)                    /*!< FSEL46 (Bit 18)                                       */
#define GPIO_GPFSEL4_FSEL46_Msk           (0x1c0000UL)              /*!< FSEL46 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL47_Pos           (21UL)                    /*!< FSEL47 (Bit 21)                                       */
#define GPIO_GPFSEL4_FSEL47_Msk           (0xe00000UL)              /*!< FSEL47 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL48_Pos           (24UL)                    /*!< FSEL48 (Bit 24)                                       */
#define GPIO_GPFSEL4_FSEL48_Msk           (0x7000000UL)             /*!< FSEL48 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL4_FSEL49_Pos           (27UL)                    /*!< FSEL49 (Bit 27)                                       */
#define GPIO_GPFSEL4_FSEL49_Msk           (0x38000000UL)            /*!< FSEL49 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPFSEL5  ======================================================== */
#define GPIO_GPFSEL5_FSEL50_Pos           (0UL)                     /*!< FSEL50 (Bit 0)                                        */
#define GPIO_GPFSEL5_FSEL50_Msk           (0x7UL)                   /*!< FSEL50 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL51_Pos           (3UL)                     /*!< FSEL51 (Bit 3)                                        */
#define GPIO_GPFSEL5_FSEL51_Msk           (0x38UL)                  /*!< FSEL51 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL52_Pos           (6UL)                     /*!< FSEL52 (Bit 6)                                        */
#define GPIO_GPFSEL5_FSEL52_Msk           (0x1c0UL)                 /*!< FSEL52 (Bitfield-Mask: 0x07)                          */
#define GPIO_GPFSEL5_FSEL53_Pos           (9UL)                     /*!< FSEL53 (Bit 9)                                        */
#define GPIO_GPFSEL5_FSEL53_Msk           (0xe00UL)                 /*!< FSEL53 (Bitfield-Mask: 0x07)                          */
/* ========================================================  GPSET0  ========================================================= */
#define GPIO_GPSET0_SET0_Pos              (0UL)                     /*!< SET0 (Bit 0)                                          */
#define GPIO_GPSET0_SET0_Msk              (0x1UL)                   /*!< SET0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET1_Pos              (1UL)                     /*!< SET1 (Bit 1)                                          */
#define GPIO_GPSET0_SET1_Msk              (0x2UL)                   /*!< SET1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET2_Pos              (2UL)                     /*!< SET2 (Bit 2)                                          */
#define GPIO_GPSET0_SET2_Msk              (0x4UL)                   /*!< SET2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET3_Pos              (3UL)                     /*!< SET3 (Bit 3)                                          */
#define GPIO_GPSET0_SET3_Msk              (0x8UL)                   /*!< SET3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET4_Pos              (4UL)                     /*!< SET4 (Bit 4)                                          */
#define GPIO_GPSET0_SET4_Msk              (0x10UL)                  /*!< SET4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET5_Pos              (5UL)                     /*!< SET5 (Bit 5)                                          */
#define GPIO_GPSET0_SET5_Msk              (0x20UL)                  /*!< SET5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET6_Pos              (6UL)                     /*!< SET6 (Bit 6)                                          */
#define GPIO_GPSET0_SET6_Msk              (0x40UL)                  /*!< SET6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET7_Pos              (7UL)                     /*!< SET7 (Bit 7)                                          */
#define GPIO_GPSET0_SET7_Msk              (0x80UL)                  /*!< SET7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET8_Pos              (8UL)                     /*!< SET8 (Bit 8)                                          */
#define GPIO_GPSET0_SET8_Msk              (0x100UL)                 /*!< SET8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET9_Pos              (9UL)                     /*!< SET9 (Bit 9)                                          */
#define GPIO_GPSET0_SET9_Msk              (0x200UL)                 /*!< SET9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPSET0_SET10_Pos             (10UL)                    /*!< SET10 (Bit 10)                                        */
#define GPIO_GPSET0_SET10_Msk             (0x400UL)                 /*!< SET10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET11_Pos             (11UL)                    /*!< SET11 (Bit 11)                                        */
#define GPIO_GPSET0_SET11_Msk             (0x800UL)                 /*!< SET11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET12_Pos             (12UL)                    /*!< SET12 (Bit 12)                                        */
#define GPIO_GPSET0_SET12_Msk             (0x1000UL)                /*!< SET12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET13_Pos             (13UL)                    /*!< SET13 (Bit 13)                                        */
#define GPIO_GPSET0_SET13_Msk             (0x2000UL)                /*!< SET13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET14_Pos             (14UL)                    /*!< SET14 (Bit 14)                                        */
#define GPIO_GPSET0_SET14_Msk             (0x4000UL)                /*!< SET14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET15_Pos             (15UL)                    /*!< SET15 (Bit 15)                                        */
#define GPIO_GPSET0_SET15_Msk             (0x8000UL)                /*!< SET15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET16_Pos             (16UL)                    /*!< SET16 (Bit 16)                                        */
#define GPIO_GPSET0_SET16_Msk             (0x10000UL)               /*!< SET16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET17_Pos             (17UL)                    /*!< SET17 (Bit 17)                                        */
#define GPIO_GPSET0_SET17_Msk             (0x20000UL)               /*!< SET17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET18_Pos             (18UL)                    /*!< SET18 (Bit 18)                                        */
#define GPIO_GPSET0_SET18_Msk             (0x40000UL)               /*!< SET18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET19_Pos             (19UL)                    /*!< SET19 (Bit 19)                                        */
#define GPIO_GPSET0_SET19_Msk             (0x80000UL)               /*!< SET19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET20_Pos             (20UL)                    /*!< SET20 (Bit 20)                                        */
#define GPIO_GPSET0_SET20_Msk             (0x100000UL)              /*!< SET20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET21_Pos             (21UL)                    /*!< SET21 (Bit 21)                                        */
#define GPIO_GPSET0_SET21_Msk             (0x200000UL)              /*!< SET21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET22_Pos             (22UL)                    /*!< SET22 (Bit 22)                                        */
#define GPIO_GPSET0_SET22_Msk             (0x400000UL)              /*!< SET22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET23_Pos             (23UL)                    /*!< SET23 (Bit 23)                                        */
#define GPIO_GPSET0_SET23_Msk             (0x800000UL)              /*!< SET23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET24_Pos             (24UL)                    /*!< SET24 (Bit 24)                                        */
#define GPIO_GPSET0_SET24_Msk             (0x1000000UL)             /*!< SET24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET25_Pos             (25UL)                    /*!< SET25 (Bit 25)                                        */
#define GPIO_GPSET0_SET25_Msk             (0x2000000UL)             /*!< SET25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET26_Pos             (26UL)                    /*!< SET26 (Bit 26)                                        */
#define GPIO_GPSET0_SET26_Msk             (0x4000000UL)             /*!< SET26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET27_Pos             (27UL)                    /*!< SET27 (Bit 27)                                        */
#define GPIO_GPSET0_SET27_Msk             (0x8000000UL)             /*!< SET27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET28_Pos             (28UL)                    /*!< SET28 (Bit 28)                                        */
#define GPIO_GPSET0_SET28_Msk             (0x10000000UL)            /*!< SET28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET29_Pos             (29UL)                    /*!< SET29 (Bit 29)                                        */
#define GPIO_GPSET0_SET29_Msk             (0x20000000UL)            /*!< SET29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET30_Pos             (30UL)                    /*!< SET30 (Bit 30)                                        */
#define GPIO_GPSET0_SET30_Msk             (0x40000000UL)            /*!< SET30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET0_SET31_Pos             (31UL)                    /*!< SET31 (Bit 31)                                        */
#define GPIO_GPSET0_SET31_Msk             (0x80000000UL)            /*!< SET31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPSET1  ========================================================= */
#define GPIO_GPSET1_SET32_Pos             (0UL)                     /*!< SET32 (Bit 0)                                         */
#define GPIO_GPSET1_SET32_Msk             (0x1UL)                   /*!< SET32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET33_Pos             (1UL)                     /*!< SET33 (Bit 1)                                         */
#define GPIO_GPSET1_SET33_Msk             (0x2UL)                   /*!< SET33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET34_Pos             (2UL)                     /*!< SET34 (Bit 2)                                         */
#define GPIO_GPSET1_SET34_Msk             (0x4UL)                   /*!< SET34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET35_Pos             (3UL)                     /*!< SET35 (Bit 3)                                         */
#define GPIO_GPSET1_SET35_Msk             (0x8UL)                   /*!< SET35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET36_Pos             (4UL)                     /*!< SET36 (Bit 4)                                         */
#define GPIO_GPSET1_SET36_Msk             (0x10UL)                  /*!< SET36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET37_Pos             (5UL)                     /*!< SET37 (Bit 5)                                         */
#define GPIO_GPSET1_SET37_Msk             (0x20UL)                  /*!< SET37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET38_Pos             (6UL)                     /*!< SET38 (Bit 6)                                         */
#define GPIO_GPSET1_SET38_Msk             (0x40UL)                  /*!< SET38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET39_Pos             (7UL)                     /*!< SET39 (Bit 7)                                         */
#define GPIO_GPSET1_SET39_Msk             (0x80UL)                  /*!< SET39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET40_Pos             (8UL)                     /*!< SET40 (Bit 8)                                         */
#define GPIO_GPSET1_SET40_Msk             (0x100UL)                 /*!< SET40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET41_Pos             (9UL)                     /*!< SET41 (Bit 9)                                         */
#define GPIO_GPSET1_SET41_Msk             (0x200UL)                 /*!< SET41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET42_Pos             (10UL)                    /*!< SET42 (Bit 10)                                        */
#define GPIO_GPSET1_SET42_Msk             (0x400UL)                 /*!< SET42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET43_Pos             (11UL)                    /*!< SET43 (Bit 11)                                        */
#define GPIO_GPSET1_SET43_Msk             (0x800UL)                 /*!< SET43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET44_Pos             (12UL)                    /*!< SET44 (Bit 12)                                        */
#define GPIO_GPSET1_SET44_Msk             (0x1000UL)                /*!< SET44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET45_Pos             (13UL)                    /*!< SET45 (Bit 13)                                        */
#define GPIO_GPSET1_SET45_Msk             (0x2000UL)                /*!< SET45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET46_Pos             (14UL)                    /*!< SET46 (Bit 14)                                        */
#define GPIO_GPSET1_SET46_Msk             (0x4000UL)                /*!< SET46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET47_Pos             (15UL)                    /*!< SET47 (Bit 15)                                        */
#define GPIO_GPSET1_SET47_Msk             (0x8000UL)                /*!< SET47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET48_Pos             (16UL)                    /*!< SET48 (Bit 16)                                        */
#define GPIO_GPSET1_SET48_Msk             (0x10000UL)               /*!< SET48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET49_Pos             (17UL)                    /*!< SET49 (Bit 17)                                        */
#define GPIO_GPSET1_SET49_Msk             (0x20000UL)               /*!< SET49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET50_Pos             (18UL)                    /*!< SET50 (Bit 18)                                        */
#define GPIO_GPSET1_SET50_Msk             (0x40000UL)               /*!< SET50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET51_Pos             (19UL)                    /*!< SET51 (Bit 19)                                        */
#define GPIO_GPSET1_SET51_Msk             (0x80000UL)               /*!< SET51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET52_Pos             (20UL)                    /*!< SET52 (Bit 20)                                        */
#define GPIO_GPSET1_SET52_Msk             (0x100000UL)              /*!< SET52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPSET1_SET53_Pos             (21UL)                    /*!< SET53 (Bit 21)                                        */
#define GPIO_GPSET1_SET53_Msk             (0x200000UL)              /*!< SET53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPCLR0  ========================================================= */
#define GPIO_GPCLR0_CLR0_Pos              (0UL)                     /*!< CLR0 (Bit 0)                                          */
#define GPIO_GPCLR0_CLR0_Msk              (0x1UL)                   /*!< CLR0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR1_Pos              (1UL)                     /*!< CLR1 (Bit 1)                                          */
#define GPIO_GPCLR0_CLR1_Msk              (0x2UL)                   /*!< CLR1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR2_Pos              (2UL)                     /*!< CLR2 (Bit 2)                                          */
#define GPIO_GPCLR0_CLR2_Msk              (0x4UL)                   /*!< CLR2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR3_Pos              (3UL)                     /*!< CLR3 (Bit 3)                                          */
#define GPIO_GPCLR0_CLR3_Msk              (0x8UL)                   /*!< CLR3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR4_Pos              (4UL)                     /*!< CLR4 (Bit 4)                                          */
#define GPIO_GPCLR0_CLR4_Msk              (0x10UL)                  /*!< CLR4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR5_Pos              (5UL)                     /*!< CLR5 (Bit 5)                                          */
#define GPIO_GPCLR0_CLR5_Msk              (0x20UL)                  /*!< CLR5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR6_Pos              (6UL)                     /*!< CLR6 (Bit 6)                                          */
#define GPIO_GPCLR0_CLR6_Msk              (0x40UL)                  /*!< CLR6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR7_Pos              (7UL)                     /*!< CLR7 (Bit 7)                                          */
#define GPIO_GPCLR0_CLR7_Msk              (0x80UL)                  /*!< CLR7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR8_Pos              (8UL)                     /*!< CLR8 (Bit 8)                                          */
#define GPIO_GPCLR0_CLR8_Msk              (0x100UL)                 /*!< CLR8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR9_Pos              (9UL)                     /*!< CLR9 (Bit 9)                                          */
#define GPIO_GPCLR0_CLR9_Msk              (0x200UL)                 /*!< CLR9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPCLR0_CLR10_Pos             (10UL)                    /*!< CLR10 (Bit 10)                                        */
#define GPIO_GPCLR0_CLR10_Msk             (0x400UL)                 /*!< CLR10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR11_Pos             (11UL)                    /*!< CLR11 (Bit 11)                                        */
#define GPIO_GPCLR0_CLR11_Msk             (0x800UL)                 /*!< CLR11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR12_Pos             (12UL)                    /*!< CLR12 (Bit 12)                                        */
#define GPIO_GPCLR0_CLR12_Msk             (0x1000UL)                /*!< CLR12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR13_Pos             (13UL)                    /*!< CLR13 (Bit 13)                                        */
#define GPIO_GPCLR0_CLR13_Msk             (0x2000UL)                /*!< CLR13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR14_Pos             (14UL)                    /*!< CLR14 (Bit 14)                                        */
#define GPIO_GPCLR0_CLR14_Msk             (0x4000UL)                /*!< CLR14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR15_Pos             (15UL)                    /*!< CLR15 (Bit 15)                                        */
#define GPIO_GPCLR0_CLR15_Msk             (0x8000UL)                /*!< CLR15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR16_Pos             (16UL)                    /*!< CLR16 (Bit 16)                                        */
#define GPIO_GPCLR0_CLR16_Msk             (0x10000UL)               /*!< CLR16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR17_Pos             (17UL)                    /*!< CLR17 (Bit 17)                                        */
#define GPIO_GPCLR0_CLR17_Msk             (0x20000UL)               /*!< CLR17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR18_Pos             (18UL)                    /*!< CLR18 (Bit 18)                                        */
#define GPIO_GPCLR0_CLR18_Msk             (0x40000UL)               /*!< CLR18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR19_Pos             (19UL)                    /*!< CLR19 (Bit 19)                                        */
#define GPIO_GPCLR0_CLR19_Msk             (0x80000UL)               /*!< CLR19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR20_Pos             (20UL)                    /*!< CLR20 (Bit 20)                                        */
#define GPIO_GPCLR0_CLR20_Msk             (0x100000UL)              /*!< CLR20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR21_Pos             (21UL)                    /*!< CLR21 (Bit 21)                                        */
#define GPIO_GPCLR0_CLR21_Msk             (0x200000UL)              /*!< CLR21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR22_Pos             (22UL)                    /*!< CLR22 (Bit 22)                                        */
#define GPIO_GPCLR0_CLR22_Msk             (0x400000UL)              /*!< CLR22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR23_Pos             (23UL)                    /*!< CLR23 (Bit 23)                                        */
#define GPIO_GPCLR0_CLR23_Msk             (0x800000UL)              /*!< CLR23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR24_Pos             (24UL)                    /*!< CLR24 (Bit 24)                                        */
#define GPIO_GPCLR0_CLR24_Msk             (0x1000000UL)             /*!< CLR24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR25_Pos             (25UL)                    /*!< CLR25 (Bit 25)                                        */
#define GPIO_GPCLR0_CLR25_Msk             (0x2000000UL)             /*!< CLR25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR26_Pos             (26UL)                    /*!< CLR26 (Bit 26)                                        */
#define GPIO_GPCLR0_CLR26_Msk             (0x4000000UL)             /*!< CLR26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR27_Pos             (27UL)                    /*!< CLR27 (Bit 27)                                        */
#define GPIO_GPCLR0_CLR27_Msk             (0x8000000UL)             /*!< CLR27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR28_Pos             (28UL)                    /*!< CLR28 (Bit 28)                                        */
#define GPIO_GPCLR0_CLR28_Msk             (0x10000000UL)            /*!< CLR28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR29_Pos             (29UL)                    /*!< CLR29 (Bit 29)                                        */
#define GPIO_GPCLR0_CLR29_Msk             (0x20000000UL)            /*!< CLR29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR30_Pos             (30UL)                    /*!< CLR30 (Bit 30)                                        */
#define GPIO_GPCLR0_CLR30_Msk             (0x40000000UL)            /*!< CLR30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR0_CLR31_Pos             (31UL)                    /*!< CLR31 (Bit 31)                                        */
#define GPIO_GPCLR0_CLR31_Msk             (0x80000000UL)            /*!< CLR31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPCLR1  ========================================================= */
#define GPIO_GPCLR1_CLR32_Pos             (0UL)                     /*!< CLR32 (Bit 0)                                         */
#define GPIO_GPCLR1_CLR32_Msk             (0x1UL)                   /*!< CLR32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR33_Pos             (1UL)                     /*!< CLR33 (Bit 1)                                         */
#define GPIO_GPCLR1_CLR33_Msk             (0x2UL)                   /*!< CLR33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR34_Pos             (2UL)                     /*!< CLR34 (Bit 2)                                         */
#define GPIO_GPCLR1_CLR34_Msk             (0x4UL)                   /*!< CLR34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR35_Pos             (3UL)                     /*!< CLR35 (Bit 3)                                         */
#define GPIO_GPCLR1_CLR35_Msk             (0x8UL)                   /*!< CLR35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR36_Pos             (4UL)                     /*!< CLR36 (Bit 4)                                         */
#define GPIO_GPCLR1_CLR36_Msk             (0x10UL)                  /*!< CLR36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR37_Pos             (5UL)                     /*!< CLR37 (Bit 5)                                         */
#define GPIO_GPCLR1_CLR37_Msk             (0x20UL)                  /*!< CLR37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR38_Pos             (6UL)                     /*!< CLR38 (Bit 6)                                         */
#define GPIO_GPCLR1_CLR38_Msk             (0x40UL)                  /*!< CLR38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR39_Pos             (7UL)                     /*!< CLR39 (Bit 7)                                         */
#define GPIO_GPCLR1_CLR39_Msk             (0x80UL)                  /*!< CLR39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR40_Pos             (8UL)                     /*!< CLR40 (Bit 8)                                         */
#define GPIO_GPCLR1_CLR40_Msk             (0x100UL)                 /*!< CLR40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR41_Pos             (9UL)                     /*!< CLR41 (Bit 9)                                         */
#define GPIO_GPCLR1_CLR41_Msk             (0x200UL)                 /*!< CLR41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR42_Pos             (10UL)                    /*!< CLR42 (Bit 10)                                        */
#define GPIO_GPCLR1_CLR42_Msk             (0x400UL)                 /*!< CLR42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR43_Pos             (11UL)                    /*!< CLR43 (Bit 11)                                        */
#define GPIO_GPCLR1_CLR43_Msk             (0x800UL)                 /*!< CLR43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR44_Pos             (12UL)                    /*!< CLR44 (Bit 12)                                        */
#define GPIO_GPCLR1_CLR44_Msk             (0x1000UL)                /*!< CLR44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR45_Pos             (13UL)                    /*!< CLR45 (Bit 13)                                        */
#define GPIO_GPCLR1_CLR45_Msk             (0x2000UL)                /*!< CLR45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR46_Pos             (14UL)                    /*!< CLR46 (Bit 14)                                        */
#define GPIO_GPCLR1_CLR46_Msk             (0x4000UL)                /*!< CLR46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR47_Pos             (15UL)                    /*!< CLR47 (Bit 15)                                        */
#define GPIO_GPCLR1_CLR47_Msk             (0x8000UL)                /*!< CLR47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR48_Pos             (16UL)                    /*!< CLR48 (Bit 16)                                        */
#define GPIO_GPCLR1_CLR48_Msk             (0x10000UL)               /*!< CLR48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR49_Pos             (17UL)                    /*!< CLR49 (Bit 17)                                        */
#define GPIO_GPCLR1_CLR49_Msk             (0x20000UL)               /*!< CLR49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR50_Pos             (18UL)                    /*!< CLR50 (Bit 18)                                        */
#define GPIO_GPCLR1_CLR50_Msk             (0x40000UL)               /*!< CLR50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR51_Pos             (19UL)                    /*!< CLR51 (Bit 19)                                        */
#define GPIO_GPCLR1_CLR51_Msk             (0x80000UL)               /*!< CLR51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR52_Pos             (20UL)                    /*!< CLR52 (Bit 20)                                        */
#define GPIO_GPCLR1_CLR52_Msk             (0x100000UL)              /*!< CLR52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPCLR1_CLR53_Pos             (21UL)                    /*!< CLR53 (Bit 21)                                        */
#define GPIO_GPCLR1_CLR53_Msk             (0x200000UL)              /*!< CLR53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEV0  ========================================================= */
#define GPIO_GPLEV0_LEV0_Pos              (0UL)                     /*!< LEV0 (Bit 0)                                          */
#define GPIO_GPLEV0_LEV0_Msk              (0x1UL)                   /*!< LEV0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV1_Pos              (1UL)                     /*!< LEV1 (Bit 1)                                          */
#define GPIO_GPLEV0_LEV1_Msk              (0x2UL)                   /*!< LEV1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV2_Pos              (2UL)                     /*!< LEV2 (Bit 2)                                          */
#define GPIO_GPLEV0_LEV2_Msk              (0x4UL)                   /*!< LEV2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV3_Pos              (3UL)                     /*!< LEV3 (Bit 3)                                          */
#define GPIO_GPLEV0_LEV3_Msk              (0x8UL)                   /*!< LEV3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV4_Pos              (4UL)                     /*!< LEV4 (Bit 4)                                          */
#define GPIO_GPLEV0_LEV4_Msk              (0x10UL)                  /*!< LEV4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV5_Pos              (5UL)                     /*!< LEV5 (Bit 5)                                          */
#define GPIO_GPLEV0_LEV5_Msk              (0x20UL)                  /*!< LEV5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV6_Pos              (6UL)                     /*!< LEV6 (Bit 6)                                          */
#define GPIO_GPLEV0_LEV6_Msk              (0x40UL)                  /*!< LEV6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV7_Pos              (7UL)                     /*!< LEV7 (Bit 7)                                          */
#define GPIO_GPLEV0_LEV7_Msk              (0x80UL)                  /*!< LEV7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV8_Pos              (8UL)                     /*!< LEV8 (Bit 8)                                          */
#define GPIO_GPLEV0_LEV8_Msk              (0x100UL)                 /*!< LEV8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV9_Pos              (9UL)                     /*!< LEV9 (Bit 9)                                          */
#define GPIO_GPLEV0_LEV9_Msk              (0x200UL)                 /*!< LEV9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEV0_LEV10_Pos             (10UL)                    /*!< LEV10 (Bit 10)                                        */
#define GPIO_GPLEV0_LEV10_Msk             (0x400UL)                 /*!< LEV10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV11_Pos             (11UL)                    /*!< LEV11 (Bit 11)                                        */
#define GPIO_GPLEV0_LEV11_Msk             (0x800UL)                 /*!< LEV11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV12_Pos             (12UL)                    /*!< LEV12 (Bit 12)                                        */
#define GPIO_GPLEV0_LEV12_Msk             (0x1000UL)                /*!< LEV12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV13_Pos             (13UL)                    /*!< LEV13 (Bit 13)                                        */
#define GPIO_GPLEV0_LEV13_Msk             (0x2000UL)                /*!< LEV13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV14_Pos             (14UL)                    /*!< LEV14 (Bit 14)                                        */
#define GPIO_GPLEV0_LEV14_Msk             (0x4000UL)                /*!< LEV14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV15_Pos             (15UL)                    /*!< LEV15 (Bit 15)                                        */
#define GPIO_GPLEV0_LEV15_Msk             (0x8000UL)                /*!< LEV15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV16_Pos             (16UL)                    /*!< LEV16 (Bit 16)                                        */
#define GPIO_GPLEV0_LEV16_Msk             (0x10000UL)               /*!< LEV16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV17_Pos             (17UL)                    /*!< LEV17 (Bit 17)                                        */
#define GPIO_GPLEV0_LEV17_Msk             (0x20000UL)               /*!< LEV17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV18_Pos             (18UL)                    /*!< LEV18 (Bit 18)                                        */
#define GPIO_GPLEV0_LEV18_Msk             (0x40000UL)               /*!< LEV18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV19_Pos             (19UL)                    /*!< LEV19 (Bit 19)                                        */
#define GPIO_GPLEV0_LEV19_Msk             (0x80000UL)               /*!< LEV19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV20_Pos             (20UL)                    /*!< LEV20 (Bit 20)                                        */
#define GPIO_GPLEV0_LEV20_Msk             (0x100000UL)              /*!< LEV20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV21_Pos             (21UL)                    /*!< LEV21 (Bit 21)                                        */
#define GPIO_GPLEV0_LEV21_Msk             (0x200000UL)              /*!< LEV21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV22_Pos             (22UL)                    /*!< LEV22 (Bit 22)                                        */
#define GPIO_GPLEV0_LEV22_Msk             (0x400000UL)              /*!< LEV22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV23_Pos             (23UL)                    /*!< LEV23 (Bit 23)                                        */
#define GPIO_GPLEV0_LEV23_Msk             (0x800000UL)              /*!< LEV23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV24_Pos             (24UL)                    /*!< LEV24 (Bit 24)                                        */
#define GPIO_GPLEV0_LEV24_Msk             (0x1000000UL)             /*!< LEV24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV25_Pos             (25UL)                    /*!< LEV25 (Bit 25)                                        */
#define GPIO_GPLEV0_LEV25_Msk             (0x2000000UL)             /*!< LEV25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV26_Pos             (26UL)                    /*!< LEV26 (Bit 26)                                        */
#define GPIO_GPLEV0_LEV26_Msk             (0x4000000UL)             /*!< LEV26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV27_Pos             (27UL)                    /*!< LEV27 (Bit 27)                                        */
#define GPIO_GPLEV0_LEV27_Msk             (0x8000000UL)             /*!< LEV27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV28_Pos             (28UL)                    /*!< LEV28 (Bit 28)                                        */
#define GPIO_GPLEV0_LEV28_Msk             (0x10000000UL)            /*!< LEV28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV29_Pos             (29UL)                    /*!< LEV29 (Bit 29)                                        */
#define GPIO_GPLEV0_LEV29_Msk             (0x20000000UL)            /*!< LEV29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV30_Pos             (30UL)                    /*!< LEV30 (Bit 30)                                        */
#define GPIO_GPLEV0_LEV30_Msk             (0x40000000UL)            /*!< LEV30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV0_LEV31_Pos             (31UL)                    /*!< LEV31 (Bit 31)                                        */
#define GPIO_GPLEV0_LEV31_Msk             (0x80000000UL)            /*!< LEV31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEV1  ========================================================= */
#define GPIO_GPLEV1_LEV32_Pos             (0UL)                     /*!< LEV32 (Bit 0)                                         */
#define GPIO_GPLEV1_LEV32_Msk             (0x1UL)                   /*!< LEV32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV33_Pos             (1UL)                     /*!< LEV33 (Bit 1)                                         */
#define GPIO_GPLEV1_LEV33_Msk             (0x2UL)                   /*!< LEV33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV34_Pos             (2UL)                     /*!< LEV34 (Bit 2)                                         */
#define GPIO_GPLEV1_LEV34_Msk             (0x4UL)                   /*!< LEV34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV35_Pos             (3UL)                     /*!< LEV35 (Bit 3)                                         */
#define GPIO_GPLEV1_LEV35_Msk             (0x8UL)                   /*!< LEV35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV36_Pos             (4UL)                     /*!< LEV36 (Bit 4)                                         */
#define GPIO_GPLEV1_LEV36_Msk             (0x10UL)                  /*!< LEV36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV37_Pos             (5UL)                     /*!< LEV37 (Bit 5)                                         */
#define GPIO_GPLEV1_LEV37_Msk             (0x20UL)                  /*!< LEV37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV38_Pos             (6UL)                     /*!< LEV38 (Bit 6)                                         */
#define GPIO_GPLEV1_LEV38_Msk             (0x40UL)                  /*!< LEV38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV39_Pos             (7UL)                     /*!< LEV39 (Bit 7)                                         */
#define GPIO_GPLEV1_LEV39_Msk             (0x80UL)                  /*!< LEV39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV40_Pos             (8UL)                     /*!< LEV40 (Bit 8)                                         */
#define GPIO_GPLEV1_LEV40_Msk             (0x100UL)                 /*!< LEV40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV41_Pos             (9UL)                     /*!< LEV41 (Bit 9)                                         */
#define GPIO_GPLEV1_LEV41_Msk             (0x200UL)                 /*!< LEV41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV42_Pos             (10UL)                    /*!< LEV42 (Bit 10)                                        */
#define GPIO_GPLEV1_LEV42_Msk             (0x400UL)                 /*!< LEV42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV43_Pos             (11UL)                    /*!< LEV43 (Bit 11)                                        */
#define GPIO_GPLEV1_LEV43_Msk             (0x800UL)                 /*!< LEV43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV44_Pos             (12UL)                    /*!< LEV44 (Bit 12)                                        */
#define GPIO_GPLEV1_LEV44_Msk             (0x1000UL)                /*!< LEV44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV45_Pos             (13UL)                    /*!< LEV45 (Bit 13)                                        */
#define GPIO_GPLEV1_LEV45_Msk             (0x2000UL)                /*!< LEV45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV46_Pos             (14UL)                    /*!< LEV46 (Bit 14)                                        */
#define GPIO_GPLEV1_LEV46_Msk             (0x4000UL)                /*!< LEV46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV47_Pos             (15UL)                    /*!< LEV47 (Bit 15)                                        */
#define GPIO_GPLEV1_LEV47_Msk             (0x8000UL)                /*!< LEV47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV48_Pos             (16UL)                    /*!< LEV48 (Bit 16)                                        */
#define GPIO_GPLEV1_LEV48_Msk             (0x10000UL)               /*!< LEV48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV49_Pos             (17UL)                    /*!< LEV49 (Bit 17)                                        */
#define GPIO_GPLEV1_LEV49_Msk             (0x20000UL)               /*!< LEV49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV50_Pos             (18UL)                    /*!< LEV50 (Bit 18)                                        */
#define GPIO_GPLEV1_LEV50_Msk             (0x40000UL)               /*!< LEV50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV51_Pos             (19UL)                    /*!< LEV51 (Bit 19)                                        */
#define GPIO_GPLEV1_LEV51_Msk             (0x80000UL)               /*!< LEV51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV52_Pos             (20UL)                    /*!< LEV52 (Bit 20)                                        */
#define GPIO_GPLEV1_LEV52_Msk             (0x100000UL)              /*!< LEV52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEV1_LEV53_Pos             (21UL)                    /*!< LEV53 (Bit 21)                                        */
#define GPIO_GPLEV1_LEV53_Msk             (0x200000UL)              /*!< LEV53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPEDS0  ========================================================= */
#define GPIO_GPEDS0_EDS0_Pos              (0UL)                     /*!< EDS0 (Bit 0)                                          */
#define GPIO_GPEDS0_EDS0_Msk              (0x1UL)                   /*!< EDS0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS1_Pos              (1UL)                     /*!< EDS1 (Bit 1)                                          */
#define GPIO_GPEDS0_EDS1_Msk              (0x2UL)                   /*!< EDS1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS2_Pos              (2UL)                     /*!< EDS2 (Bit 2)                                          */
#define GPIO_GPEDS0_EDS2_Msk              (0x4UL)                   /*!< EDS2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS3_Pos              (3UL)                     /*!< EDS3 (Bit 3)                                          */
#define GPIO_GPEDS0_EDS3_Msk              (0x8UL)                   /*!< EDS3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS4_Pos              (4UL)                     /*!< EDS4 (Bit 4)                                          */
#define GPIO_GPEDS0_EDS4_Msk              (0x10UL)                  /*!< EDS4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS5_Pos              (5UL)                     /*!< EDS5 (Bit 5)                                          */
#define GPIO_GPEDS0_EDS5_Msk              (0x20UL)                  /*!< EDS5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS6_Pos              (6UL)                     /*!< EDS6 (Bit 6)                                          */
#define GPIO_GPEDS0_EDS6_Msk              (0x40UL)                  /*!< EDS6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS7_Pos              (7UL)                     /*!< EDS7 (Bit 7)                                          */
#define GPIO_GPEDS0_EDS7_Msk              (0x80UL)                  /*!< EDS7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS8_Pos              (8UL)                     /*!< EDS8 (Bit 8)                                          */
#define GPIO_GPEDS0_EDS8_Msk              (0x100UL)                 /*!< EDS8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS9_Pos              (9UL)                     /*!< EDS9 (Bit 9)                                          */
#define GPIO_GPEDS0_EDS9_Msk              (0x200UL)                 /*!< EDS9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPEDS0_EDS10_Pos             (10UL)                    /*!< EDS10 (Bit 10)                                        */
#define GPIO_GPEDS0_EDS10_Msk             (0x400UL)                 /*!< EDS10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS11_Pos             (11UL)                    /*!< EDS11 (Bit 11)                                        */
#define GPIO_GPEDS0_EDS11_Msk             (0x800UL)                 /*!< EDS11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS12_Pos             (12UL)                    /*!< EDS12 (Bit 12)                                        */
#define GPIO_GPEDS0_EDS12_Msk             (0x1000UL)                /*!< EDS12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS13_Pos             (13UL)                    /*!< EDS13 (Bit 13)                                        */
#define GPIO_GPEDS0_EDS13_Msk             (0x2000UL)                /*!< EDS13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS14_Pos             (14UL)                    /*!< EDS14 (Bit 14)                                        */
#define GPIO_GPEDS0_EDS14_Msk             (0x4000UL)                /*!< EDS14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS15_Pos             (15UL)                    /*!< EDS15 (Bit 15)                                        */
#define GPIO_GPEDS0_EDS15_Msk             (0x8000UL)                /*!< EDS15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS16_Pos             (16UL)                    /*!< EDS16 (Bit 16)                                        */
#define GPIO_GPEDS0_EDS16_Msk             (0x10000UL)               /*!< EDS16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS17_Pos             (17UL)                    /*!< EDS17 (Bit 17)                                        */
#define GPIO_GPEDS0_EDS17_Msk             (0x20000UL)               /*!< EDS17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS18_Pos             (18UL)                    /*!< EDS18 (Bit 18)                                        */
#define GPIO_GPEDS0_EDS18_Msk             (0x40000UL)               /*!< EDS18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS19_Pos             (19UL)                    /*!< EDS19 (Bit 19)                                        */
#define GPIO_GPEDS0_EDS19_Msk             (0x80000UL)               /*!< EDS19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS20_Pos             (20UL)                    /*!< EDS20 (Bit 20)                                        */
#define GPIO_GPEDS0_EDS20_Msk             (0x100000UL)              /*!< EDS20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS21_Pos             (21UL)                    /*!< EDS21 (Bit 21)                                        */
#define GPIO_GPEDS0_EDS21_Msk             (0x200000UL)              /*!< EDS21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS22_Pos             (22UL)                    /*!< EDS22 (Bit 22)                                        */
#define GPIO_GPEDS0_EDS22_Msk             (0x400000UL)              /*!< EDS22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS23_Pos             (23UL)                    /*!< EDS23 (Bit 23)                                        */
#define GPIO_GPEDS0_EDS23_Msk             (0x800000UL)              /*!< EDS23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS24_Pos             (24UL)                    /*!< EDS24 (Bit 24)                                        */
#define GPIO_GPEDS0_EDS24_Msk             (0x1000000UL)             /*!< EDS24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS25_Pos             (25UL)                    /*!< EDS25 (Bit 25)                                        */
#define GPIO_GPEDS0_EDS25_Msk             (0x2000000UL)             /*!< EDS25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS26_Pos             (26UL)                    /*!< EDS26 (Bit 26)                                        */
#define GPIO_GPEDS0_EDS26_Msk             (0x4000000UL)             /*!< EDS26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS27_Pos             (27UL)                    /*!< EDS27 (Bit 27)                                        */
#define GPIO_GPEDS0_EDS27_Msk             (0x8000000UL)             /*!< EDS27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS28_Pos             (28UL)                    /*!< EDS28 (Bit 28)                                        */
#define GPIO_GPEDS0_EDS28_Msk             (0x10000000UL)            /*!< EDS28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS29_Pos             (29UL)                    /*!< EDS29 (Bit 29)                                        */
#define GPIO_GPEDS0_EDS29_Msk             (0x20000000UL)            /*!< EDS29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS30_Pos             (30UL)                    /*!< EDS30 (Bit 30)                                        */
#define GPIO_GPEDS0_EDS30_Msk             (0x40000000UL)            /*!< EDS30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS0_EDS31_Pos             (31UL)                    /*!< EDS31 (Bit 31)                                        */
#define GPIO_GPEDS0_EDS31_Msk             (0x80000000UL)            /*!< EDS31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPEDS1  ========================================================= */
#define GPIO_GPEDS1_EDS32_Pos             (0UL)                     /*!< EDS32 (Bit 0)                                         */
#define GPIO_GPEDS1_EDS32_Msk             (0x1UL)                   /*!< EDS32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS33_Pos             (1UL)                     /*!< EDS33 (Bit 1)                                         */
#define GPIO_GPEDS1_EDS33_Msk             (0x2UL)                   /*!< EDS33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS34_Pos             (2UL)                     /*!< EDS34 (Bit 2)                                         */
#define GPIO_GPEDS1_EDS34_Msk             (0x4UL)                   /*!< EDS34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS35_Pos             (3UL)                     /*!< EDS35 (Bit 3)                                         */
#define GPIO_GPEDS1_EDS35_Msk             (0x8UL)                   /*!< EDS35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS36_Pos             (4UL)                     /*!< EDS36 (Bit 4)                                         */
#define GPIO_GPEDS1_EDS36_Msk             (0x10UL)                  /*!< EDS36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS37_Pos             (5UL)                     /*!< EDS37 (Bit 5)                                         */
#define GPIO_GPEDS1_EDS37_Msk             (0x20UL)                  /*!< EDS37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS38_Pos             (6UL)                     /*!< EDS38 (Bit 6)                                         */
#define GPIO_GPEDS1_EDS38_Msk             (0x40UL)                  /*!< EDS38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS39_Pos             (7UL)                     /*!< EDS39 (Bit 7)                                         */
#define GPIO_GPEDS1_EDS39_Msk             (0x80UL)                  /*!< EDS39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS40_Pos             (8UL)                     /*!< EDS40 (Bit 8)                                         */
#define GPIO_GPEDS1_EDS40_Msk             (0x100UL)                 /*!< EDS40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS41_Pos             (9UL)                     /*!< EDS41 (Bit 9)                                         */
#define GPIO_GPEDS1_EDS41_Msk             (0x200UL)                 /*!< EDS41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS42_Pos             (10UL)                    /*!< EDS42 (Bit 10)                                        */
#define GPIO_GPEDS1_EDS42_Msk             (0x400UL)                 /*!< EDS42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS43_Pos             (11UL)                    /*!< EDS43 (Bit 11)                                        */
#define GPIO_GPEDS1_EDS43_Msk             (0x800UL)                 /*!< EDS43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS44_Pos             (12UL)                    /*!< EDS44 (Bit 12)                                        */
#define GPIO_GPEDS1_EDS44_Msk             (0x1000UL)                /*!< EDS44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS45_Pos             (13UL)                    /*!< EDS45 (Bit 13)                                        */
#define GPIO_GPEDS1_EDS45_Msk             (0x2000UL)                /*!< EDS45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS46_Pos             (14UL)                    /*!< EDS46 (Bit 14)                                        */
#define GPIO_GPEDS1_EDS46_Msk             (0x4000UL)                /*!< EDS46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS47_Pos             (15UL)                    /*!< EDS47 (Bit 15)                                        */
#define GPIO_GPEDS1_EDS47_Msk             (0x8000UL)                /*!< EDS47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS48_Pos             (16UL)                    /*!< EDS48 (Bit 16)                                        */
#define GPIO_GPEDS1_EDS48_Msk             (0x10000UL)               /*!< EDS48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS49_Pos             (17UL)                    /*!< EDS49 (Bit 17)                                        */
#define GPIO_GPEDS1_EDS49_Msk             (0x20000UL)               /*!< EDS49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS50_Pos             (18UL)                    /*!< EDS50 (Bit 18)                                        */
#define GPIO_GPEDS1_EDS50_Msk             (0x40000UL)               /*!< EDS50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS51_Pos             (19UL)                    /*!< EDS51 (Bit 19)                                        */
#define GPIO_GPEDS1_EDS51_Msk             (0x80000UL)               /*!< EDS51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS52_Pos             (20UL)                    /*!< EDS52 (Bit 20)                                        */
#define GPIO_GPEDS1_EDS52_Msk             (0x100000UL)              /*!< EDS52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPEDS1_EDS53_Pos             (21UL)                    /*!< EDS53 (Bit 21)                                        */
#define GPIO_GPEDS1_EDS53_Msk             (0x200000UL)              /*!< EDS53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPREN0  ========================================================= */
#define GPIO_GPREN0_REN0_Pos              (0UL)                     /*!< REN0 (Bit 0)                                          */
#define GPIO_GPREN0_REN0_Msk              (0x1UL)                   /*!< REN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN1_Pos              (1UL)                     /*!< REN1 (Bit 1)                                          */
#define GPIO_GPREN0_REN1_Msk              (0x2UL)                   /*!< REN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN2_Pos              (2UL)                     /*!< REN2 (Bit 2)                                          */
#define GPIO_GPREN0_REN2_Msk              (0x4UL)                   /*!< REN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN3_Pos              (3UL)                     /*!< REN3 (Bit 3)                                          */
#define GPIO_GPREN0_REN3_Msk              (0x8UL)                   /*!< REN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN4_Pos              (4UL)                     /*!< REN4 (Bit 4)                                          */
#define GPIO_GPREN0_REN4_Msk              (0x10UL)                  /*!< REN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN5_Pos              (5UL)                     /*!< REN5 (Bit 5)                                          */
#define GPIO_GPREN0_REN5_Msk              (0x20UL)                  /*!< REN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN6_Pos              (6UL)                     /*!< REN6 (Bit 6)                                          */
#define GPIO_GPREN0_REN6_Msk              (0x40UL)                  /*!< REN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN7_Pos              (7UL)                     /*!< REN7 (Bit 7)                                          */
#define GPIO_GPREN0_REN7_Msk              (0x80UL)                  /*!< REN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN8_Pos              (8UL)                     /*!< REN8 (Bit 8)                                          */
#define GPIO_GPREN0_REN8_Msk              (0x100UL)                 /*!< REN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN9_Pos              (9UL)                     /*!< REN9 (Bit 9)                                          */
#define GPIO_GPREN0_REN9_Msk              (0x200UL)                 /*!< REN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPREN0_REN10_Pos             (10UL)                    /*!< REN10 (Bit 10)                                        */
#define GPIO_GPREN0_REN10_Msk             (0x400UL)                 /*!< REN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN11_Pos             (11UL)                    /*!< REN11 (Bit 11)                                        */
#define GPIO_GPREN0_REN11_Msk             (0x800UL)                 /*!< REN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN12_Pos             (12UL)                    /*!< REN12 (Bit 12)                                        */
#define GPIO_GPREN0_REN12_Msk             (0x1000UL)                /*!< REN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN13_Pos             (13UL)                    /*!< REN13 (Bit 13)                                        */
#define GPIO_GPREN0_REN13_Msk             (0x2000UL)                /*!< REN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN14_Pos             (14UL)                    /*!< REN14 (Bit 14)                                        */
#define GPIO_GPREN0_REN14_Msk             (0x4000UL)                /*!< REN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN15_Pos             (15UL)                    /*!< REN15 (Bit 15)                                        */
#define GPIO_GPREN0_REN15_Msk             (0x8000UL)                /*!< REN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN16_Pos             (16UL)                    /*!< REN16 (Bit 16)                                        */
#define GPIO_GPREN0_REN16_Msk             (0x10000UL)               /*!< REN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN17_Pos             (17UL)                    /*!< REN17 (Bit 17)                                        */
#define GPIO_GPREN0_REN17_Msk             (0x20000UL)               /*!< REN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN18_Pos             (18UL)                    /*!< REN18 (Bit 18)                                        */
#define GPIO_GPREN0_REN18_Msk             (0x40000UL)               /*!< REN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN19_Pos             (19UL)                    /*!< REN19 (Bit 19)                                        */
#define GPIO_GPREN0_REN19_Msk             (0x80000UL)               /*!< REN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN20_Pos             (20UL)                    /*!< REN20 (Bit 20)                                        */
#define GPIO_GPREN0_REN20_Msk             (0x100000UL)              /*!< REN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN21_Pos             (21UL)                    /*!< REN21 (Bit 21)                                        */
#define GPIO_GPREN0_REN21_Msk             (0x200000UL)              /*!< REN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN22_Pos             (22UL)                    /*!< REN22 (Bit 22)                                        */
#define GPIO_GPREN0_REN22_Msk             (0x400000UL)              /*!< REN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN23_Pos             (23UL)                    /*!< REN23 (Bit 23)                                        */
#define GPIO_GPREN0_REN23_Msk             (0x800000UL)              /*!< REN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN24_Pos             (24UL)                    /*!< REN24 (Bit 24)                                        */
#define GPIO_GPREN0_REN24_Msk             (0x1000000UL)             /*!< REN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN25_Pos             (25UL)                    /*!< REN25 (Bit 25)                                        */
#define GPIO_GPREN0_REN25_Msk             (0x2000000UL)             /*!< REN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN26_Pos             (26UL)                    /*!< REN26 (Bit 26)                                        */
#define GPIO_GPREN0_REN26_Msk             (0x4000000UL)             /*!< REN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN27_Pos             (27UL)                    /*!< REN27 (Bit 27)                                        */
#define GPIO_GPREN0_REN27_Msk             (0x8000000UL)             /*!< REN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN28_Pos             (28UL)                    /*!< REN28 (Bit 28)                                        */
#define GPIO_GPREN0_REN28_Msk             (0x10000000UL)            /*!< REN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN29_Pos             (29UL)                    /*!< REN29 (Bit 29)                                        */
#define GPIO_GPREN0_REN29_Msk             (0x20000000UL)            /*!< REN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN30_Pos             (30UL)                    /*!< REN30 (Bit 30)                                        */
#define GPIO_GPREN0_REN30_Msk             (0x40000000UL)            /*!< REN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN0_REN31_Pos             (31UL)                    /*!< REN31 (Bit 31)                                        */
#define GPIO_GPREN0_REN31_Msk             (0x80000000UL)            /*!< REN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPREN1  ========================================================= */
#define GPIO_GPREN1_REN32_Pos             (0UL)                     /*!< REN32 (Bit 0)                                         */
#define GPIO_GPREN1_REN32_Msk             (0x1UL)                   /*!< REN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN33_Pos             (1UL)                     /*!< REN33 (Bit 1)                                         */
#define GPIO_GPREN1_REN33_Msk             (0x2UL)                   /*!< REN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN34_Pos             (2UL)                     /*!< REN34 (Bit 2)                                         */
#define GPIO_GPREN1_REN34_Msk             (0x4UL)                   /*!< REN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN35_Pos             (3UL)                     /*!< REN35 (Bit 3)                                         */
#define GPIO_GPREN1_REN35_Msk             (0x8UL)                   /*!< REN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN36_Pos             (4UL)                     /*!< REN36 (Bit 4)                                         */
#define GPIO_GPREN1_REN36_Msk             (0x10UL)                  /*!< REN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN37_Pos             (5UL)                     /*!< REN37 (Bit 5)                                         */
#define GPIO_GPREN1_REN37_Msk             (0x20UL)                  /*!< REN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN38_Pos             (6UL)                     /*!< REN38 (Bit 6)                                         */
#define GPIO_GPREN1_REN38_Msk             (0x40UL)                  /*!< REN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN39_Pos             (7UL)                     /*!< REN39 (Bit 7)                                         */
#define GPIO_GPREN1_REN39_Msk             (0x80UL)                  /*!< REN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN40_Pos             (8UL)                     /*!< REN40 (Bit 8)                                         */
#define GPIO_GPREN1_REN40_Msk             (0x100UL)                 /*!< REN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN41_Pos             (9UL)                     /*!< REN41 (Bit 9)                                         */
#define GPIO_GPREN1_REN41_Msk             (0x200UL)                 /*!< REN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN42_Pos             (10UL)                    /*!< REN42 (Bit 10)                                        */
#define GPIO_GPREN1_REN42_Msk             (0x400UL)                 /*!< REN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN43_Pos             (11UL)                    /*!< REN43 (Bit 11)                                        */
#define GPIO_GPREN1_REN43_Msk             (0x800UL)                 /*!< REN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN44_Pos             (12UL)                    /*!< REN44 (Bit 12)                                        */
#define GPIO_GPREN1_REN44_Msk             (0x1000UL)                /*!< REN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN45_Pos             (13UL)                    /*!< REN45 (Bit 13)                                        */
#define GPIO_GPREN1_REN45_Msk             (0x2000UL)                /*!< REN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN46_Pos             (14UL)                    /*!< REN46 (Bit 14)                                        */
#define GPIO_GPREN1_REN46_Msk             (0x4000UL)                /*!< REN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN47_Pos             (15UL)                    /*!< REN47 (Bit 15)                                        */
#define GPIO_GPREN1_REN47_Msk             (0x8000UL)                /*!< REN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN48_Pos             (16UL)                    /*!< REN48 (Bit 16)                                        */
#define GPIO_GPREN1_REN48_Msk             (0x10000UL)               /*!< REN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN49_Pos             (17UL)                    /*!< REN49 (Bit 17)                                        */
#define GPIO_GPREN1_REN49_Msk             (0x20000UL)               /*!< REN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN50_Pos             (18UL)                    /*!< REN50 (Bit 18)                                        */
#define GPIO_GPREN1_REN50_Msk             (0x40000UL)               /*!< REN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN51_Pos             (19UL)                    /*!< REN51 (Bit 19)                                        */
#define GPIO_GPREN1_REN51_Msk             (0x80000UL)               /*!< REN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN52_Pos             (20UL)                    /*!< REN52 (Bit 20)                                        */
#define GPIO_GPREN1_REN52_Msk             (0x100000UL)              /*!< REN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPREN1_REN53_Pos             (21UL)                    /*!< REN53 (Bit 21)                                        */
#define GPIO_GPREN1_REN53_Msk             (0x200000UL)              /*!< REN53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPFEN0  ========================================================= */
#define GPIO_GPFEN0_FEN0_Pos              (0UL)                     /*!< FEN0 (Bit 0)                                          */
#define GPIO_GPFEN0_FEN0_Msk              (0x1UL)                   /*!< FEN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN1_Pos              (1UL)                     /*!< FEN1 (Bit 1)                                          */
#define GPIO_GPFEN0_FEN1_Msk              (0x2UL)                   /*!< FEN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN2_Pos              (2UL)                     /*!< FEN2 (Bit 2)                                          */
#define GPIO_GPFEN0_FEN2_Msk              (0x4UL)                   /*!< FEN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN3_Pos              (3UL)                     /*!< FEN3 (Bit 3)                                          */
#define GPIO_GPFEN0_FEN3_Msk              (0x8UL)                   /*!< FEN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN4_Pos              (4UL)                     /*!< FEN4 (Bit 4)                                          */
#define GPIO_GPFEN0_FEN4_Msk              (0x10UL)                  /*!< FEN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN5_Pos              (5UL)                     /*!< FEN5 (Bit 5)                                          */
#define GPIO_GPFEN0_FEN5_Msk              (0x20UL)                  /*!< FEN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN6_Pos              (6UL)                     /*!< FEN6 (Bit 6)                                          */
#define GPIO_GPFEN0_FEN6_Msk              (0x40UL)                  /*!< FEN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN7_Pos              (7UL)                     /*!< FEN7 (Bit 7)                                          */
#define GPIO_GPFEN0_FEN7_Msk              (0x80UL)                  /*!< FEN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN8_Pos              (8UL)                     /*!< FEN8 (Bit 8)                                          */
#define GPIO_GPFEN0_FEN8_Msk              (0x100UL)                 /*!< FEN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN9_Pos              (9UL)                     /*!< FEN9 (Bit 9)                                          */
#define GPIO_GPFEN0_FEN9_Msk              (0x200UL)                 /*!< FEN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPFEN0_FEN10_Pos             (10UL)                    /*!< FEN10 (Bit 10)                                        */
#define GPIO_GPFEN0_FEN10_Msk             (0x400UL)                 /*!< FEN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN11_Pos             (11UL)                    /*!< FEN11 (Bit 11)                                        */
#define GPIO_GPFEN0_FEN11_Msk             (0x800UL)                 /*!< FEN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN12_Pos             (12UL)                    /*!< FEN12 (Bit 12)                                        */
#define GPIO_GPFEN0_FEN12_Msk             (0x1000UL)                /*!< FEN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN13_Pos             (13UL)                    /*!< FEN13 (Bit 13)                                        */
#define GPIO_GPFEN0_FEN13_Msk             (0x2000UL)                /*!< FEN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN14_Pos             (14UL)                    /*!< FEN14 (Bit 14)                                        */
#define GPIO_GPFEN0_FEN14_Msk             (0x4000UL)                /*!< FEN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN15_Pos             (15UL)                    /*!< FEN15 (Bit 15)                                        */
#define GPIO_GPFEN0_FEN15_Msk             (0x8000UL)                /*!< FEN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN16_Pos             (16UL)                    /*!< FEN16 (Bit 16)                                        */
#define GPIO_GPFEN0_FEN16_Msk             (0x10000UL)               /*!< FEN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN17_Pos             (17UL)                    /*!< FEN17 (Bit 17)                                        */
#define GPIO_GPFEN0_FEN17_Msk             (0x20000UL)               /*!< FEN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN18_Pos             (18UL)                    /*!< FEN18 (Bit 18)                                        */
#define GPIO_GPFEN0_FEN18_Msk             (0x40000UL)               /*!< FEN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN19_Pos             (19UL)                    /*!< FEN19 (Bit 19)                                        */
#define GPIO_GPFEN0_FEN19_Msk             (0x80000UL)               /*!< FEN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN20_Pos             (20UL)                    /*!< FEN20 (Bit 20)                                        */
#define GPIO_GPFEN0_FEN20_Msk             (0x100000UL)              /*!< FEN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN21_Pos             (21UL)                    /*!< FEN21 (Bit 21)                                        */
#define GPIO_GPFEN0_FEN21_Msk             (0x200000UL)              /*!< FEN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN22_Pos             (22UL)                    /*!< FEN22 (Bit 22)                                        */
#define GPIO_GPFEN0_FEN22_Msk             (0x400000UL)              /*!< FEN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN23_Pos             (23UL)                    /*!< FEN23 (Bit 23)                                        */
#define GPIO_GPFEN0_FEN23_Msk             (0x800000UL)              /*!< FEN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN24_Pos             (24UL)                    /*!< FEN24 (Bit 24)                                        */
#define GPIO_GPFEN0_FEN24_Msk             (0x1000000UL)             /*!< FEN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN25_Pos             (25UL)                    /*!< FEN25 (Bit 25)                                        */
#define GPIO_GPFEN0_FEN25_Msk             (0x2000000UL)             /*!< FEN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN26_Pos             (26UL)                    /*!< FEN26 (Bit 26)                                        */
#define GPIO_GPFEN0_FEN26_Msk             (0x4000000UL)             /*!< FEN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN27_Pos             (27UL)                    /*!< FEN27 (Bit 27)                                        */
#define GPIO_GPFEN0_FEN27_Msk             (0x8000000UL)             /*!< FEN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN28_Pos             (28UL)                    /*!< FEN28 (Bit 28)                                        */
#define GPIO_GPFEN0_FEN28_Msk             (0x10000000UL)            /*!< FEN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN29_Pos             (29UL)                    /*!< FEN29 (Bit 29)                                        */
#define GPIO_GPFEN0_FEN29_Msk             (0x20000000UL)            /*!< FEN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN30_Pos             (30UL)                    /*!< FEN30 (Bit 30)                                        */
#define GPIO_GPFEN0_FEN30_Msk             (0x40000000UL)            /*!< FEN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN0_FEN31_Pos             (31UL)                    /*!< FEN31 (Bit 31)                                        */
#define GPIO_GPFEN0_FEN31_Msk             (0x80000000UL)            /*!< FEN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPFEN1  ========================================================= */
#define GPIO_GPFEN1_FEN32_Pos             (0UL)                     /*!< FEN32 (Bit 0)                                         */
#define GPIO_GPFEN1_FEN32_Msk             (0x1UL)                   /*!< FEN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN33_Pos             (1UL)                     /*!< FEN33 (Bit 1)                                         */
#define GPIO_GPFEN1_FEN33_Msk             (0x2UL)                   /*!< FEN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN34_Pos             (2UL)                     /*!< FEN34 (Bit 2)                                         */
#define GPIO_GPFEN1_FEN34_Msk             (0x4UL)                   /*!< FEN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN35_Pos             (3UL)                     /*!< FEN35 (Bit 3)                                         */
#define GPIO_GPFEN1_FEN35_Msk             (0x8UL)                   /*!< FEN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN36_Pos             (4UL)                     /*!< FEN36 (Bit 4)                                         */
#define GPIO_GPFEN1_FEN36_Msk             (0x10UL)                  /*!< FEN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN37_Pos             (5UL)                     /*!< FEN37 (Bit 5)                                         */
#define GPIO_GPFEN1_FEN37_Msk             (0x20UL)                  /*!< FEN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN38_Pos             (6UL)                     /*!< FEN38 (Bit 6)                                         */
#define GPIO_GPFEN1_FEN38_Msk             (0x40UL)                  /*!< FEN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN39_Pos             (7UL)                     /*!< FEN39 (Bit 7)                                         */
#define GPIO_GPFEN1_FEN39_Msk             (0x80UL)                  /*!< FEN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN40_Pos             (8UL)                     /*!< FEN40 (Bit 8)                                         */
#define GPIO_GPFEN1_FEN40_Msk             (0x100UL)                 /*!< FEN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN41_Pos             (9UL)                     /*!< FEN41 (Bit 9)                                         */
#define GPIO_GPFEN1_FEN41_Msk             (0x200UL)                 /*!< FEN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN42_Pos             (10UL)                    /*!< FEN42 (Bit 10)                                        */
#define GPIO_GPFEN1_FEN42_Msk             (0x400UL)                 /*!< FEN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN43_Pos             (11UL)                    /*!< FEN43 (Bit 11)                                        */
#define GPIO_GPFEN1_FEN43_Msk             (0x800UL)                 /*!< FEN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN44_Pos             (12UL)                    /*!< FEN44 (Bit 12)                                        */
#define GPIO_GPFEN1_FEN44_Msk             (0x1000UL)                /*!< FEN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN45_Pos             (13UL)                    /*!< FEN45 (Bit 13)                                        */
#define GPIO_GPFEN1_FEN45_Msk             (0x2000UL)                /*!< FEN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN46_Pos             (14UL)                    /*!< FEN46 (Bit 14)                                        */
#define GPIO_GPFEN1_FEN46_Msk             (0x4000UL)                /*!< FEN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN47_Pos             (15UL)                    /*!< FEN47 (Bit 15)                                        */
#define GPIO_GPFEN1_FEN47_Msk             (0x8000UL)                /*!< FEN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN48_Pos             (16UL)                    /*!< FEN48 (Bit 16)                                        */
#define GPIO_GPFEN1_FEN48_Msk             (0x10000UL)               /*!< FEN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN49_Pos             (17UL)                    /*!< FEN49 (Bit 17)                                        */
#define GPIO_GPFEN1_FEN49_Msk             (0x20000UL)               /*!< FEN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN50_Pos             (18UL)                    /*!< FEN50 (Bit 18)                                        */
#define GPIO_GPFEN1_FEN50_Msk             (0x40000UL)               /*!< FEN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN51_Pos             (19UL)                    /*!< FEN51 (Bit 19)                                        */
#define GPIO_GPFEN1_FEN51_Msk             (0x80000UL)               /*!< FEN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN52_Pos             (20UL)                    /*!< FEN52 (Bit 20)                                        */
#define GPIO_GPFEN1_FEN52_Msk             (0x100000UL)              /*!< FEN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPFEN1_FEN53_Pos             (21UL)                    /*!< FEN53 (Bit 21)                                        */
#define GPIO_GPFEN1_FEN53_Msk             (0x200000UL)              /*!< FEN53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPHEN0  ========================================================= */
#define GPIO_GPHEN0_HEN0_Pos              (0UL)                     /*!< HEN0 (Bit 0)                                          */
#define GPIO_GPHEN0_HEN0_Msk              (0x1UL)                   /*!< HEN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN1_Pos              (1UL)                     /*!< HEN1 (Bit 1)                                          */
#define GPIO_GPHEN0_HEN1_Msk              (0x2UL)                   /*!< HEN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN2_Pos              (2UL)                     /*!< HEN2 (Bit 2)                                          */
#define GPIO_GPHEN0_HEN2_Msk              (0x4UL)                   /*!< HEN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN3_Pos              (3UL)                     /*!< HEN3 (Bit 3)                                          */
#define GPIO_GPHEN0_HEN3_Msk              (0x8UL)                   /*!< HEN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN4_Pos              (4UL)                     /*!< HEN4 (Bit 4)                                          */
#define GPIO_GPHEN0_HEN4_Msk              (0x10UL)                  /*!< HEN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN5_Pos              (5UL)                     /*!< HEN5 (Bit 5)                                          */
#define GPIO_GPHEN0_HEN5_Msk              (0x20UL)                  /*!< HEN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN6_Pos              (6UL)                     /*!< HEN6 (Bit 6)                                          */
#define GPIO_GPHEN0_HEN6_Msk              (0x40UL)                  /*!< HEN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN7_Pos              (7UL)                     /*!< HEN7 (Bit 7)                                          */
#define GPIO_GPHEN0_HEN7_Msk              (0x80UL)                  /*!< HEN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN8_Pos              (8UL)                     /*!< HEN8 (Bit 8)                                          */
#define GPIO_GPHEN0_HEN8_Msk              (0x100UL)                 /*!< HEN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN9_Pos              (9UL)                     /*!< HEN9 (Bit 9)                                          */
#define GPIO_GPHEN0_HEN9_Msk              (0x200UL)                 /*!< HEN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPHEN0_HEN10_Pos             (10UL)                    /*!< HEN10 (Bit 10)                                        */
#define GPIO_GPHEN0_HEN10_Msk             (0x400UL)                 /*!< HEN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN11_Pos             (11UL)                    /*!< HEN11 (Bit 11)                                        */
#define GPIO_GPHEN0_HEN11_Msk             (0x800UL)                 /*!< HEN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN12_Pos             (12UL)                    /*!< HEN12 (Bit 12)                                        */
#define GPIO_GPHEN0_HEN12_Msk             (0x1000UL)                /*!< HEN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN13_Pos             (13UL)                    /*!< HEN13 (Bit 13)                                        */
#define GPIO_GPHEN0_HEN13_Msk             (0x2000UL)                /*!< HEN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN14_Pos             (14UL)                    /*!< HEN14 (Bit 14)                                        */
#define GPIO_GPHEN0_HEN14_Msk             (0x4000UL)                /*!< HEN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN15_Pos             (15UL)                    /*!< HEN15 (Bit 15)                                        */
#define GPIO_GPHEN0_HEN15_Msk             (0x8000UL)                /*!< HEN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN16_Pos             (16UL)                    /*!< HEN16 (Bit 16)                                        */
#define GPIO_GPHEN0_HEN16_Msk             (0x10000UL)               /*!< HEN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN17_Pos             (17UL)                    /*!< HEN17 (Bit 17)                                        */
#define GPIO_GPHEN0_HEN17_Msk             (0x20000UL)               /*!< HEN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN18_Pos             (18UL)                    /*!< HEN18 (Bit 18)                                        */
#define GPIO_GPHEN0_HEN18_Msk             (0x40000UL)               /*!< HEN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN19_Pos             (19UL)                    /*!< HEN19 (Bit 19)                                        */
#define GPIO_GPHEN0_HEN19_Msk             (0x80000UL)               /*!< HEN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN20_Pos             (20UL)                    /*!< HEN20 (Bit 20)                                        */
#define GPIO_GPHEN0_HEN20_Msk             (0x100000UL)              /*!< HEN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN21_Pos             (21UL)                    /*!< HEN21 (Bit 21)                                        */
#define GPIO_GPHEN0_HEN21_Msk             (0x200000UL)              /*!< HEN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN22_Pos             (22UL)                    /*!< HEN22 (Bit 22)                                        */
#define GPIO_GPHEN0_HEN22_Msk             (0x400000UL)              /*!< HEN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN23_Pos             (23UL)                    /*!< HEN23 (Bit 23)                                        */
#define GPIO_GPHEN0_HEN23_Msk             (0x800000UL)              /*!< HEN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN24_Pos             (24UL)                    /*!< HEN24 (Bit 24)                                        */
#define GPIO_GPHEN0_HEN24_Msk             (0x1000000UL)             /*!< HEN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN25_Pos             (25UL)                    /*!< HEN25 (Bit 25)                                        */
#define GPIO_GPHEN0_HEN25_Msk             (0x2000000UL)             /*!< HEN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN26_Pos             (26UL)                    /*!< HEN26 (Bit 26)                                        */
#define GPIO_GPHEN0_HEN26_Msk             (0x4000000UL)             /*!< HEN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN27_Pos             (27UL)                    /*!< HEN27 (Bit 27)                                        */
#define GPIO_GPHEN0_HEN27_Msk             (0x8000000UL)             /*!< HEN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN28_Pos             (28UL)                    /*!< HEN28 (Bit 28)                                        */
#define GPIO_GPHEN0_HEN28_Msk             (0x10000000UL)            /*!< HEN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN29_Pos             (29UL)                    /*!< HEN29 (Bit 29)                                        */
#define GPIO_GPHEN0_HEN29_Msk             (0x20000000UL)            /*!< HEN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN30_Pos             (30UL)                    /*!< HEN30 (Bit 30)                                        */
#define GPIO_GPHEN0_HEN30_Msk             (0x40000000UL)            /*!< HEN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN0_HEN31_Pos             (31UL)                    /*!< HEN31 (Bit 31)                                        */
#define GPIO_GPHEN0_HEN31_Msk             (0x80000000UL)            /*!< HEN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPHEN1  ========================================================= */
#define GPIO_GPHEN1_HEN32_Pos             (0UL)                     /*!< HEN32 (Bit 0)                                         */
#define GPIO_GPHEN1_HEN32_Msk             (0x1UL)                   /*!< HEN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN33_Pos             (1UL)                     /*!< HEN33 (Bit 1)                                         */
#define GPIO_GPHEN1_HEN33_Msk             (0x2UL)                   /*!< HEN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN34_Pos             (2UL)                     /*!< HEN34 (Bit 2)                                         */
#define GPIO_GPHEN1_HEN34_Msk             (0x4UL)                   /*!< HEN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN35_Pos             (3UL)                     /*!< HEN35 (Bit 3)                                         */
#define GPIO_GPHEN1_HEN35_Msk             (0x8UL)                   /*!< HEN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN36_Pos             (4UL)                     /*!< HEN36 (Bit 4)                                         */
#define GPIO_GPHEN1_HEN36_Msk             (0x10UL)                  /*!< HEN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN37_Pos             (5UL)                     /*!< HEN37 (Bit 5)                                         */
#define GPIO_GPHEN1_HEN37_Msk             (0x20UL)                  /*!< HEN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN38_Pos             (6UL)                     /*!< HEN38 (Bit 6)                                         */
#define GPIO_GPHEN1_HEN38_Msk             (0x40UL)                  /*!< HEN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN39_Pos             (7UL)                     /*!< HEN39 (Bit 7)                                         */
#define GPIO_GPHEN1_HEN39_Msk             (0x80UL)                  /*!< HEN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN40_Pos             (8UL)                     /*!< HEN40 (Bit 8)                                         */
#define GPIO_GPHEN1_HEN40_Msk             (0x100UL)                 /*!< HEN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN41_Pos             (9UL)                     /*!< HEN41 (Bit 9)                                         */
#define GPIO_GPHEN1_HEN41_Msk             (0x200UL)                 /*!< HEN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN42_Pos             (10UL)                    /*!< HEN42 (Bit 10)                                        */
#define GPIO_GPHEN1_HEN42_Msk             (0x400UL)                 /*!< HEN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN43_Pos             (11UL)                    /*!< HEN43 (Bit 11)                                        */
#define GPIO_GPHEN1_HEN43_Msk             (0x800UL)                 /*!< HEN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN44_Pos             (12UL)                    /*!< HEN44 (Bit 12)                                        */
#define GPIO_GPHEN1_HEN44_Msk             (0x1000UL)                /*!< HEN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN45_Pos             (13UL)                    /*!< HEN45 (Bit 13)                                        */
#define GPIO_GPHEN1_HEN45_Msk             (0x2000UL)                /*!< HEN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN46_Pos             (14UL)                    /*!< HEN46 (Bit 14)                                        */
#define GPIO_GPHEN1_HEN46_Msk             (0x4000UL)                /*!< HEN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN47_Pos             (15UL)                    /*!< HEN47 (Bit 15)                                        */
#define GPIO_GPHEN1_HEN47_Msk             (0x8000UL)                /*!< HEN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN48_Pos             (16UL)                    /*!< HEN48 (Bit 16)                                        */
#define GPIO_GPHEN1_HEN48_Msk             (0x10000UL)               /*!< HEN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN49_Pos             (17UL)                    /*!< HEN49 (Bit 17)                                        */
#define GPIO_GPHEN1_HEN49_Msk             (0x20000UL)               /*!< HEN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN50_Pos             (18UL)                    /*!< HEN50 (Bit 18)                                        */
#define GPIO_GPHEN1_HEN50_Msk             (0x40000UL)               /*!< HEN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN51_Pos             (19UL)                    /*!< HEN51 (Bit 19)                                        */
#define GPIO_GPHEN1_HEN51_Msk             (0x80000UL)               /*!< HEN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN52_Pos             (20UL)                    /*!< HEN52 (Bit 20)                                        */
#define GPIO_GPHEN1_HEN52_Msk             (0x100000UL)              /*!< HEN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPHEN1_HEN53_Pos             (21UL)                    /*!< HEN53 (Bit 21)                                        */
#define GPIO_GPHEN1_HEN53_Msk             (0x200000UL)              /*!< HEN53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEN0  ========================================================= */
#define GPIO_GPLEN0_LEN0_Pos              (0UL)                     /*!< LEN0 (Bit 0)                                          */
#define GPIO_GPLEN0_LEN0_Msk              (0x1UL)                   /*!< LEN0 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN1_Pos              (1UL)                     /*!< LEN1 (Bit 1)                                          */
#define GPIO_GPLEN0_LEN1_Msk              (0x2UL)                   /*!< LEN1 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN2_Pos              (2UL)                     /*!< LEN2 (Bit 2)                                          */
#define GPIO_GPLEN0_LEN2_Msk              (0x4UL)                   /*!< LEN2 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN3_Pos              (3UL)                     /*!< LEN3 (Bit 3)                                          */
#define GPIO_GPLEN0_LEN3_Msk              (0x8UL)                   /*!< LEN3 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN4_Pos              (4UL)                     /*!< LEN4 (Bit 4)                                          */
#define GPIO_GPLEN0_LEN4_Msk              (0x10UL)                  /*!< LEN4 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN5_Pos              (5UL)                     /*!< LEN5 (Bit 5)                                          */
#define GPIO_GPLEN0_LEN5_Msk              (0x20UL)                  /*!< LEN5 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN6_Pos              (6UL)                     /*!< LEN6 (Bit 6)                                          */
#define GPIO_GPLEN0_LEN6_Msk              (0x40UL)                  /*!< LEN6 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN7_Pos              (7UL)                     /*!< LEN7 (Bit 7)                                          */
#define GPIO_GPLEN0_LEN7_Msk              (0x80UL)                  /*!< LEN7 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN8_Pos              (8UL)                     /*!< LEN8 (Bit 8)                                          */
#define GPIO_GPLEN0_LEN8_Msk              (0x100UL)                 /*!< LEN8 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN9_Pos              (9UL)                     /*!< LEN9 (Bit 9)                                          */
#define GPIO_GPLEN0_LEN9_Msk              (0x200UL)                 /*!< LEN9 (Bitfield-Mask: 0x01)                            */
#define GPIO_GPLEN0_LEN10_Pos             (10UL)                    /*!< LEN10 (Bit 10)                                        */
#define GPIO_GPLEN0_LEN10_Msk             (0x400UL)                 /*!< LEN10 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN11_Pos             (11UL)                    /*!< LEN11 (Bit 11)                                        */
#define GPIO_GPLEN0_LEN11_Msk             (0x800UL)                 /*!< LEN11 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN12_Pos             (12UL)                    /*!< LEN12 (Bit 12)                                        */
#define GPIO_GPLEN0_LEN12_Msk             (0x1000UL)                /*!< LEN12 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN13_Pos             (13UL)                    /*!< LEN13 (Bit 13)                                        */
#define GPIO_GPLEN0_LEN13_Msk             (0x2000UL)                /*!< LEN13 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN14_Pos             (14UL)                    /*!< LEN14 (Bit 14)                                        */
#define GPIO_GPLEN0_LEN14_Msk             (0x4000UL)                /*!< LEN14 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN15_Pos             (15UL)                    /*!< LEN15 (Bit 15)                                        */
#define GPIO_GPLEN0_LEN15_Msk             (0x8000UL)                /*!< LEN15 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN16_Pos             (16UL)                    /*!< LEN16 (Bit 16)                                        */
#define GPIO_GPLEN0_LEN16_Msk             (0x10000UL)               /*!< LEN16 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN17_Pos             (17UL)                    /*!< LEN17 (Bit 17)                                        */
#define GPIO_GPLEN0_LEN17_Msk             (0x20000UL)               /*!< LEN17 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN18_Pos             (18UL)                    /*!< LEN18 (Bit 18)                                        */
#define GPIO_GPLEN0_LEN18_Msk             (0x40000UL)               /*!< LEN18 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN19_Pos             (19UL)                    /*!< LEN19 (Bit 19)                                        */
#define GPIO_GPLEN0_LEN19_Msk             (0x80000UL)               /*!< LEN19 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN20_Pos             (20UL)                    /*!< LEN20 (Bit 20)                                        */
#define GPIO_GPLEN0_LEN20_Msk             (0x100000UL)              /*!< LEN20 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN21_Pos             (21UL)                    /*!< LEN21 (Bit 21)                                        */
#define GPIO_GPLEN0_LEN21_Msk             (0x200000UL)              /*!< LEN21 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN22_Pos             (22UL)                    /*!< LEN22 (Bit 22)                                        */
#define GPIO_GPLEN0_LEN22_Msk             (0x400000UL)              /*!< LEN22 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN23_Pos             (23UL)                    /*!< LEN23 (Bit 23)                                        */
#define GPIO_GPLEN0_LEN23_Msk             (0x800000UL)              /*!< LEN23 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN24_Pos             (24UL)                    /*!< LEN24 (Bit 24)                                        */
#define GPIO_GPLEN0_LEN24_Msk             (0x1000000UL)             /*!< LEN24 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN25_Pos             (25UL)                    /*!< LEN25 (Bit 25)                                        */
#define GPIO_GPLEN0_LEN25_Msk             (0x2000000UL)             /*!< LEN25 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN26_Pos             (26UL)                    /*!< LEN26 (Bit 26)                                        */
#define GPIO_GPLEN0_LEN26_Msk             (0x4000000UL)             /*!< LEN26 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN27_Pos             (27UL)                    /*!< LEN27 (Bit 27)                                        */
#define GPIO_GPLEN0_LEN27_Msk             (0x8000000UL)             /*!< LEN27 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN28_Pos             (28UL)                    /*!< LEN28 (Bit 28)                                        */
#define GPIO_GPLEN0_LEN28_Msk             (0x10000000UL)            /*!< LEN28 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN29_Pos             (29UL)                    /*!< LEN29 (Bit 29)                                        */
#define GPIO_GPLEN0_LEN29_Msk             (0x20000000UL)            /*!< LEN29 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN30_Pos             (30UL)                    /*!< LEN30 (Bit 30)                                        */
#define GPIO_GPLEN0_LEN30_Msk             (0x40000000UL)            /*!< LEN30 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN0_LEN31_Pos             (31UL)                    /*!< LEN31 (Bit 31)                                        */
#define GPIO_GPLEN0_LEN31_Msk             (0x80000000UL)            /*!< LEN31 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPLEN1  ========================================================= */
#define GPIO_GPLEN1_LEN32_Pos             (0UL)                     /*!< LEN32 (Bit 0)                                         */
#define GPIO_GPLEN1_LEN32_Msk             (0x1UL)                   /*!< LEN32 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN33_Pos             (1UL)                     /*!< LEN33 (Bit 1)                                         */
#define GPIO_GPLEN1_LEN33_Msk             (0x2UL)                   /*!< LEN33 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN34_Pos             (2UL)                     /*!< LEN34 (Bit 2)                                         */
#define GPIO_GPLEN1_LEN34_Msk             (0x4UL)                   /*!< LEN34 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN35_Pos             (3UL)                     /*!< LEN35 (Bit 3)                                         */
#define GPIO_GPLEN1_LEN35_Msk             (0x8UL)                   /*!< LEN35 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN36_Pos             (4UL)                     /*!< LEN36 (Bit 4)                                         */
#define GPIO_GPLEN1_LEN36_Msk             (0x10UL)                  /*!< LEN36 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN37_Pos             (5UL)                     /*!< LEN37 (Bit 5)                                         */
#define GPIO_GPLEN1_LEN37_Msk             (0x20UL)                  /*!< LEN37 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN38_Pos             (6UL)                     /*!< LEN38 (Bit 6)                                         */
#define GPIO_GPLEN1_LEN38_Msk             (0x40UL)                  /*!< LEN38 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN39_Pos             (7UL)                     /*!< LEN39 (Bit 7)                                         */
#define GPIO_GPLEN1_LEN39_Msk             (0x80UL)                  /*!< LEN39 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN40_Pos             (8UL)                     /*!< LEN40 (Bit 8)                                         */
#define GPIO_GPLEN1_LEN40_Msk             (0x100UL)                 /*!< LEN40 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN41_Pos             (9UL)                     /*!< LEN41 (Bit 9)                                         */
#define GPIO_GPLEN1_LEN41_Msk             (0x200UL)                 /*!< LEN41 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN42_Pos             (10UL)                    /*!< LEN42 (Bit 10)                                        */
#define GPIO_GPLEN1_LEN42_Msk             (0x400UL)                 /*!< LEN42 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN43_Pos             (11UL)                    /*!< LEN43 (Bit 11)                                        */
#define GPIO_GPLEN1_LEN43_Msk             (0x800UL)                 /*!< LEN43 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN44_Pos             (12UL)                    /*!< LEN44 (Bit 12)                                        */
#define GPIO_GPLEN1_LEN44_Msk             (0x1000UL)                /*!< LEN44 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN45_Pos             (13UL)                    /*!< LEN45 (Bit 13)                                        */
#define GPIO_GPLEN1_LEN45_Msk             (0x2000UL)                /*!< LEN45 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN46_Pos             (14UL)                    /*!< LEN46 (Bit 14)                                        */
#define GPIO_GPLEN1_LEN46_Msk             (0x4000UL)                /*!< LEN46 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN47_Pos             (15UL)                    /*!< LEN47 (Bit 15)                                        */
#define GPIO_GPLEN1_LEN47_Msk             (0x8000UL)                /*!< LEN47 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN48_Pos             (16UL)                    /*!< LEN48 (Bit 16)                                        */
#define GPIO_GPLEN1_LEN48_Msk             (0x10000UL)               /*!< LEN48 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN49_Pos             (17UL)                    /*!< LEN49 (Bit 17)                                        */
#define GPIO_GPLEN1_LEN49_Msk             (0x20000UL)               /*!< LEN49 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN50_Pos             (18UL)                    /*!< LEN50 (Bit 18)                                        */
#define GPIO_GPLEN1_LEN50_Msk             (0x40000UL)               /*!< LEN50 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN51_Pos             (19UL)                    /*!< LEN51 (Bit 19)                                        */
#define GPIO_GPLEN1_LEN51_Msk             (0x80000UL)               /*!< LEN51 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN52_Pos             (20UL)                    /*!< LEN52 (Bit 20)                                        */
#define GPIO_GPLEN1_LEN52_Msk             (0x100000UL)              /*!< LEN52 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPLEN1_LEN53_Pos             (21UL)                    /*!< LEN53 (Bit 21)                                        */
#define GPIO_GPLEN1_LEN53_Msk             (0x200000UL)              /*!< LEN53 (Bitfield-Mask: 0x01)                           */
/* ========================================================  GPAREN0  ======================================================== */
#define GPIO_GPAREN0_AREN0_Pos            (0UL)                     /*!< AREN0 (Bit 0)                                         */
#define GPIO_GPAREN0_AREN0_Msk            (0x1UL)                   /*!< AREN0 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN1_Pos            (1UL)                     /*!< AREN1 (Bit 1)                                         */
#define GPIO_GPAREN0_AREN1_Msk            (0x2UL)                   /*!< AREN1 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN2_Pos            (2UL)                     /*!< AREN2 (Bit 2)                                         */
#define GPIO_GPAREN0_AREN2_Msk            (0x4UL)                   /*!< AREN2 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN3_Pos            (3UL)                     /*!< AREN3 (Bit 3)                                         */
#define GPIO_GPAREN0_AREN3_Msk            (0x8UL)                   /*!< AREN3 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN4_Pos            (4UL)                     /*!< AREN4 (Bit 4)                                         */
#define GPIO_GPAREN0_AREN4_Msk            (0x10UL)                  /*!< AREN4 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN5_Pos            (5UL)                     /*!< AREN5 (Bit 5)                                         */
#define GPIO_GPAREN0_AREN5_Msk            (0x20UL)                  /*!< AREN5 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN6_Pos            (6UL)                     /*!< AREN6 (Bit 6)                                         */
#define GPIO_GPAREN0_AREN6_Msk            (0x40UL)                  /*!< AREN6 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN7_Pos            (7UL)                     /*!< AREN7 (Bit 7)                                         */
#define GPIO_GPAREN0_AREN7_Msk            (0x80UL)                  /*!< AREN7 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN8_Pos            (8UL)                     /*!< AREN8 (Bit 8)                                         */
#define GPIO_GPAREN0_AREN8_Msk            (0x100UL)                 /*!< AREN8 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN9_Pos            (9UL)                     /*!< AREN9 (Bit 9)                                         */
#define GPIO_GPAREN0_AREN9_Msk            (0x200UL)                 /*!< AREN9 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAREN0_AREN10_Pos           (10UL)                    /*!< AREN10 (Bit 10)                                       */
#define GPIO_GPAREN0_AREN10_Msk           (0x400UL)                 /*!< AREN10 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN11_Pos           (11UL)                    /*!< AREN11 (Bit 11)                                       */
#define GPIO_GPAREN0_AREN11_Msk           (0x800UL)                 /*!< AREN11 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN12_Pos           (12UL)                    /*!< AREN12 (Bit 12)                                       */
#define GPIO_GPAREN0_AREN12_Msk           (0x1000UL)                /*!< AREN12 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN13_Pos           (13UL)                    /*!< AREN13 (Bit 13)                                       */
#define GPIO_GPAREN0_AREN13_Msk           (0x2000UL)                /*!< AREN13 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN14_Pos           (14UL)                    /*!< AREN14 (Bit 14)                                       */
#define GPIO_GPAREN0_AREN14_Msk           (0x4000UL)                /*!< AREN14 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN15_Pos           (15UL)                    /*!< AREN15 (Bit 15)                                       */
#define GPIO_GPAREN0_AREN15_Msk           (0x8000UL)                /*!< AREN15 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN16_Pos           (16UL)                    /*!< AREN16 (Bit 16)                                       */
#define GPIO_GPAREN0_AREN16_Msk           (0x10000UL)               /*!< AREN16 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN17_Pos           (17UL)                    /*!< AREN17 (Bit 17)                                       */
#define GPIO_GPAREN0_AREN17_Msk           (0x20000UL)               /*!< AREN17 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN18_Pos           (18UL)                    /*!< AREN18 (Bit 18)                                       */
#define GPIO_GPAREN0_AREN18_Msk           (0x40000UL)               /*!< AREN18 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN19_Pos           (19UL)                    /*!< AREN19 (Bit 19)                                       */
#define GPIO_GPAREN0_AREN19_Msk           (0x80000UL)               /*!< AREN19 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN20_Pos           (20UL)                    /*!< AREN20 (Bit 20)                                       */
#define GPIO_GPAREN0_AREN20_Msk           (0x100000UL)              /*!< AREN20 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN21_Pos           (21UL)                    /*!< AREN21 (Bit 21)                                       */
#define GPIO_GPAREN0_AREN21_Msk           (0x200000UL)              /*!< AREN21 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN22_Pos           (22UL)                    /*!< AREN22 (Bit 22)                                       */
#define GPIO_GPAREN0_AREN22_Msk           (0x400000UL)              /*!< AREN22 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN23_Pos           (23UL)                    /*!< AREN23 (Bit 23)                                       */
#define GPIO_GPAREN0_AREN23_Msk           (0x800000UL)              /*!< AREN23 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN24_Pos           (24UL)                    /*!< AREN24 (Bit 24)                                       */
#define GPIO_GPAREN0_AREN24_Msk           (0x1000000UL)             /*!< AREN24 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN25_Pos           (25UL)                    /*!< AREN25 (Bit 25)                                       */
#define GPIO_GPAREN0_AREN25_Msk           (0x2000000UL)             /*!< AREN25 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN26_Pos           (26UL)                    /*!< AREN26 (Bit 26)                                       */
#define GPIO_GPAREN0_AREN26_Msk           (0x4000000UL)             /*!< AREN26 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN27_Pos           (27UL)                    /*!< AREN27 (Bit 27)                                       */
#define GPIO_GPAREN0_AREN27_Msk           (0x8000000UL)             /*!< AREN27 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN28_Pos           (28UL)                    /*!< AREN28 (Bit 28)                                       */
#define GPIO_GPAREN0_AREN28_Msk           (0x10000000UL)            /*!< AREN28 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN29_Pos           (29UL)                    /*!< AREN29 (Bit 29)                                       */
#define GPIO_GPAREN0_AREN29_Msk           (0x20000000UL)            /*!< AREN29 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN30_Pos           (30UL)                    /*!< AREN30 (Bit 30)                                       */
#define GPIO_GPAREN0_AREN30_Msk           (0x40000000UL)            /*!< AREN30 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN0_AREN31_Pos           (31UL)                    /*!< AREN31 (Bit 31)                                       */
#define GPIO_GPAREN0_AREN31_Msk           (0x80000000UL)            /*!< AREN31 (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPAREN1  ======================================================== */
#define GPIO_GPAREN1_AREN32_Pos           (0UL)                     /*!< AREN32 (Bit 0)                                        */
#define GPIO_GPAREN1_AREN32_Msk           (0x1UL)                   /*!< AREN32 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN33_Pos           (1UL)                     /*!< AREN33 (Bit 1)                                        */
#define GPIO_GPAREN1_AREN33_Msk           (0x2UL)                   /*!< AREN33 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN34_Pos           (2UL)                     /*!< AREN34 (Bit 2)                                        */
#define GPIO_GPAREN1_AREN34_Msk           (0x4UL)                   /*!< AREN34 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN35_Pos           (3UL)                     /*!< AREN35 (Bit 3)                                        */
#define GPIO_GPAREN1_AREN35_Msk           (0x8UL)                   /*!< AREN35 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN36_Pos           (4UL)                     /*!< AREN36 (Bit 4)                                        */
#define GPIO_GPAREN1_AREN36_Msk           (0x10UL)                  /*!< AREN36 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN37_Pos           (5UL)                     /*!< AREN37 (Bit 5)                                        */
#define GPIO_GPAREN1_AREN37_Msk           (0x20UL)                  /*!< AREN37 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN38_Pos           (6UL)                     /*!< AREN38 (Bit 6)                                        */
#define GPIO_GPAREN1_AREN38_Msk           (0x40UL)                  /*!< AREN38 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN39_Pos           (7UL)                     /*!< AREN39 (Bit 7)                                        */
#define GPIO_GPAREN1_AREN39_Msk           (0x80UL)                  /*!< AREN39 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN40_Pos           (8UL)                     /*!< AREN40 (Bit 8)                                        */
#define GPIO_GPAREN1_AREN40_Msk           (0x100UL)                 /*!< AREN40 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN41_Pos           (9UL)                     /*!< AREN41 (Bit 9)                                        */
#define GPIO_GPAREN1_AREN41_Msk           (0x200UL)                 /*!< AREN41 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN42_Pos           (10UL)                    /*!< AREN42 (Bit 10)                                       */
#define GPIO_GPAREN1_AREN42_Msk           (0x400UL)                 /*!< AREN42 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN43_Pos           (11UL)                    /*!< AREN43 (Bit 11)                                       */
#define GPIO_GPAREN1_AREN43_Msk           (0x800UL)                 /*!< AREN43 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN44_Pos           (12UL)                    /*!< AREN44 (Bit 12)                                       */
#define GPIO_GPAREN1_AREN44_Msk           (0x1000UL)                /*!< AREN44 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN45_Pos           (13UL)                    /*!< AREN45 (Bit 13)                                       */
#define GPIO_GPAREN1_AREN45_Msk           (0x2000UL)                /*!< AREN45 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN46_Pos           (14UL)                    /*!< AREN46 (Bit 14)                                       */
#define GPIO_GPAREN1_AREN46_Msk           (0x4000UL)                /*!< AREN46 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN47_Pos           (15UL)                    /*!< AREN47 (Bit 15)                                       */
#define GPIO_GPAREN1_AREN47_Msk           (0x8000UL)                /*!< AREN47 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN48_Pos           (16UL)                    /*!< AREN48 (Bit 16)                                       */
#define GPIO_GPAREN1_AREN48_Msk           (0x10000UL)               /*!< AREN48 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN49_Pos           (17UL)                    /*!< AREN49 (Bit 17)                                       */
#define GPIO_GPAREN1_AREN49_Msk           (0x20000UL)               /*!< AREN49 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN50_Pos           (18UL)                    /*!< AREN50 (Bit 18)                                       */
#define GPIO_GPAREN1_AREN50_Msk           (0x40000UL)               /*!< AREN50 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN51_Pos           (19UL)                    /*!< AREN51 (Bit 19)                                       */
#define GPIO_GPAREN1_AREN51_Msk           (0x80000UL)               /*!< AREN51 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN52_Pos           (20UL)                    /*!< AREN52 (Bit 20)                                       */
#define GPIO_GPAREN1_AREN52_Msk           (0x100000UL)              /*!< AREN52 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAREN1_AREN53_Pos           (21UL)                    /*!< AREN53 (Bit 21)                                       */
#define GPIO_GPAREN1_AREN53_Msk           (0x200000UL)              /*!< AREN53 (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPAFEN0  ======================================================== */
#define GPIO_GPAFEN0_AFEN0_Pos            (0UL)                     /*!< AFEN0 (Bit 0)                                         */
#define GPIO_GPAFEN0_AFEN0_Msk            (0x1UL)                   /*!< AFEN0 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN1_Pos            (1UL)                     /*!< AFEN1 (Bit 1)                                         */
#define GPIO_GPAFEN0_AFEN1_Msk            (0x2UL)                   /*!< AFEN1 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN2_Pos            (2UL)                     /*!< AFEN2 (Bit 2)                                         */
#define GPIO_GPAFEN0_AFEN2_Msk            (0x4UL)                   /*!< AFEN2 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN3_Pos            (3UL)                     /*!< AFEN3 (Bit 3)                                         */
#define GPIO_GPAFEN0_AFEN3_Msk            (0x8UL)                   /*!< AFEN3 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN4_Pos            (4UL)                     /*!< AFEN4 (Bit 4)                                         */
#define GPIO_GPAFEN0_AFEN4_Msk            (0x10UL)                  /*!< AFEN4 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN5_Pos            (5UL)                     /*!< AFEN5 (Bit 5)                                         */
#define GPIO_GPAFEN0_AFEN5_Msk            (0x20UL)                  /*!< AFEN5 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN6_Pos            (6UL)                     /*!< AFEN6 (Bit 6)                                         */
#define GPIO_GPAFEN0_AFEN6_Msk            (0x40UL)                  /*!< AFEN6 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN7_Pos            (7UL)                     /*!< AFEN7 (Bit 7)                                         */
#define GPIO_GPAFEN0_AFEN7_Msk            (0x80UL)                  /*!< AFEN7 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN8_Pos            (8UL)                     /*!< AFEN8 (Bit 8)                                         */
#define GPIO_GPAFEN0_AFEN8_Msk            (0x100UL)                 /*!< AFEN8 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN9_Pos            (9UL)                     /*!< AFEN9 (Bit 9)                                         */
#define GPIO_GPAFEN0_AFEN9_Msk            (0x200UL)                 /*!< AFEN9 (Bitfield-Mask: 0x01)                           */
#define GPIO_GPAFEN0_AFEN10_Pos           (10UL)                    /*!< AFEN10 (Bit 10)                                       */
#define GPIO_GPAFEN0_AFEN10_Msk           (0x400UL)                 /*!< AFEN10 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN11_Pos           (11UL)                    /*!< AFEN11 (Bit 11)                                       */
#define GPIO_GPAFEN0_AFEN11_Msk           (0x800UL)                 /*!< AFEN11 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN12_Pos           (12UL)                    /*!< AFEN12 (Bit 12)                                       */
#define GPIO_GPAFEN0_AFEN12_Msk           (0x1000UL)                /*!< AFEN12 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN13_Pos           (13UL)                    /*!< AFEN13 (Bit 13)                                       */
#define GPIO_GPAFEN0_AFEN13_Msk           (0x2000UL)                /*!< AFEN13 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN14_Pos           (14UL)                    /*!< AFEN14 (Bit 14)                                       */
#define GPIO_GPAFEN0_AFEN14_Msk           (0x4000UL)                /*!< AFEN14 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN15_Pos           (15UL)                    /*!< AFEN15 (Bit 15)                                       */
#define GPIO_GPAFEN0_AFEN15_Msk           (0x8000UL)                /*!< AFEN15 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN16_Pos           (16UL)                    /*!< AFEN16 (Bit 16)                                       */
#define GPIO_GPAFEN0_AFEN16_Msk           (0x10000UL)               /*!< AFEN16 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN17_Pos           (17UL)                    /*!< AFEN17 (Bit 17)                                       */
#define GPIO_GPAFEN0_AFEN17_Msk           (0x20000UL)               /*!< AFEN17 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN18_Pos           (18UL)                    /*!< AFEN18 (Bit 18)                                       */
#define GPIO_GPAFEN0_AFEN18_Msk           (0x40000UL)               /*!< AFEN18 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN19_Pos           (19UL)                    /*!< AFEN19 (Bit 19)                                       */
#define GPIO_GPAFEN0_AFEN19_Msk           (0x80000UL)               /*!< AFEN19 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN20_Pos           (20UL)                    /*!< AFEN20 (Bit 20)                                       */
#define GPIO_GPAFEN0_AFEN20_Msk           (0x100000UL)              /*!< AFEN20 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN21_Pos           (21UL)                    /*!< AFEN21 (Bit 21)                                       */
#define GPIO_GPAFEN0_AFEN21_Msk           (0x200000UL)              /*!< AFEN21 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN22_Pos           (22UL)                    /*!< AFEN22 (Bit 22)                                       */
#define GPIO_GPAFEN0_AFEN22_Msk           (0x400000UL)              /*!< AFEN22 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN23_Pos           (23UL)                    /*!< AFEN23 (Bit 23)                                       */
#define GPIO_GPAFEN0_AFEN23_Msk           (0x800000UL)              /*!< AFEN23 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN24_Pos           (24UL)                    /*!< AFEN24 (Bit 24)                                       */
#define GPIO_GPAFEN0_AFEN24_Msk           (0x1000000UL)             /*!< AFEN24 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN25_Pos           (25UL)                    /*!< AFEN25 (Bit 25)                                       */
#define GPIO_GPAFEN0_AFEN25_Msk           (0x2000000UL)             /*!< AFEN25 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN26_Pos           (26UL)                    /*!< AFEN26 (Bit 26)                                       */
#define GPIO_GPAFEN0_AFEN26_Msk           (0x4000000UL)             /*!< AFEN26 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN27_Pos           (27UL)                    /*!< AFEN27 (Bit 27)                                       */
#define GPIO_GPAFEN0_AFEN27_Msk           (0x8000000UL)             /*!< AFEN27 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN28_Pos           (28UL)                    /*!< AFEN28 (Bit 28)                                       */
#define GPIO_GPAFEN0_AFEN28_Msk           (0x10000000UL)            /*!< AFEN28 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN29_Pos           (29UL)                    /*!< AFEN29 (Bit 29)                                       */
#define GPIO_GPAFEN0_AFEN29_Msk           (0x20000000UL)            /*!< AFEN29 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN30_Pos           (30UL)                    /*!< AFEN30 (Bit 30)                                       */
#define GPIO_GPAFEN0_AFEN30_Msk           (0x40000000UL)            /*!< AFEN30 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN0_AFEN31_Pos           (31UL)                    /*!< AFEN31 (Bit 31)                                       */
#define GPIO_GPAFEN0_AFEN31_Msk           (0x80000000UL)            /*!< AFEN31 (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPAFEN1  ======================================================== */
#define GPIO_GPAFEN1_AFEN32_Pos           (0UL)                     /*!< AFEN32 (Bit 0)                                        */
#define GPIO_GPAFEN1_AFEN32_Msk           (0x1UL)                   /*!< AFEN32 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN33_Pos           (1UL)                     /*!< AFEN33 (Bit 1)                                        */
#define GPIO_GPAFEN1_AFEN33_Msk           (0x2UL)                   /*!< AFEN33 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN34_Pos           (2UL)                     /*!< AFEN34 (Bit 2)                                        */
#define GPIO_GPAFEN1_AFEN34_Msk           (0x4UL)                   /*!< AFEN34 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN35_Pos           (3UL)                     /*!< AFEN35 (Bit 3)                                        */
#define GPIO_GPAFEN1_AFEN35_Msk           (0x8UL)                   /*!< AFEN35 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN36_Pos           (4UL)                     /*!< AFEN36 (Bit 4)                                        */
#define GPIO_GPAFEN1_AFEN36_Msk           (0x10UL)                  /*!< AFEN36 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN37_Pos           (5UL)                     /*!< AFEN37 (Bit 5)                                        */
#define GPIO_GPAFEN1_AFEN37_Msk           (0x20UL)                  /*!< AFEN37 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN38_Pos           (6UL)                     /*!< AFEN38 (Bit 6)                                        */
#define GPIO_GPAFEN1_AFEN38_Msk           (0x40UL)                  /*!< AFEN38 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN39_Pos           (7UL)                     /*!< AFEN39 (Bit 7)                                        */
#define GPIO_GPAFEN1_AFEN39_Msk           (0x80UL)                  /*!< AFEN39 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN40_Pos           (8UL)                     /*!< AFEN40 (Bit 8)                                        */
#define GPIO_GPAFEN1_AFEN40_Msk           (0x100UL)                 /*!< AFEN40 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN41_Pos           (9UL)                     /*!< AFEN41 (Bit 9)                                        */
#define GPIO_GPAFEN1_AFEN41_Msk           (0x200UL)                 /*!< AFEN41 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN42_Pos           (10UL)                    /*!< AFEN42 (Bit 10)                                       */
#define GPIO_GPAFEN1_AFEN42_Msk           (0x400UL)                 /*!< AFEN42 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN43_Pos           (11UL)                    /*!< AFEN43 (Bit 11)                                       */
#define GPIO_GPAFEN1_AFEN43_Msk           (0x800UL)                 /*!< AFEN43 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN44_Pos           (12UL)                    /*!< AFEN44 (Bit 12)                                       */
#define GPIO_GPAFEN1_AFEN44_Msk           (0x1000UL)                /*!< AFEN44 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN45_Pos           (13UL)                    /*!< AFEN45 (Bit 13)                                       */
#define GPIO_GPAFEN1_AFEN45_Msk           (0x2000UL)                /*!< AFEN45 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN46_Pos           (14UL)                    /*!< AFEN46 (Bit 14)                                       */
#define GPIO_GPAFEN1_AFEN46_Msk           (0x4000UL)                /*!< AFEN46 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN47_Pos           (15UL)                    /*!< AFEN47 (Bit 15)                                       */
#define GPIO_GPAFEN1_AFEN47_Msk           (0x8000UL)                /*!< AFEN47 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN48_Pos           (16UL)                    /*!< AFEN48 (Bit 16)                                       */
#define GPIO_GPAFEN1_AFEN48_Msk           (0x10000UL)               /*!< AFEN48 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN49_Pos           (17UL)                    /*!< AFEN49 (Bit 17)                                       */
#define GPIO_GPAFEN1_AFEN49_Msk           (0x20000UL)               /*!< AFEN49 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN50_Pos           (18UL)                    /*!< AFEN50 (Bit 18)                                       */
#define GPIO_GPAFEN1_AFEN50_Msk           (0x40000UL)               /*!< AFEN50 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN51_Pos           (19UL)                    /*!< AFEN51 (Bit 19)                                       */
#define GPIO_GPAFEN1_AFEN51_Msk           (0x80000UL)               /*!< AFEN51 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN52_Pos           (20UL)                    /*!< AFEN52 (Bit 20)                                       */
#define GPIO_GPAFEN1_AFEN52_Msk           (0x100000UL)              /*!< AFEN52 (Bitfield-Mask: 0x01)                          */
#define GPIO_GPAFEN1_AFEN53_Pos           (21UL)                    /*!< AFEN53 (Bit 21)                                       */
#define GPIO_GPAFEN1_AFEN53_Msk           (0x200000UL)              /*!< AFEN53 (Bitfield-Mask: 0x01)                          */
/* =======================================================  EXTRA_MUX  ======================================================= */
#define GPIO_EXTRA_MUX_SDIO_Pos           (1UL)                     /*!< SDIO (Bit 1)                                          */
#define GPIO_EXTRA_MUX_SDIO_Msk           (0x2UL)                   /*!< SDIO (Bitfield-Mask: 0x01)                            */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG0  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL0_Pos (0UL)  /*!< GPIO_PUP_PDN_CNTRL0 (Bit 0)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL0_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL0 (Bitfield-Mask: 0x03)            */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_Pos (2UL)  /*!< GPIO_PUP_PDN_CNTRL1 (Bit 2)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL1 (Bitfield-Mask: 0x03)            */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_Pos (4UL)  /*!< GPIO_PUP_PDN_CNTRL2 (Bit 4)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL2 (Bitfield-Mask: 0x03)           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_Pos (6UL)  /*!< GPIO_PUP_PDN_CNTRL3 (Bit 6)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL3 (Bitfield-Mask: 0x03)           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_Pos (8UL)  /*!< GPIO_PUP_PDN_CNTRL4 (Bit 8)                           */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL4 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL5 (Bit 10)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL5 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL6 (Bit 12)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL6 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL7 (Bit 14)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL7 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL8 (Bit 16)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL8 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL9 (Bit 18)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL9 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_Pos (20UL) /*!< GPIO_PUP_PDN_CNTRL10 (Bit 20)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_Msk (0x300000UL) /*!< GPIO_PUP_PDN_CNTRL10 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_Pos (22UL) /*!< GPIO_PUP_PDN_CNTRL11 (Bit 22)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_Msk (0xc00000UL) /*!< GPIO_PUP_PDN_CNTRL11 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_Pos (24UL) /*!< GPIO_PUP_PDN_CNTRL12 (Bit 24)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_Msk (0x3000000UL) /*!< GPIO_PUP_PDN_CNTRL12 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_Pos (26UL) /*!< GPIO_PUP_PDN_CNTRL13 (Bit 26)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_Msk (0xc000000UL) /*!< GPIO_PUP_PDN_CNTRL13 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_Pos (28UL) /*!< GPIO_PUP_PDN_CNTRL14 (Bit 28)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_Msk (0x30000000UL) /*!< GPIO_PUP_PDN_CNTRL14 (Bitfield-Mask: 0x03)   */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_Pos (30UL) /*!< GPIO_PUP_PDN_CNTRL15 (Bit 30)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_Msk (0xc0000000UL) /*!< GPIO_PUP_PDN_CNTRL15 (Bitfield-Mask: 0x03)   */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG1  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_Pos (0UL) /*!< GPIO_PUP_PDN_CNTRL16 (Bit 0)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL16 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_Pos (2UL) /*!< GPIO_PUP_PDN_CNTRL17 (Bit 2)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL17 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_Pos (4UL) /*!< GPIO_PUP_PDN_CNTRL18 (Bit 4)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL18 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_Pos (6UL) /*!< GPIO_PUP_PDN_CNTRL19 (Bit 6)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL19 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_Pos (8UL) /*!< GPIO_PUP_PDN_CNTRL20 (Bit 8)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL20 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL21 (Bit 10)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL21 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL22 (Bit 12)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL22 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL23 (Bit 14)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL23 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL24 (Bit 16)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL24 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL25 (Bit 18)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL25 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_Pos (20UL) /*!< GPIO_PUP_PDN_CNTRL26 (Bit 20)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_Msk (0x300000UL) /*!< GPIO_PUP_PDN_CNTRL26 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_Pos (22UL) /*!< GPIO_PUP_PDN_CNTRL27 (Bit 22)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_Msk (0xc00000UL) /*!< GPIO_PUP_PDN_CNTRL27 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_Pos (24UL) /*!< GPIO_PUP_PDN_CNTRL28 (Bit 24)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_Msk (0x3000000UL) /*!< GPIO_PUP_PDN_CNTRL28 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_Pos (26UL) /*!< GPIO_PUP_PDN_CNTRL29 (Bit 26)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_Msk (0xc000000UL) /*!< GPIO_PUP_PDN_CNTRL29 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_Pos (28UL) /*!< GPIO_PUP_PDN_CNTRL30 (Bit 28)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_Msk (0x30000000UL) /*!< GPIO_PUP_PDN_CNTRL30 (Bitfield-Mask: 0x03)   */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_Pos (30UL) /*!< GPIO_PUP_PDN_CNTRL31 (Bit 30)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_Msk (0xc0000000UL) /*!< GPIO_PUP_PDN_CNTRL31 (Bitfield-Mask: 0x03)   */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG2  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_Pos (0UL) /*!< GPIO_PUP_PDN_CNTRL32 (Bit 0)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL32 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_Pos (2UL) /*!< GPIO_PUP_PDN_CNTRL33 (Bit 2)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL33 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_Pos (4UL) /*!< GPIO_PUP_PDN_CNTRL34 (Bit 4)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL34 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_Pos (6UL) /*!< GPIO_PUP_PDN_CNTRL35 (Bit 6)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL35 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_Pos (8UL) /*!< GPIO_PUP_PDN_CNTRL36 (Bit 8)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL36 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL37 (Bit 10)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL37 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_Pos (12UL) /*!< GPIO_PUP_PDN_CNTRL38 (Bit 12)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_Msk (0x3000UL) /*!< GPIO_PUP_PDN_CNTRL38 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_Pos (14UL) /*!< GPIO_PUP_PDN_CNTRL39 (Bit 14)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_Msk (0xc000UL) /*!< GPIO_PUP_PDN_CNTRL39 (Bitfield-Mask: 0x03)       */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_Pos (16UL) /*!< GPIO_PUP_PDN_CNTRL40 (Bit 16)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_Msk (0x30000UL) /*!< GPIO_PUP_PDN_CNTRL40 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_Pos (18UL) /*!< GPIO_PUP_PDN_CNTRL41 (Bit 18)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_Msk (0xc0000UL) /*!< GPIO_PUP_PDN_CNTRL41 (Bitfield-Mask: 0x03)      */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_Pos (20UL) /*!< GPIO_PUP_PDN_CNTRL42 (Bit 20)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_Msk (0x300000UL) /*!< GPIO_PUP_PDN_CNTRL42 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_Pos (22UL) /*!< GPIO_PUP_PDN_CNTRL43 (Bit 22)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_Msk (0xc00000UL) /*!< GPIO_PUP_PDN_CNTRL43 (Bitfield-Mask: 0x03)     */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_Pos (24UL) /*!< GPIO_PUP_PDN_CNTRL44 (Bit 24)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_Msk (0x3000000UL) /*!< GPIO_PUP_PDN_CNTRL44 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_Pos (26UL) /*!< GPIO_PUP_PDN_CNTRL45 (Bit 26)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_Msk (0xc000000UL) /*!< GPIO_PUP_PDN_CNTRL45 (Bitfield-Mask: 0x03)    */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_Pos (28UL) /*!< GPIO_PUP_PDN_CNTRL46 (Bit 28)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_Msk (0x30000000UL) /*!< GPIO_PUP_PDN_CNTRL46 (Bitfield-Mask: 0x03)   */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_Pos (30UL) /*!< GPIO_PUP_PDN_CNTRL47 (Bit 30)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_Msk (0xc0000000UL) /*!< GPIO_PUP_PDN_CNTRL47 (Bitfield-Mask: 0x03)   */
/* ================================================  GPIO_PUP_PDN_CNTRL_REG3  ================================================ */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_Pos (0UL) /*!< GPIO_PUP_PDN_CNTRL48 (Bit 0)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_Msk (0x3UL) /*!< GPIO_PUP_PDN_CNTRL48 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_Pos (2UL) /*!< GPIO_PUP_PDN_CNTRL49 (Bit 2)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_Msk (0xcUL) /*!< GPIO_PUP_PDN_CNTRL49 (Bitfield-Mask: 0x03)          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_Pos (4UL) /*!< GPIO_PUP_PDN_CNTRL50 (Bit 4)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_Msk (0x30UL) /*!< GPIO_PUP_PDN_CNTRL50 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_Pos (6UL) /*!< GPIO_PUP_PDN_CNTRL51 (Bit 6)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_Msk (0xc0UL) /*!< GPIO_PUP_PDN_CNTRL51 (Bitfield-Mask: 0x03)         */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_Pos (8UL) /*!< GPIO_PUP_PDN_CNTRL52 (Bit 8)                          */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_Msk (0x300UL) /*!< GPIO_PUP_PDN_CNTRL52 (Bitfield-Mask: 0x03)        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_Pos (10UL) /*!< GPIO_PUP_PDN_CNTRL53 (Bit 10)                        */
#define GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_Msk (0xc00UL) /*!< GPIO_PUP_PDN_CNTRL53 (Bitfield-Mask: 0x03)        */


/* =========================================================================================================================== */
/* ================                                          SYSTMR                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define SYSTMR_CS_M3_Pos                  (3UL)                     /*!< M3 (Bit 3)                                            */
#define SYSTMR_CS_M3_Msk                  (0x8UL)                   /*!< M3 (Bitfield-Mask: 0x01)                              */
#define SYSTMR_CS_M2_Pos                  (2UL)                     /*!< M2 (Bit 2)                                            */
#define SYSTMR_CS_M2_Msk                  (0x4UL)                   /*!< M2 (Bitfield-Mask: 0x01)                              */
#define SYSTMR_CS_M1_Pos                  (1UL)                     /*!< M1 (Bit 1)                                            */
#define SYSTMR_CS_M1_Msk                  (0x2UL)                   /*!< M1 (Bitfield-Mask: 0x01)                              */
#define SYSTMR_CS_M0_Pos                  (0UL)                     /*!< M0 (Bit 0)                                            */
#define SYSTMR_CS_M0_Msk                  (0x1UL)                   /*!< M0 (Bitfield-Mask: 0x01)                              */
/* ==========================================================  CLO  ========================================================== */
/* ==========================================================  CHI  ========================================================== */
/* ==========================================================  C0  =========================================================== */
/* ==========================================================  C1  =========================================================== */
/* ==========================================================  C2  =========================================================== */
/* ==========================================================  C3  =========================================================== */


/* =========================================================================================================================== */
/* ================                                      ARM_UART_PL011                                       ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
#define ARM_UART_PL011_DR_DATA_Pos        (0UL)                     /*!< DATA (Bit 0)                                          */
#define ARM_UART_PL011_DR_DATA_Msk        (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
#define ARM_UART_PL011_DR_FE_Pos          (8UL)                     /*!< FE (Bit 8)                                            */
#define ARM_UART_PL011_DR_FE_Msk          (0x100UL)                 /*!< FE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_DR_PE_Pos          (9UL)                     /*!< PE (Bit 9)                                            */
#define ARM_UART_PL011_DR_PE_Msk          (0x200UL)                 /*!< PE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_DR_BE_Pos          (10UL)                    /*!< BE (Bit 10)                                           */
#define ARM_UART_PL011_DR_BE_Msk          (0x400UL)                 /*!< BE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_DR_OE_Pos          (11UL)                    /*!< OE (Bit 11)                                           */
#define ARM_UART_PL011_DR_OE_Msk          (0x800UL)                 /*!< OE (Bitfield-Mask: 0x01)                              */
/* ==========================================================  RSR  ========================================================== */
#define ARM_UART_PL011_RSR_FE_Pos         (0UL)                     /*!< FE (Bit 0)                                            */
#define ARM_UART_PL011_RSR_FE_Msk         (0x1UL)                   /*!< FE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_RSR_PE_Pos         (1UL)                     /*!< PE (Bit 1)                                            */
#define ARM_UART_PL011_RSR_PE_Msk         (0x2UL)                   /*!< PE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_RSR_BE_Pos         (2UL)                     /*!< BE (Bit 2)                                            */
#define ARM_UART_PL011_RSR_BE_Msk         (0x4UL)                   /*!< BE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_RSR_OE_Pos         (3UL)                     /*!< OE (Bit 3)                                            */
#define ARM_UART_PL011_RSR_OE_Msk         (0x8UL)                   /*!< OE (Bitfield-Mask: 0x01)                              */
/* ==========================================================  ECR  ========================================================== */
#define ARM_UART_PL011_ECR_FE_Pos         (0UL)                     /*!< FE (Bit 0)                                            */
#define ARM_UART_PL011_ECR_FE_Msk         (0x1UL)                   /*!< FE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_ECR_PE_Pos         (1UL)                     /*!< PE (Bit 1)                                            */
#define ARM_UART_PL011_ECR_PE_Msk         (0x2UL)                   /*!< PE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_ECR_BE_Pos         (2UL)                     /*!< BE (Bit 2)                                            */
#define ARM_UART_PL011_ECR_BE_Msk         (0x4UL)                   /*!< BE (Bitfield-Mask: 0x01)                              */
#define ARM_UART_PL011_ECR_OE_Pos         (3UL)                     /*!< OE (Bit 3)                                            */
#define ARM_UART_PL011_ECR_OE_Msk         (0x8UL)                   /*!< OE (Bitfield-Mask: 0x01)                              */
/* ==========================================================  FR  =========================================================== */
#define ARM_UART_PL011_FR_CTS_Pos         (0UL)                     /*!< CTS (Bit 0)                                           */
#define ARM_UART_PL011_FR_CTS_Msk         (0x1UL)                   /*!< CTS (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_FR_DSR_Pos         (1UL)                     /*!< DSR (Bit 1)                                           */
#define ARM_UART_PL011_FR_DSR_Msk         (0x2UL)                   /*!< DSR (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_FR_DCD_Pos         (2UL)                     /*!< DCD (Bit 2)                                           */
#define ARM_UART_PL011_FR_DCD_Msk         (0x4UL)                   /*!< DCD (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_FR_BUSY_Pos        (3UL)                     /*!< BUSY (Bit 3)                                          */
#define ARM_UART_PL011_FR_BUSY_Msk        (0x8UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_RXFE_Pos        (4UL)                     /*!< RXFE (Bit 4)                                          */
#define ARM_UART_PL011_FR_RXFE_Msk        (0x10UL)                  /*!< RXFE (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_TXFF_Pos        (5UL)                     /*!< TXFF (Bit 5)                                          */
#define ARM_UART_PL011_FR_TXFF_Msk        (0x20UL)                  /*!< TXFF (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_RXFF_Pos        (6UL)                     /*!< RXFF (Bit 6)                                          */
#define ARM_UART_PL011_FR_RXFF_Msk        (0x40UL)                  /*!< RXFF (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_TXFE_Pos        (7UL)                     /*!< TXFE (Bit 7)                                          */
#define ARM_UART_PL011_FR_TXFE_Msk        (0x80UL)                  /*!< TXFE (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_FR_RI_Pos          (8UL)                     /*!< RI (Bit 8)                                            */
#define ARM_UART_PL011_FR_RI_Msk          (0x100UL)                 /*!< RI (Bitfield-Mask: 0x01)                              */
/* =========================================================  IBRD  ========================================================== */
#define ARM_UART_PL011_IBRD_BAUDDIVINT_Pos (0UL)                    /*!< BAUDDIVINT (Bit 0)                                    */
#define ARM_UART_PL011_IBRD_BAUDDIVINT_Msk (0xffffUL)               /*!< BAUDDIVINT (Bitfield-Mask: 0xffff)                    */
/* =========================================================  FBRD  ========================================================== */
#define ARM_UART_PL011_FBRD_BAUDDIVFRAC_Pos (0UL)                   /*!< BAUDDIVFRAC (Bit 0)                                   */
#define ARM_UART_PL011_FBRD_BAUDDIVFRAC_Msk (0x3fUL)                /*!< BAUDDIVFRAC (Bitfield-Mask: 0x3f)                     */
/* =========================================================  LCR_H  ========================================================= */
#define ARM_UART_PL011_LCR_H_BRK_Pos      (0UL)                     /*!< BRK (Bit 0)                                           */
#define ARM_UART_PL011_LCR_H_BRK_Msk      (0x1UL)                   /*!< BRK (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_PEN_Pos      (1UL)                     /*!< PEN (Bit 1)                                           */
#define ARM_UART_PL011_LCR_H_PEN_Msk      (0x2UL)                   /*!< PEN (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_EPS_Pos      (2UL)                     /*!< EPS (Bit 2)                                           */
#define ARM_UART_PL011_LCR_H_EPS_Msk      (0x4UL)                   /*!< EPS (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_STP2_Pos     (3UL)                     /*!< STP2 (Bit 3)                                          */
#define ARM_UART_PL011_LCR_H_STP2_Msk     (0x8UL)                   /*!< STP2 (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_LCR_H_FEN_Pos      (4UL)                     /*!< FEN (Bit 4)                                           */
#define ARM_UART_PL011_LCR_H_FEN_Msk      (0x10UL)                  /*!< FEN (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_LCR_H_WLEN_Pos     (5UL)                     /*!< WLEN (Bit 5)                                          */
#define ARM_UART_PL011_LCR_H_WLEN_Msk     (0x60UL)                  /*!< WLEN (Bitfield-Mask: 0x03)                            */
#define ARM_UART_PL011_LCR_H_SPS_Pos      (7UL)                     /*!< SPS (Bit 7)                                           */
#define ARM_UART_PL011_LCR_H_SPS_Msk      (0x80UL)                  /*!< SPS (Bitfield-Mask: 0x01)                             */
/* ==========================================================  CR  =========================================================== */
#define ARM_UART_PL011_CR_UARTEN_Pos      (0UL)                     /*!< UARTEN (Bit 0)                                        */
#define ARM_UART_PL011_CR_UARTEN_Msk      (0x1UL)                   /*!< UARTEN (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_CR_SIREN_Pos       (1UL)                     /*!< SIREN (Bit 1)                                         */
#define ARM_UART_PL011_CR_SIREN_Msk       (0x2UL)                   /*!< SIREN (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_CR_SIRLP_Pos       (2UL)                     /*!< SIRLP (Bit 2)                                         */
#define ARM_UART_PL011_CR_SIRLP_Msk       (0x4UL)                   /*!< SIRLP (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_CR_TXE_Pos         (8UL)                     /*!< TXE (Bit 8)                                           */
#define ARM_UART_PL011_CR_TXE_Msk         (0x100UL)                 /*!< TXE (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_RXE_Pos         (9UL)                     /*!< RXE (Bit 9)                                           */
#define ARM_UART_PL011_CR_RXE_Msk         (0x200UL)                 /*!< RXE (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_DTR_Pos         (10UL)                    /*!< DTR (Bit 10)                                          */
#define ARM_UART_PL011_CR_DTR_Msk         (0x400UL)                 /*!< DTR (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_RTS_Pos         (11UL)                    /*!< RTS (Bit 11)                                          */
#define ARM_UART_PL011_CR_RTS_Msk         (0x800UL)                 /*!< RTS (Bitfield-Mask: 0x01)                             */
#define ARM_UART_PL011_CR_RTSEN_Pos       (14UL)                    /*!< RTSEN (Bit 14)                                        */
#define ARM_UART_PL011_CR_RTSEN_Msk       (0x4000UL)                /*!< RTSEN (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_CR_CTSEN_Pos       (15UL)                    /*!< CTSEN (Bit 15)                                        */
#define ARM_UART_PL011_CR_CTSEN_Msk       (0x8000UL)                /*!< CTSEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  IFLS  ========================================================== */
#define ARM_UART_PL011_IFLS_TXIFLSEL_Pos  (0UL)                     /*!< TXIFLSEL (Bit 0)                                      */
#define ARM_UART_PL011_IFLS_TXIFLSEL_Msk  (0x7UL)                   /*!< TXIFLSEL (Bitfield-Mask: 0x07)                        */
#define ARM_UART_PL011_IFLS_RXIFLSEL_Pos  (3UL)                     /*!< RXIFLSEL (Bit 3)                                      */
#define ARM_UART_PL011_IFLS_RXIFLSEL_Msk  (0x38UL)                  /*!< RXIFLSEL (Bitfield-Mask: 0x07)                        */
/* =========================================================  IMSC  ========================================================== */
#define ARM_UART_PL011_IMSC_RIMIM_Pos     (0UL)                     /*!< RIMIM (Bit 0)                                         */
#define ARM_UART_PL011_IMSC_RIMIM_Msk     (0x1UL)                   /*!< RIMIM (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_IMSC_CTSMIM_Pos    (1UL)                     /*!< CTSMIM (Bit 1)                                        */
#define ARM_UART_PL011_IMSC_CTSMIM_Msk    (0x2UL)                   /*!< CTSMIM (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_IMSC_DCDMIM_Pos    (2UL)                     /*!< DCDMIM (Bit 2)                                        */
#define ARM_UART_PL011_IMSC_DCDMIM_Msk    (0x4UL)                   /*!< DCDMIM (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_IMSC_DSRMIM_Pos    (3UL)                     /*!< DSRMIM (Bit 3)                                        */
#define ARM_UART_PL011_IMSC_DSRMIM_Msk    (0x8UL)                   /*!< DSRMIM (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_IMSC_RXIM_Pos      (4UL)                     /*!< RXIM (Bit 4)                                          */
#define ARM_UART_PL011_IMSC_RXIM_Msk      (0x10UL)                  /*!< RXIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_TXIM_Pos      (5UL)                     /*!< TXIM (Bit 5)                                          */
#define ARM_UART_PL011_IMSC_TXIM_Msk      (0x20UL)                  /*!< TXIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_RTIM_Pos      (6UL)                     /*!< RTIM (Bit 6)                                          */
#define ARM_UART_PL011_IMSC_RTIM_Msk      (0x40UL)                  /*!< RTIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_FEIM_Pos      (7UL)                     /*!< FEIM (Bit 7)                                          */
#define ARM_UART_PL011_IMSC_FEIM_Msk      (0x80UL)                  /*!< FEIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_PEIM_Pos      (8UL)                     /*!< PEIM (Bit 8)                                          */
#define ARM_UART_PL011_IMSC_PEIM_Msk      (0x100UL)                 /*!< PEIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_BEIM_Pos      (9UL)                     /*!< BEIM (Bit 9)                                          */
#define ARM_UART_PL011_IMSC_BEIM_Msk      (0x200UL)                 /*!< BEIM (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_IMSC_OEIM_Pos      (10UL)                    /*!< OEIM (Bit 10)                                         */
#define ARM_UART_PL011_IMSC_OEIM_Msk      (0x400UL)                 /*!< OEIM (Bitfield-Mask: 0x01)                            */
/* ==========================================================  RIS  ========================================================== */
#define ARM_UART_PL011_RIS_RIRMIS_Pos     (0UL)                     /*!< RIRMIS (Bit 0)                                        */
#define ARM_UART_PL011_RIS_RIRMIS_Msk     (0x1UL)                   /*!< RIRMIS (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_RIS_CTSRMIS_Pos    (1UL)                     /*!< CTSRMIS (Bit 1)                                       */
#define ARM_UART_PL011_RIS_CTSRMIS_Msk    (0x2UL)                   /*!< CTSRMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_RIS_DCDRMIS_Pos    (2UL)                     /*!< DCDRMIS (Bit 2)                                       */
#define ARM_UART_PL011_RIS_DCDRMIS_Msk    (0x4UL)                   /*!< DCDRMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_RIS_DSRRMIS_Pos    (3UL)                     /*!< DSRRMIS (Bit 3)                                       */
#define ARM_UART_PL011_RIS_DSRRMIS_Msk    (0x8UL)                   /*!< DSRRMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_RIS_RXRIS_Pos      (4UL)                     /*!< RXRIS (Bit 4)                                         */
#define ARM_UART_PL011_RIS_RXRIS_Msk      (0x10UL)                  /*!< RXRIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_TXRIS_Pos      (5UL)                     /*!< TXRIS (Bit 5)                                         */
#define ARM_UART_PL011_RIS_TXRIS_Msk      (0x20UL)                  /*!< TXRIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_RTRIS_Pos      (6UL)                     /*!< RTRIS (Bit 6)                                         */
#define ARM_UART_PL011_RIS_RTRIS_Msk      (0x40UL)                  /*!< RTRIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_FERIS_Pos      (7UL)                     /*!< FERIS (Bit 7)                                         */
#define ARM_UART_PL011_RIS_FERIS_Msk      (0x80UL)                  /*!< FERIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_PERIS_Pos      (8UL)                     /*!< PERIS (Bit 8)                                         */
#define ARM_UART_PL011_RIS_PERIS_Msk      (0x100UL)                 /*!< PERIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_BERIS_Pos      (9UL)                     /*!< BERIS (Bit 9)                                         */
#define ARM_UART_PL011_RIS_BERIS_Msk      (0x200UL)                 /*!< BERIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_RIS_OERIS_Pos      (10UL)                    /*!< OERIS (Bit 10)                                        */
#define ARM_UART_PL011_RIS_OERIS_Msk      (0x400UL)                 /*!< OERIS (Bitfield-Mask: 0x01)                           */
/* ==========================================================  MIS  ========================================================== */
#define ARM_UART_PL011_MIS_RIMMIS_Pos     (0UL)                     /*!< RIMMIS (Bit 0)                                        */
#define ARM_UART_PL011_MIS_RIMMIS_Msk     (0x1UL)                   /*!< RIMMIS (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_MIS_CTSMMIS_Pos    (1UL)                     /*!< CTSMMIS (Bit 1)                                       */
#define ARM_UART_PL011_MIS_CTSMMIS_Msk    (0x2UL)                   /*!< CTSMMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_MIS_DCDMMIS_Pos    (2UL)                     /*!< DCDMMIS (Bit 2)                                       */
#define ARM_UART_PL011_MIS_DCDMMIS_Msk    (0x4UL)                   /*!< DCDMMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_MIS_DSRMMIS_Pos    (3UL)                     /*!< DSRMMIS (Bit 3)                                       */
#define ARM_UART_PL011_MIS_DSRMMIS_Msk    (0x8UL)                   /*!< DSRMMIS (Bitfield-Mask: 0x01)                         */
#define ARM_UART_PL011_MIS_RXMIS_Pos      (4UL)                     /*!< RXMIS (Bit 4)                                         */
#define ARM_UART_PL011_MIS_RXMIS_Msk      (0x10UL)                  /*!< RXMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_TXMIS_Pos      (5UL)                     /*!< TXMIS (Bit 5)                                         */
#define ARM_UART_PL011_MIS_TXMIS_Msk      (0x20UL)                  /*!< TXMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_RTMIS_Pos      (6UL)                     /*!< RTMIS (Bit 6)                                         */
#define ARM_UART_PL011_MIS_RTMIS_Msk      (0x40UL)                  /*!< RTMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_FEMIS_Pos      (7UL)                     /*!< FEMIS (Bit 7)                                         */
#define ARM_UART_PL011_MIS_FEMIS_Msk      (0x80UL)                  /*!< FEMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_PEMIS_Pos      (8UL)                     /*!< PEMIS (Bit 8)                                         */
#define ARM_UART_PL011_MIS_PEMIS_Msk      (0x100UL)                 /*!< PEMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_BEMIS_Pos      (9UL)                     /*!< BEMIS (Bit 9)                                         */
#define ARM_UART_PL011_MIS_BEMIS_Msk      (0x200UL)                 /*!< BEMIS (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_MIS_OEMIS_Pos      (10UL)                    /*!< OEMIS (Bit 10)                                        */
#define ARM_UART_PL011_MIS_OEMIS_Msk      (0x400UL)                 /*!< OEMIS (Bitfield-Mask: 0x01)                           */
/* ==========================================================  ICR  ========================================================== */
#define ARM_UART_PL011_ICR_RIMIC_Pos      (0UL)                     /*!< RIMIC (Bit 0)                                         */
#define ARM_UART_PL011_ICR_RIMIC_Msk      (0x1UL)                   /*!< RIMIC (Bitfield-Mask: 0x01)                           */
#define ARM_UART_PL011_ICR_CTSMIC_Pos     (1UL)                     /*!< CTSMIC (Bit 1)                                        */
#define ARM_UART_PL011_ICR_CTSMIC_Msk     (0x2UL)                   /*!< CTSMIC (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_ICR_DCDMIC_Pos     (2UL)                     /*!< DCDMIC (Bit 2)                                        */
#define ARM_UART_PL011_ICR_DCDMIC_Msk     (0x4UL)                   /*!< DCDMIC (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_ICR_DSRMIC_Pos     (3UL)                     /*!< DSRMIC (Bit 3)                                        */
#define ARM_UART_PL011_ICR_DSRMIC_Msk     (0x8UL)                   /*!< DSRMIC (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_ICR_RXIC_Pos       (4UL)                     /*!< RXIC (Bit 4)                                          */
#define ARM_UART_PL011_ICR_RXIC_Msk       (0x10UL)                  /*!< RXIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_TXIC_Pos       (5UL)                     /*!< TXIC (Bit 5)                                          */
#define ARM_UART_PL011_ICR_TXIC_Msk       (0x20UL)                  /*!< TXIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_RTIC_Pos       (6UL)                     /*!< RTIC (Bit 6)                                          */
#define ARM_UART_PL011_ICR_RTIC_Msk       (0x40UL)                  /*!< RTIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_FEIC_Pos       (7UL)                     /*!< FEIC (Bit 7)                                          */
#define ARM_UART_PL011_ICR_FEIC_Msk       (0x80UL)                  /*!< FEIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_PEIC_Pos       (8UL)                     /*!< PEIC (Bit 8)                                          */
#define ARM_UART_PL011_ICR_PEIC_Msk       (0x100UL)                 /*!< PEIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_BEIC_Pos       (9UL)                     /*!< BEIC (Bit 9)                                          */
#define ARM_UART_PL011_ICR_BEIC_Msk       (0x200UL)                 /*!< BEIC (Bitfield-Mask: 0x01)                            */
#define ARM_UART_PL011_ICR_OEIC_Pos       (10UL)                    /*!< OEIC (Bit 10)                                         */
#define ARM_UART_PL011_ICR_OEIC_Msk       (0x400UL)                 /*!< OEIC (Bitfield-Mask: 0x01)                            */
/* =========================================================  DMACR  ========================================================= */
#define ARM_UART_PL011_DMACR_RXDMAE_Pos   (0UL)                     /*!< RXDMAE (Bit 0)                                        */
#define ARM_UART_PL011_DMACR_RXDMAE_Msk   (0x1UL)                   /*!< RXDMAE (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_DMACR_TXDMAE_Pos   (1UL)                     /*!< TXDMAE (Bit 1)                                        */
#define ARM_UART_PL011_DMACR_TXDMAE_Msk   (0x2UL)                   /*!< TXDMAE (Bitfield-Mask: 0x01)                          */
#define ARM_UART_PL011_DMACR_DMAONERR_Pos (2UL)                     /*!< DMAONERR (Bit 2)                                      */
#define ARM_UART_PL011_DMACR_DMAONERR_Msk (0x4UL)                   /*!< DMAONERR (Bitfield-Mask: 0x01)                        */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
#define SPI0_CS_LEN_LONG_Pos              (25UL)                    /*!< LEN_LONG (Bit 25)                                     */
#define SPI0_CS_LEN_LONG_Msk              (0x2000000UL)             /*!< LEN_LONG (Bitfield-Mask: 0x01)                        */
#define SPI0_CS_DMA_LEN_Pos               (24UL)                    /*!< DMA_LEN (Bit 24)                                      */
#define SPI0_CS_DMA_LEN_Msk               (0x1000000UL)             /*!< DMA_LEN (Bitfield-Mask: 0x01)                         */
#define SPI0_CS_CSPOL2_Pos                (23UL)                    /*!< CSPOL2 (Bit 23)                                       */
#define SPI0_CS_CSPOL2_Msk                (0x800000UL)              /*!< CSPOL2 (Bitfield-Mask: 0x01)                          */
#define SPI0_CS_CSPOL1_Pos                (22UL)                    /*!< CSPOL1 (Bit 22)                                       */
#define SPI0_CS_CSPOL1_Msk                (0x400000UL)              /*!< CSPOL1 (Bitfield-Mask: 0x01)                          */
#define SPI0_CS_CSPOL0_Pos                (21UL)                    /*!< CSPOL0 (Bit 21)                                       */
#define SPI0_CS_CSPOL0_Msk                (0x200000UL)              /*!< CSPOL0 (Bitfield-Mask: 0x01)                          */
#define SPI0_CS_RXF_Pos                   (20UL)                    /*!< RXF (Bit 20)                                          */
#define SPI0_CS_RXF_Msk                   (0x100000UL)              /*!< RXF (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_RXR_Pos                   (19UL)                    /*!< RXR (Bit 19)                                          */
#define SPI0_CS_RXR_Msk                   (0x80000UL)               /*!< RXR (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_TXD_Pos                   (18UL)                    /*!< TXD (Bit 18)                                          */
#define SPI0_CS_TXD_Msk                   (0x40000UL)               /*!< TXD (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_RXD_Pos                   (17UL)                    /*!< RXD (Bit 17)                                          */
#define SPI0_CS_RXD_Msk                   (0x20000UL)               /*!< RXD (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_DONE_Pos                  (16UL)                    /*!< DONE (Bit 16)                                         */
#define SPI0_CS_DONE_Msk                  (0x10000UL)               /*!< DONE (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_TE_EN_Pos                 (15UL)                    /*!< TE_EN (Bit 15)                                        */
#define SPI0_CS_TE_EN_Msk                 (0x8000UL)                /*!< TE_EN (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_LMONO_Pos                 (14UL)                    /*!< LMONO (Bit 14)                                        */
#define SPI0_CS_LMONO_Msk                 (0x4000UL)                /*!< LMONO (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_LEN_Pos                   (13UL)                    /*!< LEN (Bit 13)                                          */
#define SPI0_CS_LEN_Msk                   (0x2000UL)                /*!< LEN (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_REN_Pos                   (12UL)                    /*!< REN (Bit 12)                                          */
#define SPI0_CS_REN_Msk                   (0x1000UL)                /*!< REN (Bitfield-Mask: 0x01)                             */
#define SPI0_CS_ADCS_Pos                  (11UL)                    /*!< ADCS (Bit 11)                                         */
#define SPI0_CS_ADCS_Msk                  (0x800UL)                 /*!< ADCS (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_INTR_Pos                  (10UL)                    /*!< INTR (Bit 10)                                         */
#define SPI0_CS_INTR_Msk                  (0x400UL)                 /*!< INTR (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_INTD_Pos                  (9UL)                     /*!< INTD (Bit 9)                                          */
#define SPI0_CS_INTD_Msk                  (0x200UL)                 /*!< INTD (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_DMAEN_Pos                 (8UL)                     /*!< DMAEN (Bit 8)                                         */
#define SPI0_CS_DMAEN_Msk                 (0x100UL)                 /*!< DMAEN (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_TA_Pos                    (7UL)                     /*!< TA (Bit 7)                                            */
#define SPI0_CS_TA_Msk                    (0x80UL)                  /*!< TA (Bitfield-Mask: 0x01)                              */
#define SPI0_CS_CSPOL_Pos                 (6UL)                     /*!< CSPOL (Bit 6)                                         */
#define SPI0_CS_CSPOL_Msk                 (0x40UL)                  /*!< CSPOL (Bitfield-Mask: 0x01)                           */
#define SPI0_CS_CLEAR_Pos                 (4UL)                     /*!< CLEAR (Bit 4)                                         */
#define SPI0_CS_CLEAR_Msk                 (0x30UL)                  /*!< CLEAR (Bitfield-Mask: 0x03)                           */
#define SPI0_CS_CPOL_Pos                  (3UL)                     /*!< CPOL (Bit 3)                                          */
#define SPI0_CS_CPOL_Msk                  (0x8UL)                   /*!< CPOL (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_CPHA_Pos                  (2UL)                     /*!< CPHA (Bit 2)                                          */
#define SPI0_CS_CPHA_Msk                  (0x4UL)                   /*!< CPHA (Bitfield-Mask: 0x01)                            */
#define SPI0_CS_CS_Pos                    (0UL)                     /*!< CS (Bit 0)                                            */
#define SPI0_CS_CS_Msk                    (0x3UL)                   /*!< CS (Bitfield-Mask: 0x03)                              */
/* =========================================================  FIFO  ========================================================== */
#define SPI0_FIFO_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI0_FIFO_DATA_Msk                (0xffffffffUL)            /*!< DATA (Bitfield-Mask: 0xffffffff)                      */
/* ==========================================================  CLK  ========================================================== */
#define SPI0_CLK_CDIV_Pos                 (0UL)                     /*!< CDIV (Bit 0)                                          */
#define SPI0_CLK_CDIV_Msk                 (0xffffUL)                /*!< CDIV (Bitfield-Mask: 0xffff)                          */
/* =========================================================  DLEN  ========================================================== */
#define SPI0_DLEN_DLEN_Pos                (0UL)                     /*!< DLEN (Bit 0)                                          */
#define SPI0_DLEN_DLEN_Msk                (0xffffUL)                /*!< DLEN (Bitfield-Mask: 0xffff)                          */
/* =========================================================  LTOH  ========================================================== */
#define SPI0_LTOH_TOH_Pos                 (0UL)                     /*!< TOH (Bit 0)                                           */
#define SPI0_LTOH_TOH_Msk                 (0xfUL)                   /*!< TOH (Bitfield-Mask: 0x0f)                             */
/* ==========================================================  DC  =========================================================== */
#define SPI0_DC_RPANIC_Pos                (24UL)                    /*!< RPANIC (Bit 24)                                       */
#define SPI0_DC_RPANIC_Msk                (0xff000000UL)            /*!< RPANIC (Bitfield-Mask: 0xff)                          */
#define SPI0_DC_RDREQ_Pos                 (16UL)                    /*!< RDREQ (Bit 16)                                        */
#define SPI0_DC_RDREQ_Msk                 (0xff0000UL)              /*!< RDREQ (Bitfield-Mask: 0xff)                           */
#define SPI0_DC_TPANIC_Pos                (8UL)                     /*!< TPANIC (Bit 8)                                        */
#define SPI0_DC_TPANIC_Msk                (0xff00UL)                /*!< TPANIC (Bitfield-Mask: 0xff)                          */
#define SPI0_DC_TDREQ_Pos                 (0UL)                     /*!< TDREQ (Bit 0)                                         */
#define SPI0_DC_TDREQ_Msk                 (0xffUL)                  /*!< TDREQ (Bitfield-Mask: 0xff)                           */


/* =========================================================================================================================== */
/* ================                                           BSC0                                            ================ */
/* =========================================================================================================================== */

/* ===========================================================  C  =========================================================== */
#define BSC0_C_I2CEN_Pos                  (15UL)                    /*!< I2CEN (Bit 15)                                        */
#define BSC0_C_I2CEN_Msk                  (0x8000UL)                /*!< I2CEN (Bitfield-Mask: 0x01)                           */
#define BSC0_C_INTR_Pos                   (10UL)                    /*!< INTR (Bit 10)                                         */
#define BSC0_C_INTR_Msk                   (0x400UL)                 /*!< INTR (Bitfield-Mask: 0x01)                            */
#define BSC0_C_INTT_Pos                   (9UL)                     /*!< INTT (Bit 9)                                          */
#define BSC0_C_INTT_Msk                   (0x200UL)                 /*!< INTT (Bitfield-Mask: 0x01)                            */
#define BSC0_C_INTD_Pos                   (8UL)                     /*!< INTD (Bit 8)                                          */
#define BSC0_C_INTD_Msk                   (0x100UL)                 /*!< INTD (Bitfield-Mask: 0x01)                            */
#define BSC0_C_ST_Pos                     (7UL)                     /*!< ST (Bit 7)                                            */
#define BSC0_C_ST_Msk                     (0x80UL)                  /*!< ST (Bitfield-Mask: 0x01)                              */
#define BSC0_C_CLEAR_Pos                  (4UL)                     /*!< CLEAR (Bit 4)                                         */
#define BSC0_C_CLEAR_Msk                  (0x30UL)                  /*!< CLEAR (Bitfield-Mask: 0x03)                           */
#define BSC0_C_READ_Pos                   (0UL)                     /*!< READ (Bit 0)                                          */
#define BSC0_C_READ_Msk                   (0x1UL)                   /*!< READ (Bitfield-Mask: 0x01)                            */
/* ===========================================================  S  =========================================================== */
#define BSC0_S_CLKT_Pos                   (9UL)                     /*!< CLKT (Bit 9)                                          */
#define BSC0_S_CLKT_Msk                   (0x200UL)                 /*!< CLKT (Bitfield-Mask: 0x01)                            */
#define BSC0_S_ERR_Pos                    (8UL)                     /*!< ERR (Bit 8)                                           */
#define BSC0_S_ERR_Msk                    (0x100UL)                 /*!< ERR (Bitfield-Mask: 0x01)                             */
#define BSC0_S_RXF_Pos                    (7UL)                     /*!< RXF (Bit 7)                                           */
#define BSC0_S_RXF_Msk                    (0x80UL)                  /*!< RXF (Bitfield-Mask: 0x01)                             */
#define BSC0_S_TXE_Pos                    (6UL)                     /*!< TXE (Bit 6)                                           */
#define BSC0_S_TXE_Msk                    (0x40UL)                  /*!< TXE (Bitfield-Mask: 0x01)                             */
#define BSC0_S_RXD_Pos                    (5UL)                     /*!< RXD (Bit 5)                                           */
#define BSC0_S_RXD_Msk                    (0x20UL)                  /*!< RXD (Bitfield-Mask: 0x01)                             */
#define BSC0_S_TXD_Pos                    (4UL)                     /*!< TXD (Bit 4)                                           */
#define BSC0_S_TXD_Msk                    (0x10UL)                  /*!< TXD (Bitfield-Mask: 0x01)                             */
#define BSC0_S_RXR_Pos                    (3UL)                     /*!< RXR (Bit 3)                                           */
#define BSC0_S_RXR_Msk                    (0x8UL)                   /*!< RXR (Bitfield-Mask: 0x01)                             */
#define BSC0_S_TXW_Pos                    (2UL)                     /*!< TXW (Bit 2)                                           */
#define BSC0_S_TXW_Msk                    (0x4UL)                   /*!< TXW (Bitfield-Mask: 0x01)                             */
#define BSC0_S_DONE_Pos                   (1UL)                     /*!< DONE (Bit 1)                                          */
#define BSC0_S_DONE_Msk                   (0x2UL)                   /*!< DONE (Bitfield-Mask: 0x01)                            */
#define BSC0_S_TA_Pos                     (0UL)                     /*!< TA (Bit 0)                                            */
#define BSC0_S_TA_Msk                     (0x1UL)                   /*!< TA (Bitfield-Mask: 0x01)                              */
/* =========================================================  DLEN  ========================================================== */
#define BSC0_DLEN_DLEN_Pos                (0UL)                     /*!< DLEN (Bit 0)                                          */
#define BSC0_DLEN_DLEN_Msk                (0xffffUL)                /*!< DLEN (Bitfield-Mask: 0xffff)                          */
/* ===========================================================  A  =========================================================== */
#define BSC0_A_ADDR_Pos                   (0UL)                     /*!< ADDR (Bit 0)                                          */
#define BSC0_A_ADDR_Msk                   (0x7fUL)                  /*!< ADDR (Bitfield-Mask: 0x7f)                            */
/* =========================================================  FIFO  ========================================================== */
#define BSC0_FIFO_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define BSC0_FIFO_DATA_Msk                (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  DIV  ========================================================== */
#define BSC0_DIV_CDIV_Pos                 (0UL)                     /*!< CDIV (Bit 0)                                          */
#define BSC0_DIV_CDIV_Msk                 (0xffffUL)                /*!< CDIV (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  DEL  ========================================================== */
#define BSC0_DEL_FEDL_Pos                 (16UL)                    /*!< FEDL (Bit 16)                                         */
#define BSC0_DEL_FEDL_Msk                 (0xffff0000UL)            /*!< FEDL (Bitfield-Mask: 0xffff)                          */
#define BSC0_DEL_REDL_Pos                 (0UL)                     /*!< REDL (Bit 0)                                          */
#define BSC0_DEL_REDL_Msk                 (0xffffUL)                /*!< REDL (Bitfield-Mask: 0xffff)                          */
/* =========================================================  CLKT  ========================================================== */
#define BSC0_CLKT_TOUT_Pos                (0UL)                     /*!< TOUT (Bit 0)                                          */
#define BSC0_CLKT_TOUT_Msk                (0xffffUL)                /*!< TOUT (Bitfield-Mask: 0xffff)                          */


/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
#define PWM0_CTL_MSEN2_Pos                (15UL)                    /*!< MSEN2 (Bit 15)                                        */
#define PWM0_CTL_MSEN2_Msk                (0x8000UL)                /*!< MSEN2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_USEF2_Pos                (13UL)                    /*!< USEF2 (Bit 13)                                        */
#define PWM0_CTL_USEF2_Msk                (0x2000UL)                /*!< USEF2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_POLA2_Pos                (12UL)                    /*!< POLA2 (Bit 12)                                        */
#define PWM0_CTL_POLA2_Msk                (0x1000UL)                /*!< POLA2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_SBIT2_Pos                (11UL)                    /*!< SBIT2 (Bit 11)                                        */
#define PWM0_CTL_SBIT2_Msk                (0x800UL)                 /*!< SBIT2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_RPTL2_Pos                (10UL)                    /*!< RPTL2 (Bit 10)                                        */
#define PWM0_CTL_RPTL2_Msk                (0x400UL)                 /*!< RPTL2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_MODE2_Pos                (9UL)                     /*!< MODE2 (Bit 9)                                         */
#define PWM0_CTL_MODE2_Msk                (0x200UL)                 /*!< MODE2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_PWEN2_Pos                (8UL)                     /*!< PWEN2 (Bit 8)                                         */
#define PWM0_CTL_PWEN2_Msk                (0x100UL)                 /*!< PWEN2 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_MSEN1_Pos                (7UL)                     /*!< MSEN1 (Bit 7)                                         */
#define PWM0_CTL_MSEN1_Msk                (0x80UL)                  /*!< MSEN1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_CLRF1_Pos                (6UL)                     /*!< CLRF1 (Bit 6)                                         */
#define PWM0_CTL_CLRF1_Msk                (0x40UL)                  /*!< CLRF1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_USEF1_Pos                (5UL)                     /*!< USEF1 (Bit 5)                                         */
#define PWM0_CTL_USEF1_Msk                (0x20UL)                  /*!< USEF1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_POLA1_Pos                (4UL)                     /*!< POLA1 (Bit 4)                                         */
#define PWM0_CTL_POLA1_Msk                (0x10UL)                  /*!< POLA1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_SBIT1_Pos                (3UL)                     /*!< SBIT1 (Bit 3)                                         */
#define PWM0_CTL_SBIT1_Msk                (0x8UL)                   /*!< SBIT1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_RPTL1_Pos                (2UL)                     /*!< RPTL1 (Bit 2)                                         */
#define PWM0_CTL_RPTL1_Msk                (0x4UL)                   /*!< RPTL1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_MODE1_Pos                (1UL)                     /*!< MODE1 (Bit 1)                                         */
#define PWM0_CTL_MODE1_Msk                (0x2UL)                   /*!< MODE1 (Bitfield-Mask: 0x01)                           */
#define PWM0_CTL_PWEN1_Pos                (0UL)                     /*!< PWEN1 (Bit 0)                                         */
#define PWM0_CTL_PWEN1_Msk                (0x1UL)                   /*!< PWEN1 (Bitfield-Mask: 0x01)                           */
/* ==========================================================  STA  ========================================================== */
#define PWM0_STA_STA4_Pos                 (12UL)                    /*!< STA4 (Bit 12)                                         */
#define PWM0_STA_STA4_Msk                 (0x1000UL)                /*!< STA4 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_STA3_Pos                 (11UL)                    /*!< STA3 (Bit 11)                                         */
#define PWM0_STA_STA3_Msk                 (0x800UL)                 /*!< STA3 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_STA2_Pos                 (10UL)                    /*!< STA2 (Bit 10)                                         */
#define PWM0_STA_STA2_Msk                 (0x400UL)                 /*!< STA2 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_STA1_Pos                 (9UL)                     /*!< STA1 (Bit 9)                                          */
#define PWM0_STA_STA1_Msk                 (0x200UL)                 /*!< STA1 (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_BERR_Pos                 (8UL)                     /*!< BERR (Bit 8)                                          */
#define PWM0_STA_BERR_Msk                 (0x100UL)                 /*!< BERR (Bitfield-Mask: 0x01)                            */
#define PWM0_STA_GAPO4_Pos                (7UL)                     /*!< GAPO4 (Bit 7)                                         */
#define PWM0_STA_GAPO4_Msk                (0x80UL)                  /*!< GAPO4 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_GAPO3_Pos                (6UL)                     /*!< GAPO3 (Bit 6)                                         */
#define PWM0_STA_GAPO3_Msk                (0x40UL)                  /*!< GAPO3 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_GAPO2_Pos                (5UL)                     /*!< GAPO2 (Bit 5)                                         */
#define PWM0_STA_GAPO2_Msk                (0x20UL)                  /*!< GAPO2 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_GAPO1_Pos                (4UL)                     /*!< GAPO1 (Bit 4)                                         */
#define PWM0_STA_GAPO1_Msk                (0x10UL)                  /*!< GAPO1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_RERR1_Pos                (3UL)                     /*!< RERR1 (Bit 3)                                         */
#define PWM0_STA_RERR1_Msk                (0x8UL)                   /*!< RERR1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_WERR1_Pos                (2UL)                     /*!< WERR1 (Bit 2)                                         */
#define PWM0_STA_WERR1_Msk                (0x4UL)                   /*!< WERR1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_EMPT1_Pos                (1UL)                     /*!< EMPT1 (Bit 1)                                         */
#define PWM0_STA_EMPT1_Msk                (0x2UL)                   /*!< EMPT1 (Bitfield-Mask: 0x01)                           */
#define PWM0_STA_FULL1_Pos                (0UL)                     /*!< FULL1 (Bit 0)                                         */
#define PWM0_STA_FULL1_Msk                (0x1UL)                   /*!< FULL1 (Bitfield-Mask: 0x01)                           */
/* =========================================================  DMAC  ========================================================== */
#define PWM0_DMAC_ENAB_Pos                (31UL)                    /*!< ENAB (Bit 31)                                         */
#define PWM0_DMAC_ENAB_Msk                (0x80000000UL)            /*!< ENAB (Bitfield-Mask: 0x01)                            */
#define PWM0_DMAC_PANIC_Pos               (8UL)                     /*!< PANIC (Bit 8)                                         */
#define PWM0_DMAC_PANIC_Msk               (0xff00UL)                /*!< PANIC (Bitfield-Mask: 0xff)                           */
#define PWM0_DMAC_DREQ_Pos                (0UL)                     /*!< DREQ (Bit 0)                                          */
#define PWM0_DMAC_DREQ_Msk                (0xffUL)                  /*!< DREQ (Bitfield-Mask: 0xff)                            */
/* =========================================================  RNG1  ========================================================== */
/* =========================================================  DAT1  ========================================================== */
/* =========================================================  FIF1  ========================================================== */
/* =========================================================  RNG2  ========================================================== */
/* =========================================================  DAT2  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            AUX                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  IRQ  ========================================================== */
#define AUX_IRQ_SPI_2_Pos                 (2UL)                     /*!< SPI_2 (Bit 2)                                         */
#define AUX_IRQ_SPI_2_Msk                 (0x4UL)                   /*!< SPI_2 (Bitfield-Mask: 0x01)                           */
#define AUX_IRQ_SPI_1_Pos                 (1UL)                     /*!< SPI_1 (Bit 1)                                         */
#define AUX_IRQ_SPI_1_Msk                 (0x2UL)                   /*!< SPI_1 (Bitfield-Mask: 0x01)                           */
#define AUX_IRQ_UART_1_Pos                (0UL)                     /*!< UART_1 (Bit 0)                                        */
#define AUX_IRQ_UART_1_Msk                (0x1UL)                   /*!< UART_1 (Bitfield-Mask: 0x01)                          */
/* ========================================================  ENABLES  ======================================================== */
#define AUX_ENABLES_SPI_2_Pos             (2UL)                     /*!< SPI_2 (Bit 2)                                         */
#define AUX_ENABLES_SPI_2_Msk             (0x4UL)                   /*!< SPI_2 (Bitfield-Mask: 0x01)                           */
#define AUX_ENABLES_SPI_1_Pos             (1UL)                     /*!< SPI_1 (Bit 1)                                         */
#define AUX_ENABLES_SPI_1_Msk             (0x2UL)                   /*!< SPI_1 (Bitfield-Mask: 0x01)                           */
#define AUX_ENABLES_UART_1_Pos            (0UL)                     /*!< UART_1 (Bit 0)                                        */
#define AUX_ENABLES_UART_1_Msk            (0x1UL)                   /*!< UART_1 (Bitfield-Mask: 0x01)                          */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  IO  =========================================================== */
#define UART1_IO_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART1_IO_DATA_Msk                 (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* =========================================================  BAUDL  ========================================================= */
/* ==========================================================  IER  ========================================================== */
#define UART1_IER_TX_READY_Pos            (1UL)                     /*!< TX_READY (Bit 1)                                      */
#define UART1_IER_TX_READY_Msk            (0x2UL)                   /*!< TX_READY (Bitfield-Mask: 0x01)                        */
#define UART1_IER_DATA_READY_Pos          (0UL)                     /*!< DATA_READY (Bit 0)                                    */
#define UART1_IER_DATA_READY_Msk          (0x1UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
/* =========================================================  BAUDH  ========================================================= */
/* ==========================================================  IIR  ========================================================== */
#define UART1_IIR_TX_READY_Pos            (2UL)                     /*!< TX_READY (Bit 2)                                      */
#define UART1_IIR_TX_READY_Msk            (0x4UL)                   /*!< TX_READY (Bitfield-Mask: 0x01)                        */
#define UART1_IIR_DATA_READY_Pos          (1UL)                     /*!< DATA_READY (Bit 1)                                    */
#define UART1_IIR_DATA_READY_Msk          (0x2UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
#define UART1_IIR_nPENDING_Pos            (0UL)                     /*!< nPENDING (Bit 0)                                      */
#define UART1_IIR_nPENDING_Msk            (0x1UL)                   /*!< nPENDING (Bitfield-Mask: 0x01)                        */
/* ==========================================================  LCR  ========================================================== */
#define UART1_LCR_DLAB_Pos                (7UL)                     /*!< DLAB (Bit 7)                                          */
#define UART1_LCR_DLAB_Msk                (0x80UL)                  /*!< DLAB (Bitfield-Mask: 0x01)                            */
#define UART1_LCR_BREAK_Pos               (6UL)                     /*!< BREAK (Bit 6)                                         */
#define UART1_LCR_BREAK_Msk               (0x40UL)                  /*!< BREAK (Bitfield-Mask: 0x01)                           */
#define UART1_LCR_DATA_SIZE_Pos           (0UL)                     /*!< DATA_SIZE (Bit 0)                                     */
#define UART1_LCR_DATA_SIZE_Msk           (0x3UL)                   /*!< DATA_SIZE (Bitfield-Mask: 0x03)                       */
/* ==========================================================  MCR  ========================================================== */
#define UART1_MCR_RTS_Pos                 (1UL)                     /*!< RTS (Bit 1)                                           */
#define UART1_MCR_RTS_Msk                 (0x2UL)                   /*!< RTS (Bitfield-Mask: 0x01)                             */
/* ==========================================================  LSR  ========================================================== */
#define UART1_LSR_TX_IDLE_Pos             (6UL)                     /*!< TX_IDLE (Bit 6)                                       */
#define UART1_LSR_TX_IDLE_Msk             (0x40UL)                  /*!< TX_IDLE (Bitfield-Mask: 0x01)                         */
#define UART1_LSR_TX_EMPTY_Pos            (5UL)                     /*!< TX_EMPTY (Bit 5)                                      */
#define UART1_LSR_TX_EMPTY_Msk            (0x20UL)                  /*!< TX_EMPTY (Bitfield-Mask: 0x01)                        */
#define UART1_LSR_RX_OVERRUN_Pos          (1UL)                     /*!< RX_OVERRUN (Bit 1)                                    */
#define UART1_LSR_RX_OVERRUN_Msk          (0x2UL)                   /*!< RX_OVERRUN (Bitfield-Mask: 0x01)                      */
#define UART1_LSR_DATA_READY_Pos          (0UL)                     /*!< DATA_READY (Bit 0)                                    */
#define UART1_LSR_DATA_READY_Msk          (0x1UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
/* ==========================================================  MSR  ========================================================== */
#define UART1_MSR_CTS_Pos                 (4UL)                     /*!< CTS (Bit 4)                                           */
#define UART1_MSR_CTS_Msk                 (0x10UL)                  /*!< CTS (Bitfield-Mask: 0x01)                             */
/* ========================================================  SCRATCH  ======================================================== */
/* =========================================================  CNTL  ========================================================== */
#define UART1_CNTL_CTS_ASSERT_Pos         (7UL)                     /*!< CTS_ASSERT (Bit 7)                                    */
#define UART1_CNTL_CTS_ASSERT_Msk         (0x80UL)                  /*!< CTS_ASSERT (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_RTS_ASSERT_Pos         (6UL)                     /*!< RTS_ASSERT (Bit 6)                                    */
#define UART1_CNTL_RTS_ASSERT_Msk         (0x40UL)                  /*!< RTS_ASSERT (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_RTS_FIFO_LEVEL_Pos     (4UL)                     /*!< RTS_FIFO_LEVEL (Bit 4)                                */
#define UART1_CNTL_RTS_FIFO_LEVEL_Msk     (0x30UL)                  /*!< RTS_FIFO_LEVEL (Bitfield-Mask: 0x03)                  */
#define UART1_CNTL_CTS_ENABLE_Pos         (3UL)                     /*!< CTS_ENABLE (Bit 3)                                    */
#define UART1_CNTL_CTS_ENABLE_Msk         (0x8UL)                   /*!< CTS_ENABLE (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_RTS_ENABLE_Pos         (2UL)                     /*!< RTS_ENABLE (Bit 2)                                    */
#define UART1_CNTL_RTS_ENABLE_Msk         (0x4UL)                   /*!< RTS_ENABLE (Bitfield-Mask: 0x01)                      */
#define UART1_CNTL_TX_ENABLE_Pos          (1UL)                     /*!< TX_ENABLE (Bit 1)                                     */
#define UART1_CNTL_TX_ENABLE_Msk          (0x2UL)                   /*!< TX_ENABLE (Bitfield-Mask: 0x01)                       */
#define UART1_CNTL_RX_ENABLE_Pos          (0UL)                     /*!< RX_ENABLE (Bit 0)                                     */
#define UART1_CNTL_RX_ENABLE_Msk          (0x1UL)                   /*!< RX_ENABLE (Bitfield-Mask: 0x01)                       */
/* =========================================================  STAT  ========================================================== */
#define UART1_STAT_TX_FIFO_LEVEL_Pos      (24UL)                    /*!< TX_FIFO_LEVEL (Bit 24)                                */
#define UART1_STAT_TX_FIFO_LEVEL_Msk      (0xf000000UL)             /*!< TX_FIFO_LEVEL (Bitfield-Mask: 0x0f)                   */
#define UART1_STAT_RX_FIFO_LEVEL_Pos      (16UL)                    /*!< RX_FIFO_LEVEL (Bit 16)                                */
#define UART1_STAT_RX_FIFO_LEVEL_Msk      (0xf0000UL)               /*!< RX_FIFO_LEVEL (Bitfield-Mask: 0x0f)                   */
#define UART1_STAT_TX_DONE_Pos            (9UL)                     /*!< TX_DONE (Bit 9)                                       */
#define UART1_STAT_TX_DONE_Msk            (0x200UL)                 /*!< TX_DONE (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_TX_EMPTY_Pos           (8UL)                     /*!< TX_EMPTY (Bit 8)                                      */
#define UART1_STAT_TX_EMPTY_Msk           (0x100UL)                 /*!< TX_EMPTY (Bitfield-Mask: 0x01)                        */
#define UART1_STAT_CTS_STATUS_Pos         (7UL)                     /*!< CTS_STATUS (Bit 7)                                    */
#define UART1_STAT_CTS_STATUS_Msk         (0x80UL)                  /*!< CTS_STATUS (Bitfield-Mask: 0x01)                      */
#define UART1_STAT_RTS_STATUS_Pos         (6UL)                     /*!< RTS_STATUS (Bit 6)                                    */
#define UART1_STAT_RTS_STATUS_Msk         (0x40UL)                  /*!< RTS_STATUS (Bitfield-Mask: 0x01)                      */
#define UART1_STAT_TX_FULL_Pos            (5UL)                     /*!< TX_FULL (Bit 5)                                       */
#define UART1_STAT_TX_FULL_Msk            (0x20UL)                  /*!< TX_FULL (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_RX_OVERRUN_Pos         (4UL)                     /*!< RX_OVERRUN (Bit 4)                                    */
#define UART1_STAT_RX_OVERRUN_Msk         (0x10UL)                  /*!< RX_OVERRUN (Bitfield-Mask: 0x01)                      */
#define UART1_STAT_TX_IDLE_Pos            (3UL)                     /*!< TX_IDLE (Bit 3)                                       */
#define UART1_STAT_TX_IDLE_Msk            (0x8UL)                   /*!< TX_IDLE (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_RX_IDLE_Pos            (2UL)                     /*!< RX_IDLE (Bit 2)                                       */
#define UART1_STAT_RX_IDLE_Msk            (0x4UL)                   /*!< RX_IDLE (Bitfield-Mask: 0x01)                         */
#define UART1_STAT_TX_READY_Pos           (1UL)                     /*!< TX_READY (Bit 1)                                      */
#define UART1_STAT_TX_READY_Msk           (0x2UL)                   /*!< TX_READY (Bitfield-Mask: 0x01)                        */
#define UART1_STAT_DATA_READY_Pos         (0UL)                     /*!< DATA_READY (Bit 0)                                    */
#define UART1_STAT_DATA_READY_Msk         (0x1UL)                   /*!< DATA_READY (Bitfield-Mask: 0x01)                      */
/* =========================================================  BAUD  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CNTL0  ========================================================= */
#define SPI1_CNTL0_SPEED_Pos              (20UL)                    /*!< SPEED (Bit 20)                                        */
#define SPI1_CNTL0_SPEED_Msk              (0xfff00000UL)            /*!< SPEED (Bitfield-Mask: 0xfff)                          */
#define SPI1_CNTL0_CHIP_SELECTS_Pos       (17UL)                    /*!< CHIP_SELECTS (Bit 17)                                 */
#define SPI1_CNTL0_CHIP_SELECTS_Msk       (0xe0000UL)               /*!< CHIP_SELECTS (Bitfield-Mask: 0x07)                    */
#define SPI1_CNTL0_POST_INPUT_Pos         (16UL)                    /*!< POST_INPUT (Bit 16)                                   */
#define SPI1_CNTL0_POST_INPUT_Msk         (0x10000UL)               /*!< POST_INPUT (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL0_VARIABLE_CS_Pos        (15UL)                    /*!< VARIABLE_CS (Bit 15)                                  */
#define SPI1_CNTL0_VARIABLE_CS_Msk        (0x8000UL)                /*!< VARIABLE_CS (Bitfield-Mask: 0x01)                     */
#define SPI1_CNTL0_VARIABLE_WIDTH_Pos     (14UL)                    /*!< VARIABLE_WIDTH (Bit 14)                               */
#define SPI1_CNTL0_VARIABLE_WIDTH_Msk     (0x4000UL)                /*!< VARIABLE_WIDTH (Bitfield-Mask: 0x01)                  */
#define SPI1_CNTL0_DOUT_HOLD_TIME_Pos     (12UL)                    /*!< DOUT_HOLD_TIME (Bit 12)                               */
#define SPI1_CNTL0_DOUT_HOLD_TIME_Msk     (0x3000UL)                /*!< DOUT_HOLD_TIME (Bitfield-Mask: 0x03)                  */
#define SPI1_CNTL0_ENABLE_Pos             (11UL)                    /*!< ENABLE (Bit 11)                                       */
#define SPI1_CNTL0_ENABLE_Msk             (0x800UL)                 /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define SPI1_CNTL0_IN_RISING_Pos          (10UL)                    /*!< IN_RISING (Bit 10)                                    */
#define SPI1_CNTL0_IN_RISING_Msk          (0x400UL)                 /*!< IN_RISING (Bitfield-Mask: 0x01)                       */
#define SPI1_CNTL0_CLEAR_FIFOS_Pos        (9UL)                     /*!< CLEAR_FIFOS (Bit 9)                                   */
#define SPI1_CNTL0_CLEAR_FIFOS_Msk        (0x200UL)                 /*!< CLEAR_FIFOS (Bitfield-Mask: 0x01)                     */
#define SPI1_CNTL0_OUT_RISING_Pos         (8UL)                     /*!< OUT_RISING (Bit 8)                                    */
#define SPI1_CNTL0_OUT_RISING_Msk         (0x100UL)                 /*!< OUT_RISING (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL0_INVERT_CLK_Pos         (7UL)                     /*!< INVERT_CLK (Bit 7)                                    */
#define SPI1_CNTL0_INVERT_CLK_Msk         (0x80UL)                  /*!< INVERT_CLK (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL0_MSB_FIRST_Pos          (6UL)                     /*!< MSB_FIRST (Bit 6)                                     */
#define SPI1_CNTL0_MSB_FIRST_Msk          (0x40UL)                  /*!< MSB_FIRST (Bitfield-Mask: 0x01)                       */
#define SPI1_CNTL0_SHIFT_LENGTH_Pos       (0UL)                     /*!< SHIFT_LENGTH (Bit 0)                                  */
#define SPI1_CNTL0_SHIFT_LENGTH_Msk       (0x3fUL)                  /*!< SHIFT_LENGTH (Bitfield-Mask: 0x3f)                    */
/* =========================================================  CNTL1  ========================================================= */
#define SPI1_CNTL1_CS_HIGH_TIME_Pos       (8UL)                     /*!< CS_HIGH_TIME (Bit 8)                                  */
#define SPI1_CNTL1_CS_HIGH_TIME_Msk       (0x700UL)                 /*!< CS_HIGH_TIME (Bitfield-Mask: 0x07)                    */
#define SPI1_CNTL1_TXE_ENABLE_Pos         (7UL)                     /*!< TXE_ENABLE (Bit 7)                                    */
#define SPI1_CNTL1_TXE_ENABLE_Msk         (0x80UL)                  /*!< TXE_ENABLE (Bitfield-Mask: 0x01)                      */
#define SPI1_CNTL1_DONE_ENABLE_Pos        (6UL)                     /*!< DONE_ENABLE (Bit 6)                                   */
#define SPI1_CNTL1_DONE_ENABLE_Msk        (0x40UL)                  /*!< DONE_ENABLE (Bitfield-Mask: 0x01)                     */
#define SPI1_CNTL1_MSB_FIRST_Pos          (1UL)                     /*!< MSB_FIRST (Bit 1)                                     */
#define SPI1_CNTL1_MSB_FIRST_Msk          (0x2UL)                   /*!< MSB_FIRST (Bitfield-Mask: 0x01)                       */
#define SPI1_CNTL1_KEEP_INPUT_Pos         (0UL)                     /*!< KEEP_INPUT (Bit 0)                                    */
#define SPI1_CNTL1_KEEP_INPUT_Msk         (0x1UL)                   /*!< KEEP_INPUT (Bitfield-Mask: 0x01)                      */
/* =========================================================  STAT  ========================================================== */
#define SPI1_STAT_TX_LEVEL_Pos            (24UL)                    /*!< TX_LEVEL (Bit 24)                                     */
#define SPI1_STAT_TX_LEVEL_Msk            (0xf000000UL)             /*!< TX_LEVEL (Bitfield-Mask: 0x0f)                        */
#define SPI1_STAT_RX_LEVEL_Pos            (16UL)                    /*!< RX_LEVEL (Bit 16)                                     */
#define SPI1_STAT_RX_LEVEL_Msk            (0xf0000UL)               /*!< RX_LEVEL (Bitfield-Mask: 0x0f)                        */
#define SPI1_STAT_TX_FULL_Pos             (10UL)                    /*!< TX_FULL (Bit 10)                                      */
#define SPI1_STAT_TX_FULL_Msk             (0x400UL)                 /*!< TX_FULL (Bitfield-Mask: 0x01)                         */
#define SPI1_STAT_TX_EMPTY_Pos            (9UL)                     /*!< TX_EMPTY (Bit 9)                                      */
#define SPI1_STAT_TX_EMPTY_Msk            (0x200UL)                 /*!< TX_EMPTY (Bitfield-Mask: 0x01)                        */
#define SPI1_STAT_RX_FULL_Pos             (8UL)                     /*!< RX_FULL (Bit 8)                                       */
#define SPI1_STAT_RX_FULL_Msk             (0x100UL)                 /*!< RX_FULL (Bitfield-Mask: 0x01)                         */
#define SPI1_STAT_RX_EMPTY_Pos            (7UL)                     /*!< RX_EMPTY (Bit 7)                                      */
#define SPI1_STAT_RX_EMPTY_Msk            (0x80UL)                  /*!< RX_EMPTY (Bitfield-Mask: 0x01)                        */
#define SPI1_STAT_BUSY_Pos                (6UL)                     /*!< BUSY (Bit 6)                                          */
#define SPI1_STAT_BUSY_Msk                (0x40UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define SPI1_STAT_BIT_COUNT_Pos           (0UL)                     /*!< BIT_COUNT (Bit 0)                                     */
#define SPI1_STAT_BIT_COUNT_Msk           (0x3fUL)                  /*!< BIT_COUNT (Bitfield-Mask: 0x3f)                       */
/* =========================================================  PEEK  ========================================================== */
#define SPI1_PEEK_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_PEEK_DATA_Msk                (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO0  ========================================================== */
#define SPI1_IO0_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO0_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO1  ========================================================== */
#define SPI1_IO1_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO1_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO2  ========================================================== */
#define SPI1_IO2_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO2_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  IO3  ========================================================== */
#define SPI1_IO3_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_IO3_DATA_Msk                 (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD0  ======================================================== */
#define SPI1_TXHOLD0_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD0_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD1  ======================================================== */
#define SPI1_TXHOLD1_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD1_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD2  ======================================================== */
#define SPI1_TXHOLD2_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD2_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */
/* ========================================================  TXHOLD3  ======================================================== */
#define SPI1_TXHOLD3_DATA_Pos             (0UL)                     /*!< DATA (Bit 0)                                          */
#define SPI1_TXHOLD3_DATA_Msk             (0xffffUL)                /*!< DATA (Bitfield-Mask: 0xffff)                          */


/* =========================================================================================================================== */
/* ================                                          BCM_LIC                                          ================ */
/* =========================================================================================================================== */

/* =====================================================  BASIC_PENDING  ===================================================== */
#define BCM_LIC_BASIC_PENDING_TIMER_Pos   (0UL)                     /*!< TIMER (Bit 0)                                         */
#define BCM_LIC_BASIC_PENDING_TIMER_Msk   (0x1UL)                   /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_MAILBOX_Pos (1UL)                     /*!< MAILBOX (Bit 1)                                       */
#define BCM_LIC_BASIC_PENDING_MAILBOX_Msk (0x2UL)                   /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_BASIC_PENDING_DOORBELL0_Pos (2UL)                   /*!< DOORBELL0 (Bit 2)                                     */
#define BCM_LIC_BASIC_PENDING_DOORBELL0_Msk (0x4UL)                 /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_DOORBELL1_Pos (3UL)                   /*!< DOORBELL1 (Bit 3)                                     */
#define BCM_LIC_BASIC_PENDING_DOORBELL1_Msk (0x8UL)                 /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_VPU0_HALTED_Pos (4UL)                 /*!< VPU0_HALTED (Bit 4)                                   */
#define BCM_LIC_BASIC_PENDING_VPU0_HALTED_Msk (0x10UL)              /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_BASIC_PENDING_VPU1_HALTED_Pos (5UL)                 /*!< VPU1_HALTED (Bit 5)                                   */
#define BCM_LIC_BASIC_PENDING_VPU1_HALTED_Msk (0x20UL)              /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_BASIC_PENDING_ARM_ADDRESS_ERROR_Pos (6UL)           /*!< ARM_ADDRESS_ERROR (Bit 6)                             */
#define BCM_LIC_BASIC_PENDING_ARM_ADDRESS_ERROR_Msk (0x40UL)        /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)               */
#define BCM_LIC_BASIC_PENDING_ARM_AXI_ERROR_Pos (7UL)               /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define BCM_LIC_BASIC_PENDING_ARM_AXI_ERROR_Msk (0x80UL)            /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_BASIC_PENDING_PENDING_1_Pos (8UL)                   /*!< PENDING_1 (Bit 8)                                     */
#define BCM_LIC_BASIC_PENDING_PENDING_1_Msk (0x100UL)               /*!< PENDING_1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_PENDING_2_Pos (9UL)                   /*!< PENDING_2 (Bit 9)                                     */
#define BCM_LIC_BASIC_PENDING_PENDING_2_Msk (0x200UL)               /*!< PENDING_2 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_BASIC_PENDING_JPEG_Pos    (10UL)                    /*!< JPEG (Bit 10)                                         */
#define BCM_LIC_BASIC_PENDING_JPEG_Msk    (0x400UL)                 /*!< JPEG (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_BASIC_PENDING_USB_Pos     (11UL)                    /*!< USB (Bit 11)                                          */
#define BCM_LIC_BASIC_PENDING_USB_Msk     (0x800UL)                 /*!< USB (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_BASIC_PENDING_V3D_Pos     (12UL)                    /*!< V3D (Bit 12)                                          */
#define BCM_LIC_BASIC_PENDING_V3D_Msk     (0x1000UL)                /*!< V3D (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_BASIC_PENDING_DMA_2_Pos   (13UL)                    /*!< DMA_2 (Bit 13)                                        */
#define BCM_LIC_BASIC_PENDING_DMA_2_Msk   (0x2000UL)                /*!< DMA_2 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_DMA_3_Pos   (14UL)                    /*!< DMA_3 (Bit 14)                                        */
#define BCM_LIC_BASIC_PENDING_DMA_3_Msk   (0x4000UL)                /*!< DMA_3 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_BASIC_PENDING_I2C_Pos     (15UL)                    /*!< I2C (Bit 15)                                          */
#define BCM_LIC_BASIC_PENDING_I2C_Msk     (0x8000UL)                /*!< I2C (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_BASIC_PENDING_SPI_Pos     (16UL)                    /*!< SPI (Bit 16)                                          */
#define BCM_LIC_BASIC_PENDING_SPI_Msk     (0x10000UL)               /*!< SPI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_BASIC_PENDING_PCM_I2S_Pos (17UL)                    /*!< PCM_I2S (Bit 17)                                      */
#define BCM_LIC_BASIC_PENDING_PCM_I2S_Msk (0x20000UL)               /*!< PCM_I2S (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_BASIC_PENDING_SDHOST_Pos  (18UL)                    /*!< SDHOST (Bit 18)                                       */
#define BCM_LIC_BASIC_PENDING_SDHOST_Msk  (0x40000UL)               /*!< SDHOST (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_BASIC_PENDING_UART_Pos    (19UL)                    /*!< UART (Bit 19)                                         */
#define BCM_LIC_BASIC_PENDING_UART_Msk    (0x80000UL)               /*!< UART (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_BASIC_PENDING_EMMC_Pos    (20UL)                    /*!< EMMC (Bit 20)                                         */
#define BCM_LIC_BASIC_PENDING_EMMC_Msk    (0x100000UL)              /*!< EMMC (Bitfield-Mask: 0x01)                            */
/* =======================================================  PENDING_1  ======================================================= */
#define BCM_LIC_PENDING_1_TIMER_0_Pos     (0UL)                     /*!< TIMER_0 (Bit 0)                                       */
#define BCM_LIC_PENDING_1_TIMER_0_Msk     (0x1UL)                   /*!< TIMER_0 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_PENDING_1_TIMER_1_Pos     (1UL)                     /*!< TIMER_1 (Bit 1)                                       */
#define BCM_LIC_PENDING_1_TIMER_1_Msk     (0x2UL)                   /*!< TIMER_1 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_PENDING_1_TIMER_2_Pos     (2UL)                     /*!< TIMER_2 (Bit 2)                                       */
#define BCM_LIC_PENDING_1_TIMER_2_Msk     (0x4UL)                   /*!< TIMER_2 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_PENDING_1_TIMER_3_Pos     (3UL)                     /*!< TIMER_3 (Bit 3)                                       */
#define BCM_LIC_PENDING_1_TIMER_3_Msk     (0x8UL)                   /*!< TIMER_3 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_PENDING_1_H264_0_Pos      (4UL)                     /*!< H264_0 (Bit 4)                                        */
#define BCM_LIC_PENDING_1_H264_0_Msk      (0x10UL)                  /*!< H264_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_H264_1_Pos      (5UL)                     /*!< H264_1 (Bit 5)                                        */
#define BCM_LIC_PENDING_1_H264_1_Msk      (0x20UL)                  /*!< H264_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_H264_2_Pos      (6UL)                     /*!< H264_2 (Bit 6)                                        */
#define BCM_LIC_PENDING_1_H264_2_Msk      (0x40UL)                  /*!< H264_2 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_JPEG_Pos        (7UL)                     /*!< JPEG (Bit 7)                                          */
#define BCM_LIC_PENDING_1_JPEG_Msk        (0x80UL)                  /*!< JPEG (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_1_ISP_Pos         (8UL)                     /*!< ISP (Bit 8)                                           */
#define BCM_LIC_PENDING_1_ISP_Msk         (0x100UL)                 /*!< ISP (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_1_USB_Pos         (9UL)                     /*!< USB (Bit 9)                                           */
#define BCM_LIC_PENDING_1_USB_Msk         (0x200UL)                 /*!< USB (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_1_V3D_Pos         (10UL)                    /*!< V3D (Bit 10)                                          */
#define BCM_LIC_PENDING_1_V3D_Msk         (0x400UL)                 /*!< V3D (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_1_TRANSPOSER_Pos  (11UL)                    /*!< TRANSPOSER (Bit 11)                                   */
#define BCM_LIC_PENDING_1_TRANSPOSER_Msk  (0x800UL)                 /*!< TRANSPOSER (Bitfield-Mask: 0x01)                      */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_0_Pos (12UL)               /*!< MULTICORE_SYNC_0 (Bit 12)                             */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_0_Msk (0x1000UL)           /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_1_Pos (13UL)               /*!< MULTICORE_SYNC_1 (Bit 13)                             */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_1_Msk (0x2000UL)           /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_2_Pos (14UL)               /*!< MULTICORE_SYNC_2 (Bit 14)                             */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_2_Msk (0x4000UL)           /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_3_Pos (15UL)               /*!< MULTICORE_SYNC_3 (Bit 15)                             */
#define BCM_LIC_PENDING_1_MULTICORE_SYNC_3_Msk (0x8000UL)           /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_PENDING_1_DMA_0_Pos       (16UL)                    /*!< DMA_0 (Bit 16)                                        */
#define BCM_LIC_PENDING_1_DMA_0_Msk       (0x10000UL)               /*!< DMA_0 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_1_Pos       (17UL)                    /*!< DMA_1 (Bit 17)                                        */
#define BCM_LIC_PENDING_1_DMA_1_Msk       (0x20000UL)               /*!< DMA_1 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_2_Pos       (18UL)                    /*!< DMA_2 (Bit 18)                                        */
#define BCM_LIC_PENDING_1_DMA_2_Msk       (0x40000UL)               /*!< DMA_2 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_3_Pos       (19UL)                    /*!< DMA_3 (Bit 19)                                        */
#define BCM_LIC_PENDING_1_DMA_3_Msk       (0x80000UL)               /*!< DMA_3 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_4_Pos       (20UL)                    /*!< DMA_4 (Bit 20)                                        */
#define BCM_LIC_PENDING_1_DMA_4_Msk       (0x100000UL)              /*!< DMA_4 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_5_Pos       (21UL)                    /*!< DMA_5 (Bit 21)                                        */
#define BCM_LIC_PENDING_1_DMA_5_Msk       (0x200000UL)              /*!< DMA_5 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_6_Pos       (22UL)                    /*!< DMA_6 (Bit 22)                                        */
#define BCM_LIC_PENDING_1_DMA_6_Msk       (0x400000UL)              /*!< DMA_6 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_1_DMA_7_8_Pos     (23UL)                    /*!< DMA_7_8 (Bit 23)                                      */
#define BCM_LIC_PENDING_1_DMA_7_8_Msk     (0x800000UL)              /*!< DMA_7_8 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_PENDING_1_DMA_9_10_Pos    (24UL)                    /*!< DMA_9_10 (Bit 24)                                     */
#define BCM_LIC_PENDING_1_DMA_9_10_Msk    (0x1000000UL)             /*!< DMA_9_10 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_PENDING_1_DMA_11_Pos      (25UL)                    /*!< DMA_11 (Bit 25)                                       */
#define BCM_LIC_PENDING_1_DMA_11_Msk      (0x2000000UL)             /*!< DMA_11 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_DMA_12_Pos      (26UL)                    /*!< DMA_12 (Bit 26)                                       */
#define BCM_LIC_PENDING_1_DMA_12_Msk      (0x4000000UL)             /*!< DMA_12 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_DMA_13_Pos      (27UL)                    /*!< DMA_13 (Bit 27)                                       */
#define BCM_LIC_PENDING_1_DMA_13_Msk      (0x8000000UL)             /*!< DMA_13 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_DMA_14_Pos      (28UL)                    /*!< DMA_14 (Bit 28)                                       */
#define BCM_LIC_PENDING_1_DMA_14_Msk      (0x10000000UL)            /*!< DMA_14 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_1_AUX_Pos         (29UL)                    /*!< AUX (Bit 29)                                          */
#define BCM_LIC_PENDING_1_AUX_Msk         (0x20000000UL)            /*!< AUX (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_1_ARM_Pos         (30UL)                    /*!< ARM (Bit 30)                                          */
#define BCM_LIC_PENDING_1_ARM_Msk         (0x40000000UL)            /*!< ARM (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_1_DMA_15_Pos      (31UL)                    /*!< DMA_15 (Bit 31)                                       */
#define BCM_LIC_PENDING_1_DMA_15_Msk      (0x80000000UL)            /*!< DMA_15 (Bitfield-Mask: 0x01)                          */
/* =======================================================  PENDING_2  ======================================================= */
#define BCM_LIC_PENDING_2_HDMI_CEC_Pos    (0UL)                     /*!< HDMI_CEC (Bit 0)                                      */
#define BCM_LIC_PENDING_2_HDMI_CEC_Msk    (0x1UL)                   /*!< HDMI_CEC (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_PENDING_2_HVS_Pos         (1UL)                     /*!< HVS (Bit 1)                                           */
#define BCM_LIC_PENDING_2_HVS_Msk         (0x2UL)                   /*!< HVS (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_RPIVID_Pos      (2UL)                     /*!< RPIVID (Bit 2)                                        */
#define BCM_LIC_PENDING_2_RPIVID_Msk      (0x4UL)                   /*!< RPIVID (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_SDC_Pos         (3UL)                     /*!< SDC (Bit 3)                                           */
#define BCM_LIC_PENDING_2_SDC_Msk         (0x8UL)                   /*!< SDC (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_DSI_0_Pos       (4UL)                     /*!< DSI_0 (Bit 4)                                         */
#define BCM_LIC_PENDING_2_DSI_0_Msk       (0x10UL)                  /*!< DSI_0 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_2_Pos (5UL)                   /*!< PIXEL_VALVE_2 (Bit 5)                                 */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_2_Msk (0x20UL)                /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_PENDING_2_CAMERA_0_Pos    (6UL)                     /*!< CAMERA_0 (Bit 6)                                      */
#define BCM_LIC_PENDING_2_CAMERA_0_Msk    (0x40UL)                  /*!< CAMERA_0 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_PENDING_2_CAMERA_1_Pos    (7UL)                     /*!< CAMERA_1 (Bit 7)                                      */
#define BCM_LIC_PENDING_2_CAMERA_1_Msk    (0x80UL)                  /*!< CAMERA_1 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_PENDING_2_HDMI_0_Pos      (8UL)                     /*!< HDMI_0 (Bit 8)                                        */
#define BCM_LIC_PENDING_2_HDMI_0_Msk      (0x100UL)                 /*!< HDMI_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_HDMI_1_Pos      (9UL)                     /*!< HDMI_1 (Bit 9)                                        */
#define BCM_LIC_PENDING_2_HDMI_1_Msk      (0x200UL)                 /*!< HDMI_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_3_Pos (10UL)                  /*!< PIXEL_VALVE_3 (Bit 10)                                */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_3_Msk (0x400UL)               /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_PENDING_2_SPI_BSC_SLAVE_Pos (11UL)                  /*!< SPI_BSC_SLAVE (Bit 11)                                */
#define BCM_LIC_PENDING_2_SPI_BSC_SLAVE_Msk (0x800UL)               /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_PENDING_2_DSI_1_Pos       (12UL)                    /*!< DSI_1 (Bit 12)                                        */
#define BCM_LIC_PENDING_2_DSI_1_Msk       (0x1000UL)                /*!< DSI_1 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_0_Pos (13UL)                  /*!< PIXEL_VALVE_0 (Bit 13)                                */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_0_Msk (0x2000UL)              /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_1_2_Pos (14UL)                /*!< PIXEL_VALVE_1_2 (Bit 14)                              */
#define BCM_LIC_PENDING_2_PIXEL_VALVE_1_2_Msk (0x4000UL)            /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01)                 */
#define BCM_LIC_PENDING_2_CPR_Pos         (15UL)                    /*!< CPR (Bit 15)                                          */
#define BCM_LIC_PENDING_2_CPR_Msk         (0x8000UL)                /*!< CPR (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_SMI_Pos         (16UL)                    /*!< SMI (Bit 16)                                          */
#define BCM_LIC_PENDING_2_SMI_Msk         (0x10000UL)               /*!< SMI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_GPIO_0_Pos      (17UL)                    /*!< GPIO_0 (Bit 17)                                       */
#define BCM_LIC_PENDING_2_GPIO_0_Msk      (0x20000UL)               /*!< GPIO_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_GPIO_1_Pos      (18UL)                    /*!< GPIO_1 (Bit 18)                                       */
#define BCM_LIC_PENDING_2_GPIO_1_Msk      (0x40000UL)               /*!< GPIO_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_GPIO_2_Pos      (19UL)                    /*!< GPIO_2 (Bit 19)                                       */
#define BCM_LIC_PENDING_2_GPIO_2_Msk      (0x80000UL)               /*!< GPIO_2 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_GPIO_3_Pos      (20UL)                    /*!< GPIO_3 (Bit 20)                                       */
#define BCM_LIC_PENDING_2_GPIO_3_Msk      (0x100000UL)              /*!< GPIO_3 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_I2C_Pos         (21UL)                    /*!< I2C (Bit 21)                                          */
#define BCM_LIC_PENDING_2_I2C_Msk         (0x200000UL)              /*!< I2C (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_SPI_Pos         (22UL)                    /*!< SPI (Bit 22)                                          */
#define BCM_LIC_PENDING_2_SPI_Msk         (0x400000UL)              /*!< SPI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_PCM_I2S_Pos     (23UL)                    /*!< PCM_I2S (Bit 23)                                      */
#define BCM_LIC_PENDING_2_PCM_I2S_Msk     (0x800000UL)              /*!< PCM_I2S (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_PENDING_2_SDHOST_Pos      (24UL)                    /*!< SDHOST (Bit 24)                                       */
#define BCM_LIC_PENDING_2_SDHOST_Msk      (0x1000000UL)             /*!< SDHOST (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_PENDING_2_UART_Pos        (25UL)                    /*!< UART (Bit 25)                                         */
#define BCM_LIC_PENDING_2_UART_Msk        (0x2000000UL)             /*!< UART (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_2_ETH_PCIE_Pos    (26UL)                    /*!< ETH_PCIE (Bit 26)                                     */
#define BCM_LIC_PENDING_2_ETH_PCIE_Msk    (0x4000000UL)             /*!< ETH_PCIE (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_PENDING_2_VEC_Pos         (27UL)                    /*!< VEC (Bit 27)                                          */
#define BCM_LIC_PENDING_2_VEC_Msk         (0x8000000UL)             /*!< VEC (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_CPG_Pos         (28UL)                    /*!< CPG (Bit 28)                                          */
#define BCM_LIC_PENDING_2_CPG_Msk         (0x10000000UL)            /*!< CPG (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_RNG_Pos         (29UL)                    /*!< RNG (Bit 29)                                          */
#define BCM_LIC_PENDING_2_RNG_Msk         (0x20000000UL)            /*!< RNG (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_PENDING_2_EMMC_Pos        (30UL)                    /*!< EMMC (Bit 30)                                         */
#define BCM_LIC_PENDING_2_EMMC_Msk        (0x40000000UL)            /*!< EMMC (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_PENDING_2_ETH_PCIE_SECURE_Pos (31UL)                /*!< ETH_PCIE_SECURE (Bit 31)                              */
#define BCM_LIC_PENDING_2_ETH_PCIE_SECURE_Msk (0x80000000UL)        /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01)                 */
/* ======================================================  FIQ_CONTROL  ====================================================== */
#define BCM_LIC_FIQ_CONTROL_ENABLE_Pos    (7UL)                     /*!< ENABLE (Bit 7)                                        */
#define BCM_LIC_FIQ_CONTROL_ENABLE_Msk    (0x80UL)                  /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_FIQ_CONTROL_SOURCE_Pos    (0UL)                     /*!< SOURCE (Bit 0)                                        */
#define BCM_LIC_FIQ_CONTROL_SOURCE_Msk    (0x7fUL)                  /*!< SOURCE (Bitfield-Mask: 0x7f)                          */
/* =======================================================  ENABLE_1  ======================================================== */
#define BCM_LIC_ENABLE_1_TIMER_0_Pos      (0UL)                     /*!< TIMER_0 (Bit 0)                                       */
#define BCM_LIC_ENABLE_1_TIMER_0_Msk      (0x1UL)                   /*!< TIMER_0 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_1_TIMER_1_Pos      (1UL)                     /*!< TIMER_1 (Bit 1)                                       */
#define BCM_LIC_ENABLE_1_TIMER_1_Msk      (0x2UL)                   /*!< TIMER_1 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_1_TIMER_2_Pos      (2UL)                     /*!< TIMER_2 (Bit 2)                                       */
#define BCM_LIC_ENABLE_1_TIMER_2_Msk      (0x4UL)                   /*!< TIMER_2 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_1_TIMER_3_Pos      (3UL)                     /*!< TIMER_3 (Bit 3)                                       */
#define BCM_LIC_ENABLE_1_TIMER_3_Msk      (0x8UL)                   /*!< TIMER_3 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_1_H264_0_Pos       (4UL)                     /*!< H264_0 (Bit 4)                                        */
#define BCM_LIC_ENABLE_1_H264_0_Msk       (0x10UL)                  /*!< H264_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_H264_1_Pos       (5UL)                     /*!< H264_1 (Bit 5)                                        */
#define BCM_LIC_ENABLE_1_H264_1_Msk       (0x20UL)                  /*!< H264_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_H264_2_Pos       (6UL)                     /*!< H264_2 (Bit 6)                                        */
#define BCM_LIC_ENABLE_1_H264_2_Msk       (0x40UL)                  /*!< H264_2 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_JPEG_Pos         (7UL)                     /*!< JPEG (Bit 7)                                          */
#define BCM_LIC_ENABLE_1_JPEG_Msk         (0x80UL)                  /*!< JPEG (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_1_ISP_Pos          (8UL)                     /*!< ISP (Bit 8)                                           */
#define BCM_LIC_ENABLE_1_ISP_Msk          (0x100UL)                 /*!< ISP (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_1_USB_Pos          (9UL)                     /*!< USB (Bit 9)                                           */
#define BCM_LIC_ENABLE_1_USB_Msk          (0x200UL)                 /*!< USB (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_1_V3D_Pos          (10UL)                    /*!< V3D (Bit 10)                                          */
#define BCM_LIC_ENABLE_1_V3D_Msk          (0x400UL)                 /*!< V3D (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_1_TRANSPOSER_Pos   (11UL)                    /*!< TRANSPOSER (Bit 11)                                   */
#define BCM_LIC_ENABLE_1_TRANSPOSER_Msk   (0x800UL)                 /*!< TRANSPOSER (Bitfield-Mask: 0x01)                      */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_0_Pos (12UL)                /*!< MULTICORE_SYNC_0 (Bit 12)                             */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_0_Msk (0x1000UL)            /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_1_Pos (13UL)                /*!< MULTICORE_SYNC_1 (Bit 13)                             */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_1_Msk (0x2000UL)            /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_2_Pos (14UL)                /*!< MULTICORE_SYNC_2 (Bit 14)                             */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_2_Msk (0x4000UL)            /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_3_Pos (15UL)                /*!< MULTICORE_SYNC_3 (Bit 15)                             */
#define BCM_LIC_ENABLE_1_MULTICORE_SYNC_3_Msk (0x8000UL)            /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_ENABLE_1_DMA_0_Pos        (16UL)                    /*!< DMA_0 (Bit 16)                                        */
#define BCM_LIC_ENABLE_1_DMA_0_Msk        (0x10000UL)               /*!< DMA_0 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_1_Pos        (17UL)                    /*!< DMA_1 (Bit 17)                                        */
#define BCM_LIC_ENABLE_1_DMA_1_Msk        (0x20000UL)               /*!< DMA_1 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_2_Pos        (18UL)                    /*!< DMA_2 (Bit 18)                                        */
#define BCM_LIC_ENABLE_1_DMA_2_Msk        (0x40000UL)               /*!< DMA_2 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_3_Pos        (19UL)                    /*!< DMA_3 (Bit 19)                                        */
#define BCM_LIC_ENABLE_1_DMA_3_Msk        (0x80000UL)               /*!< DMA_3 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_4_Pos        (20UL)                    /*!< DMA_4 (Bit 20)                                        */
#define BCM_LIC_ENABLE_1_DMA_4_Msk        (0x100000UL)              /*!< DMA_4 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_5_Pos        (21UL)                    /*!< DMA_5 (Bit 21)                                        */
#define BCM_LIC_ENABLE_1_DMA_5_Msk        (0x200000UL)              /*!< DMA_5 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_6_Pos        (22UL)                    /*!< DMA_6 (Bit 22)                                        */
#define BCM_LIC_ENABLE_1_DMA_6_Msk        (0x400000UL)              /*!< DMA_6 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_1_DMA_7_8_Pos      (23UL)                    /*!< DMA_7_8 (Bit 23)                                      */
#define BCM_LIC_ENABLE_1_DMA_7_8_Msk      (0x800000UL)              /*!< DMA_7_8 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_1_DMA_9_10_Pos     (24UL)                    /*!< DMA_9_10 (Bit 24)                                     */
#define BCM_LIC_ENABLE_1_DMA_9_10_Msk     (0x1000000UL)             /*!< DMA_9_10 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_ENABLE_1_DMA_11_Pos       (25UL)                    /*!< DMA_11 (Bit 25)                                       */
#define BCM_LIC_ENABLE_1_DMA_11_Msk       (0x2000000UL)             /*!< DMA_11 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_DMA_12_Pos       (26UL)                    /*!< DMA_12 (Bit 26)                                       */
#define BCM_LIC_ENABLE_1_DMA_12_Msk       (0x4000000UL)             /*!< DMA_12 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_DMA_13_Pos       (27UL)                    /*!< DMA_13 (Bit 27)                                       */
#define BCM_LIC_ENABLE_1_DMA_13_Msk       (0x8000000UL)             /*!< DMA_13 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_DMA_14_Pos       (28UL)                    /*!< DMA_14 (Bit 28)                                       */
#define BCM_LIC_ENABLE_1_DMA_14_Msk       (0x10000000UL)            /*!< DMA_14 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_1_AUX_Pos          (29UL)                    /*!< AUX (Bit 29)                                          */
#define BCM_LIC_ENABLE_1_AUX_Msk          (0x20000000UL)            /*!< AUX (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_1_ARM_Pos          (30UL)                    /*!< ARM (Bit 30)                                          */
#define BCM_LIC_ENABLE_1_ARM_Msk          (0x40000000UL)            /*!< ARM (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_1_DMA_15_Pos       (31UL)                    /*!< DMA_15 (Bit 31)                                       */
#define BCM_LIC_ENABLE_1_DMA_15_Msk       (0x80000000UL)            /*!< DMA_15 (Bitfield-Mask: 0x01)                          */
/* =======================================================  ENABLE_2  ======================================================== */
#define BCM_LIC_ENABLE_2_HDMI_CEC_Pos     (0UL)                     /*!< HDMI_CEC (Bit 0)                                      */
#define BCM_LIC_ENABLE_2_HDMI_CEC_Msk     (0x1UL)                   /*!< HDMI_CEC (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_ENABLE_2_HVS_Pos          (1UL)                     /*!< HVS (Bit 1)                                           */
#define BCM_LIC_ENABLE_2_HVS_Msk          (0x2UL)                   /*!< HVS (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_RPIVID_Pos       (2UL)                     /*!< RPIVID (Bit 2)                                        */
#define BCM_LIC_ENABLE_2_RPIVID_Msk       (0x4UL)                   /*!< RPIVID (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_SDC_Pos          (3UL)                     /*!< SDC (Bit 3)                                           */
#define BCM_LIC_ENABLE_2_SDC_Msk          (0x8UL)                   /*!< SDC (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_DSI_0_Pos        (4UL)                     /*!< DSI_0 (Bit 4)                                         */
#define BCM_LIC_ENABLE_2_DSI_0_Msk        (0x10UL)                  /*!< DSI_0 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_2_Pos (5UL)                    /*!< PIXEL_VALVE_2 (Bit 5)                                 */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_2_Msk (0x20UL)                 /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_ENABLE_2_CAMERA_0_Pos     (6UL)                     /*!< CAMERA_0 (Bit 6)                                      */
#define BCM_LIC_ENABLE_2_CAMERA_0_Msk     (0x40UL)                  /*!< CAMERA_0 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_ENABLE_2_CAMERA_1_Pos     (7UL)                     /*!< CAMERA_1 (Bit 7)                                      */
#define BCM_LIC_ENABLE_2_CAMERA_1_Msk     (0x80UL)                  /*!< CAMERA_1 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_ENABLE_2_HDMI_0_Pos       (8UL)                     /*!< HDMI_0 (Bit 8)                                        */
#define BCM_LIC_ENABLE_2_HDMI_0_Msk       (0x100UL)                 /*!< HDMI_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_HDMI_1_Pos       (9UL)                     /*!< HDMI_1 (Bit 9)                                        */
#define BCM_LIC_ENABLE_2_HDMI_1_Msk       (0x200UL)                 /*!< HDMI_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_3_Pos (10UL)                   /*!< PIXEL_VALVE_3 (Bit 10)                                */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_3_Msk (0x400UL)                /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_ENABLE_2_SPI_BSC_SLAVE_Pos (11UL)                   /*!< SPI_BSC_SLAVE (Bit 11)                                */
#define BCM_LIC_ENABLE_2_SPI_BSC_SLAVE_Msk (0x800UL)                /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_ENABLE_2_DSI_1_Pos        (12UL)                    /*!< DSI_1 (Bit 12)                                        */
#define BCM_LIC_ENABLE_2_DSI_1_Msk        (0x1000UL)                /*!< DSI_1 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_0_Pos (13UL)                   /*!< PIXEL_VALVE_0 (Bit 13)                                */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_0_Msk (0x2000UL)               /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_1_2_Pos (14UL)                 /*!< PIXEL_VALVE_1_2 (Bit 14)                              */
#define BCM_LIC_ENABLE_2_PIXEL_VALVE_1_2_Msk (0x4000UL)             /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01)                 */
#define BCM_LIC_ENABLE_2_CPR_Pos          (15UL)                    /*!< CPR (Bit 15)                                          */
#define BCM_LIC_ENABLE_2_CPR_Msk          (0x8000UL)                /*!< CPR (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_SMI_Pos          (16UL)                    /*!< SMI (Bit 16)                                          */
#define BCM_LIC_ENABLE_2_SMI_Msk          (0x10000UL)               /*!< SMI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_GPIO_0_Pos       (17UL)                    /*!< GPIO_0 (Bit 17)                                       */
#define BCM_LIC_ENABLE_2_GPIO_0_Msk       (0x20000UL)               /*!< GPIO_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_GPIO_1_Pos       (18UL)                    /*!< GPIO_1 (Bit 18)                                       */
#define BCM_LIC_ENABLE_2_GPIO_1_Msk       (0x40000UL)               /*!< GPIO_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_GPIO_2_Pos       (19UL)                    /*!< GPIO_2 (Bit 19)                                       */
#define BCM_LIC_ENABLE_2_GPIO_2_Msk       (0x80000UL)               /*!< GPIO_2 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_GPIO_3_Pos       (20UL)                    /*!< GPIO_3 (Bit 20)                                       */
#define BCM_LIC_ENABLE_2_GPIO_3_Msk       (0x100000UL)              /*!< GPIO_3 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_I2C_Pos          (21UL)                    /*!< I2C (Bit 21)                                          */
#define BCM_LIC_ENABLE_2_I2C_Msk          (0x200000UL)              /*!< I2C (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_SPI_Pos          (22UL)                    /*!< SPI (Bit 22)                                          */
#define BCM_LIC_ENABLE_2_SPI_Msk          (0x400000UL)              /*!< SPI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_PCM_I2S_Pos      (23UL)                    /*!< PCM_I2S (Bit 23)                                      */
#define BCM_LIC_ENABLE_2_PCM_I2S_Msk      (0x800000UL)              /*!< PCM_I2S (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_2_SDHOST_Pos       (24UL)                    /*!< SDHOST (Bit 24)                                       */
#define BCM_LIC_ENABLE_2_SDHOST_Msk       (0x1000000UL)             /*!< SDHOST (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_ENABLE_2_UART_Pos         (25UL)                    /*!< UART (Bit 25)                                         */
#define BCM_LIC_ENABLE_2_UART_Msk         (0x2000000UL)             /*!< UART (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_2_ETH_PCIE_Pos     (26UL)                    /*!< ETH_PCIE (Bit 26)                                     */
#define BCM_LIC_ENABLE_2_ETH_PCIE_Msk     (0x4000000UL)             /*!< ETH_PCIE (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_ENABLE_2_VEC_Pos          (27UL)                    /*!< VEC (Bit 27)                                          */
#define BCM_LIC_ENABLE_2_VEC_Msk          (0x8000000UL)             /*!< VEC (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_CPG_Pos          (28UL)                    /*!< CPG (Bit 28)                                          */
#define BCM_LIC_ENABLE_2_CPG_Msk          (0x10000000UL)            /*!< CPG (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_RNG_Pos          (29UL)                    /*!< RNG (Bit 29)                                          */
#define BCM_LIC_ENABLE_2_RNG_Msk          (0x20000000UL)            /*!< RNG (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_ENABLE_2_EMMC_Pos         (30UL)                    /*!< EMMC (Bit 30)                                         */
#define BCM_LIC_ENABLE_2_EMMC_Msk         (0x40000000UL)            /*!< EMMC (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_ENABLE_2_ETH_PCIE_SECURE_Pos (31UL)                 /*!< ETH_PCIE_SECURE (Bit 31)                              */
#define BCM_LIC_ENABLE_2_ETH_PCIE_SECURE_Msk (0x80000000UL)         /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01)                 */
/* =====================================================  ENABLE_BASIC  ====================================================== */
#define BCM_LIC_ENABLE_BASIC_TIMER_Pos    (0UL)                     /*!< TIMER (Bit 0)                                         */
#define BCM_LIC_ENABLE_BASIC_TIMER_Msk    (0x1UL)                   /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_ENABLE_BASIC_MAILBOX_Pos  (1UL)                     /*!< MAILBOX (Bit 1)                                       */
#define BCM_LIC_ENABLE_BASIC_MAILBOX_Msk  (0x2UL)                   /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_ENABLE_BASIC_DOORBELL0_Pos (2UL)                    /*!< DOORBELL0 (Bit 2)                                     */
#define BCM_LIC_ENABLE_BASIC_DOORBELL0_Msk (0x4UL)                  /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_ENABLE_BASIC_DOORBELL1_Pos (3UL)                    /*!< DOORBELL1 (Bit 3)                                     */
#define BCM_LIC_ENABLE_BASIC_DOORBELL1_Msk (0x8UL)                  /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_ENABLE_BASIC_VPU0_HALTED_Pos (4UL)                  /*!< VPU0_HALTED (Bit 4)                                   */
#define BCM_LIC_ENABLE_BASIC_VPU0_HALTED_Msk (0x10UL)               /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_ENABLE_BASIC_VPU1_HALTED_Pos (5UL)                  /*!< VPU1_HALTED (Bit 5)                                   */
#define BCM_LIC_ENABLE_BASIC_VPU1_HALTED_Msk (0x20UL)               /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_ENABLE_BASIC_ARM_ADDRESS_ERROR_Pos (6UL)            /*!< ARM_ADDRESS_ERROR (Bit 6)                             */
#define BCM_LIC_ENABLE_BASIC_ARM_ADDRESS_ERROR_Msk (0x40UL)         /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)               */
#define BCM_LIC_ENABLE_BASIC_ARM_AXI_ERROR_Pos (7UL)                /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define BCM_LIC_ENABLE_BASIC_ARM_AXI_ERROR_Msk (0x80UL)             /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                   */
/* =======================================================  DISABLE_1  ======================================================= */
#define BCM_LIC_DISABLE_1_TIMER_0_Pos     (0UL)                     /*!< TIMER_0 (Bit 0)                                       */
#define BCM_LIC_DISABLE_1_TIMER_0_Msk     (0x1UL)                   /*!< TIMER_0 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_1_TIMER_1_Pos     (1UL)                     /*!< TIMER_1 (Bit 1)                                       */
#define BCM_LIC_DISABLE_1_TIMER_1_Msk     (0x2UL)                   /*!< TIMER_1 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_1_TIMER_2_Pos     (2UL)                     /*!< TIMER_2 (Bit 2)                                       */
#define BCM_LIC_DISABLE_1_TIMER_2_Msk     (0x4UL)                   /*!< TIMER_2 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_1_TIMER_3_Pos     (3UL)                     /*!< TIMER_3 (Bit 3)                                       */
#define BCM_LIC_DISABLE_1_TIMER_3_Msk     (0x8UL)                   /*!< TIMER_3 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_1_H264_0_Pos      (4UL)                     /*!< H264_0 (Bit 4)                                        */
#define BCM_LIC_DISABLE_1_H264_0_Msk      (0x10UL)                  /*!< H264_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_H264_1_Pos      (5UL)                     /*!< H264_1 (Bit 5)                                        */
#define BCM_LIC_DISABLE_1_H264_1_Msk      (0x20UL)                  /*!< H264_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_H264_2_Pos      (6UL)                     /*!< H264_2 (Bit 6)                                        */
#define BCM_LIC_DISABLE_1_H264_2_Msk      (0x40UL)                  /*!< H264_2 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_JPEG_Pos        (7UL)                     /*!< JPEG (Bit 7)                                          */
#define BCM_LIC_DISABLE_1_JPEG_Msk        (0x80UL)                  /*!< JPEG (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_1_ISP_Pos         (8UL)                     /*!< ISP (Bit 8)                                           */
#define BCM_LIC_DISABLE_1_ISP_Msk         (0x100UL)                 /*!< ISP (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_1_USB_Pos         (9UL)                     /*!< USB (Bit 9)                                           */
#define BCM_LIC_DISABLE_1_USB_Msk         (0x200UL)                 /*!< USB (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_1_V3D_Pos         (10UL)                    /*!< V3D (Bit 10)                                          */
#define BCM_LIC_DISABLE_1_V3D_Msk         (0x400UL)                 /*!< V3D (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_1_TRANSPOSER_Pos  (11UL)                    /*!< TRANSPOSER (Bit 11)                                   */
#define BCM_LIC_DISABLE_1_TRANSPOSER_Msk  (0x800UL)                 /*!< TRANSPOSER (Bitfield-Mask: 0x01)                      */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_0_Pos (12UL)               /*!< MULTICORE_SYNC_0 (Bit 12)                             */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_0_Msk (0x1000UL)           /*!< MULTICORE_SYNC_0 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_1_Pos (13UL)               /*!< MULTICORE_SYNC_1 (Bit 13)                             */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_1_Msk (0x2000UL)           /*!< MULTICORE_SYNC_1 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_2_Pos (14UL)               /*!< MULTICORE_SYNC_2 (Bit 14)                             */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_2_Msk (0x4000UL)           /*!< MULTICORE_SYNC_2 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_3_Pos (15UL)               /*!< MULTICORE_SYNC_3 (Bit 15)                             */
#define BCM_LIC_DISABLE_1_MULTICORE_SYNC_3_Msk (0x8000UL)           /*!< MULTICORE_SYNC_3 (Bitfield-Mask: 0x01)                */
#define BCM_LIC_DISABLE_1_DMA_0_Pos       (16UL)                    /*!< DMA_0 (Bit 16)                                        */
#define BCM_LIC_DISABLE_1_DMA_0_Msk       (0x10000UL)               /*!< DMA_0 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_1_Pos       (17UL)                    /*!< DMA_1 (Bit 17)                                        */
#define BCM_LIC_DISABLE_1_DMA_1_Msk       (0x20000UL)               /*!< DMA_1 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_2_Pos       (18UL)                    /*!< DMA_2 (Bit 18)                                        */
#define BCM_LIC_DISABLE_1_DMA_2_Msk       (0x40000UL)               /*!< DMA_2 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_3_Pos       (19UL)                    /*!< DMA_3 (Bit 19)                                        */
#define BCM_LIC_DISABLE_1_DMA_3_Msk       (0x80000UL)               /*!< DMA_3 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_4_Pos       (20UL)                    /*!< DMA_4 (Bit 20)                                        */
#define BCM_LIC_DISABLE_1_DMA_4_Msk       (0x100000UL)              /*!< DMA_4 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_5_Pos       (21UL)                    /*!< DMA_5 (Bit 21)                                        */
#define BCM_LIC_DISABLE_1_DMA_5_Msk       (0x200000UL)              /*!< DMA_5 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_6_Pos       (22UL)                    /*!< DMA_6 (Bit 22)                                        */
#define BCM_LIC_DISABLE_1_DMA_6_Msk       (0x400000UL)              /*!< DMA_6 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_1_DMA_7_8_Pos     (23UL)                    /*!< DMA_7_8 (Bit 23)                                      */
#define BCM_LIC_DISABLE_1_DMA_7_8_Msk     (0x800000UL)              /*!< DMA_7_8 (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_1_DMA_9_10_Pos    (24UL)                    /*!< DMA_9_10 (Bit 24)                                     */
#define BCM_LIC_DISABLE_1_DMA_9_10_Msk    (0x1000000UL)             /*!< DMA_9_10 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_DISABLE_1_DMA_11_Pos      (25UL)                    /*!< DMA_11 (Bit 25)                                       */
#define BCM_LIC_DISABLE_1_DMA_11_Msk      (0x2000000UL)             /*!< DMA_11 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_DMA_12_Pos      (26UL)                    /*!< DMA_12 (Bit 26)                                       */
#define BCM_LIC_DISABLE_1_DMA_12_Msk      (0x4000000UL)             /*!< DMA_12 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_DMA_13_Pos      (27UL)                    /*!< DMA_13 (Bit 27)                                       */
#define BCM_LIC_DISABLE_1_DMA_13_Msk      (0x8000000UL)             /*!< DMA_13 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_DMA_14_Pos      (28UL)                    /*!< DMA_14 (Bit 28)                                       */
#define BCM_LIC_DISABLE_1_DMA_14_Msk      (0x10000000UL)            /*!< DMA_14 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_1_AUX_Pos         (29UL)                    /*!< AUX (Bit 29)                                          */
#define BCM_LIC_DISABLE_1_AUX_Msk         (0x20000000UL)            /*!< AUX (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_1_ARM_Pos         (30UL)                    /*!< ARM (Bit 30)                                          */
#define BCM_LIC_DISABLE_1_ARM_Msk         (0x40000000UL)            /*!< ARM (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_1_DMA_15_Pos      (31UL)                    /*!< DMA_15 (Bit 31)                                       */
#define BCM_LIC_DISABLE_1_DMA_15_Msk      (0x80000000UL)            /*!< DMA_15 (Bitfield-Mask: 0x01)                          */
/* =======================================================  DISABLE_2  ======================================================= */
#define BCM_LIC_DISABLE_2_HDMI_CEC_Pos    (0UL)                     /*!< HDMI_CEC (Bit 0)                                      */
#define BCM_LIC_DISABLE_2_HDMI_CEC_Msk    (0x1UL)                   /*!< HDMI_CEC (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_DISABLE_2_HVS_Pos         (1UL)                     /*!< HVS (Bit 1)                                           */
#define BCM_LIC_DISABLE_2_HVS_Msk         (0x2UL)                   /*!< HVS (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_RPIVID_Pos      (2UL)                     /*!< RPIVID (Bit 2)                                        */
#define BCM_LIC_DISABLE_2_RPIVID_Msk      (0x4UL)                   /*!< RPIVID (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_SDC_Pos         (3UL)                     /*!< SDC (Bit 3)                                           */
#define BCM_LIC_DISABLE_2_SDC_Msk         (0x8UL)                   /*!< SDC (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_DSI_0_Pos       (4UL)                     /*!< DSI_0 (Bit 4)                                         */
#define BCM_LIC_DISABLE_2_DSI_0_Msk       (0x10UL)                  /*!< DSI_0 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_2_Pos (5UL)                   /*!< PIXEL_VALVE_2 (Bit 5)                                 */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_2_Msk (0x20UL)                /*!< PIXEL_VALVE_2 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_DISABLE_2_CAMERA_0_Pos    (6UL)                     /*!< CAMERA_0 (Bit 6)                                      */
#define BCM_LIC_DISABLE_2_CAMERA_0_Msk    (0x40UL)                  /*!< CAMERA_0 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_DISABLE_2_CAMERA_1_Pos    (7UL)                     /*!< CAMERA_1 (Bit 7)                                      */
#define BCM_LIC_DISABLE_2_CAMERA_1_Msk    (0x80UL)                  /*!< CAMERA_1 (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_DISABLE_2_HDMI_0_Pos      (8UL)                     /*!< HDMI_0 (Bit 8)                                        */
#define BCM_LIC_DISABLE_2_HDMI_0_Msk      (0x100UL)                 /*!< HDMI_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_HDMI_1_Pos      (9UL)                     /*!< HDMI_1 (Bit 9)                                        */
#define BCM_LIC_DISABLE_2_HDMI_1_Msk      (0x200UL)                 /*!< HDMI_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_3_Pos (10UL)                  /*!< PIXEL_VALVE_3 (Bit 10)                                */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_3_Msk (0x400UL)               /*!< PIXEL_VALVE_3 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_DISABLE_2_SPI_BSC_SLAVE_Pos (11UL)                  /*!< SPI_BSC_SLAVE (Bit 11)                                */
#define BCM_LIC_DISABLE_2_SPI_BSC_SLAVE_Msk (0x800UL)               /*!< SPI_BSC_SLAVE (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_DISABLE_2_DSI_1_Pos       (12UL)                    /*!< DSI_1 (Bit 12)                                        */
#define BCM_LIC_DISABLE_2_DSI_1_Msk       (0x1000UL)                /*!< DSI_1 (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_0_Pos (13UL)                  /*!< PIXEL_VALVE_0 (Bit 13)                                */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_0_Msk (0x2000UL)              /*!< PIXEL_VALVE_0 (Bitfield-Mask: 0x01)                   */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_1_2_Pos (14UL)                /*!< PIXEL_VALVE_1_2 (Bit 14)                              */
#define BCM_LIC_DISABLE_2_PIXEL_VALVE_1_2_Msk (0x4000UL)            /*!< PIXEL_VALVE_1_2 (Bitfield-Mask: 0x01)                 */
#define BCM_LIC_DISABLE_2_CPR_Pos         (15UL)                    /*!< CPR (Bit 15)                                          */
#define BCM_LIC_DISABLE_2_CPR_Msk         (0x8000UL)                /*!< CPR (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_SMI_Pos         (16UL)                    /*!< SMI (Bit 16)                                          */
#define BCM_LIC_DISABLE_2_SMI_Msk         (0x10000UL)               /*!< SMI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_GPIO_0_Pos      (17UL)                    /*!< GPIO_0 (Bit 17)                                       */
#define BCM_LIC_DISABLE_2_GPIO_0_Msk      (0x20000UL)               /*!< GPIO_0 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_GPIO_1_Pos      (18UL)                    /*!< GPIO_1 (Bit 18)                                       */
#define BCM_LIC_DISABLE_2_GPIO_1_Msk      (0x40000UL)               /*!< GPIO_1 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_GPIO_2_Pos      (19UL)                    /*!< GPIO_2 (Bit 19)                                       */
#define BCM_LIC_DISABLE_2_GPIO_2_Msk      (0x80000UL)               /*!< GPIO_2 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_GPIO_3_Pos      (20UL)                    /*!< GPIO_3 (Bit 20)                                       */
#define BCM_LIC_DISABLE_2_GPIO_3_Msk      (0x100000UL)              /*!< GPIO_3 (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_I2C_Pos         (21UL)                    /*!< I2C (Bit 21)                                          */
#define BCM_LIC_DISABLE_2_I2C_Msk         (0x200000UL)              /*!< I2C (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_SPI_Pos         (22UL)                    /*!< SPI (Bit 22)                                          */
#define BCM_LIC_DISABLE_2_SPI_Msk         (0x400000UL)              /*!< SPI (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_PCM_I2S_Pos     (23UL)                    /*!< PCM_I2S (Bit 23)                                      */
#define BCM_LIC_DISABLE_2_PCM_I2S_Msk     (0x800000UL)              /*!< PCM_I2S (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_2_SDHOST_Pos      (24UL)                    /*!< SDHOST (Bit 24)                                       */
#define BCM_LIC_DISABLE_2_SDHOST_Msk      (0x1000000UL)             /*!< SDHOST (Bitfield-Mask: 0x01)                          */
#define BCM_LIC_DISABLE_2_UART_Pos        (25UL)                    /*!< UART (Bit 25)                                         */
#define BCM_LIC_DISABLE_2_UART_Msk        (0x2000000UL)             /*!< UART (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_2_ETH_PCIE_Pos    (26UL)                    /*!< ETH_PCIE (Bit 26)                                     */
#define BCM_LIC_DISABLE_2_ETH_PCIE_Msk    (0x4000000UL)             /*!< ETH_PCIE (Bitfield-Mask: 0x01)                        */
#define BCM_LIC_DISABLE_2_VEC_Pos         (27UL)                    /*!< VEC (Bit 27)                                          */
#define BCM_LIC_DISABLE_2_VEC_Msk         (0x8000000UL)             /*!< VEC (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_CPG_Pos         (28UL)                    /*!< CPG (Bit 28)                                          */
#define BCM_LIC_DISABLE_2_CPG_Msk         (0x10000000UL)            /*!< CPG (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_RNG_Pos         (29UL)                    /*!< RNG (Bit 29)                                          */
#define BCM_LIC_DISABLE_2_RNG_Msk         (0x20000000UL)            /*!< RNG (Bitfield-Mask: 0x01)                             */
#define BCM_LIC_DISABLE_2_EMMC_Pos        (30UL)                    /*!< EMMC (Bit 30)                                         */
#define BCM_LIC_DISABLE_2_EMMC_Msk        (0x40000000UL)            /*!< EMMC (Bitfield-Mask: 0x01)                            */
#define BCM_LIC_DISABLE_2_ETH_PCIE_SECURE_Pos (31UL)                /*!< ETH_PCIE_SECURE (Bit 31)                              */
#define BCM_LIC_DISABLE_2_ETH_PCIE_SECURE_Msk (0x80000000UL)        /*!< ETH_PCIE_SECURE (Bitfield-Mask: 0x01)                 */
/* =====================================================  DISABLE_BASIC  ===================================================== */
#define BCM_LIC_DISABLE_BASIC_TIMER_Pos   (0UL)                     /*!< TIMER (Bit 0)                                         */
#define BCM_LIC_DISABLE_BASIC_TIMER_Msk   (0x1UL)                   /*!< TIMER (Bitfield-Mask: 0x01)                           */
#define BCM_LIC_DISABLE_BASIC_MAILBOX_Pos (1UL)                     /*!< MAILBOX (Bit 1)                                       */
#define BCM_LIC_DISABLE_BASIC_MAILBOX_Msk (0x2UL)                   /*!< MAILBOX (Bitfield-Mask: 0x01)                         */
#define BCM_LIC_DISABLE_BASIC_DOORBELL0_Pos (2UL)                   /*!< DOORBELL0 (Bit 2)                                     */
#define BCM_LIC_DISABLE_BASIC_DOORBELL0_Msk (0x4UL)                 /*!< DOORBELL0 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_DISABLE_BASIC_DOORBELL1_Pos (3UL)                   /*!< DOORBELL1 (Bit 3)                                     */
#define BCM_LIC_DISABLE_BASIC_DOORBELL1_Msk (0x8UL)                 /*!< DOORBELL1 (Bitfield-Mask: 0x01)                       */
#define BCM_LIC_DISABLE_BASIC_VPU0_HALTED_Pos (4UL)                 /*!< VPU0_HALTED (Bit 4)                                   */
#define BCM_LIC_DISABLE_BASIC_VPU0_HALTED_Msk (0x10UL)              /*!< VPU0_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_DISABLE_BASIC_VPU1_HALTED_Pos (5UL)                 /*!< VPU1_HALTED (Bit 5)                                   */
#define BCM_LIC_DISABLE_BASIC_VPU1_HALTED_Msk (0x20UL)              /*!< VPU1_HALTED (Bitfield-Mask: 0x01)                     */
#define BCM_LIC_DISABLE_BASIC_ARM_ADDRESS_ERROR_Pos (6UL)           /*!< ARM_ADDRESS_ERROR (Bit 6)                             */
#define BCM_LIC_DISABLE_BASIC_ARM_ADDRESS_ERROR_Msk (0x40UL)        /*!< ARM_ADDRESS_ERROR (Bitfield-Mask: 0x01)               */
#define BCM_LIC_DISABLE_BASIC_ARM_AXI_ERROR_Pos (7UL)               /*!< ARM_AXI_ERROR (Bit 7)                                 */
#define BCM_LIC_DISABLE_BASIC_ARM_AXI_ERROR_Msk (0x80UL)            /*!< ARM_AXI_ERROR (Bitfield-Mask: 0x01)                   */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_GLOBAL                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCTL  ======================================================== */
#define USB_OTG_GLOBAL_GOTGCTL_SRQSCS_Pos (0UL)                     /*!< SRQSCS (Bit 0)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_SRQSCS_Msk (0x1UL)                   /*!< SRQSCS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_SRQ_Pos    (1UL)                     /*!< SRQ (Bit 1)                                           */
#define USB_OTG_GLOBAL_GOTGCTL_SRQ_Msk    (0x2UL)                   /*!< SRQ (Bitfield-Mask: 0x01)                             */
#define USB_OTG_GLOBAL_GOTGCTL_HNGSCS_Pos (8UL)                     /*!< HNGSCS (Bit 8)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_HNGSCS_Msk (0x100UL)                 /*!< HNGSCS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_HNPRQ_Pos  (9UL)                     /*!< HNPRQ (Bit 9)                                         */
#define USB_OTG_GLOBAL_GOTGCTL_HNPRQ_Msk  (0x200UL)                 /*!< HNPRQ (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GOTGCTL_HSHNPEN_Pos (10UL)                   /*!< HSHNPEN (Bit 10)                                      */
#define USB_OTG_GLOBAL_GOTGCTL_HSHNPEN_Msk (0x400UL)                /*!< HSHNPEN (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGCTL_DHNPEN_Pos (11UL)                    /*!< DHNPEN (Bit 11)                                       */
#define USB_OTG_GLOBAL_GOTGCTL_DHNPEN_Msk (0x800UL)                 /*!< DHNPEN (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_CIDSTS_Pos (16UL)                    /*!< CIDSTS (Bit 16)                                       */
#define USB_OTG_GLOBAL_GOTGCTL_CIDSTS_Msk (0x10000UL)               /*!< CIDSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGCTL_DBCT_Pos   (17UL)                    /*!< DBCT (Bit 17)                                         */
#define USB_OTG_GLOBAL_GOTGCTL_DBCT_Msk   (0x20000UL)               /*!< DBCT (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GOTGCTL_ASVLD_Pos  (18UL)                    /*!< ASVLD (Bit 18)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_ASVLD_Msk  (0x40000UL)               /*!< ASVLD (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GOTGCTL_BSVLD_Pos  (19UL)                    /*!< BSVLD (Bit 19)                                        */
#define USB_OTG_GLOBAL_GOTGCTL_BSVLD_Msk  (0x80000UL)               /*!< BSVLD (Bitfield-Mask: 0x01)                           */
/* ========================================================  GOTGINT  ======================================================== */
#define USB_OTG_GLOBAL_GOTGINT_SEDET_Pos  (2UL)                     /*!< SEDET (Bit 2)                                         */
#define USB_OTG_GLOBAL_GOTGINT_SEDET_Msk  (0x4UL)                   /*!< SEDET (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GOTGINT_SRSSCHG_Pos (8UL)                    /*!< SRSSCHG (Bit 8)                                       */
#define USB_OTG_GLOBAL_GOTGINT_SRSSCHG_Msk (0x100UL)                /*!< SRSSCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGINT_HNSSCHG_Pos (9UL)                    /*!< HNSSCHG (Bit 9)                                       */
#define USB_OTG_GLOBAL_GOTGINT_HNSSCHG_Msk (0x200UL)                /*!< HNSSCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGINT_HNGDET_Pos (17UL)                    /*!< HNGDET (Bit 17)                                       */
#define USB_OTG_GLOBAL_GOTGINT_HNGDET_Msk (0x20000UL)               /*!< HNGDET (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GOTGINT_ADTOCHG_Pos (18UL)                   /*!< ADTOCHG (Bit 18)                                      */
#define USB_OTG_GLOBAL_GOTGINT_ADTOCHG_Msk (0x40000UL)              /*!< ADTOCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GOTGINT_DBCDNE_Pos (19UL)                    /*!< DBCDNE (Bit 19)                                       */
#define USB_OTG_GLOBAL_GOTGINT_DBCDNE_Msk (0x80000UL)               /*!< DBCDNE (Bitfield-Mask: 0x01)                          */
/* ========================================================  GAHBCFG  ======================================================== */
#define USB_OTG_GLOBAL_GAHBCFG_GINT_Pos   (0UL)                     /*!< GINT (Bit 0)                                          */
#define USB_OTG_GLOBAL_GAHBCFG_GINT_Msk   (0x1UL)                   /*!< GINT (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_WAIT_Pos (4UL)                   /*!< AXI_WAIT (Bit 4)                                      */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_WAIT_Msk (0x10UL)                /*!< AXI_WAIT (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_Pos (1UL)                  /*!< AXI_BURST (Bit 1)                                     */
#define USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_Msk (0x6UL)                /*!< AXI_BURST (Bitfield-Mask: 0x03)                       */
#define USB_OTG_GLOBAL_GAHBCFG_DMAEN_Pos  (5UL)                     /*!< DMAEN (Bit 5)                                         */
#define USB_OTG_GLOBAL_GAHBCFG_DMAEN_Msk  (0x20UL)                  /*!< DMAEN (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GAHBCFG_TXFELVL_Pos (7UL)                    /*!< TXFELVL (Bit 7)                                       */
#define USB_OTG_GLOBAL_GAHBCFG_TXFELVL_Msk (0x80UL)                 /*!< TXFELVL (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GAHBCFG_PTXFELVL_Pos (8UL)                   /*!< PTXFELVL (Bit 8)                                      */
#define USB_OTG_GLOBAL_GAHBCFG_PTXFELVL_Msk (0x100UL)               /*!< PTXFELVL (Bitfield-Mask: 0x01)                        */
/* ========================================================  GUSBCFG  ======================================================== */
#define USB_OTG_GLOBAL_GUSBCFG_TOCAL_Pos  (0UL)                     /*!< TOCAL (Bit 0)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_TOCAL_Msk  (0x7UL)                   /*!< TOCAL (Bitfield-Mask: 0x07)                           */
#define USB_OTG_GLOBAL_GUSBCFG_PHYIF_Pos  (3UL)                     /*!< PHYIF (Bit 3)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_PHYIF_Msk  (0x8UL)                   /*!< PHYIF (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_Pos (4UL)                    /*!< PHYTYPE (Bit 4)                                       */
#define USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_Msk (0x10UL)                 /*!< PHYTYPE (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_FSIF_Pos   (5UL)                     /*!< FSIF (Bit 5)                                          */
#define USB_OTG_GLOBAL_GUSBCFG_FSIF_Msk   (0x20UL)                  /*!< FSIF (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GUSBCFG_PHYSEL_Pos (6UL)                     /*!< PHYSEL (Bit 6)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_PHYSEL_Msk (0x40UL)                  /*!< PHYSEL (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_DDRSEL_Pos (7UL)                     /*!< DDRSEL (Bit 7)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_DDRSEL_Msk (0x80UL)                  /*!< DDRSEL (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_SRPCAP_Pos (8UL)                     /*!< SRPCAP (Bit 8)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_SRPCAP_Msk (0x100UL)                 /*!< SRPCAP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_HNPCAP_Pos (9UL)                     /*!< HNPCAP (Bit 9)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_HNPCAP_Msk (0x200UL)                 /*!< HNPCAP (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_TRDT_Pos   (10UL)                    /*!< TRDT (Bit 10)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_TRDT_Msk   (0x3c00UL)                /*!< TRDT (Bitfield-Mask: 0x0f)                            */
#define USB_OTG_GLOBAL_GUSBCFG_PHYLPCS_Pos (15UL)                   /*!< PHYLPCS (Bit 15)                                      */
#define USB_OTG_GLOBAL_GUSBCFG_PHYLPCS_Msk (0x8000UL)               /*!< PHYLPCS (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIFSLS_Pos (17UL)                  /*!< ULPIFSLS (Bit 17)                                     */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIFSLS_Msk (0x20000UL)             /*!< ULPIFSLS (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIAR_Pos (18UL)                    /*!< ULPIAR (Bit 18)                                       */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIAR_Msk (0x40000UL)               /*!< ULPIAR (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GUSBCFG_ULPICSM_Pos (19UL)                   /*!< ULPICSM (Bit 19)                                      */
#define USB_OTG_GLOBAL_GUSBCFG_ULPICSM_Msk (0x80000UL)              /*!< ULPICSM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSD_Pos (20UL)                /*!< ULPIEVBUSD (Bit 20)                                   */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSD_Msk (0x100000UL)          /*!< ULPIEVBUSD (Bitfield-Mask: 0x01)                      */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSI_Pos (21UL)                /*!< ULPIEVBUSI (Bit 21)                                   */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIEVBUSI_Msk (0x200000UL)          /*!< ULPIEVBUSI (Bitfield-Mask: 0x01)                      */
#define USB_OTG_GLOBAL_GUSBCFG_TSDPS_Pos  (22UL)                    /*!< TSDPS (Bit 22)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_TSDPS_Msk  (0x400000UL)              /*!< TSDPS (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_PCCI_Pos   (23UL)                    /*!< PCCI (Bit 23)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_PCCI_Msk   (0x800000UL)              /*!< PCCI (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GUSBCFG_PTCI_Pos   (24UL)                    /*!< PTCI (Bit 24)                                         */
#define USB_OTG_GLOBAL_GUSBCFG_PTCI_Msk   (0x1000000UL)             /*!< PTCI (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIIPD_Pos (25UL)                   /*!< ULPIIPD (Bit 25)                                      */
#define USB_OTG_GLOBAL_GUSBCFG_ULPIIPD_Msk (0x2000000UL)            /*!< ULPIIPD (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GUSBCFG_FHMOD_Pos  (29UL)                    /*!< FHMOD (Bit 29)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_FHMOD_Msk  (0x20000000UL)            /*!< FHMOD (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_FDMOD_Pos  (30UL)                    /*!< FDMOD (Bit 30)                                        */
#define USB_OTG_GLOBAL_GUSBCFG_FDMOD_Msk  (0x40000000UL)            /*!< FDMOD (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GUSBCFG_CTXPKT_Pos (31UL)                    /*!< CTXPKT (Bit 31)                                       */
#define USB_OTG_GLOBAL_GUSBCFG_CTXPKT_Msk (0x80000000UL)            /*!< CTXPKT (Bitfield-Mask: 0x01)                          */
/* ========================================================  GRSTCTL  ======================================================== */
#define USB_OTG_GLOBAL_GRSTCTL_CSRST_Pos  (0UL)                     /*!< CSRST (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRSTCTL_CSRST_Msk  (0x1UL)                   /*!< CSRST (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GRSTCTL_HSRST_Pos  (1UL)                     /*!< HSRST (Bit 1)                                         */
#define USB_OTG_GLOBAL_GRSTCTL_HSRST_Msk  (0x2UL)                   /*!< HSRST (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GRSTCTL_FCRST_Pos  (2UL)                     /*!< FCRST (Bit 2)                                         */
#define USB_OTG_GLOBAL_GRSTCTL_FCRST_Msk  (0x4UL)                   /*!< FCRST (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GRSTCTL_RXFFLSH_Pos (4UL)                    /*!< RXFFLSH (Bit 4)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_RXFFLSH_Msk (0x10UL)                 /*!< RXFFLSH (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GRSTCTL_TXFFLSH_Pos (5UL)                    /*!< TXFFLSH (Bit 5)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_TXFFLSH_Msk (0x20UL)                 /*!< TXFFLSH (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GRSTCTL_TXFNUM_Pos (6UL)                     /*!< TXFNUM (Bit 6)                                        */
#define USB_OTG_GLOBAL_GRSTCTL_TXFNUM_Msk (0x7c0UL)                 /*!< TXFNUM (Bitfield-Mask: 0x1f)                          */
#define USB_OTG_GLOBAL_GRSTCTL_DMAREQ_Pos (30UL)                    /*!< DMAREQ (Bit 30)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_DMAREQ_Msk (0x40000000UL)            /*!< DMAREQ (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GRSTCTL_AHBIDL_Pos (31UL)                    /*!< AHBIDL (Bit 31)                                       */
#define USB_OTG_GLOBAL_GRSTCTL_AHBIDL_Msk (0x80000000UL)            /*!< AHBIDL (Bitfield-Mask: 0x01)                          */
/* ========================================================  GINTSTS  ======================================================== */
#define USB_OTG_GLOBAL_GINTSTS_CMOD_Pos   (0UL)                     /*!< CMOD (Bit 0)                                          */
#define USB_OTG_GLOBAL_GINTSTS_CMOD_Msk   (0x1UL)                   /*!< CMOD (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTSTS_MMIS_Pos   (1UL)                     /*!< MMIS (Bit 1)                                          */
#define USB_OTG_GLOBAL_GINTSTS_MMIS_Msk   (0x2UL)                   /*!< MMIS (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTSTS_OTGINT_Pos (2UL)                     /*!< OTGINT (Bit 2)                                        */
#define USB_OTG_GLOBAL_GINTSTS_OTGINT_Msk (0x4UL)                   /*!< OTGINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_SOF_Pos    (3UL)                     /*!< SOF (Bit 3)                                           */
#define USB_OTG_GLOBAL_GINTSTS_SOF_Msk    (0x8UL)                   /*!< SOF (Bitfield-Mask: 0x01)                             */
#define USB_OTG_GLOBAL_GINTSTS_RXFLVL_Pos (4UL)                     /*!< RXFLVL (Bit 4)                                        */
#define USB_OTG_GLOBAL_GINTSTS_RXFLVL_Msk (0x10UL)                  /*!< RXFLVL (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_NPTXFE_Pos (5UL)                     /*!< NPTXFE (Bit 5)                                        */
#define USB_OTG_GLOBAL_GINTSTS_NPTXFE_Msk (0x20UL)                  /*!< NPTXFE (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_GINAKEFF_Pos (6UL)                   /*!< GINAKEFF (Bit 6)                                      */
#define USB_OTG_GLOBAL_GINTSTS_GINAKEFF_Msk (0x40UL)                /*!< GINAKEFF (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTSTS_BOUTNAKEFF_Pos (7UL)                 /*!< BOUTNAKEFF (Bit 7)                                    */
#define USB_OTG_GLOBAL_GINTSTS_BOUTNAKEFF_Msk (0x80UL)              /*!< BOUTNAKEFF (Bitfield-Mask: 0x01)                      */
#define USB_OTG_GLOBAL_GINTSTS_ESUSP_Pos  (10UL)                    /*!< ESUSP (Bit 10)                                        */
#define USB_OTG_GLOBAL_GINTSTS_ESUSP_Msk  (0x400UL)                 /*!< ESUSP (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTSTS_USBSUSP_Pos (11UL)                   /*!< USBSUSP (Bit 11)                                      */
#define USB_OTG_GLOBAL_GINTSTS_USBSUSP_Msk (0x800UL)                /*!< USBSUSP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_USBRST_Pos (12UL)                    /*!< USBRST (Bit 12)                                       */
#define USB_OTG_GLOBAL_GINTSTS_USBRST_Msk (0x1000UL)                /*!< USBRST (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_ENUMDNE_Pos (13UL)                   /*!< ENUMDNE (Bit 13)                                      */
#define USB_OTG_GLOBAL_GINTSTS_ENUMDNE_Msk (0x2000UL)               /*!< ENUMDNE (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_ISOODRP_Pos (14UL)                   /*!< ISOODRP (Bit 14)                                      */
#define USB_OTG_GLOBAL_GINTSTS_ISOODRP_Msk (0x4000UL)               /*!< ISOODRP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_EOPF_Pos   (15UL)                    /*!< EOPF (Bit 15)                                         */
#define USB_OTG_GLOBAL_GINTSTS_EOPF_Msk   (0x8000UL)                /*!< EOPF (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTSTS_IEPINT_Pos (18UL)                    /*!< IEPINT (Bit 18)                                       */
#define USB_OTG_GLOBAL_GINTSTS_IEPINT_Msk (0x40000UL)               /*!< IEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_OEPINT_Pos (19UL)                    /*!< OEPINT (Bit 19)                                       */
#define USB_OTG_GLOBAL_GINTSTS_OEPINT_Msk (0x80000UL)               /*!< OEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_IISOIXFR_Pos (20UL)                  /*!< IISOIXFR (Bit 20)                                     */
#define USB_OTG_GLOBAL_GINTSTS_IISOIXFR_Msk (0x100000UL)            /*!< IISOIXFR (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTSTS_PXFR_INCOMPISOOUT_Pos (21UL)         /*!< PXFR_INCOMPISOOUT (Bit 21)                            */
#define USB_OTG_GLOBAL_GINTSTS_PXFR_INCOMPISOOUT_Msk (0x200000UL)   /*!< PXFR_INCOMPISOOUT (Bitfield-Mask: 0x01)               */
#define USB_OTG_GLOBAL_GINTSTS_DATAFSUSP_Pos (22UL)                 /*!< DATAFSUSP (Bit 22)                                    */
#define USB_OTG_GLOBAL_GINTSTS_DATAFSUSP_Msk (0x400000UL)           /*!< DATAFSUSP (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTSTS_HPRTINT_Pos (24UL)                   /*!< HPRTINT (Bit 24)                                      */
#define USB_OTG_GLOBAL_GINTSTS_HPRTINT_Msk (0x1000000UL)            /*!< HPRTINT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_HCINT_Pos  (25UL)                    /*!< HCINT (Bit 25)                                        */
#define USB_OTG_GLOBAL_GINTSTS_HCINT_Msk  (0x2000000UL)             /*!< HCINT (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTSTS_PTXFE_Pos  (26UL)                    /*!< PTXFE (Bit 26)                                        */
#define USB_OTG_GLOBAL_GINTSTS_PTXFE_Msk  (0x4000000UL)             /*!< PTXFE (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTSTS_CIDSCHG_Pos (28UL)                   /*!< CIDSCHG (Bit 28)                                      */
#define USB_OTG_GLOBAL_GINTSTS_CIDSCHG_Msk (0x10000000UL)           /*!< CIDSCHG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_DISCINT_Pos (29UL)                   /*!< DISCINT (Bit 29)                                      */
#define USB_OTG_GLOBAL_GINTSTS_DISCINT_Msk (0x20000000UL)           /*!< DISCINT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTSTS_SRQINT_Pos (30UL)                    /*!< SRQINT (Bit 30)                                       */
#define USB_OTG_GLOBAL_GINTSTS_SRQINT_Msk (0x40000000UL)            /*!< SRQINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTSTS_WKUINT_Pos (31UL)                    /*!< WKUINT (Bit 31)                                       */
#define USB_OTG_GLOBAL_GINTSTS_WKUINT_Msk (0x80000000UL)            /*!< WKUINT (Bitfield-Mask: 0x01)                          */
/* ========================================================  GINTMSK  ======================================================== */
#define USB_OTG_GLOBAL_GINTMSK_MMISM_Pos  (1UL)                     /*!< MMISM (Bit 1)                                         */
#define USB_OTG_GLOBAL_GINTMSK_MMISM_Msk  (0x2UL)                   /*!< MMISM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_OTGINT_Pos (2UL)                     /*!< OTGINT (Bit 2)                                        */
#define USB_OTG_GLOBAL_GINTMSK_OTGINT_Msk (0x4UL)                   /*!< OTGINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_SOFM_Pos   (3UL)                     /*!< SOFM (Bit 3)                                          */
#define USB_OTG_GLOBAL_GINTMSK_SOFM_Msk   (0x8UL)                   /*!< SOFM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTMSK_RXFLVLM_Pos (4UL)                    /*!< RXFLVLM (Bit 4)                                       */
#define USB_OTG_GLOBAL_GINTMSK_RXFLVLM_Msk (0x10UL)                 /*!< RXFLVLM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTMSK_NPTXFEM_Pos (5UL)                    /*!< NPTXFEM (Bit 5)                                       */
#define USB_OTG_GLOBAL_GINTMSK_NPTXFEM_Msk (0x20UL)                 /*!< NPTXFEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTMSK_GINAKEFFM_Pos (6UL)                  /*!< GINAKEFFM (Bit 6)                                     */
#define USB_OTG_GLOBAL_GINTMSK_GINAKEFFM_Msk (0x40UL)               /*!< GINAKEFFM (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTMSK_GONAKEFFM_Pos (7UL)                  /*!< GONAKEFFM (Bit 7)                                     */
#define USB_OTG_GLOBAL_GINTMSK_GONAKEFFM_Msk (0x80UL)               /*!< GONAKEFFM (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTMSK_ESUSPM_Pos (10UL)                    /*!< ESUSPM (Bit 10)                                       */
#define USB_OTG_GLOBAL_GINTMSK_ESUSPM_Msk (0x400UL)                 /*!< ESUSPM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_USBSUSPM_Pos (11UL)                  /*!< USBSUSPM (Bit 11)                                     */
#define USB_OTG_GLOBAL_GINTMSK_USBSUSPM_Msk (0x800UL)               /*!< USBSUSPM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_USBRST_Pos (12UL)                    /*!< USBRST (Bit 12)                                       */
#define USB_OTG_GLOBAL_GINTMSK_USBRST_Msk (0x1000UL)                /*!< USBRST (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_ENUMDNEM_Pos (13UL)                  /*!< ENUMDNEM (Bit 13)                                     */
#define USB_OTG_GLOBAL_GINTMSK_ENUMDNEM_Msk (0x2000UL)              /*!< ENUMDNEM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_ISOODRPM_Pos (14UL)                  /*!< ISOODRPM (Bit 14)                                     */
#define USB_OTG_GLOBAL_GINTMSK_ISOODRPM_Msk (0x4000UL)              /*!< ISOODRPM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_EOPFM_Pos  (15UL)                    /*!< EOPFM (Bit 15)                                        */
#define USB_OTG_GLOBAL_GINTMSK_EOPFM_Msk  (0x8000UL)                /*!< EOPFM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_EPMISM_Pos (17UL)                    /*!< EPMISM (Bit 17)                                       */
#define USB_OTG_GLOBAL_GINTMSK_EPMISM_Msk (0x20000UL)               /*!< EPMISM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_IEPINT_Pos (18UL)                    /*!< IEPINT (Bit 18)                                       */
#define USB_OTG_GLOBAL_GINTMSK_IEPINT_Msk (0x40000UL)               /*!< IEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_OEPINT_Pos (19UL)                    /*!< OEPINT (Bit 19)                                       */
#define USB_OTG_GLOBAL_GINTMSK_OEPINT_Msk (0x80000UL)               /*!< OEPINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_IISOIXFRM_Pos (20UL)                 /*!< IISOIXFRM (Bit 20)                                    */
#define USB_OTG_GLOBAL_GINTMSK_IISOIXFRM_Msk (0x100000UL)           /*!< IISOIXFRM (Bitfield-Mask: 0x01)                       */
#define USB_OTG_GLOBAL_GINTMSK_PXFRM_IISOOXFRM_Pos (21UL)           /*!< PXFRM_IISOOXFRM (Bit 21)                              */
#define USB_OTG_GLOBAL_GINTMSK_PXFRM_IISOOXFRM_Msk (0x200000UL)     /*!< PXFRM_IISOOXFRM (Bitfield-Mask: 0x01)                 */
#define USB_OTG_GLOBAL_GINTMSK_FSUSPM_Pos (22UL)                    /*!< FSUSPM (Bit 22)                                       */
#define USB_OTG_GLOBAL_GINTMSK_FSUSPM_Msk (0x400000UL)              /*!< FSUSPM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_PRTIM_Pos  (24UL)                    /*!< PRTIM (Bit 24)                                        */
#define USB_OTG_GLOBAL_GINTMSK_PRTIM_Msk  (0x1000000UL)             /*!< PRTIM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_HCIM_Pos   (25UL)                    /*!< HCIM (Bit 25)                                         */
#define USB_OTG_GLOBAL_GINTMSK_HCIM_Msk   (0x2000000UL)             /*!< HCIM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_GLOBAL_GINTMSK_PTXFEM_Pos (26UL)                    /*!< PTXFEM (Bit 26)                                       */
#define USB_OTG_GLOBAL_GINTMSK_PTXFEM_Msk (0x4000000UL)             /*!< PTXFEM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GINTMSK_CIDSCHGM_Pos (28UL)                  /*!< CIDSCHGM (Bit 28)                                     */
#define USB_OTG_GLOBAL_GINTMSK_CIDSCHGM_Msk (0x10000000UL)          /*!< CIDSCHGM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GINTMSK_DISCINT_Pos (29UL)                   /*!< DISCINT (Bit 29)                                      */
#define USB_OTG_GLOBAL_GINTMSK_DISCINT_Msk (0x20000000UL)           /*!< DISCINT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_GLOBAL_GINTMSK_SRQIM_Pos  (30UL)                    /*!< SRQIM (Bit 30)                                        */
#define USB_OTG_GLOBAL_GINTMSK_SRQIM_Msk  (0x40000000UL)            /*!< SRQIM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_GLOBAL_GINTMSK_WUIM_Pos   (31UL)                    /*!< WUIM (Bit 31)                                         */
#define USB_OTG_GLOBAL_GINTMSK_WUIM_Msk   (0x80000000UL)            /*!< WUIM (Bitfield-Mask: 0x01)                            */
/* =====================================================  GRXSTSR_Host  ====================================================== */
#define USB_OTG_GLOBAL_GRXSTSR_Host_CHNUM_Pos (0UL)                 /*!< CHNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Host_CHNUM_Msk (0xfUL)               /*!< CHNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Host_BCNT_Pos (4UL)                  /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSR_Host_BCNT_Msk (0x7ff0UL)             /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Host_DPID_Pos (15UL)                 /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Host_DPID_Msk (0x18000UL)            /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSR_Host_PKTSTS_Pos (17UL)               /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSR_Host_PKTSTS_Msk (0x1e0000UL)         /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
/* =====================================================  GRXSTSP_Host  ====================================================== */
#define USB_OTG_GLOBAL_GRXSTSP_Host_CHNUM_Pos (0UL)                 /*!< CHNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Host_CHNUM_Msk (0xfUL)               /*!< CHNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Host_BCNT_Pos (4UL)                  /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSP_Host_BCNT_Msk (0x7ff0UL)             /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Host_DPID_Pos (15UL)                 /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Host_DPID_Msk (0x18000UL)            /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSP_Host_PKTSTS_Pos (17UL)               /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSP_Host_PKTSTS_Msk (0x1e0000UL)         /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
/* ========================================================  GRXFSIZ  ======================================================== */
#define USB_OTG_GLOBAL_GRXFSIZ_RXFD_Pos   (0UL)                     /*!< RXFD (Bit 0)                                          */
#define USB_OTG_GLOBAL_GRXFSIZ_RXFD_Msk   (0xffffUL)                /*!< RXFD (Bitfield-Mask: 0xffff)                          */
/* ====================================================  GNPTXFSIZ_Host  ===================================================== */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFSA_Pos (0UL)             /*!< NPTXFSA (Bit 0)                                       */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFSA_Msk (0xffffUL)        /*!< NPTXFSA (Bitfield-Mask: 0xffff)                       */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFD_Pos (16UL)             /*!< NPTXFD (Bit 16)                                       */
#define USB_OTG_GLOBAL_GNPTXFSIZ_Host_NPTXFD_Msk (0xffff0000UL)     /*!< NPTXFD (Bitfield-Mask: 0xffff)                        */
/* ==================================================  TX0FSIZ_Peripheral  =================================================== */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FSA_Pos (0UL)          /*!< TX0FSA (Bit 0)                                        */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FSA_Msk (0xffffUL)     /*!< TX0FSA (Bitfield-Mask: 0xffff)                        */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FD_Pos (16UL)          /*!< TX0FD (Bit 16)                                        */
#define USB_OTG_GLOBAL_TX0FSIZ_Peripheral_TX0FD_Msk (0xffff0000UL)  /*!< TX0FD (Bitfield-Mask: 0xffff)                         */
/* =======================================================  GNPTXSTS  ======================================================== */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXFSAV_Pos (0UL)                  /*!< NPTXFSAV (Bit 0)                                      */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXFSAV_Msk (0xffffUL)             /*!< NPTXFSAV (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTQXSAV_Pos (16UL)                 /*!< NPTQXSAV (Bit 16)                                     */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTQXSAV_Msk (0xff0000UL)           /*!< NPTQXSAV (Bitfield-Mask: 0xff)                        */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXQTOP_Pos (24UL)                 /*!< NPTXQTOP (Bit 24)                                     */
#define USB_OTG_GLOBAL_GNPTXSTS_NPTXQTOP_Msk (0x7f000000UL)         /*!< NPTXQTOP (Bitfield-Mask: 0x7f)                        */
/* =========================================================  GCCFG  ========================================================= */
#define USB_OTG_GLOBAL_GCCFG_PWRDWN_Pos   (16UL)                    /*!< PWRDWN (Bit 16)                                       */
#define USB_OTG_GLOBAL_GCCFG_PWRDWN_Msk   (0x10000UL)               /*!< PWRDWN (Bitfield-Mask: 0x01)                          */
#define USB_OTG_GLOBAL_GCCFG_I2CPADEN_Pos (17UL)                    /*!< I2CPADEN (Bit 17)                                     */
#define USB_OTG_GLOBAL_GCCFG_I2CPADEN_Msk (0x20000UL)               /*!< I2CPADEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_VBUSASEN_Pos (18UL)                    /*!< VBUSASEN (Bit 18)                                     */
#define USB_OTG_GLOBAL_GCCFG_VBUSASEN_Msk (0x40000UL)               /*!< VBUSASEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_VBUSBSEN_Pos (19UL)                    /*!< VBUSBSEN (Bit 19)                                     */
#define USB_OTG_GLOBAL_GCCFG_VBUSBSEN_Msk (0x80000UL)               /*!< VBUSBSEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_SOFOUTEN_Pos (20UL)                    /*!< SOFOUTEN (Bit 20)                                     */
#define USB_OTG_GLOBAL_GCCFG_SOFOUTEN_Msk (0x100000UL)              /*!< SOFOUTEN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_GLOBAL_GCCFG_NOVBUSSENS_Pos (21UL)                  /*!< NOVBUSSENS (Bit 21)                                   */
#define USB_OTG_GLOBAL_GCCFG_NOVBUSSENS_Msk (0x200000UL)            /*!< NOVBUSSENS (Bitfield-Mask: 0x01)                      */
/* ==========================================================  CID  ========================================================== */
#define USB_OTG_GLOBAL_CID_PRODUCT_ID_Pos (0UL)                     /*!< PRODUCT_ID (Bit 0)                                    */
#define USB_OTG_GLOBAL_CID_PRODUCT_ID_Msk (0xffffffffUL)            /*!< PRODUCT_ID (Bitfield-Mask: 0xffffffff)                */
/* ==========================================================  VID  ========================================================== */
/* =====================================================  HW_DIRECTION  ====================================================== */
#define USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_Pos (0UL)             /*!< DIRECTION (Bit 0)                                     */
#define USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_Msk (0x3UL)           /*!< DIRECTION (Bitfield-Mask: 0x03)                       */
/* ======================================================  HW_CONFIG0  ======================================================= */
#define USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_Pos (0UL)          /*!< OPERATING_MODE (Bit 0)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_Msk (0x7UL)        /*!< OPERATING_MODE (Bitfield-Mask: 0x07)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_Pos (3UL)            /*!< ARCHITECTURE (Bit 3)                                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_Msk (0x18UL)         /*!< ARCHITECTURE (Bitfield-Mask: 0x03)                    */
#define USB_OTG_GLOBAL_HW_CONFIG0_POINT_TO_POINT_Pos (5UL)          /*!< POINT_TO_POINT (Bit 5)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_POINT_TO_POINT_Msk (0x20UL)       /*!< POINT_TO_POINT (Bitfield-Mask: 0x01)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_Pos (6UL)          /*!< HIGH_SPEED_PHY (Bit 6)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_Msk (0xc0UL)       /*!< HIGH_SPEED_PHY (Bitfield-Mask: 0x03)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_Pos (8UL)          /*!< FULL_SPEED_PHY (Bit 8)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_Msk (0x300UL)      /*!< FULL_SPEED_PHY (Bitfield-Mask: 0x03)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_END_POINT_COUNT_Pos (10UL) /*!< DEVICE_END_POINT_COUNT (Bit 10)                       */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_END_POINT_COUNT_Msk (0x3c00UL) /*!< DEVICE_END_POINT_COUNT (Bitfield-Mask: 0x0f)      */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_CHANNEL_COUNT_Pos (14UL)     /*!< HOST_CHANNEL_COUNT (Bit 14)                           */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_CHANNEL_COUNT_Msk (0x3c000UL) /*!< HOST_CHANNEL_COUNT (Bitfield-Mask: 0x0f)             */
#define USB_OTG_GLOBAL_HW_CONFIG0_SUPPORTS_PERIODIC_ENDPOINTS_Pos (18UL) /*!< SUPPORTS_PERIODIC_ENDPOINTS (Bit 18)             */
#define USB_OTG_GLOBAL_HW_CONFIG0_SUPPORTS_PERIODIC_ENDPOINTS_Msk (0x40000UL) /*!< SUPPORTS_PERIODIC_ENDPOINTS (Bitfield-Mask: 0x01) */
#define USB_OTG_GLOBAL_HW_CONFIG0_DYNAMIC_FIFO_Pos (19UL)           /*!< DYNAMIC_FIFO (Bit 19)                                 */
#define USB_OTG_GLOBAL_HW_CONFIG0_DYNAMIC_FIFO_Msk (0x80000UL)      /*!< DYNAMIC_FIFO (Bitfield-Mask: 0x01)                    */
#define USB_OTG_GLOBAL_HW_CONFIG0_MULTI_PROC_INT_Pos (20UL)         /*!< MULTI_PROC_INT (Bit 20)                               */
#define USB_OTG_GLOBAL_HW_CONFIG0_MULTI_PROC_INT_Msk (0x100000UL)   /*!< MULTI_PROC_INT (Bitfield-Mask: 0x01)                  */
#define USB_OTG_GLOBAL_HW_CONFIG0_NON_PERIODIC_QUEUE_DEPTH_Pos (22UL) /*!< NON_PERIODIC_QUEUE_DEPTH (Bit 22)                   */
#define USB_OTG_GLOBAL_HW_CONFIG0_NON_PERIODIC_QUEUE_DEPTH_Msk (0xc00000UL) /*!< NON_PERIODIC_QUEUE_DEPTH (Bitfield-Mask: 0x03) */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_PERIODIC_QUEUE_DEPTH_Pos (24UL) /*!< HOST_PERIODIC_QUEUE_DEPTH (Bit 24)                 */
#define USB_OTG_GLOBAL_HW_CONFIG0_HOST_PERIODIC_QUEUE_DEPTH_Msk (0x3000000UL) /*!< HOST_PERIODIC_QUEUE_DEPTH (Bitfield-Mask: 0x03) */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_TOKEN_QUEUE_DEPTH_Pos (26UL) /*!< DEVICE_TOKEN_QUEUE_DEPTH (Bit 26)                   */
#define USB_OTG_GLOBAL_HW_CONFIG0_DEVICE_TOKEN_QUEUE_DEPTH_Msk (0x7c000000UL) /*!< DEVICE_TOKEN_QUEUE_DEPTH (Bitfield-Mask: 0x1f) */
#define USB_OTG_GLOBAL_HW_CONFIG0_ENABLE_IC_USB_Pos (31UL)          /*!< ENABLE_IC_USB (Bit 31)                                */
#define USB_OTG_GLOBAL_HW_CONFIG0_ENABLE_IC_USB_Msk (0x80000000UL)  /*!< ENABLE_IC_USB (Bitfield-Mask: 0x01)                   */
/* =======================================================  HPTXFSIZ  ======================================================== */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXSA_Pos (0UL)                     /*!< PTXSA (Bit 0)                                         */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXSA_Msk (0xffffUL)                /*!< PTXSA (Bitfield-Mask: 0xffff)                         */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXFD_Pos (16UL)                    /*!< PTXFD (Bit 16)                                        */
#define USB_OTG_GLOBAL_HPTXFSIZ_PTXFD_Msk (0xffff0000UL)            /*!< PTXFD (Bitfield-Mask: 0xffff)                         */
/* =======================================================  DIEPTXF1  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF1_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF2  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF2_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF3  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF3_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF4  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF4_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF5  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF5_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF6  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF6_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* =======================================================  DIEPTXF7  ======================================================== */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXSA_Pos (0UL)                  /*!< INEPTXSA (Bit 0)                                      */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXSA_Msk (0xffffUL)             /*!< INEPTXSA (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXFD_Pos (16UL)                 /*!< INEPTXFD (Bit 16)                                     */
#define USB_OTG_GLOBAL_DIEPTXF7_INEPTXFD_Msk (0xffff0000UL)         /*!< INEPTXFD (Bitfield-Mask: 0xffff)                      */
/* ==================================================  GRXSTSR_Peripheral  =================================================== */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_EPNUM_Pos (0UL)           /*!< EPNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_EPNUM_Msk (0xfUL)         /*!< EPNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_BCNT_Pos (4UL)            /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_BCNT_Msk (0x7ff0UL)       /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_DPID_Pos (15UL)           /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_DPID_Msk (0x18000UL)      /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_PKTSTS_Pos (17UL)         /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_PKTSTS_Msk (0x1e0000UL)   /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_FRMNUM_Pos (21UL)         /*!< FRMNUM (Bit 21)                                       */
#define USB_OTG_GLOBAL_GRXSTSR_Peripheral_FRMNUM_Msk (0x1e00000UL)  /*!< FRMNUM (Bitfield-Mask: 0x0f)                          */
/* ==================================================  GRXSTSP_Peripheral  =================================================== */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_EPNUM_Pos (0UL)           /*!< EPNUM (Bit 0)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_EPNUM_Msk (0xfUL)         /*!< EPNUM (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_BCNT_Pos (4UL)            /*!< BCNT (Bit 4)                                          */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_BCNT_Msk (0x7ff0UL)       /*!< BCNT (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_DPID_Pos (15UL)           /*!< DPID (Bit 15)                                         */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_DPID_Msk (0x18000UL)      /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_PKTSTS_Pos (17UL)         /*!< PKTSTS (Bit 17)                                       */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_PKTSTS_Msk (0x1e0000UL)   /*!< PKTSTS (Bitfield-Mask: 0x0f)                          */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_FRMNUM_Pos (21UL)         /*!< FRMNUM (Bit 21)                                       */
#define USB_OTG_GLOBAL_GRXSTSP_Peripheral_FRMNUM_Msk (0x1e00000UL)  /*!< FRMNUM (Bitfield-Mask: 0x0f)                          */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */

/* =========================================================  HCFG  ========================================================== */
#define USB_OTG_HOST_HCFG_FSLSPCS_Pos     (0UL)                     /*!< FSLSPCS (Bit 0)                                       */
#define USB_OTG_HOST_HCFG_FSLSPCS_Msk     (0x3UL)                   /*!< FSLSPCS (Bitfield-Mask: 0x03)                         */
#define USB_OTG_HOST_HCFG_FSLSS_Pos       (2UL)                     /*!< FSLSS (Bit 2)                                         */
#define USB_OTG_HOST_HCFG_FSLSS_Msk       (0x4UL)                   /*!< FSLSS (Bitfield-Mask: 0x01)                           */
/* =========================================================  HFIR  ========================================================== */
#define USB_OTG_HOST_HFIR_FRIVL_Pos       (0UL)                     /*!< FRIVL (Bit 0)                                         */
#define USB_OTG_HOST_HFIR_FRIVL_Msk       (0xffffUL)                /*!< FRIVL (Bitfield-Mask: 0xffff)                         */
/* =========================================================  HFNUM  ========================================================= */
#define USB_OTG_HOST_HFNUM_FRNUM_Pos      (0UL)                     /*!< FRNUM (Bit 0)                                         */
#define USB_OTG_HOST_HFNUM_FRNUM_Msk      (0xffffUL)                /*!< FRNUM (Bitfield-Mask: 0xffff)                         */
#define USB_OTG_HOST_HFNUM_FTREM_Pos      (16UL)                    /*!< FTREM (Bit 16)                                        */
#define USB_OTG_HOST_HFNUM_FTREM_Msk      (0xffff0000UL)            /*!< FTREM (Bitfield-Mask: 0xffff)                         */
/* ========================================================  HPTXSTS  ======================================================== */
#define USB_OTG_HOST_HPTXSTS_PTXFSAVL_Pos (0UL)                     /*!< PTXFSAVL (Bit 0)                                      */
#define USB_OTG_HOST_HPTXSTS_PTXFSAVL_Msk (0xffffUL)                /*!< PTXFSAVL (Bitfield-Mask: 0xffff)                      */
#define USB_OTG_HOST_HPTXSTS_PTXQSAV_Pos  (16UL)                    /*!< PTXQSAV (Bit 16)                                      */
#define USB_OTG_HOST_HPTXSTS_PTXQSAV_Msk  (0xff0000UL)              /*!< PTXQSAV (Bitfield-Mask: 0xff)                         */
#define USB_OTG_HOST_HPTXSTS_PTXQTOP_Pos  (24UL)                    /*!< PTXQTOP (Bit 24)                                      */
#define USB_OTG_HOST_HPTXSTS_PTXQTOP_Msk  (0xff000000UL)            /*!< PTXQTOP (Bitfield-Mask: 0xff)                         */
/* =========================================================  HAINT  ========================================================= */
#define USB_OTG_HOST_HAINT_HAINT_Pos      (0UL)                     /*!< HAINT (Bit 0)                                         */
#define USB_OTG_HOST_HAINT_HAINT_Msk      (0xffffUL)                /*!< HAINT (Bitfield-Mask: 0xffff)                         */
/* =======================================================  HAINTMSK  ======================================================== */
#define USB_OTG_HOST_HAINTMSK_HAINTM_Pos  (0UL)                     /*!< HAINTM (Bit 0)                                        */
#define USB_OTG_HOST_HAINTMSK_HAINTM_Msk  (0xffffUL)                /*!< HAINTM (Bitfield-Mask: 0xffff)                        */
/* =========================================================  HPRT  ========================================================== */
#define USB_OTG_HOST_HPRT_PCSTS_Pos       (0UL)                     /*!< PCSTS (Bit 0)                                         */
#define USB_OTG_HOST_HPRT_PCSTS_Msk       (0x1UL)                   /*!< PCSTS (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HPRT_PCDET_Pos       (1UL)                     /*!< PCDET (Bit 1)                                         */
#define USB_OTG_HOST_HPRT_PCDET_Msk       (0x2UL)                   /*!< PCDET (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HPRT_PENA_Pos        (2UL)                     /*!< PENA (Bit 2)                                          */
#define USB_OTG_HOST_HPRT_PENA_Msk        (0x4UL)                   /*!< PENA (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PENCHNG_Pos     (3UL)                     /*!< PENCHNG (Bit 3)                                       */
#define USB_OTG_HOST_HPRT_PENCHNG_Msk     (0x8UL)                   /*!< PENCHNG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_HOST_HPRT_POCA_Pos        (4UL)                     /*!< POCA (Bit 4)                                          */
#define USB_OTG_HOST_HPRT_POCA_Msk        (0x10UL)                  /*!< POCA (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_POCCHNG_Pos     (5UL)                     /*!< POCCHNG (Bit 5)                                       */
#define USB_OTG_HOST_HPRT_POCCHNG_Msk     (0x20UL)                  /*!< POCCHNG (Bitfield-Mask: 0x01)                         */
#define USB_OTG_HOST_HPRT_PRES_Pos        (6UL)                     /*!< PRES (Bit 6)                                          */
#define USB_OTG_HOST_HPRT_PRES_Msk        (0x40UL)                  /*!< PRES (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PSUSP_Pos       (7UL)                     /*!< PSUSP (Bit 7)                                         */
#define USB_OTG_HOST_HPRT_PSUSP_Msk       (0x80UL)                  /*!< PSUSP (Bitfield-Mask: 0x01)                           */
#define USB_OTG_HOST_HPRT_PRST_Pos        (8UL)                     /*!< PRST (Bit 8)                                          */
#define USB_OTG_HOST_HPRT_PRST_Msk        (0x100UL)                 /*!< PRST (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PLSTS_Pos       (10UL)                    /*!< PLSTS (Bit 10)                                        */
#define USB_OTG_HOST_HPRT_PLSTS_Msk       (0xc00UL)                 /*!< PLSTS (Bitfield-Mask: 0x03)                           */
#define USB_OTG_HOST_HPRT_PPWR_Pos        (12UL)                    /*!< PPWR (Bit 12)                                         */
#define USB_OTG_HOST_HPRT_PPWR_Msk        (0x1000UL)                /*!< PPWR (Bitfield-Mask: 0x01)                            */
#define USB_OTG_HOST_HPRT_PTCTL_Pos       (13UL)                    /*!< PTCTL (Bit 13)                                        */
#define USB_OTG_HOST_HPRT_PTCTL_Msk       (0x1e000UL)               /*!< PTCTL (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_HOST_HPRT_PSPD_Pos        (17UL)                    /*!< PSPD (Bit 17)                                         */
#define USB_OTG_HOST_HPRT_PSPD_Msk        (0x60000UL)               /*!< PSPD (Bitfield-Mask: 0x03)                            */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
#define USB_OTG_DEVICE_DCFG_DSPD_Pos      (0UL)                     /*!< DSPD (Bit 0)                                          */
#define USB_OTG_DEVICE_DCFG_DSPD_Msk      (0x3UL)                   /*!< DSPD (Bitfield-Mask: 0x03)                            */
#define USB_OTG_DEVICE_DCFG_NZLSOHSK_Pos  (2UL)                     /*!< NZLSOHSK (Bit 2)                                      */
#define USB_OTG_DEVICE_DCFG_NZLSOHSK_Msk  (0x4UL)                   /*!< NZLSOHSK (Bitfield-Mask: 0x01)                        */
#define USB_OTG_DEVICE_DCFG_DAD_Pos       (4UL)                     /*!< DAD (Bit 4)                                           */
#define USB_OTG_DEVICE_DCFG_DAD_Msk       (0x7f0UL)                 /*!< DAD (Bitfield-Mask: 0x7f)                             */
#define USB_OTG_DEVICE_DCFG_PFIVL_Pos     (11UL)                    /*!< PFIVL (Bit 11)                                        */
#define USB_OTG_DEVICE_DCFG_PFIVL_Msk     (0x1800UL)                /*!< PFIVL (Bitfield-Mask: 0x03)                           */
#define USB_OTG_DEVICE_DCFG_PERSCHIVL_Pos (24UL)                    /*!< PERSCHIVL (Bit 24)                                    */
#define USB_OTG_DEVICE_DCFG_PERSCHIVL_Msk (0x3000000UL)             /*!< PERSCHIVL (Bitfield-Mask: 0x03)                       */
/* =========================================================  DCTL  ========================================================== */
#define USB_OTG_DEVICE_DCTL_RWUSIG_Pos    (0UL)                     /*!< RWUSIG (Bit 0)                                        */
#define USB_OTG_DEVICE_DCTL_RWUSIG_Msk    (0x1UL)                   /*!< RWUSIG (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_SDIS_Pos      (1UL)                     /*!< SDIS (Bit 1)                                          */
#define USB_OTG_DEVICE_DCTL_SDIS_Msk      (0x2UL)                   /*!< SDIS (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DCTL_GINSTS_Pos    (2UL)                     /*!< GINSTS (Bit 2)                                        */
#define USB_OTG_DEVICE_DCTL_GINSTS_Msk    (0x4UL)                   /*!< GINSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_GONSTS_Pos    (3UL)                     /*!< GONSTS (Bit 3)                                        */
#define USB_OTG_DEVICE_DCTL_GONSTS_Msk    (0x8UL)                   /*!< GONSTS (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_TCTL_Pos      (4UL)                     /*!< TCTL (Bit 4)                                          */
#define USB_OTG_DEVICE_DCTL_TCTL_Msk      (0x70UL)                  /*!< TCTL (Bitfield-Mask: 0x07)                            */
#define USB_OTG_DEVICE_DCTL_SGINAK_Pos    (7UL)                     /*!< SGINAK (Bit 7)                                        */
#define USB_OTG_DEVICE_DCTL_SGINAK_Msk    (0x80UL)                  /*!< SGINAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_CGINAK_Pos    (8UL)                     /*!< CGINAK (Bit 8)                                        */
#define USB_OTG_DEVICE_DCTL_CGINAK_Msk    (0x100UL)                 /*!< CGINAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_SGONAK_Pos    (9UL)                     /*!< SGONAK (Bit 9)                                        */
#define USB_OTG_DEVICE_DCTL_SGONAK_Msk    (0x200UL)                 /*!< SGONAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_CGONAK_Pos    (10UL)                    /*!< CGONAK (Bit 10)                                       */
#define USB_OTG_DEVICE_DCTL_CGONAK_Msk    (0x400UL)                 /*!< CGONAK (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DCTL_POPRGDNE_Pos  (11UL)                    /*!< POPRGDNE (Bit 11)                                     */
#define USB_OTG_DEVICE_DCTL_POPRGDNE_Msk  (0x800UL)                 /*!< POPRGDNE (Bitfield-Mask: 0x01)                        */
/* =========================================================  DSTS  ========================================================== */
#define USB_OTG_DEVICE_DSTS_SUSPSTS_Pos   (0UL)                     /*!< SUSPSTS (Bit 0)                                       */
#define USB_OTG_DEVICE_DSTS_SUSPSTS_Msk   (0x1UL)                   /*!< SUSPSTS (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DSTS_ENUMSPD_Pos   (1UL)                     /*!< ENUMSPD (Bit 1)                                       */
#define USB_OTG_DEVICE_DSTS_ENUMSPD_Msk   (0x6UL)                   /*!< ENUMSPD (Bitfield-Mask: 0x03)                         */
#define USB_OTG_DEVICE_DSTS_EERR_Pos      (3UL)                     /*!< EERR (Bit 3)                                          */
#define USB_OTG_DEVICE_DSTS_EERR_Msk      (0x8UL)                   /*!< EERR (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DSTS_FNSOF_Pos     (8UL)                     /*!< FNSOF (Bit 8)                                         */
#define USB_OTG_DEVICE_DSTS_FNSOF_Msk     (0x3fff00UL)              /*!< FNSOF (Bitfield-Mask: 0x3fff)                         */
/* ========================================================  DIEPMSK  ======================================================== */
#define USB_OTG_DEVICE_DIEPMSK_XFRCM_Pos  (0UL)                     /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DIEPMSK_XFRCM_Msk  (0x1UL)                   /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DIEPMSK_EPDM_Pos   (1UL)                     /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DIEPMSK_EPDM_Msk   (0x2UL)                   /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DIEPMSK_TOM_Pos    (3UL)                     /*!< TOM (Bit 3)                                           */
#define USB_OTG_DEVICE_DIEPMSK_TOM_Msk    (0x8UL)                   /*!< TOM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DIEPMSK_ITTXFEMSK_Pos (4UL)                  /*!< ITTXFEMSK (Bit 4)                                     */
#define USB_OTG_DEVICE_DIEPMSK_ITTXFEMSK_Msk (0x10UL)               /*!< ITTXFEMSK (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_DIEPMSK_INEPNMM_Pos (5UL)                    /*!< INEPNMM (Bit 5)                                       */
#define USB_OTG_DEVICE_DIEPMSK_INEPNMM_Msk (0x20UL)                 /*!< INEPNMM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPMSK_INEPNEM_Pos (6UL)                    /*!< INEPNEM (Bit 6)                                       */
#define USB_OTG_DEVICE_DIEPMSK_INEPNEM_Msk (0x40UL)                 /*!< INEPNEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPMSK_TXFURM_Pos (8UL)                     /*!< TXFURM (Bit 8)                                        */
#define USB_OTG_DEVICE_DIEPMSK_TXFURM_Msk (0x100UL)                 /*!< TXFURM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DIEPMSK_BIM_Pos    (9UL)                     /*!< BIM (Bit 9)                                           */
#define USB_OTG_DEVICE_DIEPMSK_BIM_Msk    (0x200UL)                 /*!< BIM (Bitfield-Mask: 0x01)                             */
/* ========================================================  DOEPMSK  ======================================================== */
#define USB_OTG_DEVICE_DOEPMSK_XFRCM_Pos  (0UL)                     /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DOEPMSK_XFRCM_Msk  (0x1UL)                   /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPMSK_EPDM_Pos   (1UL)                     /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DOEPMSK_EPDM_Msk   (0x2UL)                   /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPMSK_STUPM_Pos  (3UL)                     /*!< STUPM (Bit 3)                                         */
#define USB_OTG_DEVICE_DOEPMSK_STUPM_Msk  (0x8UL)                   /*!< STUPM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPMSK_OTEPDM_Pos (4UL)                     /*!< OTEPDM (Bit 4)                                        */
#define USB_OTG_DEVICE_DOEPMSK_OTEPDM_Msk (0x10UL)                  /*!< OTEPDM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DOEPMSK_B2BSTUP_Pos (6UL)                    /*!< B2BSTUP (Bit 6)                                       */
#define USB_OTG_DEVICE_DOEPMSK_B2BSTUP_Msk (0x40UL)                 /*!< B2BSTUP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DOEPMSK_OPEM_Pos   (8UL)                     /*!< OPEM (Bit 8)                                          */
#define USB_OTG_DEVICE_DOEPMSK_OPEM_Msk   (0x100UL)                 /*!< OPEM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPMSK_BOIM_Pos   (9UL)                     /*!< BOIM (Bit 9)                                          */
#define USB_OTG_DEVICE_DOEPMSK_BOIM_Msk   (0x200UL)                 /*!< BOIM (Bitfield-Mask: 0x01)                            */
/* =========================================================  DAINT  ========================================================= */
#define USB_OTG_DEVICE_DAINT_IEPINT_Pos   (0UL)                     /*!< IEPINT (Bit 0)                                        */
#define USB_OTG_DEVICE_DAINT_IEPINT_Msk   (0xffffUL)                /*!< IEPINT (Bitfield-Mask: 0xffff)                        */
#define USB_OTG_DEVICE_DAINT_OEPINT_Pos   (16UL)                    /*!< OEPINT (Bit 16)                                       */
#define USB_OTG_DEVICE_DAINT_OEPINT_Msk   (0xffff0000UL)            /*!< OEPINT (Bitfield-Mask: 0xffff)                        */
/* =======================================================  DAINTMSK  ======================================================== */
#define USB_OTG_DEVICE_DAINTMSK_IEPM_Pos  (0UL)                     /*!< IEPM (Bit 0)                                          */
#define USB_OTG_DEVICE_DAINTMSK_IEPM_Msk  (0xffffUL)                /*!< IEPM (Bitfield-Mask: 0xffff)                          */
#define USB_OTG_DEVICE_DAINTMSK_OEPM_Pos  (16UL)                    /*!< OEPM (Bit 16)                                         */
#define USB_OTG_DEVICE_DAINTMSK_OEPM_Msk  (0xffff0000UL)            /*!< OEPM (Bitfield-Mask: 0xffff)                          */
/* =======================================================  DVBUSDIS  ======================================================== */
#define USB_OTG_DEVICE_DVBUSDIS_VBUSDT_Pos (0UL)                    /*!< VBUSDT (Bit 0)                                        */
#define USB_OTG_DEVICE_DVBUSDIS_VBUSDT_Msk (0xffffUL)               /*!< VBUSDT (Bitfield-Mask: 0xffff)                        */
/* ======================================================  DVBUSPULSE  ======================================================= */
#define USB_OTG_DEVICE_DVBUSPULSE_DVBUSP_Pos (0UL)                  /*!< DVBUSP (Bit 0)                                        */
#define USB_OTG_DEVICE_DVBUSPULSE_DVBUSP_Msk (0xfffUL)              /*!< DVBUSP (Bitfield-Mask: 0xfff)                         */
/* ========================================================  DTHRCTL  ======================================================== */
#define USB_OTG_DEVICE_DTHRCTL_NONISOTHREN_Pos (0UL)                /*!< NONISOTHREN (Bit 0)                                   */
#define USB_OTG_DEVICE_DTHRCTL_NONISOTHREN_Msk (0x1UL)              /*!< NONISOTHREN (Bitfield-Mask: 0x01)                     */
#define USB_OTG_DEVICE_DTHRCTL_ISOTHREN_Pos (1UL)                   /*!< ISOTHREN (Bit 1)                                      */
#define USB_OTG_DEVICE_DTHRCTL_ISOTHREN_Msk (0x2UL)                 /*!< ISOTHREN (Bitfield-Mask: 0x01)                        */
#define USB_OTG_DEVICE_DTHRCTL_TXTHRLEN_Pos (2UL)                   /*!< TXTHRLEN (Bit 2)                                      */
#define USB_OTG_DEVICE_DTHRCTL_TXTHRLEN_Msk (0x7fcUL)               /*!< TXTHRLEN (Bitfield-Mask: 0x1ff)                       */
#define USB_OTG_DEVICE_DTHRCTL_RXTHREN_Pos (16UL)                   /*!< RXTHREN (Bit 16)                                      */
#define USB_OTG_DEVICE_DTHRCTL_RXTHREN_Msk (0x10000UL)              /*!< RXTHREN (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DTHRCTL_RXTHRLEN_Pos (17UL)                  /*!< RXTHRLEN (Bit 17)                                     */
#define USB_OTG_DEVICE_DTHRCTL_RXTHRLEN_Msk (0x3fe0000UL)           /*!< RXTHRLEN (Bitfield-Mask: 0x1ff)                       */
#define USB_OTG_DEVICE_DTHRCTL_ARPEN_Pos  (27UL)                    /*!< ARPEN (Bit 27)                                        */
#define USB_OTG_DEVICE_DTHRCTL_ARPEN_Msk  (0x8000000UL)             /*!< ARPEN (Bitfield-Mask: 0x01)                           */
/* ======================================================  DIEPEMPMSK  ======================================================= */
#define USB_OTG_DEVICE_DIEPEMPMSK_INEPTXFEM_Pos (0UL)               /*!< INEPTXFEM (Bit 0)                                     */
#define USB_OTG_DEVICE_DIEPEMPMSK_INEPTXFEM_Msk (0xffffUL)          /*!< INEPTXFEM (Bitfield-Mask: 0xffff)                     */
/* =======================================================  DEACHINT  ======================================================== */
#define USB_OTG_DEVICE_DEACHINT_IEP1INT_Pos (1UL)                   /*!< IEP1INT (Bit 1)                                       */
#define USB_OTG_DEVICE_DEACHINT_IEP1INT_Msk (0x2UL)                 /*!< IEP1INT (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DEACHINT_OEP1INT_Pos (17UL)                  /*!< OEP1INT (Bit 17)                                      */
#define USB_OTG_DEVICE_DEACHINT_OEP1INT_Msk (0x20000UL)             /*!< OEP1INT (Bitfield-Mask: 0x01)                         */
/* ======================================================  DEACHINTMSK  ====================================================== */
#define USB_OTG_DEVICE_DEACHINTMSK_IEP1INTM_Pos (1UL)               /*!< IEP1INTM (Bit 1)                                      */
#define USB_OTG_DEVICE_DEACHINTMSK_IEP1INTM_Msk (0x2UL)             /*!< IEP1INTM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_DEVICE_DEACHINTMSK_OEP1INTM_Pos (17UL)              /*!< OEP1INTM (Bit 17)                                     */
#define USB_OTG_DEVICE_DEACHINTMSK_OEP1INTM_Msk (0x20000UL)         /*!< OEP1INTM (Bitfield-Mask: 0x01)                        */
/* =====================================================  DIEPEACHMSK1  ====================================================== */
#define USB_OTG_DEVICE_DIEPEACHMSK1_XFRCM_Pos (0UL)                 /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_XFRCM_Msk (0x1UL)               /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DIEPEACHMSK1_EPDM_Pos (1UL)                  /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DIEPEACHMSK1_EPDM_Msk (0x2UL)                /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TOM_Pos (3UL)                   /*!< TOM (Bit 3)                                           */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TOM_Msk (0x8UL)                 /*!< TOM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DIEPEACHMSK1_ITTXFEMSK_Pos (4UL)             /*!< ITTXFEMSK (Bit 4)                                     */
#define USB_OTG_DEVICE_DIEPEACHMSK1_ITTXFEMSK_Msk (0x10UL)          /*!< ITTXFEMSK (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNMM_Pos (5UL)               /*!< INEPNMM (Bit 5)                                       */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNMM_Msk (0x20UL)            /*!< INEPNMM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNEM_Pos (6UL)               /*!< INEPNEM (Bit 6)                                       */
#define USB_OTG_DEVICE_DIEPEACHMSK1_INEPNEM_Msk (0x40UL)            /*!< INEPNEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TXFURM_Pos (8UL)                /*!< TXFURM (Bit 8)                                        */
#define USB_OTG_DEVICE_DIEPEACHMSK1_TXFURM_Msk (0x100UL)            /*!< TXFURM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DIEPEACHMSK1_BIM_Pos (9UL)                   /*!< BIM (Bit 9)                                           */
#define USB_OTG_DEVICE_DIEPEACHMSK1_BIM_Msk (0x200UL)               /*!< BIM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DIEPEACHMSK1_NAKM_Pos (13UL)                 /*!< NAKM (Bit 13)                                         */
#define USB_OTG_DEVICE_DIEPEACHMSK1_NAKM_Msk (0x2000UL)             /*!< NAKM (Bitfield-Mask: 0x01)                            */
/* =====================================================  DOEPEACHMSK1  ====================================================== */
#define USB_OTG_DEVICE_DOEPEACHMSK1_XFRCM_Pos (0UL)                 /*!< XFRCM (Bit 0)                                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_XFRCM_Msk (0x1UL)               /*!< XFRCM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_EPDM_Pos (1UL)                  /*!< EPDM (Bit 1)                                          */
#define USB_OTG_DEVICE_DOEPEACHMSK1_EPDM_Msk (0x2UL)                /*!< EPDM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TOM_Pos (3UL)                   /*!< TOM (Bit 3)                                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TOM_Msk (0x8UL)                 /*!< TOM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DOEPEACHMSK1_ITTXFEMSK_Pos (4UL)             /*!< ITTXFEMSK (Bit 4)                                     */
#define USB_OTG_DEVICE_DOEPEACHMSK1_ITTXFEMSK_Msk (0x10UL)          /*!< ITTXFEMSK (Bitfield-Mask: 0x01)                       */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNMM_Pos (5UL)               /*!< INEPNMM (Bit 5)                                       */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNMM_Msk (0x20UL)            /*!< INEPNMM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNEM_Pos (6UL)               /*!< INEPNEM (Bit 6)                                       */
#define USB_OTG_DEVICE_DOEPEACHMSK1_INEPNEM_Msk (0x40UL)            /*!< INEPNEM (Bitfield-Mask: 0x01)                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TXFURM_Pos (8UL)                /*!< TXFURM (Bit 8)                                        */
#define USB_OTG_DEVICE_DOEPEACHMSK1_TXFURM_Msk (0x100UL)            /*!< TXFURM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BIM_Pos (9UL)                   /*!< BIM (Bit 9)                                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BIM_Msk (0x200UL)               /*!< BIM (Bitfield-Mask: 0x01)                             */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BERRM_Pos (12UL)                /*!< BERRM (Bit 12)                                        */
#define USB_OTG_DEVICE_DOEPEACHMSK1_BERRM_Msk (0x1000UL)            /*!< BERRM (Bitfield-Mask: 0x01)                           */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NAKM_Pos (13UL)                 /*!< NAKM (Bit 13)                                         */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NAKM_Msk (0x2000UL)             /*!< NAKM (Bitfield-Mask: 0x01)                            */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NYETM_Pos (14UL)                /*!< NYETM (Bit 14)                                        */
#define USB_OTG_DEVICE_DOEPEACHMSK1_NYETM_Msk (0x4000UL)            /*!< NYETM (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_PWRCLK                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  PCGCCTL  ======================================================== */
#define USB_OTG_PWRCLK_PCGCCTL_STPPCLK_Pos (0UL)                    /*!< STPPCLK (Bit 0)                                       */
#define USB_OTG_PWRCLK_PCGCCTL_STPPCLK_Msk (0x1UL)                  /*!< STPPCLK (Bitfield-Mask: 0x01)                         */
#define USB_OTG_PWRCLK_PCGCCTL_GATEHCLK_Pos (1UL)                   /*!< GATEHCLK (Bit 1)                                      */
#define USB_OTG_PWRCLK_PCGCCTL_GATEHCLK_Msk (0x2UL)                 /*!< GATEHCLK (Bitfield-Mask: 0x01)                        */
#define USB_OTG_PWRCLK_PCGCCTL_PWRCLMP_Pos (2UL)                    /*!< PWRCLMP (Bit 2)                                       */
#define USB_OTG_PWRCLK_PCGCCTL_PWRCLMP_Msk (0x4UL)                  /*!< PWRCLMP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_PWRCLK_PCGCCTL_RSTPDWNMODULE_Pos (3UL)              /*!< RSTPDWNMODULE (Bit 3)                                 */
#define USB_OTG_PWRCLK_PCGCCTL_RSTPDWNMODULE_Msk (0x8UL)            /*!< RSTPDWNMODULE (Bitfield-Mask: 0x01)                   */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSUSP_Pos (4UL)                    /*!< PHYSUSP (Bit 4)                                       */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSUSP_Msk (0x10UL)                 /*!< PHYSUSP (Bitfield-Mask: 0x01)                         */
#define USB_OTG_PWRCLK_PCGCCTL_ENABLE_L1GATING_Pos (5UL)            /*!< ENABLE_L1GATING (Bit 5)                               */
#define USB_OTG_PWRCLK_PCGCCTL_ENABLE_L1GATING_Msk (0x20UL)         /*!< ENABLE_L1GATING (Bitfield-Mask: 0x01)                 */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSLEEP_Pos (6UL)                   /*!< PHYSLEEP (Bit 6)                                      */
#define USB_OTG_PWRCLK_PCGCCTL_PHYSLEEP_Msk (0x40UL)                /*!< PHYSLEEP (Bitfield-Mask: 0x01)                        */
#define USB_OTG_PWRCLK_PCGCCTL_DEEPSLEEP_Pos (7UL)                  /*!< DEEPSLEEP (Bit 7)                                     */
#define USB_OTG_PWRCLK_PCGCCTL_DEEPSLEEP_Msk (0x80UL)               /*!< DEEPSLEEP (Bitfield-Mask: 0x01)                       */
#define USB_OTG_PWRCLK_PCGCCTL_RESETAFTERSUSP_Pos (8UL)             /*!< RESETAFTERSUSP (Bit 8)                                */
#define USB_OTG_PWRCLK_PCGCCTL_RESETAFTERSUSP_Msk (0x100UL)         /*!< RESETAFTERSUSP (Bitfield-Mask: 0x01)                  */
#define USB_OTG_PWRCLK_PCGCCTL_RESTOREMODE_Pos (9UL)                /*!< RESTOREMODE (Bit 9)                                   */
#define USB_OTG_PWRCLK_PCGCCTL_RESTOREMODE_Msk (0x200UL)            /*!< RESTOREMODE (Bitfield-Mask: 0x01)                     */
#define USB_OTG_PWRCLK_PCGCCTL_ENEXTNDEDHIBER_Pos (10UL)            /*!< ENEXTNDEDHIBER (Bit 10)                               */
#define USB_OTG_PWRCLK_PCGCCTL_ENEXTNDEDHIBER_Msk (0x400UL)         /*!< ENEXTNDEDHIBER (Bitfield-Mask: 0x01)                  */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONCLAMP_Pos (11UL)   /*!< EXTNDEDHIBERNATIONCLAMP (Bit 11)                      */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONCLAMP_Msk (0x800UL) /*!< EXTNDEDHIBERNATIONCLAMP (Bitfield-Mask: 0x01)        */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONSWITCH_Pos (12UL)  /*!< EXTNDEDHIBERNATIONSWITCH (Bit 12)                     */
#define USB_OTG_PWRCLK_PCGCCTL_EXTNDEDHIBERNATIONSWITCH_Msk (0x1000UL) /*!< EXTNDEDHIBERNATIONSWITCH (Bitfield-Mask: 0x01)     */
#define USB_OTG_PWRCLK_PCGCCTL_ESSREGRESTORED_Pos (13UL)            /*!< ESSREGRESTORED (Bit 13)                               */
#define USB_OTG_PWRCLK_PCGCCTL_ESSREGRESTORED_Msk (0x2000UL)        /*!< ESSREGRESTORED (Bitfield-Mask: 0x01)                  */
#define USB_OTG_PWRCLK_PCGCCTL_RESTORE_VALUE_Pos (14UL)             /*!< RESTORE_VALUE (Bit 14)                                */
#define USB_OTG_PWRCLK_PCGCCTL_RESTORE_VALUE_Msk (0xffffc000UL)     /*!< RESTORE_VALUE (Bitfield-Mask: 0x3ffff)                */


/* =========================================================================================================================== */
/* ================                                  Arasan_EMMC_Distributor                                  ================ */
/* =========================================================================================================================== */

/* =========================================================  ARG2  ========================================================== */
/* ======================================================  BLKSIZECNT  ======================================================= */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKCNT_Pos (16UL)        /*!< BLKCNT (Bit 16)                                       */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKCNT_Msk (0xffff0000UL) /*!< BLKCNT (Bitfield-Mask: 0xffff)                       */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKSIZE_Pos (0UL)        /*!< BLKSIZE (Bit 0)                                       */
#define Arasan_EMMC_Distributor_BLKSIZECNT_BLKSIZE_Msk (0x3ffUL)    /*!< BLKSIZE (Bitfield-Mask: 0x3ff)                        */
/* =========================================================  ARG1  ========================================================== */
/* =========================================================  CMDTM  ========================================================= */
#define Arasan_EMMC_Distributor_CMDTM_CMD_INDEX_Pos (24UL)          /*!< CMD_INDEX (Bit 24)                                    */
#define Arasan_EMMC_Distributor_CMDTM_CMD_INDEX_Msk (0x3f000000UL)  /*!< CMD_INDEX (Bitfield-Mask: 0x3f)                       */
#define Arasan_EMMC_Distributor_CMDTM_CMD_TYPE_Pos (22UL)           /*!< CMD_TYPE (Bit 22)                                     */
#define Arasan_EMMC_Distributor_CMDTM_CMD_TYPE_Msk (0xc00000UL)     /*!< CMD_TYPE (Bitfield-Mask: 0x03)                        */
#define Arasan_EMMC_Distributor_CMDTM_CMD_ISDATA_Pos (21UL)         /*!< CMD_ISDATA (Bit 21)                                   */
#define Arasan_EMMC_Distributor_CMDTM_CMD_ISDATA_Msk (0x200000UL)   /*!< CMD_ISDATA (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CMDTM_CMD_IXCHK_EN_Pos (20UL)       /*!< CMD_IXCHK_EN (Bit 20)                                 */
#define Arasan_EMMC_Distributor_CMDTM_CMD_IXCHK_EN_Msk (0x100000UL) /*!< CMD_IXCHK_EN (Bitfield-Mask: 0x01)                    */
#define Arasan_EMMC_Distributor_CMDTM_CMD_CRCCHK_EN_Pos (19UL)      /*!< CMD_CRCCHK_EN (Bit 19)                                */
#define Arasan_EMMC_Distributor_CMDTM_CMD_CRCCHK_EN_Msk (0x80000UL) /*!< CMD_CRCCHK_EN (Bitfield-Mask: 0x01)                   */
#define Arasan_EMMC_Distributor_CMDTM_CMD_RSPNS_TYPE_Pos (16UL)     /*!< CMD_RSPNS_TYPE (Bit 16)                               */
#define Arasan_EMMC_Distributor_CMDTM_CMD_RSPNS_TYPE_Msk (0x30000UL) /*!< CMD_RSPNS_TYPE (Bitfield-Mask: 0x03)                 */
#define Arasan_EMMC_Distributor_CMDTM_TM_MULTI_BLOCK_Pos (5UL)      /*!< TM_MULTI_BLOCK (Bit 5)                                */
#define Arasan_EMMC_Distributor_CMDTM_TM_MULTI_BLOCK_Msk (0x20UL)   /*!< TM_MULTI_BLOCK (Bitfield-Mask: 0x01)                  */
#define Arasan_EMMC_Distributor_CMDTM_TM_DAT_DIR_Pos (4UL)          /*!< TM_DAT_DIR (Bit 4)                                    */
#define Arasan_EMMC_Distributor_CMDTM_TM_DAT_DIR_Msk (0x10UL)       /*!< TM_DAT_DIR (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CMDTM_TM_AUTO_CMD_EN_Pos (2UL)      /*!< TM_AUTO_CMD_EN (Bit 2)                                */
#define Arasan_EMMC_Distributor_CMDTM_TM_AUTO_CMD_EN_Msk (0xcUL)    /*!< TM_AUTO_CMD_EN (Bitfield-Mask: 0x03)                  */
#define Arasan_EMMC_Distributor_CMDTM_TM_BLKCNT_EN_Pos (1UL)        /*!< TM_BLKCNT_EN (Bit 1)                                  */
#define Arasan_EMMC_Distributor_CMDTM_TM_BLKCNT_EN_Msk (0x2UL)      /*!< TM_BLKCNT_EN (Bitfield-Mask: 0x01)                    */
/* =========================================================  RESP0  ========================================================= */
/* =========================================================  RESP1  ========================================================= */
/* =========================================================  RESP2  ========================================================= */
/* =========================================================  RESP3  ========================================================= */
/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL1_Pos (25UL)        /*!< DAT_LEVEL1 (Bit 25)                                   */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL1_Msk (0x1e000000UL) /*!< DAT_LEVEL1 (Bitfield-Mask: 0x0f)                     */
#define Arasan_EMMC_Distributor_STATUS_CMD_LEVEL_Pos (24UL)         /*!< CMD_LEVEL (Bit 24)                                    */
#define Arasan_EMMC_Distributor_STATUS_CMD_LEVEL_Msk (0x1000000UL)  /*!< CMD_LEVEL (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL0_Pos (20UL)        /*!< DAT_LEVEL0 (Bit 20)                                   */
#define Arasan_EMMC_Distributor_STATUS_DAT_LEVEL0_Msk (0xf00000UL)  /*!< DAT_LEVEL0 (Bitfield-Mask: 0x0f)                      */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_READ_ENABLE_Pos (11UL) /*!< BUFFER_READ_ENABLE (Bit 11)                          */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_READ_ENABLE_Msk (0x800UL) /*!< BUFFER_READ_ENABLE (Bitfield-Mask: 0x01)          */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_WRITE_ENABLE_Pos (10UL) /*!< BUFFER_WRITE_ENABLE (Bit 10)                        */
#define Arasan_EMMC_Distributor_STATUS_BUFFER_WRITE_ENABLE_Msk (0x400UL) /*!< BUFFER_WRITE_ENABLE (Bitfield-Mask: 0x01)        */
#define Arasan_EMMC_Distributor_STATUS_READ_TRANSFER_Pos (9UL)      /*!< READ_TRANSFER (Bit 9)                                 */
#define Arasan_EMMC_Distributor_STATUS_READ_TRANSFER_Msk (0x200UL)  /*!< READ_TRANSFER (Bitfield-Mask: 0x01)                   */
#define Arasan_EMMC_Distributor_STATUS_WRITE_TRANSFER_Pos (8UL)     /*!< WRITE_TRANSFER (Bit 8)                                */
#define Arasan_EMMC_Distributor_STATUS_WRITE_TRANSFER_Msk (0x100UL) /*!< WRITE_TRANSFER (Bitfield-Mask: 0x01)                  */
#define Arasan_EMMC_Distributor_STATUS_DAT_ACTIVE_Pos (2UL)         /*!< DAT_ACTIVE (Bit 2)                                    */
#define Arasan_EMMC_Distributor_STATUS_DAT_ACTIVE_Msk (0x4UL)       /*!< DAT_ACTIVE (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_STATUS_DAT_INHIBIT_Pos (1UL)        /*!< DAT_INHIBIT (Bit 1)                                   */
#define Arasan_EMMC_Distributor_STATUS_DAT_INHIBIT_Msk (0x2UL)      /*!< DAT_INHIBIT (Bitfield-Mask: 0x01)                     */
#define Arasan_EMMC_Distributor_STATUS_CMD_INHIBIT_Pos (0UL)        /*!< CMD_INHIBIT (Bit 0)                                   */
#define Arasan_EMMC_Distributor_STATUS_CMD_INHIBIT_Msk (0x1UL)      /*!< CMD_INHIBIT (Bitfield-Mask: 0x01)                     */
/* =======================================================  CONTROL0  ======================================================== */
#define Arasan_EMMC_Distributor_CONTROL0_ALT_BOOT_EN_Pos (22UL)     /*!< ALT_BOOT_EN (Bit 22)                                  */
#define Arasan_EMMC_Distributor_CONTROL0_ALT_BOOT_EN_Msk (0x400000UL) /*!< ALT_BOOT_EN (Bitfield-Mask: 0x01)                   */
#define Arasan_EMMC_Distributor_CONTROL0_BOOT_EN_Pos (21UL)         /*!< BOOT_EN (Bit 21)                                      */
#define Arasan_EMMC_Distributor_CONTROL0_BOOT_EN_Msk (0x200000UL)   /*!< BOOT_EN (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_CONTROL0_SPI_MODE_Pos (20UL)        /*!< SPI_MODE (Bit 20)                                     */
#define Arasan_EMMC_Distributor_CONTROL0_SPI_MODE_Msk (0x100000UL)  /*!< SPI_MODE (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_IEN_Pos (19UL)         /*!< GAP_IEN (Bit 19)                                      */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_IEN_Msk (0x80000UL)    /*!< GAP_IEN (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_CONTROL0_READWAIT_EN_Pos (18UL)     /*!< READWAIT_EN (Bit 18)                                  */
#define Arasan_EMMC_Distributor_CONTROL0_READWAIT_EN_Msk (0x40000UL) /*!< READWAIT_EN (Bitfield-Mask: 0x01)                    */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_RESTART_Pos (17UL)     /*!< GAP_RESTART (Bit 17)                                  */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_RESTART_Msk (0x20000UL) /*!< GAP_RESTART (Bitfield-Mask: 0x01)                    */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_STOP_Pos (16UL)        /*!< GAP_STOP (Bit 16)                                     */
#define Arasan_EMMC_Distributor_CONTROL0_GAP_STOP_Msk (0x10000UL)   /*!< GAP_STOP (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_8BIT_Pos (5UL)        /*!< HCTL_8BIT (Bit 5)                                     */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_8BIT_Msk (0x20UL)     /*!< HCTL_8BIT (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_HS_EN_Pos (2UL)       /*!< HCTL_HS_EN (Bit 2)                                    */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_HS_EN_Msk (0x4UL)     /*!< HCTL_HS_EN (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_DWIDTH_Pos (1UL)      /*!< HCTL_DWIDTH (Bit 1)                                   */
#define Arasan_EMMC_Distributor_CONTROL0_HCTL_DWIDTH_Msk (0x2UL)    /*!< HCTL_DWIDTH (Bitfield-Mask: 0x01)                     */
/* =======================================================  CONTROL1  ======================================================== */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_DATA_Pos (26UL)       /*!< SRST_DATA (Bit 26)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_DATA_Msk (0x4000000UL) /*!< SRST_DATA (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_CMD_Pos (25UL)        /*!< SRST_CMD (Bit 25)                                     */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_CMD_Msk (0x2000000UL) /*!< SRST_CMD (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_HC_Pos (24UL)         /*!< SRST_HC (Bit 24)                                      */
#define Arasan_EMMC_Distributor_CONTROL1_SRST_HC_Msk (0x1000000UL)  /*!< SRST_HC (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_CONTROL1_DATA_TOUNIT_Pos (16UL)     /*!< DATA_TOUNIT (Bit 16)                                  */
#define Arasan_EMMC_Distributor_CONTROL1_DATA_TOUNIT_Msk (0xf0000UL) /*!< DATA_TOUNIT (Bitfield-Mask: 0x0f)                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ8_Pos (8UL)        /*!< CLK_FREQ8 (Bit 8)                                     */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ8_Msk (0xff00UL)   /*!< CLK_FREQ8 (Bitfield-Mask: 0xff)                       */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ_MS2_Pos (6UL)     /*!< CLK_FREQ_MS2 (Bit 6)                                  */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_FREQ_MS2_Msk (0xc0UL)  /*!< CLK_FREQ_MS2 (Bitfield-Mask: 0x03)                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_GENSEL_Pos (5UL)       /*!< CLK_GENSEL (Bit 5)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_GENSEL_Msk (0x20UL)    /*!< CLK_GENSEL (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_EN_Pos (2UL)           /*!< CLK_EN (Bit 2)                                        */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_EN_Msk (0x4UL)         /*!< CLK_EN (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_STABLE_Pos (1UL)       /*!< CLK_STABLE (Bit 1)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_STABLE_Msk (0x2UL)     /*!< CLK_STABLE (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_INTLEN_Pos (0UL)       /*!< CLK_INTLEN (Bit 0)                                    */
#define Arasan_EMMC_Distributor_CONTROL1_CLK_INTLEN_Msk (0x1UL)     /*!< CLK_INTLEN (Bitfield-Mask: 0x01)                      */
/* =======================================================  INTERRUPT  ======================================================= */
#define Arasan_EMMC_Distributor_INTERRUPT_ACMD_ERR_Pos (24UL)       /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_ACMD_ERR_Msk (0x1000000UL) /*!< ACMD_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_DEND_ERR_Pos (22UL)       /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_DEND_ERR_Msk (0x400000UL) /*!< DEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_DCRC_ERR_Pos (21UL)       /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_DCRC_ERR_Msk (0x200000UL) /*!< DCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_DTO_ERR_Pos (20UL)        /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_DTO_ERR_Msk (0x100000UL)  /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_CBAD_ERR_Pos (19UL)       /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_CBAD_ERR_Msk (0x80000UL)  /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_CEND_ERR_Pos (18UL)       /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_CEND_ERR_Msk (0x40000UL)  /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_CCRC_ERR_Pos (17UL)       /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_CCRC_ERR_Msk (0x20000UL)  /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_CTO_ERR_Pos (16UL)        /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_CTO_ERR_Msk (0x10000UL)   /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_ERR_Pos (15UL)            /*!< ERR (Bit 15)                                          */
#define Arasan_EMMC_Distributor_INTERRUPT_ERR_Msk (0x8000UL)        /*!< ERR (Bitfield-Mask: 0x01)                             */
#define Arasan_EMMC_Distributor_INTERRUPT_ENDBOOT_Pos (14UL)        /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_ENDBOOT_Msk (0x4000UL)    /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_BOOTACK_Pos (13UL)        /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_BOOTACK_Msk (0x2000UL)    /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_INTERRUPT_RETUNE_Pos (12UL)         /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_INTERRUPT_RETUNE_Msk (0x1000UL)     /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_INTERRUPT_CARD_Pos (8UL)            /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_INTERRUPT_CARD_Msk (0x100UL)        /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_INTERRUPT_READ_RDY_Pos (5UL)        /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_READ_RDY_Msk (0x20UL)     /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_INTERRUPT_WRITE_RDY_Pos (4UL)       /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_WRITE_RDY_Msk (0x10UL)    /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_BLOCK_GAP_Pos (2UL)       /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_BLOCK_GAP_Msk (0x4UL)     /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_DATA_DONE_Pos (1UL)       /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_INTERRUPT_DATA_DONE_Msk (0x2UL)     /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_INTERRUPT_CMD_DONE_Pos (0UL)        /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_INTERRUPT_CMD_DONE_Msk (0x1UL)      /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* =======================================================  IRPT_MASK  ======================================================= */
#define Arasan_EMMC_Distributor_IRPT_MASK_ACMD_ERR_Pos (24UL)       /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_ACMD_ERR_Msk (0x1000000UL) /*!< ACMD_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_DEND_ERR_Pos (22UL)       /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_DEND_ERR_Msk (0x400000UL) /*!< DEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_DCRC_ERR_Pos (21UL)       /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_DCRC_ERR_Msk (0x200000UL) /*!< DCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_DTO_ERR_Pos (20UL)        /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_DTO_ERR_Msk (0x100000UL)  /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_CBAD_ERR_Pos (19UL)       /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_CBAD_ERR_Msk (0x80000UL)  /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_CEND_ERR_Pos (18UL)       /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_CEND_ERR_Msk (0x40000UL)  /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_CCRC_ERR_Pos (17UL)       /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_CCRC_ERR_Msk (0x20000UL)  /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_CTO_ERR_Pos (16UL)        /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_CTO_ERR_Msk (0x10000UL)   /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_ENDBOOT_Pos (14UL)        /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_ENDBOOT_Msk (0x4000UL)    /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_BOOTACK_Pos (13UL)        /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_BOOTACK_Msk (0x2000UL)    /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_MASK_RETUNE_Pos (12UL)         /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_RETUNE_Msk (0x1000UL)     /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_IRPT_MASK_CARD_Pos (8UL)            /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_IRPT_MASK_CARD_Msk (0x100UL)        /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_IRPT_MASK_READ_RDY_Pos (5UL)        /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_READ_RDY_Msk (0x20UL)     /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_MASK_WRITE_RDY_Pos (4UL)       /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_WRITE_RDY_Msk (0x10UL)    /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_BLOCK_GAP_Pos (2UL)       /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_BLOCK_GAP_Msk (0x4UL)     /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_DATA_DONE_Pos (1UL)       /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_IRPT_MASK_DATA_DONE_Msk (0x2UL)     /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_MASK_CMD_DONE_Pos (0UL)        /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_IRPT_MASK_CMD_DONE_Msk (0x1UL)      /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* ========================================================  IRPT_EN  ======================================================== */
#define Arasan_EMMC_Distributor_IRPT_EN_ACMD_ERR_Pos (24UL)         /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_ACMD_ERR_Msk (0x1000000UL)  /*!< ACMD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_DEND_ERR_Pos (22UL)         /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_DEND_ERR_Msk (0x400000UL)   /*!< DEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_DCRC_ERR_Pos (21UL)         /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_DCRC_ERR_Msk (0x200000UL)   /*!< DCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_DTO_ERR_Pos (20UL)          /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_DTO_ERR_Msk (0x100000UL)    /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_CBAD_ERR_Pos (19UL)         /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_CBAD_ERR_Msk (0x80000UL)    /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_CEND_ERR_Pos (18UL)         /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_CEND_ERR_Msk (0x40000UL)    /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_CCRC_ERR_Pos (17UL)         /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_CCRC_ERR_Msk (0x20000UL)    /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_CTO_ERR_Pos (16UL)          /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_CTO_ERR_Msk (0x10000UL)     /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_ENDBOOT_Pos (14UL)          /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_ENDBOOT_Msk (0x4000UL)      /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_BOOTACK_Pos (13UL)          /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_BOOTACK_Msk (0x2000UL)      /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_IRPT_EN_RETUNE_Pos (12UL)           /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_IRPT_EN_RETUNE_Msk (0x1000UL)       /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_IRPT_EN_CARD_Pos (8UL)              /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_IRPT_EN_CARD_Msk (0x100UL)          /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_IRPT_EN_READ_RDY_Pos (5UL)          /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_READ_RDY_Msk (0x20UL)       /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_IRPT_EN_WRITE_RDY_Pos (4UL)         /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_WRITE_RDY_Msk (0x10UL)      /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_EN_BLOCK_GAP_Pos (2UL)         /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_BLOCK_GAP_Msk (0x4UL)       /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_EN_DATA_DONE_Pos (1UL)         /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_IRPT_EN_DATA_DONE_Msk (0x2UL)       /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_IRPT_EN_CMD_DONE_Pos (0UL)          /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_IRPT_EN_CMD_DONE_Msk (0x1UL)        /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* =======================================================  CONTROL2  ======================================================== */
#define Arasan_EMMC_Distributor_CONTROL2_TUNED_Pos (23UL)           /*!< TUNED (Bit 23)                                        */
#define Arasan_EMMC_Distributor_CONTROL2_TUNED_Msk (0x800000UL)     /*!< TUNED (Bitfield-Mask: 0x01)                           */
#define Arasan_EMMC_Distributor_CONTROL2_TUNEON_Pos (22UL)          /*!< TUNEON (Bit 22)                                       */
#define Arasan_EMMC_Distributor_CONTROL2_TUNEON_Msk (0x400000UL)    /*!< TUNEON (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_CONTROL2_UHSMODE_Pos (16UL)         /*!< UHSMODE (Bit 16)                                      */
#define Arasan_EMMC_Distributor_CONTROL2_UHSMODE_Msk (0x70000UL)    /*!< UHSMODE (Bitfield-Mask: 0x07)                         */
#define Arasan_EMMC_Distributor_CONTROL2_NOTC12_ERR_Pos (7UL)       /*!< NOTC12_ERR (Bit 7)                                    */
#define Arasan_EMMC_Distributor_CONTROL2_NOTC12_ERR_Msk (0x80UL)    /*!< NOTC12_ERR (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_CONTROL2_ACBAD_ERR_Pos (4UL)        /*!< ACBAD_ERR (Bit 4)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACBAD_ERR_Msk (0x10UL)     /*!< ACBAD_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL2_ACEND_ERR_Pos (3UL)        /*!< ACEND_ERR (Bit 3)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACEND_ERR_Msk (0x8UL)      /*!< ACEND_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL2_ACCRC_ERR_Pos (2UL)        /*!< ACCRC_ERR (Bit 2)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACCRC_ERR_Msk (0x4UL)      /*!< ACCRC_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_CONTROL2_ACTO_ERR_Pos (1UL)         /*!< ACTO_ERR (Bit 1)                                      */
#define Arasan_EMMC_Distributor_CONTROL2_ACTO_ERR_Msk (0x2UL)       /*!< ACTO_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_CONTROL2_ACNOX_ERR_Pos (0UL)        /*!< ACNOX_ERR (Bit 0)                                     */
#define Arasan_EMMC_Distributor_CONTROL2_ACNOX_ERR_Msk (0x1UL)      /*!< ACNOX_ERR (Bitfield-Mask: 0x01)                       */
/* ======================================================  FORCE_IRPT  ======================================================= */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ACMD_ERR_Pos (24UL)      /*!< ACMD_ERR (Bit 24)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ACMD_ERR_Msk (0x1000000UL) /*!< ACMD_ERR (Bitfield-Mask: 0x01)                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DEND_ERR_Pos (22UL)      /*!< DEND_ERR (Bit 22)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DEND_ERR_Msk (0x400000UL) /*!< DEND_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DCRC_ERR_Pos (21UL)      /*!< DCRC_ERR (Bit 21)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DCRC_ERR_Msk (0x200000UL) /*!< DCRC_ERR (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DTO_ERR_Pos (20UL)       /*!< DTO_ERR (Bit 20)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DTO_ERR_Msk (0x100000UL) /*!< DTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CBAD_ERR_Pos (19UL)      /*!< CBAD_ERR (Bit 19)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CBAD_ERR_Msk (0x80000UL) /*!< CBAD_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CEND_ERR_Pos (18UL)      /*!< CEND_ERR (Bit 18)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CEND_ERR_Msk (0x40000UL) /*!< CEND_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CCRC_ERR_Pos (17UL)      /*!< CCRC_ERR (Bit 17)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CCRC_ERR_Msk (0x20000UL) /*!< CCRC_ERR (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CTO_ERR_Pos (16UL)       /*!< CTO_ERR (Bit 16)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CTO_ERR_Msk (0x10000UL)  /*!< CTO_ERR (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ENDBOOT_Pos (14UL)       /*!< ENDBOOT (Bit 14)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_ENDBOOT_Msk (0x4000UL)   /*!< ENDBOOT (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BOOTACK_Pos (13UL)       /*!< BOOTACK (Bit 13)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BOOTACK_Msk (0x2000UL)   /*!< BOOTACK (Bitfield-Mask: 0x01)                         */
#define Arasan_EMMC_Distributor_FORCE_IRPT_RETUNE_Pos (12UL)        /*!< RETUNE (Bit 12)                                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_RETUNE_Msk (0x1000UL)    /*!< RETUNE (Bitfield-Mask: 0x01)                          */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CARD_Pos (8UL)           /*!< CARD (Bit 8)                                          */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CARD_Msk (0x100UL)       /*!< CARD (Bitfield-Mask: 0x01)                            */
#define Arasan_EMMC_Distributor_FORCE_IRPT_READ_RDY_Pos (5UL)       /*!< READ_RDY (Bit 5)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_READ_RDY_Msk (0x20UL)    /*!< READ_RDY (Bitfield-Mask: 0x01)                        */
#define Arasan_EMMC_Distributor_FORCE_IRPT_WRITE_RDY_Pos (4UL)      /*!< WRITE_RDY (Bit 4)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_WRITE_RDY_Msk (0x10UL)   /*!< WRITE_RDY (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BLOCK_GAP_Pos (2UL)      /*!< BLOCK_GAP (Bit 2)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_BLOCK_GAP_Msk (0x4UL)    /*!< BLOCK_GAP (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DATA_DONE_Pos (1UL)      /*!< DATA_DONE (Bit 1)                                     */
#define Arasan_EMMC_Distributor_FORCE_IRPT_DATA_DONE_Msk (0x2UL)    /*!< DATA_DONE (Bitfield-Mask: 0x01)                       */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CMD_DONE_Pos (0UL)       /*!< CMD_DONE (Bit 0)                                      */
#define Arasan_EMMC_Distributor_FORCE_IRPT_CMD_DONE_Msk (0x1UL)     /*!< CMD_DONE (Bitfield-Mask: 0x01)                        */
/* =====================================================  BOOT_TIMEOUT  ====================================================== */
/* ========================================================  DBG_SEL  ======================================================== */
#define Arasan_EMMC_Distributor_DBG_SEL_SELECT_Pos (0UL)            /*!< SELECT (Bit 0)                                        */
#define Arasan_EMMC_Distributor_DBG_SEL_SELECT_Msk (0x1UL)          /*!< SELECT (Bitfield-Mask: 0x01)                          */
/* =====================================================  EXRDFIFO_CFG  ====================================================== */
#define Arasan_EMMC_Distributor_EXRDFIFO_CFG_RD_THRSH_Pos (0UL)     /*!< RD_THRSH (Bit 0)                                      */
#define Arasan_EMMC_Distributor_EXRDFIFO_CFG_RD_THRSH_Msk (0x7UL)   /*!< RD_THRSH (Bitfield-Mask: 0x07)                        */
/* ======================================================  EXRDFIFO_EN  ====================================================== */
#define Arasan_EMMC_Distributor_EXRDFIFO_EN_ENABLE_Pos (0UL)        /*!< ENABLE (Bit 0)                                        */
#define Arasan_EMMC_Distributor_EXRDFIFO_EN_ENABLE_Msk (0x1UL)      /*!< ENABLE (Bitfield-Mask: 0x01)                          */
/* =======================================================  TUNE_STEP  ======================================================= */
#define Arasan_EMMC_Distributor_TUNE_STEP_DELAY_Pos (0UL)           /*!< DELAY (Bit 0)                                         */
#define Arasan_EMMC_Distributor_TUNE_STEP_DELAY_Msk (0x7UL)         /*!< DELAY (Bitfield-Mask: 0x07)                           */
/* ====================================================  TUNE_STEPS_STD  ===================================================== */
#define Arasan_EMMC_Distributor_TUNE_STEPS_STD_STEPS_Pos (0UL)      /*!< STEPS (Bit 0)                                         */
#define Arasan_EMMC_Distributor_TUNE_STEPS_STD_STEPS_Msk (0x3fUL)   /*!< STEPS (Bitfield-Mask: 0x3f)                           */
/* ====================================================  TUNE_STEPS_DDR  ===================================================== */
#define Arasan_EMMC_Distributor_TUNE_STEPS_DDR_STEPS_Pos (0UL)      /*!< STEPS (Bit 0)                                         */
#define Arasan_EMMC_Distributor_TUNE_STEPS_DDR_STEPS_Msk (0x3fUL)   /*!< STEPS (Bitfield-Mask: 0x3f)                           */
/* ======================================================  SPI_INT_SPT  ====================================================== */
#define Arasan_EMMC_Distributor_SPI_INT_SPT_SELECT_Pos (0UL)        /*!< SELECT (Bit 0)                                        */
#define Arasan_EMMC_Distributor_SPI_INT_SPT_SELECT_Msk (0xffUL)     /*!< SELECT (Bitfield-Mask: 0xff)                          */
/* ======================================================  SLOTISR_VER  ====================================================== */
#define Arasan_EMMC_Distributor_SLOTISR_VER_VENDOR_Pos (24UL)       /*!< VENDOR (Bit 24)                                       */
#define Arasan_EMMC_Distributor_SLOTISR_VER_VENDOR_Msk (0xff000000UL) /*!< VENDOR (Bitfield-Mask: 0xff)                        */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SDVERSION_Pos (16UL)    /*!< SDVERSION (Bit 16)                                    */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SDVERSION_Msk (0xff0000UL) /*!< SDVERSION (Bitfield-Mask: 0xff)                    */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SLOT_STATUS_Pos (0UL)   /*!< SLOT_STATUS (Bit 0)                                   */
#define Arasan_EMMC_Distributor_SLOTISR_VER_SLOT_STATUS_Msk (0xffUL) /*!< SLOT_STATUS (Bitfield-Mask: 0xff)                    */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                             Enumerated Values Cluster Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                       HOST_CHANNEL                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  HCCHAR  ========================================================= */
/* ========================================================  HCSPLT  ========================================================= */
/* =========================================================  HCINT  ========================================================= */
/* =======================================================  HCINTMSK  ======================================================== */
/* ========================================================  HCTSIZ  ========================================================= */
/* =========================================================  HCDMA  ========================================================= */


/* =========================================================================================================================== */
/* ================                                        IN_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* =======================================================  DIEPCTL0  ======================================================== */
/* ========================================================  DIEPINT  ======================================================== */
/* =======================================================  DIEPTSIZ  ======================================================== */
/* ========================================================  DIEPDMA  ======================================================== */
/* ========================================================  DTXFSTS  ======================================================== */


/* =========================================================================================================================== */
/* ================                                       OUT_ENDPOINT                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  DOEPCTL  ======================================================== */
/* ========================================================  DOEPINT  ======================================================== */
/* =======================================================  DOEPTSIZ  ======================================================== */
/* ========================================================  DOEPDMA  ======================================================== */

/** @} */ /* End of group EnumValue_clusters */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         VCMAILBOX                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  READ  ========================================================== */
/* =========================================================  PEEK0  ========================================================= */
/* ========================================================  SENDER0  ======================================================== */
/* ========================================================  STATUS0  ======================================================== */
/* ========================================================  CONFIG0  ======================================================== */
/* =========================================================  WRITE  ========================================================= */
/* =========================================================  PEEK1  ========================================================= */
/* ========================================================  SENDER1  ======================================================== */
/* ========================================================  STATUS1  ======================================================== */
/* ========================================================  CONFIG1  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PM                                             ================ */
/* =========================================================================================================================== */

/* =========================================================  RSTC  ========================================================== */
/* ================================================  PM RSTC PASSWD [24..31]  ================================================ */
typedef enum {                                  /*!< PM_RSTC_PASSWD                                                            */
  PM_RSTC_PASSWD_PASSWD                = 90,    /*!< PASSWD : PASSWD                                                           */
} PM_RSTC_PASSWD_Enum;

/* =================================================  PM RSTC WRCFG [4..5]  ================================================== */
typedef enum {                                  /*!< PM_RSTC_WRCFG                                                             */
  PM_RSTC_WRCFG_FULL_RESET             = 2,     /*!< FULL_RESET : FULL_RESET                                                   */
} PM_RSTC_WRCFG_Enum;

/* =========================================================  WDOG  ========================================================== */
/* ================================================  PM WDOG PASSWD [24..31]  ================================================ */
typedef enum {                                  /*!< PM_WDOG_PASSWD                                                            */
  PM_WDOG_PASSWD_PASSWD                = 90,    /*!< PASSWD : PASSWD                                                           */
} PM_WDOG_PASSWD_Enum;



/* =========================================================================================================================== */
/* ================                                          CM_PCM                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
/* ===============================================  CM_PCM CS PASSWD [24..31]  =============================================== */
typedef enum {                                  /*!< CM_PCM_CS_PASSWD                                                          */
  CM_PCM_CS_PASSWD_PASSWD              = 90,    /*!< PASSWD : PASSWD                                                           */
} CM_PCM_CS_PASSWD_Enum;

/* =================================================  CM_PCM CS SRC [0..3]  ================================================== */
typedef enum {                                  /*!< CM_PCM_CS_SRC                                                             */
  CM_PCM_CS_SRC_XOSC                   = 1,     /*!< XOSC : XOSC                                                               */
  CM_PCM_CS_SRC_TEST0                  = 2,     /*!< TEST0 : TEST0                                                             */
  CM_PCM_CS_SRC_TEST1                  = 3,     /*!< TEST1 : TEST1                                                             */
  CM_PCM_CS_SRC_PLLA                   = 4,     /*!< PLLA : PLLA                                                               */
  CM_PCM_CS_SRC_PLLB                   = 5,     /*!< PLLB : PLLB                                                               */
  CM_PCM_CS_SRC_PLLC                   = 6,     /*!< PLLC : PLLC                                                               */
  CM_PCM_CS_SRC_HDMI                   = 7,     /*!< HDMI : HDMI                                                               */
} CM_PCM_CS_SRC_Enum;

/* ==========================================================  DIV  ========================================================== */
/* ==============================================  CM_PCM DIV PASSWD [24..31]  =============================================== */
typedef enum {                                  /*!< CM_PCM_DIV_PASSWD                                                         */
  CM_PCM_DIV_PASSWD_PASSWD             = 90,    /*!< PASSWD : PASSWD                                                           */
} CM_PCM_DIV_PASSWD_Enum;



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  GPFSEL0  ======================================================== */
/* ===============================================  GPIO GPFSEL0 FSEL0 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL0                                                        */
  GPIO_GPFSEL0_FSEL0_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL0_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL0_SDA0              = 4,     /*!< SDA0 : Pin is connected to SDA0                                           */
  GPIO_GPFSEL0_FSEL0_SA5               = 5,     /*!< SA5 : Pin is connected to SA5                                             */
  GPIO_GPFSEL0_FSEL0_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL0_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL0_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL0_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL0_Enum;

/* ===============================================  GPIO GPFSEL0 FSEL1 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL1                                                        */
  GPIO_GPFSEL0_FSEL1_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL1_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL1_SCL0              = 4,     /*!< SCL0 : Pin is connected to SCL0                                           */
  GPIO_GPFSEL0_FSEL1_SA4               = 5,     /*!< SA4 : Pin is connected to SA4                                             */
  GPIO_GPFSEL0_FSEL1_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL1_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL1_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL1_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL1_Enum;

/* ===============================================  GPIO GPFSEL0 FSEL2 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL2                                                        */
  GPIO_GPFSEL0_FSEL2_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL2_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL2_SDA1              = 4,     /*!< SDA1 : Pin is connected to SDA1                                           */
  GPIO_GPFSEL0_FSEL2_SA3               = 5,     /*!< SA3 : Pin is connected to SA3                                             */
  GPIO_GPFSEL0_FSEL2_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL2_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL2_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL2_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL2_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL3 [9..11]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL3                                                        */
  GPIO_GPFSEL0_FSEL3_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL3_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL3_SCL1              = 4,     /*!< SCL1 : Pin is connected to SCL1                                           */
  GPIO_GPFSEL0_FSEL3_SA2               = 5,     /*!< SA2 : Pin is connected to SA2                                             */
  GPIO_GPFSEL0_FSEL3_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL3_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL3_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL3_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL3_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL4 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL4                                                        */
  GPIO_GPFSEL0_FSEL4_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL4_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL4_GPCLK0            = 4,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
  GPIO_GPFSEL0_FSEL4_SA1               = 5,     /*!< SA1 : Pin is connected to SA1                                             */
  GPIO_GPFSEL0_FSEL4_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL4_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL4_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL4_ARM_TDI           = 2,     /*!< ARM_TDI : Pin is connected to ARM_TDI                                     */
} GPIO_GPFSEL0_FSEL4_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL5 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL5                                                        */
  GPIO_GPFSEL0_FSEL5_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL5_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL5_GPCLK1            = 4,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
  GPIO_GPFSEL0_FSEL5_SA0               = 5,     /*!< SA0 : Pin is connected to SA0                                             */
  GPIO_GPFSEL0_FSEL5_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL5_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL5_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL5_ARM_TDO           = 2,     /*!< ARM_TDO : Pin is connected to ARM_TDO                                     */
} GPIO_GPFSEL0_FSEL5_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL6 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL6                                                        */
  GPIO_GPFSEL0_FSEL6_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL6_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL6_GPCLK2            = 4,     /*!< GPCLK2 : Pin is connected to GPCLK2                                       */
  GPIO_GPFSEL0_FSEL6_SOE_N             = 5,     /*!< SOE_N : Pin is connected to SOE_N                                         */
  GPIO_GPFSEL0_FSEL6_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL6_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL6_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL6_ARM_RTCK          = 2,     /*!< ARM_RTCK : Pin is connected to ARM_RTCK                                   */
} GPIO_GPFSEL0_FSEL6_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL7 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL7                                                        */
  GPIO_GPFSEL0_FSEL7_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL7_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL7_SPI0_CE1_N        = 4,     /*!< SPI0_CE1_N : Pin is connected to SPI0_CE1_N                               */
  GPIO_GPFSEL0_FSEL7_SWE_N             = 5,     /*!< SWE_N : Pin is connected to SWE_N                                         */
  GPIO_GPFSEL0_FSEL7_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL7_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL7_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL7_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL7_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL8 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL8                                                        */
  GPIO_GPFSEL0_FSEL8_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL8_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL8_SPI0_CE0_N        = 4,     /*!< SPI0_CE0_N : Pin is connected to SPI0_CE0_N                               */
  GPIO_GPFSEL0_FSEL8_SD0               = 5,     /*!< SD0 : Pin is connected to SD0                                             */
  GPIO_GPFSEL0_FSEL8_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL8_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL8_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL8_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL8_Enum;

/* ==============================================  GPIO GPFSEL0 FSEL9 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL0_FSEL9                                                        */
  GPIO_GPFSEL0_FSEL9_INPUT             = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL0_FSEL9_OUTPUT            = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL0_FSEL9_SPI0_MISO         = 4,     /*!< SPI0_MISO : Pin is connected to SPI0_MISO                                 */
  GPIO_GPFSEL0_FSEL9_SD1               = 5,     /*!< SD1 : Pin is connected to SD1                                             */
  GPIO_GPFSEL0_FSEL9_RESERVED2         = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL0_FSEL9_RESERVED3         = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL0_FSEL9_RESERVED4         = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL0_FSEL9_RESERVED5         = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL0_FSEL9_Enum;

/* ========================================================  GPFSEL1  ======================================================== */
/* ==============================================  GPIO GPFSEL1 FSEL10 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL10                                                       */
  GPIO_GPFSEL1_FSEL10_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL10_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL10_SPI0_MOSI        = 4,     /*!< SPI0_MOSI : Pin is connected to SPI0_MOSI                                 */
  GPIO_GPFSEL1_FSEL10_SD2              = 5,     /*!< SD2 : Pin is connected to SD2                                             */
  GPIO_GPFSEL1_FSEL10_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL10_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL10_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL1_FSEL10_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL1_FSEL10_Enum;

/* ==============================================  GPIO GPFSEL1 FSEL11 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL11                                                       */
  GPIO_GPFSEL1_FSEL11_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL11_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL11_SPI0_SCLK        = 4,     /*!< SPI0_SCLK : Pin is connected to SPI0_SCLK                                 */
  GPIO_GPFSEL1_FSEL11_SD3              = 5,     /*!< SD3 : Pin is connected to SD3                                             */
  GPIO_GPFSEL1_FSEL11_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL11_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL11_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL1_FSEL11_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL1_FSEL11_Enum;

/* ==============================================  GPIO GPFSEL1 FSEL12 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL12                                                       */
  GPIO_GPFSEL1_FSEL12_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL12_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL12_PWM0_0           = 4,     /*!< PWM0_0 : Pin is connected to PWM0_0                                       */
  GPIO_GPFSEL1_FSEL12_SD4              = 5,     /*!< SD4 : Pin is connected to SD4                                             */
  GPIO_GPFSEL1_FSEL12_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL12_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL12_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL1_FSEL12_ARM_TMS          = 2,     /*!< ARM_TMS : Pin is connected to ARM_TMS                                     */
} GPIO_GPFSEL1_FSEL12_Enum;

/* ==============================================  GPIO GPFSEL1 FSEL13 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL13                                                       */
  GPIO_GPFSEL1_FSEL13_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL13_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL13_PWM0_1           = 4,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
  GPIO_GPFSEL1_FSEL13_SD5              = 5,     /*!< SD5 : Pin is connected to SD5                                             */
  GPIO_GPFSEL1_FSEL13_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL13_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL13_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL1_FSEL13_ARM_TCK          = 2,     /*!< ARM_TCK : Pin is connected to ARM_TCK                                     */
} GPIO_GPFSEL1_FSEL13_Enum;

/* =============================================  GPIO GPFSEL1 FSEL14 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL14                                                       */
  GPIO_GPFSEL1_FSEL14_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL14_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL14_TXD0             = 4,     /*!< TXD0 : Pin is connected to TXD0                                           */
  GPIO_GPFSEL1_FSEL14_SD6              = 5,     /*!< SD6 : Pin is connected to SD6                                             */
  GPIO_GPFSEL1_FSEL14_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL14_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL14_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL1_FSEL14_TXD1             = 2,     /*!< TXD1 : Pin is connected to TXD1                                           */
} GPIO_GPFSEL1_FSEL14_Enum;

/* =============================================  GPIO GPFSEL1 FSEL15 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL15                                                       */
  GPIO_GPFSEL1_FSEL15_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL15_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL15_RXD0             = 4,     /*!< RXD0 : Pin is connected to RXD0                                           */
  GPIO_GPFSEL1_FSEL15_SD7              = 5,     /*!< SD7 : Pin is connected to SD7                                             */
  GPIO_GPFSEL1_FSEL15_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL15_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL15_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL1_FSEL15_RXD1             = 2,     /*!< RXD1 : Pin is connected to RXD1                                           */
} GPIO_GPFSEL1_FSEL15_Enum;

/* =============================================  GPIO GPFSEL1 FSEL16 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL16                                                       */
  GPIO_GPFSEL1_FSEL16_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL16_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL16_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL1_FSEL16_SD8              = 5,     /*!< SD8 : Pin is connected to SD8                                             */
  GPIO_GPFSEL1_FSEL16_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL16_CTS0             = 7,     /*!< CTS0 : Pin is connected to CTS0                                           */
  GPIO_GPFSEL1_FSEL16_SPI1_CE2_N       = 3,     /*!< SPI1_CE2_N : Pin is connected to SPI1_CE2_N                               */
  GPIO_GPFSEL1_FSEL16_CTS1             = 2,     /*!< CTS1 : Pin is connected to CTS1                                           */
} GPIO_GPFSEL1_FSEL16_Enum;

/* =============================================  GPIO GPFSEL1 FSEL17 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL17                                                       */
  GPIO_GPFSEL1_FSEL17_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL17_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL17_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL1_FSEL17_SD9              = 5,     /*!< SD9 : Pin is connected to SD9                                             */
  GPIO_GPFSEL1_FSEL17_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL17_RTS0             = 7,     /*!< RTS0 : Pin is connected to RTS0                                           */
  GPIO_GPFSEL1_FSEL17_SPI1_CE1_N       = 3,     /*!< SPI1_CE1_N : Pin is connected to SPI1_CE1_N                               */
  GPIO_GPFSEL1_FSEL17_RTS1             = 2,     /*!< RTS1 : Pin is connected to RTS1                                           */
} GPIO_GPFSEL1_FSEL17_Enum;

/* =============================================  GPIO GPFSEL1 FSEL18 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL18                                                       */
  GPIO_GPFSEL1_FSEL18_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL18_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL18_PCM_CLK          = 4,     /*!< PCM_CLK : Pin is connected to PCM_CLK                                     */
  GPIO_GPFSEL1_FSEL18_SD10             = 5,     /*!< SD10 : Pin is connected to SD10                                           */
  GPIO_GPFSEL1_FSEL18_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL18_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL18_SPI1_CE0_N       = 3,     /*!< SPI1_CE0_N : Pin is connected to SPI1_CE0_N                               */
  GPIO_GPFSEL1_FSEL18_PWM0_0           = 2,     /*!< PWM0_0 : Pin is connected to PWM0_0                                       */
} GPIO_GPFSEL1_FSEL18_Enum;

/* =============================================  GPIO GPFSEL1 FSEL19 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL1_FSEL19                                                       */
  GPIO_GPFSEL1_FSEL19_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL1_FSEL19_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL1_FSEL19_PCM_FS           = 4,     /*!< PCM_FS : Pin is connected to PCM_FS                                       */
  GPIO_GPFSEL1_FSEL19_SD11             = 5,     /*!< SD11 : Pin is connected to SD11                                           */
  GPIO_GPFSEL1_FSEL19_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL1_FSEL19_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL1_FSEL19_SPI1_MISO        = 3,     /*!< SPI1_MISO : Pin is connected to SPI1_MISO                                 */
  GPIO_GPFSEL1_FSEL19_PWM0_1           = 2,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
} GPIO_GPFSEL1_FSEL19_Enum;

/* ========================================================  GPFSEL2  ======================================================== */
/* ==============================================  GPIO GPFSEL2 FSEL20 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL20                                                       */
  GPIO_GPFSEL2_FSEL20_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL20_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL20_PCM_DIN          = 4,     /*!< PCM_DIN : Pin is connected to PCM_DIN                                     */
  GPIO_GPFSEL2_FSEL20_SD12             = 5,     /*!< SD12 : Pin is connected to SD12                                           */
  GPIO_GPFSEL2_FSEL20_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL20_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL2_FSEL20_SPI1_MOSI        = 3,     /*!< SPI1_MOSI : Pin is connected to SPI1_MOSI                                 */
  GPIO_GPFSEL2_FSEL20_GPCLK0           = 2,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
} GPIO_GPFSEL2_FSEL20_Enum;

/* ==============================================  GPIO GPFSEL2 FSEL21 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL21                                                       */
  GPIO_GPFSEL2_FSEL21_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL21_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL21_PCM_DOUT         = 4,     /*!< PCM_DOUT : Pin is connected to PCM_DOUT                                   */
  GPIO_GPFSEL2_FSEL21_SD13             = 5,     /*!< SD13 : Pin is connected to SD13                                           */
  GPIO_GPFSEL2_FSEL21_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL21_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL2_FSEL21_SPI1_SCLK        = 3,     /*!< SPI1_SCLK : Pin is connected to SPI1_SCLK                                 */
  GPIO_GPFSEL2_FSEL21_GPCLK1           = 2,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
} GPIO_GPFSEL2_FSEL21_Enum;

/* ==============================================  GPIO GPFSEL2 FSEL22 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL22                                                       */
  GPIO_GPFSEL2_FSEL22_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL22_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL22_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL2_FSEL22_SD14             = 5,     /*!< SD14 : Pin is connected to SD14                                           */
  GPIO_GPFSEL2_FSEL22_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL22_SD1_CLK          = 7,     /*!< SD1_CLK : Pin is connected to SD1_CLK                                     */
  GPIO_GPFSEL2_FSEL22_ARM_TRST         = 3,     /*!< ARM_TRST : Pin is connected to ARM_TRST                                   */
  GPIO_GPFSEL2_FSEL22_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL22_Enum;

/* ==============================================  GPIO GPFSEL2 FSEL23 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL23                                                       */
  GPIO_GPFSEL2_FSEL23_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL23_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL23_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL2_FSEL23_SD15             = 5,     /*!< SD15 : Pin is connected to SD15                                           */
  GPIO_GPFSEL2_FSEL23_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL23_SD1_CMD          = 7,     /*!< SD1_CMD : Pin is connected to SD1_CMD                                     */
  GPIO_GPFSEL2_FSEL23_ARM_RTCK         = 3,     /*!< ARM_RTCK : Pin is connected to ARM_RTCK                                   */
  GPIO_GPFSEL2_FSEL23_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL23_Enum;

/* =============================================  GPIO GPFSEL2 FSEL24 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL24                                                       */
  GPIO_GPFSEL2_FSEL24_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL24_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL24_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL2_FSEL24_SD16             = 5,     /*!< SD16 : Pin is connected to SD16                                           */
  GPIO_GPFSEL2_FSEL24_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL24_SD1_DAT0         = 7,     /*!< SD1_DAT0 : Pin is connected to SD1_DAT0                                   */
  GPIO_GPFSEL2_FSEL24_ARM_TDO          = 3,     /*!< ARM_TDO : Pin is connected to ARM_TDO                                     */
  GPIO_GPFSEL2_FSEL24_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL24_Enum;

/* =============================================  GPIO GPFSEL2 FSEL25 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL25                                                       */
  GPIO_GPFSEL2_FSEL25_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL25_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL25_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL2_FSEL25_SD17             = 5,     /*!< SD17 : Pin is connected to SD17                                           */
  GPIO_GPFSEL2_FSEL25_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL25_SD1_DAT1         = 7,     /*!< SD1_DAT1 : Pin is connected to SD1_DAT1                                   */
  GPIO_GPFSEL2_FSEL25_ARM_TCK          = 3,     /*!< ARM_TCK : Pin is connected to ARM_TCK                                     */
  GPIO_GPFSEL2_FSEL25_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL25_Enum;

/* =============================================  GPIO GPFSEL2 FSEL26 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL26                                                       */
  GPIO_GPFSEL2_FSEL26_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL26_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL26_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL2_FSEL26_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL2_FSEL26_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL26_SD1_DAT2         = 7,     /*!< SD1_DAT2 : Pin is connected to SD1_DAT2                                   */
  GPIO_GPFSEL2_FSEL26_ARM_TDI          = 3,     /*!< ARM_TDI : Pin is connected to ARM_TDI                                     */
  GPIO_GPFSEL2_FSEL26_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL26_Enum;

/* =============================================  GPIO GPFSEL2 FSEL27 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL27                                                       */
  GPIO_GPFSEL2_FSEL27_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL27_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL27_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL2_FSEL27_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL2_FSEL27_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL2_FSEL27_SD1_DAT3         = 7,     /*!< SD1_DAT3 : Pin is connected to SD1_DAT3                                   */
  GPIO_GPFSEL2_FSEL27_ARM_TMS          = 3,     /*!< ARM_TMS : Pin is connected to ARM_TMS                                     */
  GPIO_GPFSEL2_FSEL27_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL27_Enum;

/* =============================================  GPIO GPFSEL2 FSEL28 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL28                                                       */
  GPIO_GPFSEL2_FSEL28_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL28_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL28_SDA0             = 4,     /*!< SDA0 : Pin is connected to SDA0                                           */
  GPIO_GPFSEL2_FSEL28_SA5              = 5,     /*!< SA5 : Pin is connected to SA5                                             */
  GPIO_GPFSEL2_FSEL28_PCM_CLK          = 6,     /*!< PCM_CLK : Pin is connected to PCM_CLK                                     */
  GPIO_GPFSEL2_FSEL28_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL2_FSEL28_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL2_FSEL28_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL28_Enum;

/* =============================================  GPIO GPFSEL2 FSEL29 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL2_FSEL29                                                       */
  GPIO_GPFSEL2_FSEL29_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL2_FSEL29_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL2_FSEL29_SCL0             = 4,     /*!< SCL0 : Pin is connected to SCL0                                           */
  GPIO_GPFSEL2_FSEL29_SA4              = 5,     /*!< SA4 : Pin is connected to SA4                                             */
  GPIO_GPFSEL2_FSEL29_PCM_FS           = 6,     /*!< PCM_FS : Pin is connected to PCM_FS                                       */
  GPIO_GPFSEL2_FSEL29_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL2_FSEL29_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL2_FSEL29_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL2_FSEL29_Enum;

/* ========================================================  GPFSEL3  ======================================================== */
/* ==============================================  GPIO GPFSEL3 FSEL30 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL30                                                       */
  GPIO_GPFSEL3_FSEL30_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL30_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL30_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL3_FSEL30_SA3              = 5,     /*!< SA3 : Pin is connected to SA3                                             */
  GPIO_GPFSEL3_FSEL30_PCM_DIN          = 6,     /*!< PCM_DIN : Pin is connected to PCM_DIN                                     */
  GPIO_GPFSEL3_FSEL30_CTS0             = 7,     /*!< CTS0 : Pin is connected to CTS0                                           */
  GPIO_GPFSEL3_FSEL30_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL30_CTS1             = 2,     /*!< CTS1 : Pin is connected to CTS1                                           */
} GPIO_GPFSEL3_FSEL30_Enum;

/* ==============================================  GPIO GPFSEL3 FSEL31 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL31                                                       */
  GPIO_GPFSEL3_FSEL31_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL31_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL31_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL3_FSEL31_SA2              = 5,     /*!< SA2 : Pin is connected to SA2                                             */
  GPIO_GPFSEL3_FSEL31_PCM_DOUT         = 6,     /*!< PCM_DOUT : Pin is connected to PCM_DOUT                                   */
  GPIO_GPFSEL3_FSEL31_RTS0             = 7,     /*!< RTS0 : Pin is connected to RTS0                                           */
  GPIO_GPFSEL3_FSEL31_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL31_RTS1             = 2,     /*!< RTS1 : Pin is connected to RTS1                                           */
} GPIO_GPFSEL3_FSEL31_Enum;

/* ==============================================  GPIO GPFSEL3 FSEL32 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL32                                                       */
  GPIO_GPFSEL3_FSEL32_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL32_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL32_GPCLK0           = 4,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
  GPIO_GPFSEL3_FSEL32_SA1              = 5,     /*!< SA1 : Pin is connected to SA1                                             */
  GPIO_GPFSEL3_FSEL32_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL32_TXD0             = 7,     /*!< TXD0 : Pin is connected to TXD0                                           */
  GPIO_GPFSEL3_FSEL32_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL32_TXD1             = 2,     /*!< TXD1 : Pin is connected to TXD1                                           */
} GPIO_GPFSEL3_FSEL32_Enum;

/* ==============================================  GPIO GPFSEL3 FSEL33 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL33                                                       */
  GPIO_GPFSEL3_FSEL33_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL33_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL33_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL3_FSEL33_SA0              = 5,     /*!< SA0 : Pin is connected to SA0                                             */
  GPIO_GPFSEL3_FSEL33_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL33_RXD0             = 7,     /*!< RXD0 : Pin is connected to RXD0                                           */
  GPIO_GPFSEL3_FSEL33_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL33_RXD1             = 2,     /*!< RXD1 : Pin is connected to RXD1                                           */
} GPIO_GPFSEL3_FSEL33_Enum;

/* =============================================  GPIO GPFSEL3 FSEL34 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL34                                                       */
  GPIO_GPFSEL3_FSEL34_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL34_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL34_GPCLK0           = 4,     /*!< GPCLK0 : Pin is connected to GPCLK0                                       */
  GPIO_GPFSEL3_FSEL34_SOE_N            = 5,     /*!< SOE_N : Pin is connected to SOE_N                                         */
  GPIO_GPFSEL3_FSEL34_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL34_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL3_FSEL34_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL34_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL34_Enum;

/* =============================================  GPIO GPFSEL3 FSEL35 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL35                                                       */
  GPIO_GPFSEL3_FSEL35_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL35_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL35_SPI0_CE1_N       = 4,     /*!< SPI0_CE1_N : Pin is connected to SPI0_CE1_N                               */
  GPIO_GPFSEL3_FSEL35_SWE_N            = 5,     /*!< SWE_N : Pin is connected to SWE_N                                         */
  GPIO_GPFSEL3_FSEL35_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL3_FSEL35_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL3_FSEL35_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL35_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL35_Enum;

/* =============================================  GPIO GPFSEL3 FSEL36 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL36                                                       */
  GPIO_GPFSEL3_FSEL36_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL36_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL36_SPI0_CE0_N       = 4,     /*!< SPI0_CE0_N : Pin is connected to SPI0_CE0_N                               */
  GPIO_GPFSEL3_FSEL36_SD0              = 5,     /*!< SD0 : Pin is connected to SD0                                             */
  GPIO_GPFSEL3_FSEL36_TXD0             = 6,     /*!< TXD0 : Pin is connected to TXD0                                           */
  GPIO_GPFSEL3_FSEL36_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL3_FSEL36_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL36_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL36_Enum;

/* =============================================  GPIO GPFSEL3 FSEL37 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL37                                                       */
  GPIO_GPFSEL3_FSEL37_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL37_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL37_SPI0_MISO        = 4,     /*!< SPI0_MISO : Pin is connected to SPI0_MISO                                 */
  GPIO_GPFSEL3_FSEL37_SD1              = 5,     /*!< SD1 : Pin is connected to SD1                                             */
  GPIO_GPFSEL3_FSEL37_RXD0             = 6,     /*!< RXD0 : Pin is connected to RXD0                                           */
  GPIO_GPFSEL3_FSEL37_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL3_FSEL37_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL37_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL37_Enum;

/* =============================================  GPIO GPFSEL3 FSEL38 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL38                                                       */
  GPIO_GPFSEL3_FSEL38_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL38_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL38_SPI0_MOSI        = 4,     /*!< SPI0_MOSI : Pin is connected to SPI0_MOSI                                 */
  GPIO_GPFSEL3_FSEL38_SD2              = 5,     /*!< SD2 : Pin is connected to SD2                                             */
  GPIO_GPFSEL3_FSEL38_CTS0             = 6,     /*!< CTS0 : Pin is connected to CTS0                                           */
  GPIO_GPFSEL3_FSEL38_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL3_FSEL38_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL38_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL38_Enum;

/* =============================================  GPIO GPFSEL3 FSEL39 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL3_FSEL39                                                       */
  GPIO_GPFSEL3_FSEL39_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL3_FSEL39_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL3_FSEL39_SPI0_SCLK        = 4,     /*!< SPI0_SCLK : Pin is connected to SPI0_SCLK                                 */
  GPIO_GPFSEL3_FSEL39_SD3              = 5,     /*!< SD3 : Pin is connected to SD3                                             */
  GPIO_GPFSEL3_FSEL39_RTS0             = 6,     /*!< RTS0 : Pin is connected to RTS0                                           */
  GPIO_GPFSEL3_FSEL39_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL3_FSEL39_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL3_FSEL39_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL3_FSEL39_Enum;

/* ========================================================  GPFSEL4  ======================================================== */
/* ==============================================  GPIO GPFSEL4 FSEL40 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL40                                                       */
  GPIO_GPFSEL4_FSEL40_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL40_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL40_PWM0_0           = 4,     /*!< PWM0_0 : Pin is connected to PWM0_0                                       */
  GPIO_GPFSEL4_FSEL40_SD4              = 5,     /*!< SD4 : Pin is connected to SD4                                             */
  GPIO_GPFSEL4_FSEL40_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL40_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL40_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL40_TXD1             = 2,     /*!< TXD1 : Pin is connected to TXD1                                           */
} GPIO_GPFSEL4_FSEL40_Enum;

/* ==============================================  GPIO GPFSEL4 FSEL41 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL41                                                       */
  GPIO_GPFSEL4_FSEL41_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL41_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL41_PWM0_1           = 4,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
  GPIO_GPFSEL4_FSEL41_SD5              = 5,     /*!< SD5 : Pin is connected to SD5                                             */
  GPIO_GPFSEL4_FSEL41_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL41_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL41_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL41_RXD1             = 2,     /*!< RXD1 : Pin is connected to RXD1                                           */
} GPIO_GPFSEL4_FSEL41_Enum;

/* ==============================================  GPIO GPFSEL4 FSEL42 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL42                                                       */
  GPIO_GPFSEL4_FSEL42_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL42_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL42_GPCLK1           = 4,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
  GPIO_GPFSEL4_FSEL42_SD6              = 5,     /*!< SD6 : Pin is connected to SD6                                             */
  GPIO_GPFSEL4_FSEL42_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL42_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL42_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL42_CTS1             = 2,     /*!< CTS1 : Pin is connected to CTS1                                           */
} GPIO_GPFSEL4_FSEL42_Enum;

/* ==============================================  GPIO GPFSEL4 FSEL43 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL43                                                       */
  GPIO_GPFSEL4_FSEL43_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL43_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL43_GPCLK2           = 4,     /*!< GPCLK2 : Pin is connected to GPCLK2                                       */
  GPIO_GPFSEL4_FSEL43_SD7              = 5,     /*!< SD7 : Pin is connected to SD7                                             */
  GPIO_GPFSEL4_FSEL43_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL43_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL43_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL43_RTS1             = 2,     /*!< RTS1 : Pin is connected to RTS1                                           */
} GPIO_GPFSEL4_FSEL43_Enum;

/* =============================================  GPIO GPFSEL4 FSEL44 [12..14]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL44                                                       */
  GPIO_GPFSEL4_FSEL44_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL44_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL44_GPCLK1           = 4,     /*!< GPCLK1 : Pin is connected to GPCLK1                                       */
  GPIO_GPFSEL4_FSEL44_SDA0             = 5,     /*!< SDA0 : Pin is connected to SDA0                                           */
  GPIO_GPFSEL4_FSEL44_SDA1             = 6,     /*!< SDA1 : Pin is connected to SDA1                                           */
  GPIO_GPFSEL4_FSEL44_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL44_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL44_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL44_Enum;

/* =============================================  GPIO GPFSEL4 FSEL45 [15..17]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL45                                                       */
  GPIO_GPFSEL4_FSEL45_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL45_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL45_PWM0_1           = 4,     /*!< PWM0_1 : Pin is connected to PWM0_1                                       */
  GPIO_GPFSEL4_FSEL45_SCL0             = 5,     /*!< SCL0 : Pin is connected to SCL0                                           */
  GPIO_GPFSEL4_FSEL45_SCL1             = 6,     /*!< SCL1 : Pin is connected to SCL1                                           */
  GPIO_GPFSEL4_FSEL45_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL45_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL45_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL45_Enum;

/* =============================================  GPIO GPFSEL4 FSEL46 [18..20]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL46                                                       */
  GPIO_GPFSEL4_FSEL46_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL46_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL46_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL46_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL46_Enum;

/* =============================================  GPIO GPFSEL4 FSEL47 [21..23]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL47                                                       */
  GPIO_GPFSEL4_FSEL47_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL47_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL47_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED3        = 7,     /*!< RESERVED3 : Alt function 3 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL47_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL47_Enum;

/* =============================================  GPIO GPFSEL4 FSEL48 [24..26]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL48                                                       */
  GPIO_GPFSEL4_FSEL48_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL48_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL48_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL48_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL48_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL48_SD1_CLK          = 7,     /*!< SD1_CLK : Pin is connected to SD1_CLK                                     */
  GPIO_GPFSEL4_FSEL48_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL48_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL48_Enum;

/* =============================================  GPIO GPFSEL4 FSEL49 [27..29]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL4_FSEL49                                                       */
  GPIO_GPFSEL4_FSEL49_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL4_FSEL49_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL4_FSEL49_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL4_FSEL49_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL4_FSEL49_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL4_FSEL49_SD1_CMD          = 7,     /*!< SD1_CMD : Pin is connected to SD1_CMD                                     */
  GPIO_GPFSEL4_FSEL49_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL4_FSEL49_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL4_FSEL49_Enum;

/* ========================================================  GPFSEL5  ======================================================== */
/* ==============================================  GPIO GPFSEL5 FSEL50 [0..2]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL50                                                       */
  GPIO_GPFSEL5_FSEL50_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL50_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL50_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL50_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL50_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL50_SD1_DAT0         = 7,     /*!< SD1_DAT0 : Pin is connected to SD1_DAT0                                   */
  GPIO_GPFSEL5_FSEL50_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL50_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL50_Enum;

/* ==============================================  GPIO GPFSEL5 FSEL51 [3..5]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL51                                                       */
  GPIO_GPFSEL5_FSEL51_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL51_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL51_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL51_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL51_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL51_SD1_DAT1         = 7,     /*!< SD1_DAT1 : Pin is connected to SD1_DAT1                                   */
  GPIO_GPFSEL5_FSEL51_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL51_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL51_Enum;

/* ==============================================  GPIO GPFSEL5 FSEL52 [6..8]  =============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL52                                                       */
  GPIO_GPFSEL5_FSEL52_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL52_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL52_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL52_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL52_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL52_SD1_DAT2         = 7,     /*!< SD1_DAT2 : Pin is connected to SD1_DAT2                                   */
  GPIO_GPFSEL5_FSEL52_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL52_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL52_Enum;

/* ==============================================  GPIO GPFSEL5 FSEL53 [9..11]  ============================================== */
typedef enum {                                  /*!< GPIO_GPFSEL5_FSEL53                                                       */
  GPIO_GPFSEL5_FSEL53_INPUT            = 0,     /*!< INPUT : Pin is an input                                                   */
  GPIO_GPFSEL5_FSEL53_OUTPUT           = 1,     /*!< OUTPUT : Pin is an output                                                 */
  GPIO_GPFSEL5_FSEL53_RESERVED0        = 4,     /*!< RESERVED0 : Alt function 0 reserved                                       */
  GPIO_GPFSEL5_FSEL53_RESERVED1        = 5,     /*!< RESERVED1 : Alt function 1 reserved                                       */
  GPIO_GPFSEL5_FSEL53_RESERVED2        = 6,     /*!< RESERVED2 : Alt function 2 reserved                                       */
  GPIO_GPFSEL5_FSEL53_SD1_DAT3         = 7,     /*!< SD1_DAT3 : Pin is connected to SD1_DAT3                                   */
  GPIO_GPFSEL5_FSEL53_RESERVED4        = 3,     /*!< RESERVED4 : Alt function 4 reserved                                       */
  GPIO_GPFSEL5_FSEL53_RESERVED5        = 2,     /*!< RESERVED5 : Alt function 5 reserved                                       */
} GPIO_GPFSEL5_FSEL53_Enum;

/* ========================================================  GPSET0  ========================================================= */
/* ========================================================  GPSET1  ========================================================= */
/* ========================================================  GPCLR0  ========================================================= */
/* ========================================================  GPCLR1  ========================================================= */
/* ========================================================  GPLEV0  ========================================================= */
/* ========================================================  GPLEV1  ========================================================= */
/* ========================================================  GPEDS0  ========================================================= */
/* ========================================================  GPEDS1  ========================================================= */
/* ========================================================  GPREN0  ========================================================= */
/* ========================================================  GPREN1  ========================================================= */
/* ========================================================  GPFEN0  ========================================================= */
/* ========================================================  GPFEN1  ========================================================= */
/* ========================================================  GPHEN0  ========================================================= */
/* ========================================================  GPHEN1  ========================================================= */
/* ========================================================  GPLEN0  ========================================================= */
/* ========================================================  GPLEN1  ========================================================= */
/* ========================================================  GPAREN0  ======================================================== */
/* ========================================================  GPAREN1  ======================================================== */
/* ========================================================  GPAFEN0  ======================================================== */
/* ========================================================  GPAFEN1  ======================================================== */
/* =======================================================  EXTRA_MUX  ======================================================= */
/* ==============================================  GPIO EXTRA_MUX SDIO [1..1]  =============================================== */
typedef enum {                                  /*!< GPIO_EXTRA_MUX_SDIO                                                       */
  GPIO_EXTRA_MUX_SDIO_SDHOST           = 0,     /*!< SDHOST : Connect the newer SD host                                        */
  GPIO_EXTRA_MUX_SDIO_ARASAN           = 1,     /*!< ARASAN : Connect Arasan SD/EMMC host                                      */
} GPIO_EXTRA_MUX_SDIO_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG0  ================================================ */
/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL0 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL0_BP_PULL                  */
  BP_PULL_NONE                         = 0,     /*!< NONE : No pull                                                            */
  BP_PULL_UP                           = 1,     /*!< UP : Pull up                                                              */
  BP_PULL_DOWN                         = 2,     /*!< DOWN : Pull down                                                          */
} BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL1 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL1_BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL2 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL2_BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL3 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL3_BP_PULL_Enum;

/* ================================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL4 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL4_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL5 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL5_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL6 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL6_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL7 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL7_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL8 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL8_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL9 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL                  */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_NONE = 0,/*!< NONE : No pull                                        */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_UP = 1,/*!< UP : Pull up                                            */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                      */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL9_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL10 [20..21]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL10_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL11 [22..23]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL11_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL12 [24..25]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL12_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL13 [26..27]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL13_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL14 [28..29]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL14_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG0 GPIO_PUP_PDN_CNTRL15 [30..31]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG0_GPIO_PUP_PDN_CNTRL15_BP_PULL_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG1  ================================================ */
/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL16 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL16_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL17 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL17_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL18 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL18_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL19 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL19_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL20 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL20_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL21 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL21_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL22 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL22_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL23 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL23_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL24 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL24_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL25 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL25_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL26 [20..21]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL26_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL27 [22..23]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL27_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL28 [24..25]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL28_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL29 [26..27]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL29_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL30 [28..29]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL30_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG1 GPIO_PUP_PDN_CNTRL31 [30..31]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG1_GPIO_PUP_PDN_CNTRL31_BP_PULL_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG2  ================================================ */
/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL32 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL32_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL33 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL33_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL34 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL34_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL35 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL35_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL36 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL36_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL37 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL37_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL38 [12..13]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL38_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL39 [14..15]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL39_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL40 [16..17]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL40_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL41 [18..19]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL41_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL42 [20..21]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL42_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL43 [22..23]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL43_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL44 [24..25]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL44_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL45 [26..27]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL45_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL46 [28..29]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL46_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG2 GPIO_PUP_PDN_CNTRL47 [30..31]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG2_GPIO_PUP_PDN_CNTRL47_BP_PULL_Enum;

/* ================================================  GPIO_PUP_PDN_CNTRL_REG3  ================================================ */
/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL48 [0..1]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL48_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL49 [2..3]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL49_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL50 [4..5]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL50_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL51 [6..7]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL51_BP_PULL_Enum;

/* ===============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL52 [8..9]  ================================ */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL52_BP_PULL_Enum;

/* ==============================  GPIO GPIO_PUP_PDN_CNTRL_REG3 GPIO_PUP_PDN_CNTRL53 [10..11]  =============================== */
typedef enum {                                  /*!< GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL                 */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_NONE = 0,/*!< NONE : No pull                                       */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_UP = 1,/*!< UP : Pull up                                           */
  GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_DOWN = 2,/*!< DOWN : Pull down                                     */
} GPIO_GPIO_PUP_PDN_CNTRL_REG3_GPIO_PUP_PDN_CNTRL53_BP_PULL_Enum;



/* =========================================================================================================================== */
/* ================                                          SYSTMR                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
/* ==========================================================  CLO  ========================================================== */
/* ==========================================================  CHI  ========================================================== */
/* ==========================================================  C0  =========================================================== */
/* ==========================================================  C1  =========================================================== */
/* ==========================================================  C2  =========================================================== */
/* ==========================================================  C3  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  RSR  ========================================================== */
/* ==========================================================  ECR  ========================================================== */
/* ==========================================================  FR  =========================================================== */
/* =========================================================  IBRD  ========================================================== */
/* =========================================================  FBRD  ========================================================== */
/* =========================================================  LCR_H  ========================================================= */
/* ==========================================================  CR  =========================================================== */
/* =========================================================  IFLS  ========================================================== */
/* =========================================================  IMSC  ========================================================== */
/* ==========================================================  RIS  ========================================================== */
/* ==========================================================  MIS  ========================================================== */
/* ==========================================================  ICR  ========================================================== */
/* =========================================================  DMACR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CS  =========================================================== */
/* =================================================  SPI0 CS CLEAR [4..5]  ================================================== */
typedef enum {                                  /*!< SPI0_CS_CLEAR                                                             */
  SPI0_CS_CLEAR_TX                     = 1,     /*!< TX : TX                                                                   */
  SPI0_CS_CLEAR_RX                     = 2,     /*!< RX : RX                                                                   */
  SPI0_CS_CLEAR_BOTH                   = 3,     /*!< BOTH : BOTH                                                               */
} SPI0_CS_CLEAR_Enum;

/* =========================================================  FIFO  ========================================================== */
/* ==========================================================  CLK  ========================================================== */
/* =========================================================  DLEN  ========================================================== */
/* =========================================================  LTOH  ========================================================== */
/* ==========================================================  DC  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           BSC0                                            ================ */
/* =========================================================================================================================== */

/* ===========================================================  C  =========================================================== */
/* ===========================================================  S  =========================================================== */
/* =========================================================  DLEN  ========================================================== */
/* ===========================================================  A  =========================================================== */
/* =========================================================  FIFO  ========================================================== */
/* ==========================================================  DIV  ========================================================== */
/* ==========================================================  DEL  ========================================================== */
/* =========================================================  CLKT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTL  ========================================================== */
/* =================================================  PWM0 CTL MODE2 [9..9]  ================================================= */
typedef enum {                                  /*!< PWM0_CTL_MODE2                                                            */
  PWM0_CTL_MODE2_PWM                   = 0,     /*!< PWM : PWM                                                                 */
  PWM0_CTL_MODE2_SERIAL                = 1,     /*!< SERIAL : SERIAL                                                           */
} PWM0_CTL_MODE2_Enum;

/* =================================================  PWM0 CTL MODE1 [1..1]  ================================================= */
typedef enum {                                  /*!< PWM0_CTL_MODE1                                                            */
  PWM0_CTL_MODE1_PWM                   = 0,     /*!< PWM : PWM                                                                 */
  PWM0_CTL_MODE1_SERIAL                = 1,     /*!< SERIAL : SERIAL                                                           */
} PWM0_CTL_MODE1_Enum;

/* ==========================================================  STA  ========================================================== */
/* =========================================================  DMAC  ========================================================== */
/* =========================================================  RNG1  ========================================================== */
/* =========================================================  DAT1  ========================================================== */
/* =========================================================  FIF1  ========================================================== */
/* =========================================================  RNG2  ========================================================== */
/* =========================================================  DAT2  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            AUX                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  IRQ  ========================================================== */
/* ========================================================  ENABLES  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  IO  =========================================================== */
/* =========================================================  BAUDL  ========================================================= */
/* ==========================================================  IER  ========================================================== */
/* =========================================================  BAUDH  ========================================================= */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==============================================  UART1 LCR DATA_SIZE [0..1]  =============================================== */
typedef enum {                                  /*!< UART1_LCR_DATA_SIZE_MODE                                                  */
  UART1_LCR_DATA_SIZE_MODE_7BIT        = 0,     /*!< 7BIT : 7 bit                                                              */
  UART1_LCR_DATA_SIZE_MODE_8BIT        = 3,     /*!< 8BIT : 8 bit                                                              */
} UART1_LCR_DATA_SIZE_MODE_Enum;

/* ==========================================================  MCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  MSR  ========================================================== */
/* ========================================================  SCRATCH  ======================================================== */
/* =========================================================  CNTL  ========================================================== */
/* =============================================  UART1 CNTL CTS_ASSERT [7..7]  ============================================== */
typedef enum {                                  /*!< UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL                                        */
  UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL_HIGH = 0,  /*!< HIGH : Assert high                                                        */
  UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL_LOW = 1,   /*!< LOW : Assert low                                                          */
} UART1_CNTL_CTS_ASSERT_ASSERT_LEVEL_Enum;

/* =============================================  UART1 CNTL RTS_ASSERT [6..6]  ============================================== */
typedef enum {                                  /*!< UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL                                        */
  UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL_HIGH = 0,  /*!< HIGH : Assert high                                                        */
  UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL_LOW = 1,   /*!< LOW : Assert low                                                          */
} UART1_CNTL_RTS_ASSERT_ASSERT_LEVEL_Enum;

/* ===========================================  UART1 CNTL RTS_FIFO_LEVEL [4..5]  ============================================ */
typedef enum {                                  /*!< UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL                                      */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_3EMPTY = 0,/*!< 3EMPTY : 3 empty spaces                                                 */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_2EMPTY = 1,/*!< 2EMPTY : 2 empty spaces                                                 */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_1EMPTY = 2,/*!< 1EMPTY : 1 empty spaces                                                 */
  UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_4EMPTY = 3,/*!< 4EMPTY : 4 empty spaces                                                 */
} UART1_CNTL_RTS_FIFO_LEVEL_FIFO_LEVEL_Enum;

/* =========================================================  STAT  ========================================================== */
/* =========================================================  BAUD  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CNTL0  ========================================================= */
/* ==========================================  SPI1 CNTL0 DOUT_HOLD_TIME [12..13]  =========================================== */
typedef enum {                                  /*!< SPI1_CNTL0_DOUT_HOLD_TIME                                                 */
  SPI1_CNTL0_DOUT_HOLD_TIME_0          = 0,     /*!< 0 : 0                                                                     */
  SPI1_CNTL0_DOUT_HOLD_TIME_1          = 1,     /*!< 1 : 1                                                                     */
  SPI1_CNTL0_DOUT_HOLD_TIME_4          = 2,     /*!< 4 : 4                                                                     */
  SPI1_CNTL0_DOUT_HOLD_TIME_7          = 3,     /*!< 7 : 7                                                                     */
} SPI1_CNTL0_DOUT_HOLD_TIME_Enum;

/* =========================================================  CNTL1  ========================================================= */
/* =========================================================  STAT  ========================================================== */
/* =========================================================  PEEK  ========================================================== */
/* ==========================================================  IO0  ========================================================== */
/* ==========================================================  IO1  ========================================================== */
/* ==========================================================  IO2  ========================================================== */
/* ==========================================================  IO3  ========================================================== */
/* ========================================================  TXHOLD0  ======================================================== */
/* ========================================================  TXHOLD1  ======================================================== */
/* ========================================================  TXHOLD2  ======================================================== */
/* ========================================================  TXHOLD3  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            LIC                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  BASIC_PENDING  ===================================================== */
/* =======================================================  PENDING_1  ======================================================= */
/* =======================================================  PENDING_2  ======================================================= */
/* ======================================================  FIQ_CONTROL  ====================================================== */
/* =============================================  LIC FIQ_CONTROL SOURCE [0..6]  ============================================= */
typedef enum {                                  /*!< LIC_FIQ_CONTROL_SOURCE                                                    */
  LIC_FIQ_CONTROL_SOURCE_TIMER_0       = 0,     /*!< TIMER_0 : Timer 0                                                         */
  LIC_FIQ_CONTROL_SOURCE_TIMER_1       = 1,     /*!< TIMER_1 : Timer 1                                                         */
  LIC_FIQ_CONTROL_SOURCE_TIMER_2       = 2,     /*!< TIMER_2 : Timer 2                                                         */
  LIC_FIQ_CONTROL_SOURCE_TIMER_3       = 3,     /*!< TIMER_3 : Timer 3                                                         */
  LIC_FIQ_CONTROL_SOURCE_H264_0        = 4,     /*!< H264_0 : H264 0                                                           */
  LIC_FIQ_CONTROL_SOURCE_H264_1        = 5,     /*!< H264_1 : H264 1                                                           */
  LIC_FIQ_CONTROL_SOURCE_H264_2        = 6,     /*!< H264_2 : H264 2                                                           */
  LIC_FIQ_CONTROL_SOURCE_JPEG          = 7,     /*!< JPEG : JPEG                                                               */
  LIC_FIQ_CONTROL_SOURCE_ISP           = 8,     /*!< ISP : ISP                                                                 */
  LIC_FIQ_CONTROL_SOURCE_USB           = 9,     /*!< USB : USB                                                                 */
  LIC_FIQ_CONTROL_SOURCE_V3D           = 10,    /*!< V3D : V3D                                                                 */
  LIC_FIQ_CONTROL_SOURCE_TRANSPOSER    = 11,    /*!< TRANSPOSER : Transposer                                                   */
  LIC_FIQ_CONTROL_SOURCE_MULTICORE_SYNC_0 = 12, /*!< MULTICORE_SYNC_0 : Multicore Sync 0                                       */
  LIC_FIQ_CONTROL_SOURCE_MULTICORE_SYNC_1 = 13, /*!< MULTICORE_SYNC_1 : Multicore Sync 1                                       */
  LIC_FIQ_CONTROL_SOURCE_MULTICORE_SYNC_2 = 14, /*!< MULTICORE_SYNC_2 : Multicore Sync 2                                       */
  LIC_FIQ_CONTROL_SOURCE_MULTICORE_SYNC_3 = 15, /*!< MULTICORE_SYNC_3 : Multicore Sync 3                                       */
  LIC_FIQ_CONTROL_SOURCE_DMA_0         = 16,    /*!< DMA_0 : DMA 0                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_1         = 17,    /*!< DMA_1 : DMA 1                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_2         = 18,    /*!< DMA_2 : DMA 2                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_3         = 19,    /*!< DMA_3 : DMA 3                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_4         = 20,    /*!< DMA_4 : DMA 4                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_5         = 21,    /*!< DMA_5 : DMA 5                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_6         = 22,    /*!< DMA_6 : DMA 6                                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_7_8       = 23,    /*!< DMA_7_8 : OR of DMA 7 and 8                                               */
  LIC_FIQ_CONTROL_SOURCE_DMA_9_10      = 24,    /*!< DMA_9_10 : OR of DMA 9 and 10                                             */
  LIC_FIQ_CONTROL_SOURCE_DMA_11        = 25,    /*!< DMA_11 : DMA 11                                                           */
  LIC_FIQ_CONTROL_SOURCE_DMA_12        = 26,    /*!< DMA_12 : DMA 12                                                           */
  LIC_FIQ_CONTROL_SOURCE_DMA_13        = 27,    /*!< DMA_13 : DMA 13                                                           */
  LIC_FIQ_CONTROL_SOURCE_DMA_14        = 28,    /*!< DMA_14 : DMA 14                                                           */
  LIC_FIQ_CONTROL_SOURCE_AUX           = 29,    /*!< AUX : OR of UART1, SPI1 and SPI2                                          */
  LIC_FIQ_CONTROL_SOURCE_ARM           = 30,    /*!< ARM : ARM                                                                 */
  LIC_FIQ_CONTROL_SOURCE_DMA_15        = 31,    /*!< DMA_15 : DMA 15                                                           */
  LIC_FIQ_CONTROL_SOURCE_HDMI_CEC      = 32,    /*!< HDMI_CEC : HDMI CEC                                                       */
  LIC_FIQ_CONTROL_SOURCE_HVS           = 33,    /*!< HVS : HVS                                                                 */
  LIC_FIQ_CONTROL_SOURCE_RPIVID        = 34,    /*!< RPIVID : RPIVID                                                           */
  LIC_FIQ_CONTROL_SOURCE_SDC           = 35,    /*!< SDC : SDC                                                                 */
  LIC_FIQ_CONTROL_SOURCE_DSI_0         = 36,    /*!< DSI_0 : DSI 0                                                             */
  LIC_FIQ_CONTROL_SOURCE_PIXEL_VALVE_2 = 37,    /*!< PIXEL_VALVE_2 : Pixel Valve 2                                             */
  LIC_FIQ_CONTROL_SOURCE_CAMERA_0      = 38,    /*!< CAMERA_0 : Camera 0                                                       */
  LIC_FIQ_CONTROL_SOURCE_CAMERA_1      = 39,    /*!< CAMERA_1 : Camera 1                                                       */
  LIC_FIQ_CONTROL_SOURCE_HDMI_0        = 40,    /*!< HDMI_0 : HDMI 0                                                           */
  LIC_FIQ_CONTROL_SOURCE_HDMI_1        = 41,    /*!< HDMI_1 : HDMI 1                                                           */
  LIC_FIQ_CONTROL_SOURCE_PIXEL_VALVE_3 = 42,    /*!< PIXEL_VALVE_3 : Pixel Valve 3                                             */
  LIC_FIQ_CONTROL_SOURCE_SPI_BSC_SLAVE = 43,    /*!< SPI_BSC_SLAVE : SPI/BSC Slave                                             */
  LIC_FIQ_CONTROL_SOURCE_DSI_1         = 44,    /*!< DSI_1 : DSI 1                                                             */
  LIC_FIQ_CONTROL_SOURCE_PIXEL_VALVE_0 = 45,    /*!< PIXEL_VALVE_0 : Pixel Valve 0                                             */
  LIC_FIQ_CONTROL_SOURCE_PIXEL_VALVE_1_2 = 46,  /*!< PIXEL_VALVE_1_2 : OR of Pixel Valve 1 and 2                               */
  LIC_FIQ_CONTROL_SOURCE_CPR           = 47,    /*!< CPR : CPR                                                                 */
  LIC_FIQ_CONTROL_SOURCE_SMI           = 48,    /*!< SMI : SMI                                                                 */
  LIC_FIQ_CONTROL_SOURCE_GPIO_0        = 49,    /*!< GPIO_0 : GPIO 0                                                           */
  LIC_FIQ_CONTROL_SOURCE_GPIO_1        = 50,    /*!< GPIO_1 : GPIO 1                                                           */
  LIC_FIQ_CONTROL_SOURCE_GPIO_2        = 51,    /*!< GPIO_2 : GPIO 2                                                           */
  LIC_FIQ_CONTROL_SOURCE_GPIO_3        = 52,    /*!< GPIO_3 : GPIO 3                                                           */
  LIC_FIQ_CONTROL_SOURCE_I2C           = 53,    /*!< I2C : OR of all I2C                                                       */
  LIC_FIQ_CONTROL_SOURCE_SPI           = 54,    /*!< SPI : OR of all SPI                                                       */
  LIC_FIQ_CONTROL_SOURCE_PCM_I2S       = 55,    /*!< PCM_I2S : PCM/I2S                                                         */
  LIC_FIQ_CONTROL_SOURCE_SDHOST        = 56,    /*!< SDHOST : SDHOST                                                           */
  LIC_FIQ_CONTROL_SOURCE_UART          = 57,    /*!< UART : OR of all PL011 UARTs                                              */
  LIC_FIQ_CONTROL_SOURCE_ETH_PCIE      = 58,    /*!< ETH_PCIE : OR of all ETH_PCIe L2                                          */
  LIC_FIQ_CONTROL_SOURCE_VEC           = 59,    /*!< VEC : VEC                                                                 */
  LIC_FIQ_CONTROL_SOURCE_CPG           = 60,    /*!< CPG : CPG                                                                 */
  LIC_FIQ_CONTROL_SOURCE_RNG           = 61,    /*!< RNG : RNG                                                                 */
  LIC_FIQ_CONTROL_SOURCE_EMMC          = 62,    /*!< EMMC : OR of EMMC and EMMC2                                               */
  LIC_FIQ_CONTROL_SOURCE_ETH_PCIE_SECURE = 63,  /*!< ETH_PCIE_SECURE : ETH_PCIe secure                                         */
  LIC_FIQ_CONTROL_SOURCE_TIMER         = 64,    /*!< TIMER : ARMC Timer                                                        */
  LIC_FIQ_CONTROL_SOURCE_MAILBOX       = 65,    /*!< MAILBOX : Mailbox                                                         */
  LIC_FIQ_CONTROL_SOURCE_DOORBELL0     = 66,    /*!< DOORBELL0 : Doorbell 0                                                    */
  LIC_FIQ_CONTROL_SOURCE_DOORBELL1     = 67,    /*!< DOORBELL1 : Doorbell 1                                                    */
  LIC_FIQ_CONTROL_SOURCE_VPU0_HALTED   = 68,    /*!< VPU0_HALTED : VPU0 halted                                                 */
  LIC_FIQ_CONTROL_SOURCE_VPU1_HALTED   = 69,    /*!< VPU1_HALTED : VPU1 halted                                                 */
  LIC_FIQ_CONTROL_SOURCE_ARM_ADDRESS_ERROR = 70,/*!< ARM_ADDRESS_ERROR : ARM address error                                     */
  LIC_FIQ_CONTROL_SOURCE_ARM_AXI_ERROR = 71,    /*!< ARM_AXI_ERROR : ARM AXI error                                             */
} LIC_FIQ_CONTROL_SOURCE_Enum;

/* =======================================================  ENABLE_1  ======================================================== */
/* =======================================================  ENABLE_2  ======================================================== */
/* =====================================================  ENABLE_BASIC  ====================================================== */
/* =======================================================  DISABLE_1  ======================================================= */
/* =======================================================  DISABLE_2  ======================================================= */
/* =====================================================  DISABLE_BASIC  ===================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_GLOBAL                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCTL  ======================================================== */
/* ========================================================  GOTGINT  ======================================================== */
/* ========================================================  GAHBCFG  ======================================================== */
/* ========================================  USB_OTG_GLOBAL GAHBCFG AXI_BURST [1..2]  ======================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST                                    */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_4 = 0, /*!< 4 : 4                                                                     */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_3 = 1, /*!< 3 : 3                                                                     */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_2 = 2, /*!< 2 : 2                                                                     */
  USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_1 = 3, /*!< 1 : 1                                                                     */
} USB_OTG_GLOBAL_GAHBCFG_AXI_BURST_BURST_Enum;

/* ========================================================  GUSBCFG  ======================================================== */
/* ==========================================  USB_OTG_GLOBAL GUSBCFG PHYIF [3..3]  ========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_PHYIF                                              */
  USB_OTG_GLOBAL_GUSBCFG_PHYIF_8BIT    = 0,     /*!< 8BIT : 8BIT                                                               */
  USB_OTG_GLOBAL_GUSBCFG_PHYIF_16BIT   = 1,     /*!< 16BIT : 16BIT                                                             */
} USB_OTG_GLOBAL_GUSBCFG_PHYIF_Enum;

/* =========================================  USB_OTG_GLOBAL GUSBCFG PHYTYPE [4..4]  ========================================= */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_PHYTYPE                                            */
  USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_UTMI  = 0,     /*!< UTMI : UTMI                                                               */
  USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_ULPI  = 1,     /*!< ULPI : ULPI                                                               */
} USB_OTG_GLOBAL_GUSBCFG_PHYTYPE_Enum;

/* ==========================================  USB_OTG_GLOBAL GUSBCFG FSIF [5..5]  =========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_FSIF                                               */
  USB_OTG_GLOBAL_GUSBCFG_FSIF_6PIN     = 0,     /*!< 6PIN : 6PIN                                                               */
  USB_OTG_GLOBAL_GUSBCFG_FSIF_3PIN     = 1,     /*!< 3PIN : 3PIN                                                               */
} USB_OTG_GLOBAL_GUSBCFG_FSIF_Enum;

/* =========================================  USB_OTG_GLOBAL GUSBCFG PHYSEL [6..6]  ========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_PHYSEL                                             */
  USB_OTG_GLOBAL_GUSBCFG_PHYSEL_USB20  = 0,     /*!< USB20 : USB20                                                             */
  USB_OTG_GLOBAL_GUSBCFG_PHYSEL_USB11  = 1,     /*!< USB11 : USB11                                                             */
} USB_OTG_GLOBAL_GUSBCFG_PHYSEL_Enum;

/* =========================================  USB_OTG_GLOBAL GUSBCFG DDRSEL [7..7]  ========================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_GUSBCFG_DDRSEL                                             */
  USB_OTG_GLOBAL_GUSBCFG_DDRSEL_SINGLE = 0,     /*!< SINGLE : SINGLE                                                           */
  USB_OTG_GLOBAL_GUSBCFG_DDRSEL_DOUBLE = 1,     /*!< DOUBLE : DOUBLE                                                           */
} USB_OTG_GLOBAL_GUSBCFG_DDRSEL_Enum;

/* ========================================================  GRSTCTL  ======================================================== */
/* ========================================================  GINTSTS  ======================================================== */
/* ========================================================  GINTMSK  ======================================================== */
/* =====================================================  GRXSTSR_Host  ====================================================== */
/* =====================================================  GRXSTSP_Host  ====================================================== */
/* ========================================================  GRXFSIZ  ======================================================== */
/* ====================================================  GNPTXFSIZ_Host  ===================================================== */
/* ==================================================  TX0FSIZ_Peripheral  =================================================== */
/* =======================================================  GNPTXSTS  ======================================================== */
/* =========================================================  GCCFG  ========================================================= */
/* ==========================================================  CID  ========================================================== */
/* ==========================================================  VID  ========================================================== */
/* =====================================================  HW_DIRECTION  ====================================================== */
/* =====================================  USB_OTG_GLOBAL HW_DIRECTION DIRECTION [0..1]  ====================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION                                     */
  USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_BIDIR = 0,/*!< BIDIR : BIDIR                                                           */
  USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_IN = 1, /*!< IN : IN                                                                   */
  USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_OUT = 2,/*!< OUT : OUT                                                                 */
} USB_OTG_GLOBAL_HW_DIRECTION_DIRECTION_Enum;

/* ======================================================  HW_CONFIG0  ======================================================= */
/* ====================================  USB_OTG_GLOBAL HW_CONFIG0 OPERATING_MODE [0..2]  ==================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE                                  */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_HNP_SRP_CAPABLE = 0,/*!< HNP_SRP_CAPABLE : HNP_SRP_CAPABLE                          */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_SRP_ONLY_CAPABLE = 1,/*!< SRP_ONLY_CAPABLE : SRP_ONLY_CAPABLE                       */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_NO_HNP_SRP_CAPABLE = 2,/*!< NO_HNP_SRP_CAPABLE : NO_HNP_SRP_CAPABLE                 */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_SRP_CAPABLE_DEVICE = 3,/*!< SRP_CAPABLE_DEVICE : SRP_CAPABLE_DEVICE                 */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_NO_SRP_CAPABLE_DEVICE = 4,/*!< NO_SRP_CAPABLE_DEVICE : NO_SRP_CAPABLE_DEVICE        */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_SRP_CAPABLE_HOST = 5,/*!< SRP_CAPABLE_HOST : SRP_CAPABLE_HOST                       */
  USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_NO_SRP_CAPABLE_HOST = 6,/*!< NO_SRP_CAPABLE_HOST : NO_SRP_CAPABLE_HOST              */
} USB_OTG_GLOBAL_HW_CONFIG0_OPERATING_MODE_Enum;

/* =====================================  USB_OTG_GLOBAL HW_CONFIG0 ARCHITECTURE [3..4]  ===================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE                                    */
  USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_SLAVE_ONLY = 0,/*!< SLAVE_ONLY : SLAVE_ONLY                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_EXTERNAL_DMA = 1,/*!< EXTERNAL_DMA : EXTERNAL_DMA                                     */
  USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_INTERNAL_DMA = 2,/*!< INTERNAL_DMA : INTERNAL_DMA                                     */
} USB_OTG_GLOBAL_HW_CONFIG0_ARCHITECTURE_Enum;

/* ====================================  USB_OTG_GLOBAL HW_CONFIG0 HIGH_SPEED_PHY [6..7]  ==================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY                                  */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_NOT_SUPPORTED = 0,/*!< NOT_SUPPORTED : NOT_SUPPORTED                                */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_UTMI = 1,/*!< UTMI : UTMI                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_ULPI = 2,/*!< ULPI : ULPI                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_UTMI_ULPI = 3,/*!< UTMI_ULPI : UTMI_ULPI                                            */
} USB_OTG_GLOBAL_HW_CONFIG0_HIGH_SPEED_PHY_Enum;

/* ====================================  USB_OTG_GLOBAL HW_CONFIG0 FULL_SPEED_PHY [8..9]  ==================================== */
typedef enum {                                  /*!< USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY                                  */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_PHY0 = 0,/*!< PHY0 : PHY0                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_DEDICATED = 1,/*!< DEDICATED : DEDICATED                                            */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_PHY2 = 2,/*!< PHY2 : PHY2                                                           */
  USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_PHY3 = 3,/*!< PHY3 : PHY3                                                           */
} USB_OTG_GLOBAL_HW_CONFIG0_FULL_SPEED_PHY_Enum;

/* =======================================================  HPTXFSIZ  ======================================================== */
/* =======================================================  DIEPTXF1  ======================================================== */
/* =======================================================  DIEPTXF2  ======================================================== */
/* =======================================================  DIEPTXF3  ======================================================== */
/* =======================================================  DIEPTXF4  ======================================================== */
/* =======================================================  DIEPTXF5  ======================================================== */
/* =======================================================  DIEPTXF6  ======================================================== */
/* =======================================================  DIEPTXF7  ======================================================== */
/* ==================================================  GRXSTSR_Peripheral  =================================================== */
/* ==================================================  GRXSTSP_Peripheral  =================================================== */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */

/* =========================================================  HCFG  ========================================================== */
/* =========================================================  HFIR  ========================================================== */
/* =========================================================  HFNUM  ========================================================= */
/* ========================================================  HPTXSTS  ======================================================== */
/* =========================================================  HAINT  ========================================================= */
/* =======================================================  HAINTMSK  ======================================================== */
/* =========================================================  HPRT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
/* =========================================================  DCTL  ========================================================== */
/* =========================================================  DSTS  ========================================================== */
/* ========================================================  DIEPMSK  ======================================================== */
/* ========================================================  DOEPMSK  ======================================================== */
/* =========================================================  DAINT  ========================================================= */
/* =======================================================  DAINTMSK  ======================================================== */
/* =======================================================  DVBUSDIS  ======================================================== */
/* ======================================================  DVBUSPULSE  ======================================================= */
/* ========================================================  DTHRCTL  ======================================================== */
/* ======================================================  DIEPEMPMSK  ======================================================= */
/* =======================================================  DEACHINT  ======================================================== */
/* ======================================================  DEACHINTMSK  ====================================================== */
/* =====================================================  DIEPEACHMSK1  ====================================================== */
/* =====================================================  DOEPEACHMSK1  ====================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_PWRCLK                                       ================ */
/* =========================================================================================================================== */

/* ========================================================  PCGCCTL  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           EMMC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  ARG2  ========================================================== */
/* ======================================================  BLKSIZECNT  ======================================================= */
/* =========================================================  ARG1  ========================================================== */
/* =========================================================  CMDTM  ========================================================= */
/* =============================================  EMMC CMDTM CMD_TYPE [22..23]  ============================================== */
typedef enum {                                  /*!< EMMC_CMDTM_CMD_TYPE                                                       */
  EMMC_CMDTM_CMD_TYPE_NORMAL           = 0,     /*!< NORMAL : NORMAL                                                           */
  EMMC_CMDTM_CMD_TYPE_SUSPEND          = 1,     /*!< SUSPEND : SUSPEND                                                         */
  EMMC_CMDTM_CMD_TYPE_RESUME           = 2,     /*!< RESUME : RESUME                                                           */
  EMMC_CMDTM_CMD_TYPE_ABORT            = 3,     /*!< ABORT : ABORT                                                             */
} EMMC_CMDTM_CMD_TYPE_Enum;

/* ==========================================  EMMC CMDTM CMD_RSPNS_TYPE [16..17]  =========================================== */
typedef enum {                                  /*!< EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE                                        */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_NONE = 0,  /*!< NONE : NONE                                                               */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_136BITS = 1,/*!< 136BITS : 136BITS                                                        */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_48BITS = 2,/*!< 48BITS : 48BITS                                                           */
  EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_48BITS_USING_BUSY = 3,/*!< 48BITS_USING_BUSY : 48BITS_USING_BUSY                          */
} EMMC_CMDTM_CMD_RSPNS_TYPE_RESPONSE_Enum;

/* ===========================================  EMMC CMDTM TM_MULTI_BLOCK [5..5]  ============================================ */
typedef enum {                                  /*!< EMMC_CMDTM_TM_MULTI_BLOCK                                                 */
  EMMC_CMDTM_TM_MULTI_BLOCK_SINGLE     = 0,     /*!< SINGLE : SINGLE                                                           */
  EMMC_CMDTM_TM_MULTI_BLOCK_MULTIPLE   = 1,     /*!< MULTIPLE : MULTIPLE                                                       */
} EMMC_CMDTM_TM_MULTI_BLOCK_Enum;

/* =============================================  EMMC CMDTM TM_DAT_DIR [4..4]  ============================================== */
typedef enum {                                  /*!< EMMC_CMDTM_TM_DAT_DIR                                                     */
  EMMC_CMDTM_TM_DAT_DIR_HOST_TO_CARD   = 0,     /*!< HOST_TO_CARD : HOST_TO_CARD                                               */
  EMMC_CMDTM_TM_DAT_DIR_CARD_TO_HOST   = 1,     /*!< CARD_TO_HOST : CARD_TO_HOST                                               */
} EMMC_CMDTM_TM_DAT_DIR_Enum;

/* ===========================================  EMMC CMDTM TM_AUTO_CMD_EN [2..3]  ============================================ */
typedef enum {                                  /*!< EMMC_CMDTM_TM_AUTO_CMD_EN                                                 */
  EMMC_CMDTM_TM_AUTO_CMD_EN_NONE       = 0,     /*!< NONE : NONE                                                               */
  EMMC_CMDTM_TM_AUTO_CMD_EN_CMD12      = 1,     /*!< CMD12 : CMD12                                                             */
  EMMC_CMDTM_TM_AUTO_CMD_EN_CMD23      = 2,     /*!< CMD23 : CMD23                                                             */
} EMMC_CMDTM_TM_AUTO_CMD_EN_Enum;

/* =========================================================  RESP0  ========================================================= */
/* =========================================================  RESP1  ========================================================= */
/* =========================================================  RESP2  ========================================================= */
/* =========================================================  RESP3  ========================================================= */
/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =======================================================  CONTROL0  ======================================================== */
/* =======================================================  CONTROL1  ======================================================== */
/* ============================================  EMMC CONTROL1 CLK_GENSEL [5..5]  ============================================ */
typedef enum {                                  /*!< EMMC_CONTROL1_CLK_GENSEL                                                  */
  EMMC_CONTROL1_CLK_GENSEL_DIVIDED     = 0,     /*!< DIVIDED : DIVIDED                                                         */
  EMMC_CONTROL1_CLK_GENSEL_PROGRAMMABLE = 1,    /*!< PROGRAMMABLE : PROGRAMMABLE                                               */
} EMMC_CONTROL1_CLK_GENSEL_Enum;

/* =======================================================  INTERRUPT  ======================================================= */
/* =======================================================  IRPT_MASK  ======================================================= */
/* ========================================================  IRPT_EN  ======================================================== */
/* =======================================================  CONTROL2  ======================================================== */
/* ============================================  EMMC CONTROL2 UHSMODE [16..18]  ============================================= */
typedef enum {                                  /*!< EMMC_CONTROL2_UHSMODE                                                     */
  EMMC_CONTROL2_UHSMODE_SDR12          = 0,     /*!< SDR12 : SDR12                                                             */
  EMMC_CONTROL2_UHSMODE_SDR25          = 1,     /*!< SDR25 : SDR25                                                             */
  EMMC_CONTROL2_UHSMODE_SDR50          = 2,     /*!< SDR50 : SDR50                                                             */
  EMMC_CONTROL2_UHSMODE_SDR104         = 3,     /*!< SDR104 : SDR104                                                           */
  EMMC_CONTROL2_UHSMODE_DDR50          = 4,     /*!< DDR50 : DDR50                                                             */
} EMMC_CONTROL2_UHSMODE_Enum;

/* ======================================================  FORCE_IRPT  ======================================================= */
/* =====================================================  BOOT_TIMEOUT  ====================================================== */
/* ========================================================  DBG_SEL  ======================================================== */
/* ==============================================  EMMC DBG_SEL SELECT [0..0]  =============================================== */
typedef enum {                                  /*!< EMMC_DBG_SEL_SELECT                                                       */
  EMMC_DBG_SEL_SELECT_RECEIVER_FIFO    = 0,     /*!< RECEIVER_FIFO : RECEIVER_FIFO                                             */
  EMMC_DBG_SEL_SELECT_OTHERS           = 1,     /*!< OTHERS : OTHERS                                                           */
} EMMC_DBG_SEL_SELECT_Enum;

/* =====================================================  EXRDFIFO_CFG  ====================================================== */
/* ======================================================  EXRDFIFO_EN  ====================================================== */
/* =======================================================  TUNE_STEP  ======================================================= */
/* ====================================================  TUNE_STEPS_STD  ===================================================== */
/* ====================================================  TUNE_STEPS_DDR  ===================================================== */
/* ======================================================  SPI_INT_SPT  ====================================================== */
/* ======================================================  SLOTISR_VER  ====================================================== */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* BCM2835_LPA_H */


/** @} */ /* End of group bcm2835_lpa */

/** @} */ /* End of group BROADCOM */
